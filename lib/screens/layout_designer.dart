// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:ui' as ui;
import 'dart:math';
import 'dart:ui';
import 'package:animate_do/animate_do.dart';
import 'package:animated_toggle_switch/animated_toggle_switch.dart';
import 'package:appinio_swiper/appinio_swiper.dart';
import 'package:billblaze/components/blend_mask.dart';
import 'package:billblaze/components/widgets/custom_toast.dart';
import 'package:billblaze/components/widgets/pickers/eye_dropper.dart';
import 'package:billblaze/components/widgets/minimap_scrollbar_widget.dart';
import 'package:billblaze/home.dart';
import 'package:billblaze/components/widgets/pickers/hsv_picker.dart';
import 'package:billblaze/components/widgets/pickers/wheel_picker.dart';
import 'package:billblaze/components/widgets/pickers/alpha_picker.dart';
import 'package:billblaze/models/bill/bill_type.dart';
import 'package:billblaze/models/bill/required_text.dart';
import 'package:billblaze/models/index_path.dart';
import 'package:billblaze/models/input_block.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_decoration.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_functions.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_cell.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_column.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_row.dart';
import 'package:billblaze/providers/env_provider.dart';
import 'package:cool_background_animation/cool_background_animation.dart';
import 'package:cool_background_animation/custom_model/bubble_model.dart';
import 'package:cool_background_animation/custom_model/rainbow_config.dart';
import 'package:country_code_picker_plus/country_code_picker_plus.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_quill/extensions.dart';
import 'package:http/http.dart' as http;
import 'package:billblaze/models/layout_model.dart';
import 'package:billblaze/providers/box_provider.dart';
import 'package:bitsdojo_window/bitsdojo_window.dart';
import 'package:custom_border/border.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:mesh_gradient/mesh_gradient.dart';
import 'package:mobkit_dashed_border/mobkit_dashed_border.dart';
import 'package:number_counting_animation/number_counting_animation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_context_menu/flutter_context_menu.dart';
import 'package:billblaze/components/zoomable.dart' as zz;
import 'package:billblaze/components/tab_container/tab_controller.dart';
// import 'package:billblaze/components/text_toolbar/list_item_model.dart';
import 'package:billblaze/util/hex_input_formatter.dart';
import 'package:flutter/rendering.dart';
import "package:billblaze/components/color_picker.dart"
    show ColorTools, FlexPickerNoNullColorExtensions;
// import 'package:flex_color_picker/flex_color_picker.dart' as fl;
import 'package:animated_custom_dropdown/custom_dropdown.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:billblaze/colors.dart';
import 'package:printing/printing.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_item.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_list.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_text.dart';
import 'package:billblaze/models/document_properties_model.dart';
import 'package:billblaze/util/numeric_input_formatter.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_quill/flutter_quill.dart';
import 'package:file_selector/file_selector.dart';
// show
//     QuillEditor,
//     QuillController,
//     Attribute,
//     Document,
//     QuillEditorConfigurations;
import 'package:flutter_quill/quill_delta.dart';
import 'package:flutter_tabler_icons/flutter_tabler_icons.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:iconsax_plus/iconsax_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:pie_menu/pie_menu.dart';
import 'package:scrollbar_ultima/scrollbar_ultima.dart';
import 'package:smooth_scroll_multiplatform/smooth_scroll_multiplatform.dart';
import 'dart:math' as math;

import 'package:uuid/uuid.dart';

import '../components/checkable_treeview/treeview.dart';
import '../components/elevated_button.dart';

class PanelIndex {
  String id;
  String parentId = '';
  IndexPath itemIndexPath;
  IndexPath? parentIndexPath;
  PanelIndex({required this.id, this.parentId = '', required this.itemIndexPath, required this.parentIndexPath, });

  PanelIndex copyWith({
    String? id,
    String? parentId,
    IndexPath? itemIndexPath,
    IndexPath? parentIndexPath,
  }) {
    return PanelIndex(
        id: id ?? this.id,
        parentId: parentId ?? this.parentId,
        itemIndexPath: itemIndexPath ?? this.itemIndexPath,
        parentIndexPath: parentIndexPath ?? this.parentIndexPath,

        );
  }

  @override
  String toString() => 'PanelIndex(id: $id, parentId: $parentId)';

}

class SelectedIndexPaths {
  Map<String, PanelIndex> selectedIndexes;
  SelectedIndexPaths({
    required this.selectedIndexes,
  });
  SelectedIndexPaths copyWith({
    Map<String, PanelIndex>? selectedIndexes,
  }) {
    return SelectedIndexPaths(
      selectedIndexes: selectedIndexes ?? this.selectedIndexes,
    );
  }
}



final propertyCardIndexProvider = StateProvider<int>((ref) {
  return 0;
});

//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//
//
class LayoutDesigner extends ConsumerStatefulWidget {
  final String? id;
  final void Function(Uint8List pdf) onPop;
  final bool exportPdf;
  const LayoutDesigner({
    Key? key,
    this.id,
    required this.onPop,
    this.exportPdf = false,
  }) : super(key: key);

  @override
  ConsumerState<LayoutDesigner> createState() => _LayoutDesignerState();
}

class _LayoutDesignerState extends ConsumerState<LayoutDesigner>
    with TickerProviderStateMixin {
  bool isLoading = true;
  String selectedFontCategory = 'san-serif';
  late List<RequiredText> labelList;
  late String initialLayoutName;
  List<String> fonts2 = [
    'Billabong',
    'AlexBrush',
    'Allura',
    'Arizonia',
    'ChunkFive',
    'GrandHotel',
    'GreatVibes',
    'Lobster',
    'OpenSans',
    'OstrichSans',
    'Oswald',
    'Pacifico',
    'Quicksand',
    'Roboto',
    'SEASRN',
    'Windsong',
  ];
  final List<String> fonts = GoogleFonts.asMap()
      .keys
      .toList()
      .where((font) => !font.startsWith('Noto'))
      .toList();
  List<String> listDecorationPath =[];
  List<String> textDecorationPath=[];
  List<String> tableDecorationPath =[];
  List<String> tablebgDecorationPath = [];
  List<String> rowDecorationPath = [];
  List<String> columnDecorationPath = [];
  Map<String, List<String>> categorizedFonts = {};    
  double hDividerPosition = 0.5;
  double wH1DividerPosition = 0.2;
  double wH2DividerPosition = 0.24;
  double _cardPosition = 0;
  double textFieldHeight = 40;
  double pdfPreviewPaddingScaleFactor = 1;
  double pageUnit = 1;
  double get sWidth => MediaQuery.of(context).size.width;
  double get sHeight => MediaQuery.of(context).size.height;
  DateTime dateTimeNow = DateTime.now();
  PanelIndex panelIndex = PanelIndex(id: '', parentId: '', itemIndexPath: IndexPath(index: -1), parentIndexPath: IndexPath(index: -1),);
  Map<String, PanelIndex> selectedIndexPaths = {};
  List<SheetList?> sheetListClipboard =[null,null];
  PageController pageViewIndicatorController = PageController();
  PageController textStyleTabControler = PageController();
  late TabController fontsTabContainerController;
  AppinioSwiperController propertyCardsController = AppinioSwiperController();
  AppinioSwiperController textPropertyCardsController = AppinioSwiperController();
  AppinioSwiperController listPropertyCardsController = AppinioSwiperController();
  AppinioSwiperController tablePropertyCardsController = AppinioSwiperController();    
  PieMenuController opsAddPieController = PieMenuController();
  PieMenuController opsMovePieController = PieMenuController();
  PieMenuController opsCopyPieController = PieMenuController();
  PieMenuController opsFormatPieController = PieMenuController();
  List<SheetList> spreadSheetList = [];
  List<DocumentProperties> documentPropertiesList = [];
  // List<SheetDecoration> sheetDecorationList = [];
  Map<String, SheetDecoration> sheetDecorationMap ={};
  List<FocusNode> pageMarginFocusNodes = List.generate(5, (e)=>FocusNode());
  final FocusNode layoutNamefocusNode = FocusNode();
  final FocusNode decorationNameFocusNode = FocusNode();
  final FocusNode itemDecorationNameFocusNode = FocusNode();
  List<FocusNode> fontFocusNodes = List.generate(7, (e)=>FocusNode());
  zz.TransformationController transformationcontroller = zz.TransformationController();
  List<GlobalKey> globalKeys = [];
  List<Uint8List> _images = [];
  var filteredFonts = [];
  Map<String, SheetDecoration> filteredDecorations ={};
  late LayoutModel? lm;
  GlobalKey spreadSheetKey = GlobalKey();
  Color dialogSelectColor = Color(0xFF000000);
  List<SheetDecorationVariables> sheetDecorationVariables = [];
  Timer? _timer;
  TextEditingController layoutName = TextEditingController();
  TextEditingController listDecorationNameController = TextEditingController();
  TextEditingController textDecorationNameController = TextEditingController();
  TextEditingController tableDecorationNameController = TextEditingController();
  TextEditingController tablebgDecorationNameController = TextEditingController();
  TextEditingController rowDecorationNameController = TextEditingController();
  TextEditingController columnDecorationNameController = TextEditingController();
  TextEditingController decorationSearchController = TextEditingController();
  TextEditingController textFieldSearchController = TextEditingController();
  String key = '';
  // int keyIndex = 0;
  int pageCount = 0;
  int currentPageIndex = 0;
  int decorationIndex = -1;
  int whichPropertyTabIsClicked = 1;
  int whichPagePropertyIsClicked = 0;
  int whichTextPropertyTabIsClicked = 0;
  int whichListPropertyTabIsClicked = 0;
  int whichTablePropertyTabIsClicked = 0;
  int whichTableDecorationIsClicked = 0;
  SheetTableVariables sheetTableVariables = SheetTableVariables();
  Uint8List? cachedImageData;
  bool nameExists = false;
  bool hasRenderedOnce = false;
  // bool addToTheLeft = false;
  // bool addToTheRight = false;
  // bool isListMarginExpanded = false;
  // bool isListPaddingExpanded = false;
  // bool isListBorderRadiusExpanded = false;
  // bool isListBorderExpanded = true;
  // bool isListColorExpanded = true;
  // bool isListShadowExpanded = true;
  // bool isListDecorationImageExpanded = true;
  bool isListDecorationPropertiesToggled = false;
  bool isListDecorationLibraryToggled = false;
  bool showDecorationLayers = true;
  // bool showSheetTextLibrary = false;
  bool isMathFunctionLibraryToggled = false;
  bool isFormulaMode = false;
  List<bool> expansionLevels = [true] + List.filled(10, false).sublist(0, 9);
  // List<bool> // inputBlockExpansionList =[false];
  SheetText item = SheetText(
    hide:true,
    name: 'yo',
    id: 'yo',
    parentId: 'yo', 
    textDecoration: SuperDecoration(id: 'yo'),
    indexPath: IndexPath(index:-1)
    );
  SheetList sheetListItem = SheetList(id: 'yo',parentId: 'yo', listDecoration:'yo', sheetList: [],indexPath: IndexPath(index:-1));
  late SheetTable sheetTableItem;
  var dragBackupValue;
  OverlayEntry? _overlay;
  List<InputBlock>? selectedInputBlocks =[];
  OverlayEntry? sheetTypeBrowserEntry;
  //
  //
  //
  //
@override
  void initState() {
    super.initState();
    // 1️⃣ Ensure loader paints before heavy work
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initialize();
    });
    
  }

  Future<void> _initialize() async {
    if (!mounted) return;
    setState(() => isLoading = true);

    // ─── 2) Extract tiny JSON maps tagged with type ────────────────────────
    // final rawList = Boxes
    //     .getDecorations()
    //     .values
    //     .map((box) {
    //       // print(box.id);
    //       if (box is ItemDecorationBox) {
    //         return {'type': 'ItemDecoration', 'value': box.itemDecoration};
    //       } else {
    //         // SuperDecorationBox extends SheetDecoration, but carries only List<String>
    //         return {
    //           'type': 'SuperDecoration',
    //           'value': (box as SuperDecorationBox).toSuperDecoration().toJson(),
    //         };
    //       }
    //     })
    //     .toList();
    
    final rawMap = Boxes.getDecorations().toMap().map((key, box) {
      if (box is ItemDecorationBox) {
        return MapEntry(key, {
          'type': 'ItemDecoration',
          'value': box.itemDecoration, // pass as-is
        });
      } else if (box is SuperDecorationBox) {
        return MapEntry(key, {
          'type': 'SuperDecoration',
          'value': box.toSuperDecoration().toJson(), // needs toJson
        });
      } else {
        return MapEntry(key, null); // skip unknown
      }
    })..removeWhere((k, v) => v == null);


    // ─── 3) Offload decoding entirely into an isolate ───────────────────────
    // final List<SheetDecoration> decoded = await compute(decodeItemDecorationList, rawList);

    sheetDecorationMap = await compute(decodeItemDecorationMap, rawMap);

    // ─── 4) Back on main isolate: assign your lists ─────────────────────────
    // sheetDecorationList = decoded
    // ..sort((a, b) {
    //   int indexA = int.parse(a.id.split('/').last);
    //   int indexB = int.parse(b.id.split('/').last);
    //   return indexA.compareTo(indexB);
    // });
    
    filteredDecorations = sheetDecorationMap;

    // ─── 5) Your original Hive & layout logic ──────────────────────────────
    final box = Boxes.getLayouts();
    key = widget.id ?? '-1';
    // keyIndex = widget.index ?? -1;

    if (key == '-1') {
      final name = Boxes.getLayoutName();
      layoutName.text = name;
      initialLayoutName = name;
      key = 'LY-${const Uuid().v4()}';
      // keyIndex = box.length;
      lm = LayoutModel(
        createdAt: DateTime.now(),
        modifiedAt: DateTime.now(),
        name: name,
        docPropsList: [],
        spreadSheetList: [],
        id: key,
        type: 0,
      );
      
      box.put(key, lm!);
      lm!.save();
      labelList = getLabelList(SheetType.values[0],null);
    } else {
      print('inelse');
      lm = box.get(widget.id);
      spreadSheetList = boxToSpreadSheet(lm?.spreadSheetList);
      documentPropertiesList = boxToDocProp(lm?.docPropsList);
      layoutName.text = lm!.name;
      initialLayoutName = lm!.name;
      labelList = lm!.labelList.isEmpty? getLabelList(SheetType.values[lm!.type],null):lm!.labelList;
      
      // sheetListItem = spreadSheetList[currentPageIndex];
    }

    if (documentPropertiesList.isEmpty) {
      _addPdfPage();
      // sheetListItem = spreadSheetList[currentPageIndex];
    }

    // ─── 6) Controllers & listeners ────────────────────────────────────────
    // tabcunt = TabController(length: 2, vsync: this);
    globalKeys = List.generate(10000, (_) => GlobalKey());
    fetchFonts();
    // _findItem();
    // _unfocusAll();
    // _findSheetListItem();
    
    fontsTabContainerController = TabController(length: 6, vsync: this)
      ..animateTo(1)
      ..addListener(_onFontsTabChanged);
    // ─── 7) Done ────────────────────────────────────────────────────────────
    if (!mounted) return;
    setState(() {
      // panelIndex.parentId = spreadSheetList[currentPageIndex].id;
      // sheetListItem = spreadSheetList[currentPageIndex];
    });
    await relinkIndexPathsInInputBlocks();
    setState(() => isLoading = false);
    _renderPagePreviewOnProperties();
    assignIndexPathsAndDisambiguate(labelList,spreadSheetList);
    // IF EXPORT BILL BUTTON IS CLICKED v
    Future.delayed(Durations.extralong4).then((c) async {if (widget.exportPdf) {
      final overlay =  OverlayEntry(builder: (context) => Scaffold(
        backgroundColor: defaultPalette.extras[1],
        body: Center(
          child: LoadingAnimationWidget.newtonCradle(
            color: Colors.white,
            size: 150,
          ),
        ),),);
        Overlay.of(context).insert(
          overlay
        );
       await _capturePng().then((onValue) {
          _genPdf();
        });
       if (mounted) {
        Navigator.pop(context);
        Future.delayed(Durations.long1).then((value) {
          overlay.remove();
          sheetTypeBrowserEntry?.remove();
        },);
      }

    }});
  }

  // ─── Tab change handlers ─────────────────────────────────────────────────
  void _onFontsTabChanged() {
    if (!mounted) return;
    final idx = fontsTabContainerController.index;
    setState(() {
      if (whichPropertyTabIsClicked == 2) {
        selectedFontCategory = idx == 0
            ? 'search'
            : categorizedFonts.keys.elementAt(idx - 1);
      }
    });
  }

  // _____ Initialization Done _______________________________________________
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    setState(() {
      var x = 80 / sHeight;
      wH1DividerPosition = wH1DividerPosition.clamp(50/sWidth,1);
      wH2DividerPosition = wH2DividerPosition.clamp((170/sWidth), 0.48);
      
      // if (!hasRenderedOnce) {
        // Capture the image the first time the widget is inserted into the tree
        if (!isLoading) {
          _renderPagePreviewOnProperties();
        }
      // }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    pageViewIndicatorController.dispose();
    textStyleTabControler.dispose();
    propertyCardsController.dispose();
    listPropertyCardsController.dispose();
    textPropertyCardsController.dispose();
    transformationcontroller.dispose();
    opsFormatPieController.dispose();
    opsMovePieController.dispose();
    opsAddPieController.dispose();
    opsCopyPieController.dispose();
    layoutName.dispose();
    listDecorationNameController.dispose();
    decorationSearchController.dispose();
    listPropertyCardsController.dispose();
    sheetTypeBrowserEntry?.dispose();
    // listDirectionPieController.dispose();
    // listMainAxisAlignmentPieController.dispose();
    // listCrossAxisAlignmentDirectionPieController.dispose();
    // propertyTabController.dispose();
    super.dispose();
  }

  List<DocumentProperties> boxToDocProp(docproplist) {
    List<DocumentProperties> listbox = [];

    for (DocumentPropertiesBox doc in docproplist) {
      // print('doc num: ${doc.pageNumberController}');
      listbox.add(doc.toDocumentProperties());
      setState(() {
        pageCount++;
      });
    }
    return listbox;
  }

  List<DocumentPropertiesBox> docPropToBox(docproplist) {
    List<DocumentPropertiesBox> listbox = [];
    for (DocumentProperties doc in docproplist) {
      listbox.add(doc.toDocPropBox());
    }
    return listbox;
  }

  List<SheetListBox> spreadSheetToBox(spreadSheetList) {
    List<SheetListBox> listbox = [];
    for (SheetList sheetlist in spreadSheetList) {
      SheetListBox sheetListBox = sheetlist.toSheetListBox();
      sheetListBox.sheetList = [];
      // print('B PARENT: '+ sheetListBox.parentId );
      for (var i = 0; i < sheetlist.length; i++) {
        if (sheetlist[i] is SheetText) {
          sheetListBox.sheetList.add((sheetlist[i] as SheetText)
              .toTEItemBox((sheetlist[i] as SheetText)));
        } else if (sheetlist[i] is SheetList) {
          sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
        } else if (sheetlist[i] is SheetTable) {
          sheetListBox.sheetList.add((sheetlist[i] as SheetTable).toSheetTableBox());
        }
      }
      listbox.add(sheetListBox);
    }
    return listbox;
  }

  SheetListBox sheetListtoBox(SheetList sheetlist) {
    
    SheetListBox sheetListBox = sheetlist.toSheetListBox();
    sheetListBox.sheetList = [];
    for (var i = 0; i < sheetlist.length; i++) {
      if (sheetlist[i] is SheetText) {
        sheetListBox.sheetList.add((sheetlist[i] as SheetText)
            .toTEItemBox((sheetlist[i] as SheetText)));
      } else if (sheetlist[i] is SheetList) {
        sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
      } else if (sheetlist[i] is SheetTable) {
        sheetListBox.sheetList.add((sheetlist[i] as SheetTable).toSheetTableBox());
      }
    }
    return sheetListBox;
  }

  List<SheetList> boxToSpreadSheet(spreadsheetlist) {
    List<SheetList> listbox = [];
    for (SheetListBox e in spreadsheetlist) {
      SheetList sheetList = e.toSheetList(_findItem,textFieldTapDown,getReplaceTextFunctionForType);
      sheetList.sheetList = [];
      for (var idx=0; idx< e.sheetList.length;idx++) {
        var item = e.sheetList[idx];
        if (item is SheetTextBox) {
          SheetText tEItem = _addTextField(
              shouldReturn: true,
              docString: item.textEditorController,
              id: item.id,
              parentId: item.parentId,
              name: item.name,
              hide: item.hide,
              textDecoration: item.textDecoration.toSuperDecoration(),
              indexPath: item.indexPath,
              inputBlocks: item.inputBlocks,
              type: SheetTextType.values[item.type],
              locked: item.locked,
              );
          tEItem.indexPath.parent = sheetList.indexPath;

          sheetList.sheetList.add(tEItem);
        } else if (item is SheetListBox) {
          sheetList.sheetList.add(boxToSheetList(item,sheetList.indexPath));
        } else if (item is SheetTableBox) {
          sheetList.sheetList.add((item).toSheetTable(_findItem,textFieldTapDown,getReplaceTextFunctionForType));
        }
      }

      listbox.add(sheetList);
    }

    return listbox;
  }

  SheetList boxToSheetList(SheetListBox sheetListBox, IndexPath parentIndexPath) {
        // print('B PARENT: '+ sheetListBox.parentId );
    SheetList sheetList = sheetListBox.toSheetList(_findItem,textFieldTapDown,getReplaceTextFunctionForType);
    sheetList.sheetList = [];
    sheetList.indexPath.parent = parentIndexPath;
    for (var idx=0; idx< sheetListBox.sheetList.length;idx++) {
      var item = sheetListBox.sheetList[idx];
      if (item is SheetTextBox) {
        // print('TextEditor Id: ' + item.id);
        // print(item.linkedTextEditors);
        SheetText tEItem = _addTextField(
            shouldReturn: true,
            docString: item.textEditorController,
            id: item.id,
            parentId: item.parentId,
            name: item.name,
            hide: item.hide,
            textDecoration: item.textDecoration.toSuperDecoration(),
            indexPath: item.indexPath,
            inputBlocks: item.inputBlocks,
            type: SheetTextType.values[item.type],
            locked: item.locked,
            );
        tEItem.indexPath.parent = sheetList.indexPath;
        
        sheetList.sheetList.add(tEItem);
      } else if (item is SheetListBox) {
        sheetList.sheetList.add(boxToSheetList(item, sheetList.indexPath));
      } else if (item is SheetTableBox) {
        sheetList.sheetList.add((item).toSheetTable(_findItem,textFieldTapDown,getReplaceTextFunctionForType));
      }
    }
    return sheetList;
  }

  SheetText _addTextField({
    required String id,
    String parentId = '',
    bool shouldReturn = false,
    bool hide = false,
    String name = 'unlabeled',
    List<Map<String, dynamic>>?
        docString, // Use List<Map<String, dynamic>> directly
    required SuperDecoration textDecoration,
    required IndexPath indexPath,
    bool isCell = false,
    required List<InputBlock> inputBlocks ,
    SheetTextType type = SheetTextType.string,
   bool locked = false,
  }) {
    Delta delta;
    // print('DocString: $docString');
    if (inputBlocks.isNotEmpty) {
      if (inputBlocks[0].indexPath.index ==-69) {
        inputBlocks=[InputBlock(indexPath: indexPath, blockIndex: [-2], id: id)];
      }
    }
    if (!id.startsWith("TX") && id != '') {
      id='TX-$id';
    }

    try {
      if (docString != null && docString.isNotEmpty) {
        // Convert List<Map<String, dynamic>> to Delta
        delta = Delta.fromJson(docString);
        // Check if delta is empty or not
        if (delta.isEmpty) {
          delta = Delta(); // Fallback to an empty Delta
        }
      } else {
        delta =
            Delta(); // Default to an empty Delta if docString is null or empty
      }
      // print('Decoded Delta: $delta');
    } catch (e) {
      // Handle error if any occurs
      print('Error converting to Delta: $e');
      delta = Delta(); // Default to an empty Delta in case of error
    }

    // Initialize QuillController with the appropriate Document
    QuillController textController;
    if (delta.isEmpty) {
      textController = QuillController(
        document: Document(), // Use an empty document if delta is empty
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
          _findItem();
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
          _findItem();
        },
        onSelectionCompleted: () {
          setState(() {});
          _findItem();
        },
      );
    } else {
      textController = QuillController(
        document: Document.fromDelta(delta), // Use delta to create the document
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
          _findItem();
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
          _findItem();
        },
        onSelectionCompleted: () {
          setState(() {});
          _findItem();
        },
      );
    }

    textController.onReplaceText = getReplaceTextFunctionForType(type.index ,textController);
    if (locked) {
      textController.onReplaceText =(x,b,m)=>false;
    }
    String newId = id.isEmpty ?'TX-${Uuid().v4()}' : id;
    var textEditorConfigurations = QuillEditorConfigurations(
      enableScribble: true,
      enableSelectionToolbar: true,
      autoFocus: true,
      onTapOutside: (event, focusNode) {
      },
      contextMenuBuilder: (context, rawEditorState) {
        return Container();
      },
      controller: textController,
      placeholder: isCell
      ? null
      : type==SheetTextType.number
      ? 'Enter Number'
      : type==SheetTextType.integer
      ? 'Enter Integer'
      : type==SheetTextType.bool
      ? 'Enter bool'
      : type==SheetTextType.date
      ? 'Enter Date'
      : type==SheetTextType.time
      ? 'Enter Time'
      : type==SheetTextType.phone
      ? 'Enter Number'
      : 'Enter Text',
      customStyles: DefaultStyles(
        placeHolder: DefaultTextBlockStyle(
          GoogleFonts.lexend(
            color: defaultPalette.extras[0].withOpacity(0.4),
            letterSpacing: -1,
            fontSize:16,
          ),
          VerticalSpacing(0, 0),
          VerticalSpacing(0, 0), null
          )
      ),
      
      // maxHeight: 50,
      customStyleBuilder: (attribute) {
        return customStyleBuilder(attribute); // Default style
      },
      builder: (context, rawEditor) {
        return textEditorBuilder(rawEditor, newId, isCell: isCell);
      },
      onTapDown: (details, p1) {
        return textFieldTapDown(details, newId, indexPath);
      },
    );
    
    if (!shouldReturn) {
      setState(() {
        spreadSheetList[currentPageIndex].add(SheetText(
            name:name,
            hide:hide,
            textEditorController: textController,
            textEditorConfigurations: textEditorConfigurations,
            id: newId,
            parentId: spreadSheetList[currentPageIndex].id,
            indexPath: indexPath,
            textDecoration: textDecoration,
            inputBlocks: inputBlocks,
            type: type,
            locked: locked,
            ));

        var lmBox = Boxes.getLayouts();
        var lm = lmBox.get(key);
        lm?.spreadSheetList[currentPageIndex].sheetList.add(
            SheetTextBox(
                name:name,
                hide:hide,
                textEditorController:
                    textController.document.toDelta().toJson(),
                id: newId,
                indexPath: indexPath,
                parentId: spreadSheetList[currentPageIndex].id,
                inputBlocks: inputBlocks,
                textDecoration: textDecoration.toSuperDecorationBox(),
                type: type.index,
                locked: locked,
                ));
        lm?.save();
        saveDecorations(sheetDecorationMap);
      });
    }

    return SheetText(
      name:name,
      hide:hide,
      textEditorController: textController,
      textEditorConfigurations: textEditorConfigurations,
      id: newId,
      parentId:
          parentId.isNotEmpty ? parentId : spreadSheetList[currentPageIndex].id,
      indexPath: indexPath,
      textDecoration: textDecoration,
      inputBlocks: inputBlocks,
      type: type,
      locked: locked,
    );
  }

  SheetTable? _sheetTableIterator(String id, SheetList sheetList) {
    
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetTable;
      }
      if (sheetList[i] is SheetList) {
        if (_sheetTableIterator(id, sheetList[i] as SheetList) != null) {
          return _sheetTableIterator(id, sheetList[i] as SheetList)!;
        }
      }
      if (sheetList[i] is SheetTable) {
        if (_tableIterator(id, sheetList[i] as SheetTable) != null) {
          return _tableIterator(id, sheetList[i] as SheetTable)!;
        }
      }
    }
    return null;
  }

  SheetTable? _tableIterator(String id, SheetTable sheetTable) {
    if (sheetTable.id == id) {
      return sheetTable;
    }
    for (var i = 0; i < sheetTable.rowData.length; i++) {
      for (var v = 0; v < sheetTable.columnData.length; v++){
        // print('Length: ${sheetTable.cellData[i].length}');
        // print('id for search: $id');
        // print('item id in iterator: ${sheetTable.cellData[i][v].sheetItem.id}');
        // print('item in iterator: ${sheetTable.cellData[i][v].sheetItem}');

        if (sheetTable.cellData[i][v].sheetItem is SheetList) {
          // print('Descending into nested SheetList with id: ${e.id}');
          
            SheetTable? itemItered = _sheetTableIterator(id, sheetTable.cellData[i][v].sheetItem as SheetList);
            if (itemItered!=null && itemItered.id == id) {
              return itemItered;
            }
          
        }

        else if(sheetTable.cellData[i][v].sheetItem is SheetTable) {
          SheetTable? itemItered = _tableIterator(id, sheetTable.cellData[i][v].sheetItem as SheetTable);
          if (itemItered!=null &&itemItered.id == id) {
            return itemItered;
            // return itemItered;
          }
        }
      } 
    }
    return null;
  }

  SheetList _sheetListIterator(String id, SheetList sheetList) {
    // print('Length: ${sheetList.length}');
    print('id for search: $id');

    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        if (_listIterator(id, sheetList[i] as SheetList) != null) {
          return _listIterator(id, sheetList[i] as SheetList)!;
        }
      }
    }
    throw Exception('SheetList with id $id not found');
  }

  SheetList? _listIterator(String id, SheetList sheetList) {
    // print('Length: ${sheetList.length}');
    print('id for search: $id');
    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        try {
          return _listIterator(id, sheetList[i] as SheetList);
        } catch (e) {
          // Continue searching in the remaining items
        }
      }
    }
    return null;
  }

  SheetItem _sheetItemIterator(String id, SheetList sheetList, {bool shouldReturn = false}) {
    // print('Length: ${sheetList.length}');
    print('item id for search: $id');

    for (var i = 0; i < sheetList.length; i++) {
      // print('item id in iterator: ${sheetList[i].id}');
      // print('item in iterator: ${sheetList[i]}');

      if (sheetList[i] is SheetText && sheetList[i].id == id) {
        print('Found SheetText with matching id: ${sheetList[i].id}');
        return sheetList[i];
      }

      else if (sheetList[i] is SheetList) {
        // print('Descending into nested SheetList with id: ${sheetList[i].id}');
          var itemItered = _sheetItemIterator(id, sheetList[i] as SheetList, shouldReturn: true);
          if (itemItered.id == id) {
            return itemItered;
          }
      }

      else if(sheetList[i] is SheetTable) {
        // print('Descending into nested SheetTable with id: ${sheetList[i].id}');
        var itemItered = _sheetTableItemIterator(id, sheetList[i] as SheetTable);
        if (itemItered.id == id) {
          return itemItered;
        }
      }

      // print('ItemIterationParent: $i');
    }

    // Throw if the item was not found after iterating through the entire list
    if (!shouldReturn) {
      throw Exception('SheetItem with id $id not found');
    } else {
      return SheetItem(id: 'yo', parentId: '', indexPath: IndexPath(index:-42));
    }
  }

  SheetItem _sheetTableItemIterator(String id, SheetTable sheetTable) {
    SheetItem requiredItem = SheetText(
      name:'unlabeled',
      hide:true,
      id: 'yo', parentId: '', textDecoration: SuperDecoration(id: ''),indexPath: IndexPath(index:-1));
    for (var i = 0; i < sheetTable.rowData.length; i++) {
      for (var v = 0; v < sheetTable.columnData.length; v++){
        // print('Length: ${sheetTable.cellData[i].length}');
        print('id for search: $id');
        // print('item id in iterator: ${sheetTable.cellData[i][v].sheetItem.id}');
        // print('item in iterator: ${sheetTable.cellData[i][v].sheetItem}');

        if (sheetTable.cellData[i][v].sheetItem is SheetText && sheetTable.cellData[i][v].sheetItem.id == id) {
          // print('Found SheetText with matching id: ${sheetTable.cellData[i][v].sheetItem.id}');
          return sheetTable.cellData[i][v].sheetItem;
          // return e;
        }

        else if (sheetTable.cellData[i][v].sheetItem is SheetList) {
          // print('Descending into nested SheetList with id: ${e.id}');
          
            SheetItem itemItered = _sheetItemIterator(id, sheetTable.cellData[i][v].sheetItem as SheetList, shouldReturn: true);
            if (itemItered.id == id) {
              return itemItered;
            }
          
        }

        else if(sheetTable.cellData[i][v].sheetItem is SheetTable) {
          SheetItem itemItered = _sheetTableItemIterator(id, sheetTable.cellData[i][v].sheetItem as SheetTable);
          if (itemItered.id == id) {
            return itemItered;
            // return itemItered;
          }
        }
      } 
    }

    return requiredItem;
  }

  List<SheetDecoration> decorationListIterator(List<String> itemDecorationList){
    List<SheetDecoration> list =[];
    for (var i = 0; i < itemDecorationList.length; i++) {
      var tmpinx = int.tryParse(itemDecorationList[i].substring(itemDecorationList[i].indexOf('/') + 1))??-155;
      list.add(sheetDecorationMap[itemDecorationList[i]]!);
    }
    return list;
  }

  void _deselectTextField() {
    // setState(() {
    //   if (selectedIndex != []) {
    //     selectedIndex[currentPageIndex] = 9999999;
    //   }
    // });
  }

  void _confirmDeleteLayout({bool deletePage = false}) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Delete'),
        content: const Text('This will delete the current page. Are you sure?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _deselectTextField();

                if (deletePage) {
                  if (pageCount == 1) {
                    spreadSheetList[currentPageIndex].sheetList = [];
                    panelIndex = PanelIndex(
                        id: panelIndex.id,
                        parentId: panelIndex.parentId,
                        itemIndexPath: panelIndex.itemIndexPath,
                        parentIndexPath: panelIndex.parentIndexPath,
                        );
                    return;
                  }

                  // Decrement page count and remove the current page
                  pageCount--;
                  documentPropertiesList.removeAt(currentPageIndex);
                  spreadSheetList.removeAt(currentPageIndex);

                  // Update currentPageIndex safely
                  currentPageIndex =
                      currentPageIndex > 0 ? currentPageIndex - 1 : 0;
                  propertyCardsController.setCardIndex(currentPageIndex);
                  propertyCardsController.animateTo(Offset(1, 1),
                      duration: Durations.short1, curve: Curves.linear);

                  // Update panelIndex for the new current page
                  panelIndex = PanelIndex(
                    id: spreadSheetList[currentPageIndex].id,
                    // runTimeType: spreadSheetList[currentPageIndex].runtimeType,
                    parentId: spreadSheetList[currentPageIndex].parentId,
                    itemIndexPath: spreadSheetList[currentPageIndex].indexPath,
                    parentIndexPath: spreadSheetList[currentPageIndex].indexPath.parent,
                  );

                  // Reassign pageNumberController for the new sequence
                  for (int i = 0; i < documentPropertiesList.length; i++) {
                    documentPropertiesList[i].pageNumberController.text =
                        (i + 1).toString();
                  }

                  return;
                }

                // Clear the sheet list for the current page
                spreadSheetList[currentPageIndex].sheetList = [];
                panelIndex = PanelIndex(
                    id: panelIndex.id,
                    itemIndexPath: panelIndex.itemIndexPath,
                    parentIndexPath: panelIndex.parentIndexPath,
                    parentId: panelIndex.parentId);
              });

              Navigator.of(context).pop();
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );
  }

  pw.Widget convertDeltaToPdfWidget(Delta delta) {
    // print('________convertDELTA STARTED LD_________');
    PdfColor pdfColorFromHex(String hexColor) {
      final buffer = StringBuffer();
      if (hexColor.length == 6 || hexColor.length == 7) buffer.write('ff');
      buffer.write(hexColor.replaceFirst('#', ''));
      final color = int.parse(buffer.toString(), radix: 16);
      return PdfColor.fromInt(color);
    }

    pw.TextAlign? getAlign() {
      if (delta.toList()[0].attributes?.containsKey('align') ?? true) {
        switch (delta.toList()[0].attributes?['align']) {
          case 'center':
            return pw.TextAlign.center;
          // break;
          case 'right':
            return pw.TextAlign.right;
          // break;
          case 'justify':
            return pw.TextAlign.justify;
          // break;
          case 'left':
            return pw.TextAlign.left;
        }
      }
      // print('returning lol');
      return null;
    }

    final List<pw.Widget> textWidgets = [];
    // pw.Widget checkbox = pw.Container();
    pw.TextAlign? textAlign = getAlign();
    pw.TextDirection textDirection = pw.TextDirection.ltr;
    // pw.Widget lastWidget = pw.Container();
    for (var op in delta.toList()) {
      if (op.value is String) {
        var text = op.value.toString();
        Map<String, dynamic>? attributes = op.attributes;
        // pw.EdgeInsets? padding;
        pw.TextStyle textStyle = const pw.TextStyle();
        PdfColor? backgroundColor;
        if (attributes != null) {
          if (attributes.containsKey('bold')) {
            // print('bold');
            textStyle = textStyle.copyWith(fontWeight: pw.FontWeight.bold);
          }
          if (attributes.containsKey('italic')) {
            textStyle = textStyle.copyWith(fontStyle: pw.FontStyle.italic);
          }
          if (attributes.containsKey('underline')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.underline);
          }
          if (attributes.containsKey('strike')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.lineThrough);
          }

          if (attributes.containsKey('color')) {
            textStyle =
                textStyle.copyWith(color: pdfColorFromHex(attributes['color']));
          }
          if (attributes.containsKey('background')) {
            backgroundColor = pdfColorFromHex(attributes['background']);
            textStyle = textStyle.copyWith(
                background: pw.BoxDecoration(color: backgroundColor));
          }
          if (attributes.containsKey('size')) {
            double fontSize = double.parse(attributes['size'].toString());
            textStyle = textStyle.copyWith(fontSize: fontSize);
          }
          if (attributes.containsKey('header')) {
            int level = attributes['header'];
            switch (level) {
              case 1:
                textStyle = textStyle.copyWith(
                    fontSize: 24, fontWeight: pw.FontWeight.bold);
                break;
              case 2:
                textStyle = textStyle.copyWith(
                    fontSize: 20, fontWeight: pw.FontWeight.bold);
                break;
              case 3:
                textStyle = textStyle.copyWith(
                    fontSize: 18, fontWeight: pw.FontWeight.bold);
                break;
              default:
                textStyle = textStyle.copyWith(
                    fontSize: 16, fontWeight: pw.FontWeight.bold);
            }
          }
          if (attributes.containsKey('indent')) {}

          if (attributes.containsKey('direction')) {
            // print('direction yes');
            // print(attributes['direction']);
            if (attributes['direction'] == 'rtl') {
              // print('direction yes');
              textDirection = pw.TextDirection.rtl;
            } else {
              textDirection = pw.TextDirection.ltr;
            }
          }

          if (attributes.containsKey('link')) {
            continue;
          }
        }
        int currentIndex = delta.toList().indexOf(op);
        Operation? newOP;
        for (int j = currentIndex + 1; j < delta.toList().length; j++) {
          var nextOp = delta.toList()[j];
          if (nextOp.value is String &&
              (nextOp.value as String).startsWith('\n')) {
            newOP = nextOp;
            break;
          }
        }

        if (newOP != null &&
            (newOP.attributes?.containsKey('align') ?? false)) {
          switch (newOP.attributes?['align']) {
            case 'center':
              textAlign = pw.TextAlign.center;
              break;
            case 'right':
              textAlign = pw.TextAlign.right;
              break;
            case 'justify':
              textAlign = pw.TextAlign.justify;
              break;
            default:
              textAlign = pw.TextAlign.left;
          }
        } else if (newOP == null) {
          textAlign = pw.TextAlign.left;
        }
        // Check if text starts with '\n'
        bool startsWithNewLine = text.startsWith('\n');
        //
        if (delta.toList().indexOf(op) == 0) {
          startsWithNewLine = true;
        }
        if (startsWithNewLine) {
          // print(
          //     '$startsWithNewLine texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          textWidgets.add(pw.Container(
              width: double.infinity,
              alignment: textAlign == pw.TextAlign.left
                  ? pw.Alignment.topLeft
                  : textAlign == pw.TextAlign.right
                      ? pw.Alignment.topRight
                      : pw.Alignment.center,
              child: pw.RichText(
                text: pw.TextSpan(children: [
                  pw.TextSpan(
                    text: text.substring(0,
                        text[text.length - 1] == '\n' ? text.length - 1 : null),
                    style: textStyle,
                  )
                ]),
                textAlign: textAlign,
                textDirection: textDirection,
              )));
        } else {
          // print('texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          (((textWidgets[textWidgets.length - 1] as pw.Container).child
                      as pw.RichText)
                  .text as pw.TextSpan)
              .children
              ?.add(pw.TextSpan(
                  text: text.substring(0,
                      text[text.length - 1] == '\n' ? text.length - 1 : null),
                  style: textStyle));
        }
      }
    }

    // print('________END convertDELTA LD_________');
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start, // Adjust as necessary
      children: textWidgets,
    );
  }

  SuperDecoration newSuperDecoration({bool placeholder = true}) {
    if (placeholder) {
      return SuperDecoration(id: 'yo');
    }
    var newDecoId = 'dSPR-${Uuid().v4()}';
    print(newDecoId);
    sheetDecorationMap.addAll({newDecoId:SuperDecoration(id: newDecoId)});
    return SuperDecoration(id: newDecoId);
  }

  Widget _generateWidWin( sWidth, sHeight,) {
    var doc = documentPropertiesList;
    var sheetList = spreadSheetList;
    return SingleChildScrollView(
      child: Column(
        children: [
          for (int i = 0; i < pageCount; i++)
            Padding(
              padding:
                  const EdgeInsets.symmetric(vertical: 30.0, horizontal: 10),
              child: GestureDetector(
                onTap: () async {
                  setState(() {
                    if (currentPageIndex != i ) {
                      currentPageIndex = i;
                      _renderPagePreviewOnProperties();
                      
                      whichPropertyTabIsClicked = 1;
                      
                      
                      _findItem();
                      panelIndex.id ='';
                      panelIndex.parentId='';
                      // panelIndex.runTimeType = null;
                      whichPropertyTabIsClicked = 1;
                      Future.delayed(Durations.short1).then(
                        (value) {
                          // print("YUHUUUUUUUU");
                          propertyCardsController.setCardIndex(currentPageIndex);
                          propertyCardsController.animateTo(Offset(1, 1),
                          duration: Durations.short1, curve: Curves.linear);
                        },
                      );
                    } else {
                      if (currentPageIndex != i && whichPropertyTabIsClicked !=1) {
                        propertyCardsController.swipeDefault();
                      } else if (whichPropertyTabIsClicked !=1){
                        setState(() {
                          whichPropertyTabIsClicked = 1;
                        });
                      }
                      
                    }
                  whichPropertyTabIsClicked = 1;
                  propertyCardsController.animateTo(Offset(1, 1),
                          duration: Durations.short1, curve: Curves.linear);
                  });
                  await _unfocusAll();
                },
                child: Container(
                  decoration: BoxDecoration(
                    border: currentPageIndex == i
                        ? DashedBorder.fromBorderSide(
                          side: BorderSide(color: defaultPalette.tertiary.withOpacity(0.8),
                            strokeAlign: BorderSide.strokeAlignOutside,
                            width: 6), dashLength:40, spaceLength:20
                            )
                        : null,
                  ),
                  child: RepaintBoundary(
                    key: globalKeys[i],
                    child: Container(
                      width: _getPageWidth(doc[i].pageFormatController,
                          doc[i].orientationController),
                      height: _getPageHeight(doc[i].pageFormatController,
                          doc[i].orientationController),
                      decoration: BoxDecoration(
                          //
                          color: doc[i].pageColor,
                          boxShadow: [
                            // BoxShadow(
                            //   blurRadius: 5,
                          ]),
                      padding: EdgeInsets.only(
                        top: double.parse(doc[i].marginTopController.text),
                        bottom:
                            double.parse(doc[i].marginBottomController.text),
                        left: double.parse(doc[i].marginLeftController.text),
                        right: double.parse(doc[i].marginRightController.text),
                      ),
                      child: _buildSheetListWidget(
                        sheetList[i],
                        sWidth * (wH1DividerPosition),
                      ),
                    ),
                  ),
                ),
              ),
            )
        ],
      ),
    );
  }

  bool _getIsToggled(Map<String, Attribute> attrs, Attribute attribute) {
    if (attribute.key == Attribute.list.key ||
        attribute.key == Attribute.header.key ||
        attribute.key == Attribute.script.key ||
        attribute.key == Attribute.align.key) {
      final currentAttribute = attrs[attribute.key];
      if (currentAttribute == null) {
        // print('returning false');
        return false;
      }
      // print('returning ${currentAttribute.value == attribute.value}');
      return currentAttribute.value == attribute.value;
    }
    // print('returning ${attrs.containsKey(attribute.key)}');
    return attrs.containsKey(attribute.key);
  }

  Widget _buildSheetListWidget(SheetList sheetList, double width,
        {double? docWidth = null,}) {
          // print(sheetList.mainAxisSize.name);
      // SuperDecoration decor = sheetDecorationList.firstWhere((element) => element.id == sheetList.listDecoration.id,) as SuperDecoration;
      return GestureDetector(
        onDoubleTap:(){
          panelIndex.parentId = sheetList.id;
          panelIndex.parentIndexPath = sheetList.indexPath;
          _findSheetListItem();
        },
        child: buildDecoratedContainer(
            sheetDecorationMap[sheetList.listDecoration] as SuperDecoration?,
            IntrinsicHeight(
              child: sheetList.direction == Axis.vertical
                  //For Columns in the pdf side of things
                  ? IntrinsicWidth(
                      child: Flex(
                        direction: Axis.vertical,
                        mainAxisAlignment: sheetList.mainAxisAlignment,
                        crossAxisAlignment: sheetList.crossAxisAlignment,
                        mainAxisSize: sheetList.mainAxisSize, 
                        children:
                            List.generate(sheetList.sheetList.length, (index) {
                          final sheetTextItem = sheetList.sheetList[index];
        
                          if (sheetTextItem is SheetText && !sheetTextItem.hide) {
                            // print('in buildSheetListWidget item is: $item');
                            // var tmpinx = int.tryParse(sheetTextItem.textDecoration.id.substring(sheetTextItem.textDecoration.id.indexOf('/') + 1))??-155;
          
                            SuperDecoration? textDecor = sheetDecorationMap[sheetTextItem.textDecoration.id] as SuperDecoration?;
      
                            Alignment containerAlignment = Alignment.topLeft;
        
                            // Get alignment based on current attributes
                            final currentAttributes = sheetTextItem.textEditorController
                                .getSelectionStyle()
                                .attributes;
                            // print(sheetTextItem.id+' and '+sheetTextItem.textDecoration.id);
                            // print(sheetTextItem.id+' and '+sheetTextItem.textDecoration.itemDecorationList.toString());
                            // Determine alignment from `attributes`
                            if (_getIsToggled(
                                currentAttributes, Attribute.centerAlignment)) {
                              containerAlignment = Alignment.center;
                            } else if (_getIsToggled(
                                currentAttributes, Attribute.rightAlignment)) {
                              containerAlignment = Alignment.topRight;
                            } else if (_getIsToggled(
                                currentAttributes, Attribute.justifyAlignment)) {
                              containerAlignment = Alignment
                                  .topLeft; // Adjust if you have other logic
                            } else if (_getIsToggled(
                                currentAttributes, Attribute.leftAlignment)) {
                              containerAlignment = Alignment.topLeft;
                            }
                            // print('in buildSheetListWidget item is: $item');
                            return IgnorePointer(
                              key: ValueKey(sheetTextItem),
                              child: Align(
                                // width: docWidth,
                                alignment: containerAlignment,
                                child: 
                                buildDecoratedContainer(
                                  textDecor,
                                  QuillEditor(
                                    key: ValueKey(sheetTextItem.id),
                                    configurations: buildCombinedQuillConfiguration(sheetTextItem.inputBlocks),
                                    focusNode: FocusNode(),
                                    scrollController: ScrollController(),
                                  ),
                                  false,
                                
                                ),
                              ),
                            );
                          } else if (sheetTextItem is SheetList) {
                            // print('in buildSheetListWidget sheetTextItem is: $sheetTextItem');
                            return _buildSheetListWidget(sheetTextItem, width);
                          } else if (sheetTextItem is SheetTable) {
                            return _buildSheetTableWidget(sheetTextItem,);
                          }

                          return const SizedBox();
                        }),
                      ),
                    )
                  //For Rows in the pdf side of things
                  : SizedBox(
                      width: docWidth,
                      child: Row(
                        // direction: Axis.horizontal,
                        mainAxisAlignment: sheetList.mainAxisAlignment,
                        crossAxisAlignment: sheetList.crossAxisAlignment,
                        mainAxisSize: sheetList.mainAxisSize,
                        children:
                            List.generate(sheetList.sheetList.length, (index) {
                          final item = sheetList.sheetList[index];
        
                          if (item is SheetText && !item.hide) {
                            // print('in buildSheetListWidget item is: $item');
                            // var tmpinx = int.tryParse(item.textDecoration.id.substring(item.textDecoration.id.indexOf('/') + 1))??-171;
          
                            SuperDecoration? textDecor = sheetDecorationMap[item.textDecoration.id] as SuperDecoration?;
      
                            return IgnorePointer(
                              key: ValueKey(item),
                              child: buildDecoratedContainer(
                                textDecor,
                                SizedBox(
                                  width: docWidth,
                                  child: IntrinsicWidth(
                                    child: QuillEditor(
                                      key: ValueKey(item.id),
                                      configurations:buildCombinedQuillConfiguration(item.inputBlocks),
                                      focusNode: FocusNode(),
                                      scrollController: ScrollController(),
                                    ),
                                  ),
                                ), false
                              ),
                            );
                          } else if (item is SheetList) {
                            // print('in buildSheetListWidget item is: $item');
                            return _buildSheetListWidget(item, width);
                          }
                          return const SizedBox();
                        }),
                      ),
                    ),
            ),
            false),
      );
    }

  Widget _buildSheetTableWidget(SheetTable sheetTable) {
    double tableHeight = 0.0;
    double tableWidth = 0.0;

    for (final row in sheetTable.rowData) {
      if (!row.hide) tableHeight += row.size;
    }

    for (final col in sheetTable.columnData) {
      if (!col.hide) tableWidth += col.size;
    }
    // print('building Table: '+sheetTable.id);
    return buildDecoratedContainer(
      sheetDecorationMap[sheetTable.sheetTablebgDecoration.id] as SuperDecoration?,
      SizedBox(
        width: sheetTable.expand ? null : tableWidth,
        height: tableHeight,
        child: LayoutBuilder(
          builder: (context, constraints) {
            List<SheetTableColumn> localColumnData =
                sheetTable.columnData.map((c) => c.copy()).toList();

            if (sheetTable.expand) {
              double availableWidth = constraints.maxWidth;

              double totalWidth = localColumnData
                  .where((col) => !col.hide)
                  .fold(0.0, (sum, col) => sum + col.size);

              double overflow = totalWidth - availableWidth;

              if (overflow > 0) {
                for (int i = localColumnData.length - 1;
                    i >= 0 && overflow > 0;
                    i--) {
                  final col = localColumnData[i];
                  if (col.hide) continue;

                  final minSize = col.minSize ?? 30.0;
                  final shrinkable = col.size - minSize;

                  if (shrinkable > 0) {
                    final shrink = shrinkable >= overflow ? overflow : shrinkable;
                    col.size -= shrink;
                    overflow -= shrink;
                  }
                }
              }

              double fixedWidth = 0.0;
              for (int i = 0; i < localColumnData.length; i++) {
                if (localColumnData[i].hide) continue;
                if (i == localColumnData.lastIndexWhere((c) => !c.hide)) break;
                fixedWidth += localColumnData[i].size;
              }

              final lastVisibleIndex =
                  localColumnData.lastIndexWhere((col) => !col.hide);
              if (lastVisibleIndex != -1) {
                final col = localColumnData[lastVisibleIndex];
                final remainingWidth = availableWidth - fixedWidth;
                col.size = remainingWidth.clamp(col.minSize ?? 30.0, availableWidth);
              }
            }

            return CustomMultiChildLayout(
              delegate: SheetTableWidgetLayoutDelegate(
                cells: sheetTable.cellData,
                columnData: localColumnData, // 🔥 using local version here
                rowData: sheetTable.rowData,
              ),
              children: [
                for (var rowEntry in sheetTable.cellData)
                  for (var cell in rowEntry)
                    if (cell.isVisible)
                      LayoutId(
                        id: cell.id,
                        child: _buildSheetTableTextWidget(
                          cell.sheetItem as SheetText,
                          disable: true,
                        ),
                      ),
              ],
            );
          },
        ),
      ),
      false,
    );
  }

  Widget _buildSheetTableTextWidget(SheetText sheetText, {bool disable = true}) {
    // var tmpinx = int.tryParse(sheetText.textDecoration.id.substring(sheetText.textDecoration.id.indexOf('/') + 1))??-111;
        
    SuperDecoration? decor = sheetDecorationMap[sheetText.textDecoration.id] as SuperDecoration?;
    // print('building TableCEll: '+sheetText.id);
    return ClipRRect(
      borderRadius:BorderRadius.circular(0),
      child: buildDecoratedContainer(
        decor,
        !sheetText.hide?
        QuillEditor(
          key: ValueKey(sheetText.id),
          configurations:buildCombinedQuillConfiguration(sheetText.inputBlocks),
          focusNode: FocusNode(),
          scrollController: ScrollController(),
        ) : SizedBox(), 
        false
      ),
    );
                                       
  }

  double _getPageWidth(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      // case PdfPageFormat.a4:
      //   width = 793.7007874;
      //   height = 1122.519685;
      //   break;
      // case PdfPageFormat.a3:
      //   width = 1122.519685;
      //   height = 1587.4015748;
      //   break;
      // case PdfPageFormat.a5:
      //   width = 559.37007874;
      //   height = 793.7007874;
      //   break;
      // case PdfPageFormat.a6:
      //   width = 396.8503937;
      //   height = 559.37007874;
      //   break;
      // case PdfPageFormat.letter:
      //   width = 816;
      //   height = 1056;
      //   break;
      // case PdfPageFormat.legal:
      //   width = 816;
      //   height = 1344;
      //   break;
      
      default:
        width = format.width*(1.333333333); // 2480 / 2
        height = format.height*(1.333333333); // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? height : width;
  }

  double _getPageHeight(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      // case PdfPageFormat.a4:
      //   width = 793.7007874;
      //   height = 1122.519685;
      //   break;
      // case PdfPageFormat.a3:
      //   width = 1122.519685;
      //   height = 1587.4015748;
      //   break;
      // case PdfPageFormat.a5:
      //   width = 559.37007874;
      //   height = 793.7007874;
      //   break;
      // case PdfPageFormat.a6:
      //   width = 396.8503937;
      //   height = 559.37007874;
      //   break;
      // case PdfPageFormat.letter:
      //   width = 816;
      //   height = 1056;
      //   break;
      // case PdfPageFormat.legal:
      //   width = 816;
      //   height = 1344;
      //   break;
      default:
        width = format.width*1.333333333; // 2480 / 2
        height = format.height*1.333333333; // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? width : height;
  }

  void _addPdfPage() {
    var lmBox = Boxes.getLayouts();
    var id = 'LI-${ const Uuid().v4()}';
    var lm = lmBox.get(key);
    SuperDecoration newDecoration = newSuperDecoration();
    print('pageCount in addpage: $pageCount');
    DocumentProperties newdoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );
    setState(() {
      documentPropertiesList.add(newdoc);
    });
    lm?.docPropsList = docPropToBox(documentPropertiesList);
    lm?.save();
    SheetList newsheetlist = SheetList(
        id: id,
        parentId: lm!.id,
        sheetList: [],
        listDecoration: newDecoration.id,
        indexPath: IndexPath(index: spreadSheetList.length)
        );

    setState(() {
      spreadSheetList.add(newsheetlist);
    });
    lm?.spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm?.save(); // Boxes.getLayouts().update(LayoutModel(docPropsList: newdoc, spreadSheetList: newsheetlist.toSheetListBox(), id: id));
    Boxes.saveSuperDecoration(newDecoration.toSuperDecorationBox());
    setState(() {
      // selectedIndex.add(SelectedIndex(id: id, selectedIndexes: []));
    });
  }

  void _addPdfPageAtIndex(int index) {
    var lmBox = Boxes.getLayouts();
    var lm = lmBox.get(key);
    var id = 'LI-${ const Uuid().v4()}';
    var newDecoration = newSuperDecoration();
    
    print('pageCount in addPage: $pageCount');

    // Create a new DocumentProperties instance
    DocumentProperties newDoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );

    // Add the new DocumentProperties at the specified index
    setState(() {
      documentPropertiesList.insert(index, newDoc);

      // Update the pageNumberController for the entire list to match the new sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }
    });

    print('Updated documentPropertiesList: $documentPropertiesList');

    // Update the LayoutModel and save the new list
    lm?.docPropsList = docPropToBox(documentPropertiesList);
    lm?.save();
    print('in addPage after adding to box: ${lm?.docPropsList}');

    // Create a new SheetList instance
    SheetList newSheetList = SheetList(
        id: id,
        parentId: lm?.id??'yo',
        sheetList: [],
        listDecoration: newDecoration.id,
        indexPath: IndexPath(index:-1)
        );

    // Add the new SheetList at the specified index
    setState(() {
      spreadSheetList.insert(index, newSheetList);
      _reassignSpreadSheetIndexPath(spreadSheetList);
    });

    lm?.spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm?.save();

    // Update the selectedIndex list at the specified index
    setState(() {
      // print('pageCount in addPage after: $pageCount');
      // selectedIndex.insert(index, SelectedIndex(id: id, selectedIndexes: []));
      // print('id: $id');
      // print(selectedIndex);
      panelIndex.id='';
      panelIndex.parentId='';
    });
  }

  void _movePage(int currentIndex, int targetIndex) {
    setState(() {
      if (currentIndex < 0 ||
          currentIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex >= documentPropertiesList.length ||
          currentIndex == targetIndex) {
        return;
      }

      final movedDocument = documentPropertiesList.removeAt(currentIndex);
      documentPropertiesList.insert(targetIndex, movedDocument);

      final movedSheet = spreadSheetList.removeAt(currentIndex);
      spreadSheetList.insert(targetIndex, movedSheet);

      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      currentPageIndex = targetIndex;
      panelIndex.id='';
      panelIndex.parentId='';
      _reassignSpreadSheetIndexPath(spreadSheetList);

    });
  }

  void _duplicatePage(int sourceIndex, int targetIndex) {
    setState(() {
      if (sourceIndex < 0 ||
          sourceIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex > documentPropertiesList.length) {
        return; // Invalid operation
      }

      // Duplicate documentProperties
      DocumentProperties duplicatedDocument = DocumentProperties(
        pageNumberController: TextEditingController(
            text: (targetIndex + 1).toString()), // Set initial number
        marginAllController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginAllController.text),
        marginLeftController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginLeftController.text),
        marginRightController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginRightController.text),
        marginBottomController: TextEditingController(
            text: documentPropertiesList[sourceIndex]
                .marginBottomController
                .text),
        marginTopController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginTopController.text),
        orientationController:
            documentPropertiesList[sourceIndex].orientationController,
        pageFormatController:
            documentPropertiesList[sourceIndex].pageFormatController,
      );

      // Insert the duplicated document at the target index
      documentPropertiesList.insert(targetIndex, duplicatedDocument);

      // Duplicate spreadSheet data
      SheetList duplicatedSheetList = SheetList(
          id:'LI-${ const Uuid()
                                .v4()}', // Assign a new unique ID
          parentId: spreadSheetList[sourceIndex].parentId,
          sheetList: List.from(spreadSheetList[sourceIndex].sheetList),
          listDecoration: 
              spreadSheetList[sourceIndex].listDecoration,
          indexPath: spreadSheetList[sourceIndex].indexPath
              );

      // Insert the duplicated sheet at the target index
      spreadSheetList.insert(targetIndex, duplicatedSheetList);

      // Increment page count
      pageCount++;

      // Reassign pageNumberController.text to reflect the updated sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      // Update currentPageIndex to the new duplicate's location
      currentPageIndex = targetIndex;

      // Update panelIndex for the newly duplicated page
      
      panelIndex.id='';
      panelIndex.parentId='';
      _reassignSpreadSheetIndexPath(spreadSheetList);
    });
  }

  void _reassignSpreadSheetIndexPath(List<SheetList> spreadSheetList) {

    for (int i = 0; i < spreadSheetList.length; i++) {
      setState(() {
        spreadSheetList[i].indexPath.index =i;
      });
    }
    
  }

  void _reassignSheetListIndexPath(SheetList sheetList){
    
    for (var i = 0; i < sheetList.length; i++) {
      setState(() {
        sheetList[i].indexPath.index = i;
      });
    }
  }
  
  List<SheetItem> _reassignSheetListTreeIndexPath(List<SheetItem> items, [IndexPath? parent]) {
    for (int i = 0; i < items.length; i++) {
      final item = items[i];
      final indexPath = IndexPath(parent: parent, index: i);
      item.indexPath = indexPath;

      if (item is SheetText) {
        // Just assign the indexPath; nothing recursive here
        item.indexPath = indexPath;

      } else if (item is SheetList) {
        _reassignSheetListTreeIndexPath(item.sheetList, indexPath);

      } else if (item is SheetTable) {
        item.indexPath = indexPath;

        for (int row = 0; row < item.cellData.length; row++) {
          for (int col = 0; col < item.cellData[row].length; col++) {
            final cell = item.cellData[row][col];

            // Assign to cell (row level)
            cell.indexPath = IndexPath(parent: indexPath, index: row);

            // Assign to actual content inside the cell (col level)
            cell.sheetItem.indexPath = IndexPath(parent: cell.indexPath, index: col);

            // Recursively apply if cell contains a SheetList or SheetTable
            if (cell.sheetItem is SheetList) {
              _reassignSheetListTreeIndexPath(
                (cell.sheetItem as SheetList).sheetList,
                cell.sheetItem.indexPath,
              );
            } else if (cell.sheetItem is SheetTable) {
              _reassignSheetListTreeIndexPath(
                [cell.sheetItem],
                cell.sheetItem.indexPath,
              );
            } else if (cell.sheetItem is SheetText) {
              // Also reassign indexPath to the nested SheetText if any
              cell.sheetItem.indexPath = cell.sheetItem.indexPath;
            }
          }
        }
      }
    }
    return items;
  }

  Future<void> _capturePng({double pixelRatio =7.0}) async {
    setState(() {
      _images = [];
    });
    try {
      for (var v = 0; v < globalKeys.length; v++) {
        print(globalKeys[v].toString());
        RenderRepaintBoundary? boundary = globalKeys[v]
            .currentContext
            ?.findRenderObject() as RenderRepaintBoundary?;
        if (boundary == null) {
          print("Boundary is null");
          return;
        }
        ui.Image image = await boundary.toImage(pixelRatio: pixelRatio);
        ByteData? byteData =
            await image.toByteData(format: ui.ImageByteFormat.png);
        if (byteData == null) {
          print("ByteData is null");
          return;
        }
        Uint8List pngBytes = byteData.buffer.asUint8List();
        // _images.clear();
        setState(() {
          _images.add(pngBytes);
        });
        print('image added');
      }
      print(_images.length);
      // WidgetsBinding.instance.addPostFrameCallback((_) async {

      // });
      // _genPdf();
    } catch (e) {
      print(e);
    }
  }

  Future<Uint8List?> captureImageAsPng(int index) async {
    try {
      RenderRepaintBoundary? boundary = globalKeys[index]
          .currentContext
          ?.findRenderObject() as RenderRepaintBoundary?;

      if (boundary == null) {
        print("Boundary is null");
        return null;
      }

      ui.Image image = await boundary.toImage(pixelRatio: 1.0);
      ByteData? byteData =
          await image.toByteData(format: ui.ImageByteFormat.png);

      if (byteData == null) {
        print("ByteData is null");
        return null;
      }

      Uint8List pngBytes = byteData.buffer.asUint8List();
      return pngBytes;
    } catch (e) {
      print("Error capturing image: $e");
      return null;
    }
  }

  Future<void> _renderPagePreviewOnProperties() async {
    try {
      await WidgetsBinding.instance.endOfFrame;
      await Future.delayed(Duration(milliseconds: 16));
      Uint8List? newImage = await captureImageAsPng(currentPageIndex);
      if (newImage != null) {
        setState(() {
          cachedImageData = newImage;
          hasRenderedOnce = true; // Mark as rendered
        });
      }
    } catch (e) {
      debugPrint("Error capturing image: $e");
    }
  }

  Future<void> _genPdf() async {
    final pdf = pw.Document();

    for (var img in _images) {
      final image = pw.MemoryImage(img);
      pdf.addPage(
        pw.Page(
          margin: const pw.EdgeInsets.all(0),
          orientation: documentPropertiesList[_images.indexOf(img)].orientationController,
          pageFormat: documentPropertiesList[_images.indexOf(img)].pageFormatController,
          build: (pw.Context context) => pw.Center(child: pw.Image(image)),
        ),
      );
    }

    final Uint8List pdfBytes = await pdf.save();

    // 🔽 Show native "Save As" dialog
    final FileSaveLocation? path = await getSaveLocation(
      suggestedName: '${layoutName.text}.pdf',
      acceptedTypeGroups: [
        const XTypeGroup(
          label: 'PDF files',
          extensions: <String>['pdf'],
        )
      ]
      );

    if (path != null) {
      final file = XFile.fromData(
        pdfBytes,
        mimeType: 'application/pdf',
      );

      await file.saveTo(path.path);
      print("PDF saved at: $path");
    } else {
      print("User canceled save dialog");
    }
  }

  Future<void> _printPdf() async {
    final pdf = pw.Document();

    for (var img in _images) {
      final image = pw.MemoryImage(img);
      final index = _images.indexOf(img);

      pdf.addPage(
        pw.Page(
          margin: pw.EdgeInsets.zero,
          orientation: documentPropertiesList[index].orientationController,
          pageFormat: documentPropertiesList[index].pageFormatController,
          build: (context) => pw.Center(child: pw.Image(image)),
        ),
      );
    }

    await Printing.layoutPdf(
      onLayout: (format) => pdf.save(),
    );
  }

  void updateBox() {
    var lmBox = Boxes.getLayouts();
    var lm = lmBox.get(key);
    lm?.docPropsList = docPropToBox(documentPropertiesList);
    lm?.spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm?.save();
  }

  void _checkLayoutName() {
    var layouts =
        Boxes.getLayouts().values.map((layout) => layout.name).toList();
    setState(() {
      nameExists = layouts.contains(layoutName.text);
    });
  }

  void _onFieldFocusChange(bool hasFocus) {
    if (!hasFocus && nameExists) {
      layoutName.text = initialLayoutName;
      setState(() {
        nameExists = false;
      });
    } else {
      Boxes.getLayouts().get(key)?.name = layoutName.text;
      Boxes.getLayouts().get(key)?.save();
    }
  }

  Future<void> fetchFonts() async {
    final url = Uri.parse(
      "https://www.googleapis.com/webfonts/v1/webfonts?key=$googleFontsApiKey",
    );
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final fonts = data['items'];

      // Classify fonts into categories
      final Map<String, List<String>> tempCategories = {};
      for (var font in fonts) {
        final String category = font['category'];
        final String fontName = font['family'];

        if (!tempCategories.containsKey(category)) {
          tempCategories[category] = [];
        }
        tempCategories[category]!.add(fontName);
      }

      setState(() {
        categorizedFonts = tempCategories;
        // prnt(categorizedFonts);
      });
    } else {
      print('Failed to fetch fonts: ${response.statusCode}');
    }
  }

  void _findItem() {
    print('findItem called');
    try {
      item = getItemAtPath(panelIndex.itemIndexPath) as SheetText;
          // _sheetItemIterator(panelIndex.id, spreadSheetList[currentPageIndex])
          //     as SheetText;
      
        if (HardwareKeyboard.instance.isShiftPressed || HardwareKeyboard.instance.isControlPressed) {
          if (selectedIndexPaths[item.id] == null) {
            selectedIndexPaths.addAll({
              item.id: panelIndex.copyWith(),
            });
          }
        } else {
          selectedIndexPaths = {
            item.id: panelIndex.copyWith(),
          };
        }
      
      setState(() {
        if(whichPropertyTabIsClicked != 2){
          whichPropertyTabIsClicked = 2;
        }
        
      // prnt(selectedIndexPaths);
      // var tmpinx = int.tryParse(item.textDecoration.id.substring(item.textDecoration.id.indexOf('/') + 1))??-111;
      if (item.textDecoration.id == 'yo' || sheetDecorationMap[item.textDecoration.id] == null) { // so we are reassigning the decoration variables to null if id is 'yo'.
        textDecorationNameController.text = '[Unassigned]';
        decorationIndex = -1;
        updateSheetDecorationvariables(sheetDecorationMap[item.textDecoration.id] as SuperDecoration?);
      } else {
        textDecorationNameController.text = sheetDecorationMap[item.textDecoration.id]!.name;
        decorationIndex = -1;
        updateSheetDecorationvariables(sheetDecorationMap[item.textDecoration.id] as SuperDecoration?);
      }

      // if (// inputBlockExpansionList.length != item.inputBlocks.length) {
      //   // inputBlockExpansionList = List.generate(item.inputBlocks.length, (e)=>false);
      // }
      selectedInputBlocks = item.inputBlocks;
      textDecorationPath =[item.textDecoration.id];
    });
    } on Exception catch (e) {
      setState(() {
      item = SheetText(id: 'yo', parentId: '', textDecoration: SuperDecoration(id:'yo'),name:'unlabeled',
            hide:true,indexPath: IndexPath(index:-1));
      panelIndex.id = '';
      panelIndex.itemIndexPath = IndexPath(index:-1);
      selectedIndexPaths = {};
      print(selectedIndexPaths);
      print('findItem? Yeah not found.'+e.toString());
    });
    } finally{
      print(selectedIndexPaths);
    }
    
  }

  void _findSheetListItem() {
    try {
      if (panelIndex.parentId.startsWith('LI')) {
        // sheetListItem = _sheetListIterator(
        //     panelIndex.parentId, spreadSheetList[currentPageIndex]);
        sheetListItem = getItemAtPath(panelIndex.parentIndexPath!) as SheetList;
            // prnt('sheetDecorationVariables hello.');
            // prnt(sheetListItem.parentId);
        
          if (HardwareKeyboard.instance.isShiftPressed || HardwareKeyboard.instance.isControlPressed) {
            if (selectedIndexPaths[sheetListItem.id] == null)  {
                selectedIndexPaths.addAll({
                sheetListItem.id: panelIndex.copyWith(),
                });
              }
          } else {
            selectedIndexPaths = {
            sheetListItem.id: panelIndex.copyWith(),
            };
          }
        
      setState(() {
        // var tmpinx = int.tryParse(sheetListItem.listDecoration.id.substring(sheetListItem.listDecoration.id.indexOf('/') + 1))??-111;
        if (sheetListItem.listDecoration == 'yo' || sheetDecorationMap[sheetListItem.listDecoration] == null) { // so we are reassigning the decoration variables to null if id is 'yo'.
        listDecorationNameController.text = '[Unassigned]';
        decorationIndex = -1;
        updateSheetDecorationvariables(sheetDecorationMap[sheetListItem.listDecoration] as SuperDecoration?);
        } else {
        listDecorationNameController.text = sheetDecorationMap[sheetListItem.listDecoration]!.name;
        decorationIndex = -1;
        updateSheetDecorationvariables(sheetDecorationMap[sheetListItem.listDecoration] as SuperDecoration);
        }
        // prnt('sheetDecorationVariables initiated.');
        // prnt(sheetListItem.listDecoration.id);
        // prnt(sheetListItem.listDecoration.itemDecorationList);
        // prnt(sheetDecorationVariables);
        // prnt(sheetDecorationVariables[0].isExpanded);
        listDecorationPath = [sheetListItem.listDecoration];
      });    
      } else {
       
      }
    } on Exception catch (e) {
      sheetListItem = spreadSheetList[currentPageIndex];
    }
    
  }

  void _findSheetTableItem(SheetTable? sheetTable,{ bool updateVariables = true }){
    
    setState(() {
        if (sheetTable == null) {
          try {
            sheetTable =  getItemAtPath(panelIndex.parentIndexPath!) as SheetTable;
            // _sheetTableIterator(panelIndex.parentId, spreadSheetList[currentPageIndex])!;
            
            try {
              _findItem();
            } on Exception catch (e) {
              print('sheetitem not found');
              
            }
          } on Exception catch (e) {
            print('sheettable not found');
            return;
          }
        }
        // var tmpinx = int.tryParse(sheetTable!.sheetTableDecoration.id.substring(sheetTable!.sheetTableDecoration.id.indexOf('/') + 1))??-42;
        // var tmpbginx = int.tryParse(sheetTable!.sheetTablebgDecoration.id.substring(sheetTable!.sheetTablebgDecoration.id.indexOf('/') + 1))??-42;
        // var rwinx = int.tryParse(sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.substring(sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.indexOf('/') + 1))??-42;
        // var clinx = int.tryParse(sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.substring(sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.indexOf('/') + 1))??-42;
        sheetTableItem = sheetTable!;
        
        if (HardwareKeyboard.instance.isShiftPressed || HardwareKeyboard.instance.isControlPressed) {
          if (selectedIndexPaths[sheetTableItem.id] == null)  {
            selectedIndexPaths.addAll({
              sheetTableItem.id: panelIndex.copyWith(),
            });
          }
        } else {
          selectedIndexPaths = {
            sheetTableItem.id: panelIndex.copyWith(),
          };
        }
        
        panelIndex.parentId = sheetTable!.id;
        panelIndex.parentIndexPath = sheetTable!.indexPath;
        whichPropertyTabIsClicked = 4;
        decorationIndex=-1;
        if(updateVariables) updateSheetTableVariables(sheetTable!);
        tableDecorationNameController.text = sheetDecorationMap[sheetTable!.sheetTableDecoration.id]!.name;
        tableDecorationPath..clear()..add(sheetTable!.sheetTableDecoration.id);
        tablebgDecorationNameController.text = sheetDecorationMap[sheetTable!.sheetTablebgDecoration.id]!.name;
        tablebgDecorationPath..clear()..add(sheetDecorationMap[sheetTable!.sheetTablebgDecoration.id]!.id);
        rowDecorationNameController.text = sheetDecorationMap[sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration]!.name; 
        rowDecorationPath..clear()..add(sheetDecorationMap[sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration]!.id); 
        columnDecorationNameController.text = sheetDecorationMap[sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration]!.name;   
        columnDecorationPath..clear()..add(sheetDecorationMap[sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration]!.id);
        
         switch (whichTableDecorationIsClicked) {
          case 0:
            updateSheetDecorationvariables(sheetDecorationMap[sheetTable!.sheetTableDecoration.id] as SuperDecoration);
            break;
          case 1:
            updateSheetDecorationvariables(sheetDecorationMap[sheetTable!.sheetTablebgDecoration.id] as SuperDecoration);
            break;
          case 2:
            updateSheetDecorationvariables(sheetDecorationMap[sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration]! as SuperDecoration);
            break;
          case 3:
            updateSheetDecorationvariables(sheetDecorationMap[sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration]! as SuperDecoration);
            break;
          default:
        }
        
        if (item.parentId == sheetTableItem.id) {
          var (row, col) = parseCellId(item.name);
          // print(row);
          // print(col);
          sheetTableVariables.rowLayerIndex = row;
          sheetTableVariables.columnLayerIndex = col;
        }
        
      });
  }

  void updateSheetDecorationvariables(SuperDecoration? superDecoration){
    setState((){
      if (superDecoration == null) {
        sheetDecorationVariables = [];
        return;
      }
      sheetDecorationVariables = superDecoration.itemDecorationList.map((ex) {
        // var tmpinx = int.tryParse(ex.substring(ex.indexOf('/') + 1))??-42;
        return SheetDecorationVariables(
          id:ex,
          isExpanded: true,
          marginFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listPaddingFocusNodes : List.generate( 5,(index) => FocusNode(),),
          colorHexFocusNodes : List.generate( 2,(index) => FocusNode(),),
          borderFocusNodes : List.generate( 3,(index) => FocusNode(),),
          borderRadiusFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listBorderFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listShadowFocusNodes :sheetDecorationMap[ex]!.id =='yo'
          ?[ List.generate( 5,(index) => FocusNode(),)]
          : List.generate(sheetDecorationMap[ex] is ItemDecoration
            ? (sheetDecorationMap[ex] as ItemDecoration).decoration.boxShadow?.length??1
            : 1,
          (i) {
            return List.generate( 5,(index) => FocusNode(),);
          },
        ),
        listImageAlignFocusNodes : [FocusNode(), FocusNode()],
        listImagePropertyFocusNodes : [FocusNode(), FocusNode()],
        listShadowLayerSelectedIndex : 0,
        colorHexFocusNodes2 : List.generate( 2,(index) => FocusNode(),),
        borderFocusNodes2 : List.generate( 3,(index) => FocusNode(),),
        borderRadiusFocusNodes2 : List.generate( 5,(index) => FocusNode(),),
        listBorderFocusNodes2 : List.generate( 5,(index) => FocusNode(),),
        listShadowFocusNodes2 :sheetDecorationMap[ex]!.id =='yo'
        ?[ List.generate( 5,(index) => FocusNode(),)]
        : List.generate(sheetDecorationMap[ex] is ItemDecoration
          ? (sheetDecorationMap[ex] as ItemDecoration).decoration.boxShadow?.length??1
          : 1,
        (i) {
          return List.generate( 5,(index) => FocusNode(),);
        },
        ),
        listImageAlignFocusNodes2 : [FocusNode(), FocusNode()],
        listImagePropertyFocusNodes2 : [FocusNode(), FocusNode()],
        listShadowLayerSelectedIndex2 : 0,
        listTransformFocusNodes: List.generate(16, (c)=>FocusNode())

        );
      },).toList();
    // pint(sheetDecorationVariables[0].listShadowFocusNodes2.toString());
    });
  }
  
  void updateSheetTableVariables(SheetTable sheetTable){
    sheetTableVariables = SheetTableVariables();
  }

  void resetPanelIndex() => setState((){
    panelIndex.id ='';
    panelIndex.parentId = '';
    panelIndex.itemIndexPath = IndexPath(index: -2);
    panelIndex.parentIndexPath = IndexPath(index: -2);
    whichPagePropertyIsClicked = 1;
  });

  Future<void> _unfocusAll() {
    item.focusNode.unfocus();
    item.textEditorController.editorFocusNode?.unfocus();
    return Future.delayed(Durations.medium1).then(
      (value) {
        item.focusNode.unfocus();
        item.textEditorController.editorFocusNode?.unfocus();
        if (FocusScope.of(context).hasFocus) {
          FocusScope.of(context).unfocus();
        }
      },
    );
  }

  Widget textEditorBuilder(Widget rawEditor, String newId, {
    bool isCell = false
  }){
    return Container(
      padding: const EdgeInsets.only(left: 8),
      decoration: BoxDecoration(
          // border: Border.all(color: defaultPalette.extras[0]),
          color: !isCell? defaultPalette.secondary:defaultPalette.primary,
          borderRadius: BorderRadius.circular(6)),
      child: rawEditor,
    );
  }

  void _showOverlayAt(Offset globalPosition, String s, String p) {
    // remove existing
    _overlay?.remove();
    //the overlay for table axis resize
    // create new
    _overlay = OverlayEntry(builder: (context) {
      return Positioned(
        left: globalPosition.dx,
        top: globalPosition.dy,
        child: Material(
          color: Colors.transparent,
          child: Container(
            width: 50,
            height: 35,
            alignment:Alignment(0,0),
            decoration: BoxDecoration(
              color: defaultPalette.primary,
              border:Border.all(color:defaultPalette.extras[0]),
              borderRadius:BorderRadius.circular(10)
              ),
            child:Text(p+': '+s, style: GoogleFonts.lexend(letterSpacing:-1, fontSize:12, color:defaultPalette.extras[0]))
            
          ),
        ),
      );
    });

    // insert into Overlay
    Overlay.of(context)!.insert(_overlay!);
  }

  void _hideOverlay() {
    _overlay?.remove();
    _overlay = null;
  }

  SheetItem getItemAtPath(IndexPath indexPath) {
    List<int> path = indexPath.toList();
    SheetItem? current;
    // prnt(indexPath.toString());
    notfound(){
      print('not found '+indexPath.toString());
      return SheetItem(id: 'yo', parentId: '', indexPath: IndexPath(index: -1));
    }
    int i = 0;
    while (i < path.length) {
      int index = path[i];

      if (i == 0) {
        if (index < 0 || index >= spreadSheetList.length) return notfound();
        current = spreadSheetList[index];
        i++;
      } else if (current is SheetList) {
        if (index < 0 || index >= current.sheetList.length) return notfound();
        current = current.sheetList[index];
        i++;
      } else if (current is SheetTable) {
        if (i + 1 >= path.length) {
          // If there's only one more index, we are selecting the whole table itself
          return current;
        }

        int row = path[i];
        int column = path[i + 1];

        if (row < 0 || row >= current.cellData.length) return notfound();
        if (column < 0 || column >= current.cellData[row].length) return notfound();

        current = current.cellData[row][column].sheetItem;
        i += 2;
      } else {
        return current ?? notfound(); // Hit a leaf like SheetText or similar
      }
    }

    return current ?? notfound();
  }

  QuillEditorConfigurations buildCombinedQuillConfiguration(List<InputBlock> inputBlocks, {Map<List<InputBlock>, int>? visited}) {
    final mergedDelta = Delta();
    visited ??= {};
    visited[inputBlocks] = (visited[inputBlocks] ?? 0) + 1;

    
    for (int blockIdx = 0; blockIdx < inputBlocks.length; blockIdx++) {
      if (visited[inputBlocks]! > 50) {
        mergedDelta.push(Operation.insert('recursion detected\n'));
        continue;
      }
      final block = inputBlocks[blockIdx];
      if (block.useConst == false) {
        
      }
      
      if (block.function != null) {
        var result;
        //  (block.function.runtimeType.toString()+(!block.useConst).toString());
        if(block.function is InputBlockFunction && !block.useConst){
          // pri('elloo');
          // if (visited == null) visited = {};
          // visited[block.id] = (visited[block.id] ?? 0) + 1;

          // if (visited[block.id]! > 50) {
          //   mergedDelta.push(Operation.insert('recursion detected\n'));
          //   continue;
          // }

          final config = (block.function as InputBlockFunction)
              .getConfigurations(buildCombinedQuillConfiguration, visited: visited==null?null:Map<List<InputBlock>, int>.from(visited));
          final ops = config.controller.document.toDelta().toList();
          final isLastBlock = blockIdx == inputBlocks.length - 1;

          if (!isLastBlock && ops.isNotEmpty) {
            final last = ops.last;
            if (last.data is String) {
              final String data = last.data as String;
              if (data == '\n') {
                ops.removeLast();
              } else if (data.endsWith('\n')) {
                final trimmed = data.substring(0, data.length - 1);
                ops[ops.length - 1] = Operation.insert(trimmed, last.attributes);
              }
            }
          }

          for (final op in ops) {
            mergedDelta.push(op);
          }

        } else if (block.function is! InputBlockFunction) {
          final raw = block.function!
              .result(getItemAtPath, buildCombinedQuillConfiguration, visited: Map.from(visited!));

          // 1) If it’s a Quill Document, pull in its Delta ops (with styling!)
          if (raw is Document) {
            final docDelta = raw.toDelta().toList();
            // drop a trailing newline if you’re not the last block
            final isLast = blockIdx == inputBlocks.length - 1;
            for (var op in docDelta) {
              if (!isLast && op.data is String && (op.data as String).endsWith('\n')) {
                final txt = (op.data as String).substring(0, (op.data as String).length - 1);
                mergedDelta.push(Operation.insert(txt, op.attributes));
              } else {
                mergedDelta.push(op);
              }
            }
          }
          // 2) Otherwise if it’s a number or string, just insert as before
          else if (raw is num || raw is String) {
            final txt = raw.toString();
            if (blockIdx == inputBlocks.length - 1) {
              mergedDelta.push(Operation.insert('$txt\n'));
            } else {
              mergedDelta.push(Operation.insert(txt));
            }
          }

          // 3) Optional back-patch into the cell, unchanged
          if (block.indexPath.index != -77) {
            final target = getItemAtPath(block.indexPath);
            if (target is SheetText) {
              final ctl = target.textEditorConfigurations.controller;
              WidgetsBinding.instance.addPostFrameCallback((_) {
                ctl.replaceText(
                  0,
                  ctl.document.length - 1,
                  raw is Document ? raw.toPlainText() : raw.toString(),
                  TextSelection.collapsed(offset: raw is Document
                      ? raw.toPlainText().length
                      : raw.toString().length),
                );
              });
            }
          }

          continue;
        }


        // Optional back-patching
         // Skip normal SheetText processing for function-driven blocks
      }
      if((getItemAtPath(block.indexPath).id == 'yo' || getItemAtPath(block.indexPath).id != block.id) && block.function == null){
          // prnt('this should be running');
          var blkindexPath = _sheetItemIterator(block.id, spreadSheetList[currentPageIndex],shouldReturn: true).indexPath;
          block.indexPath.parent = blkindexPath.parent;
          block.indexPath.index = blkindexPath.index;
          if(block.indexPath.index ==-42){
            inputBlocks.removeAt(blockIdx);
            if (blockIdx == inputBlocks.length) {
              mergedDelta.insert('\n');
              continue;
            }
          }
          
      }

      

      final item = getItemAtPath(block.indexPath);
      if (item is SheetText && block.useConst) {
        final delta = item.textEditorConfigurations.controller.document.toDelta();
        final ops = delta.toList();
        // Determine if this is the last block
        final isLastBlock = blockIdx == inputBlocks.length - 1;

        // Clean up trailing \n only if not last block
        if (!isLastBlock && ops.isNotEmpty) {
          final last = ops.last;
          if (last.data is String) {
            final String data = last.data as String;
            if (data == '\n') {
              // This block only contains a newline, and it's not the last one → remove it.
              ops.removeLast();
            } else if (data.endsWith('\n')) {
              final trimmed = data.substring(0, data.length - 1);
              ops[ops.length - 1] = Operation.insert(trimmed, last.attributes);
            }
          }
        }


        // Push operations
        if (block.blockIndex.isNotEmpty && block.blockIndex.first == -2) {
          for (final op in ops) {
            mergedDelta.push(op);
          }
        } else {
          for (final i in block.blockIndex) {
            if (i >= 0 && i < ops.length) {
              mergedDelta.push(ops[i]);
            }
          }
        }
      }
    }

    if (inputBlocks.isEmpty) mergedDelta.insert('\n');
    if (mergedDelta.isEmpty) mergedDelta.insert('\n');
    if (!(mergedDelta.last.data as String).endsWith('\n')) mergedDelta.insert('\n');

    return QuillEditorConfigurations(
      controller: QuillController(
        document: Document.fromDelta(mergedDelta),
        selection: const TextSelection.collapsed(offset: 0),
        readOnly: true,
        onSelectionChanged: (_) => setState(() {}),
        onReplaceText: (_, __, ___) {
          setState(() {});
          return false;
        },
        onSelectionCompleted: () => setState(() {}),
        onDelete: (_, __) => setState(() {}),
      ),
      scrollable: false,
      showCursor: false,
      enableInteractiveSelection: false,
      enableSelectionToolbar: false,
      requestKeyboardFocusOnCheckListChanged: false,
      disableClipboard: true,
      customStyleBuilder: customStyleBuilder,
    );
  }

  Widget toolBarButton(IconData icon, String text, {
    double iconSize = 20,
    Color iconColor = Colors.black,
    Color fontColor = Colors.black,
    double fontSize = 12,
    double letterSpacing = -1,
    void Function()? onTap,
    String tooltip ='add item',
    Color hoverColor = const Color(0xff4caf50),
  } ) {
    return  Tooltip(
      message: tooltip,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color:defaultPalette.primary,
        border: Border.all(),
      ),
      textStyle: GoogleFonts.lexend(
        color: defaultPalette.extras[0], 
        fontSize: 14,
        letterSpacing: letterSpacing,
        fontWeight: FontWeight.w600,
      ),
      child: Material(
        color:defaultPalette.primary,
        child: InkWell(
          hoverColor: hoverColor,
          splashColor: hoverColor, 
          highlightColor: hoverColor, 
          onTap: onTap ?? () {},
          child: Padding(
            padding: const EdgeInsets.all(4.0).copyWith(bottom:4, top:4),
            child: Row(
              mainAxisAlignment:MainAxisAlignment.center,
              children: [
                Icon(
                  icon,
                  size:  18,
                  color: iconColor
                ),
                // Expanded(
                //   child: Text(
                //     ' ${text}',
                //     textAlign: TextAlign.start,
                //     style: GoogleFonts.lexend(
                //       color: fontColor, 
                //       fontSize: fontSize,
                //       letterSpacing: letterSpacing,
                //       fontWeight: FontWeight.w600,
                //     ),
                //   ),
                // ),
              ],
            ),
          ),
        ),
      ),
    );
  }


  ////BUUILDDDDDDDD
  ///BUILDDDDD
  ///BUILDDDDDDD
  @override
  Widget build(BuildContext context) {
    // prit('________BUILD LAYOUT STARTED LD_________');
    double sHeight = MediaQuery.of(context).size.height;
    double sWidth = MediaQuery.of(context).size.width;
    Duration defaultDuration = const Duration(milliseconds: 300);
    // prit('Height of SpreadSheet in build: '+ (sHeight-40).toString());
    if (isLoading) {
      return Scaffold(
        backgroundColor: defaultPalette.tertiary,
    body: Center(
      child: LoadingAnimationWidget.newtonCradle(
        color: Colors.white,
        size: 150,
      ),
    ),);
    }
    if (true) {
      //Desktop WEB
      return Scaffold(
          resizeToAvoidBottomInset: false,
          body: SafeArea(
            child: EyeDropper(
              child: Container(
                color: defaultPalette.white,
                child: Stack(
                  children: [
                    Container(
                      height: sHeight,
                      width: sWidth,
                      color: Colors.transparent,
                    ),
                    Positioned(
                      // duration: Duration(milliseconds: 300),
                      width: sWidth,
                      height: sHeight,
                      child: Stack(
                        children: [
                          // Graph //Desktop Behind the emulating preview
                          IgnorePointer(
                            ignoring: true,
                            child: AnimatedContainer(
                              duration: Durations.extralong1,
                              height: sHeight,
                              width: sWidth,
                              alignment: Alignment.centerRight,
                              decoration: BoxDecoration(
                                color: Colors.grey.withOpacity(0.2),
                              ),
                              padding: const EdgeInsets.only(
                                top: 0,
                              ),
                              //layGraph
                              child: Opacity(
                                opacity: 0.35,
                                child: LineChart(LineChartData(
                                    lineBarsData: [LineChartBarData()],
                                    titlesData: const FlTitlesData(show: false),
                                    gridData: FlGridData(
                                        show: true,
                                        getDrawingVerticalLine: (value) => FlLine(
                                            color: defaultPalette.extras[0]
                                                .withOpacity(0.5),
                                            dashArray: [5, 5],
                                            strokeWidth: 1),
                                        getDrawingHorizontalLine: (value) => FlLine(
                                            color: defaultPalette.extras[0]
                                                .withOpacity(0.5),
                                            dashArray: [5, 5],
                                            strokeWidth: 1),
                                        horizontalInterval: 10,
                                        verticalInterval: 30),
                                    borderData: FlBorderData(show: false),
                                    minY: 0,
                                    maxY: 50,
                                    maxX: dateTimeNow.millisecondsSinceEpoch
                                                .ceilToDouble() /
                                            500 +
                                        250,
                                    minX: dateTimeNow.millisecondsSinceEpoch
                                            .ceilToDouble() /
                                        500)),
                              ),
                            ),
                          ),
                          //sidebar tools and pdf preview //Desktop WEB
                          Positioned(
                            top: 0,
                            width: sWidth,
                            height: sHeight,
                            child: Row(
                              children: [
                                ///////Side TOOL BAR
                                Container(
                                  height: sHeight,
                                  width: 45,
                                  color: defaultPalette.white,
                                  ///////Side TOOL BAR
                                  child: Column(
                                    children: [
                                      Padding(
                                        padding: EdgeInsets.only(top:50, left:4,right:3),
                                        child:Text(
                                          'text',
                                          style: GoogleFonts.lexend(
                                            color:defaultPalette.tertiary,
                                            fontSize: 12,
                                            letterSpacing: -0.5,
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                        ),
                                      SizedBox(height:2),
                                      toolBarButton(TablerIcons.cursor_text, 'text',
                                      fontSize: 12,
                                      iconSize: 15,
                                      tooltip:'add a text field',
                                      onTap: () {
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //num
                                      toolBarButton(TablerIcons.numbers, 'num',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a number field. \nThis will allow the input of a single real number.',
                                      onTap: () {
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.number,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //int
                                      toolBarButton(TablerIcons.number_123, 'int',
                                      fontSize: 12,
                                      iconSize: 15,
                                      tooltip: 'add an integer field. \nThis will allow the input of a single integer.',
                                      onTap: () {
                                        print( '________addText pressed LD_________');
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.integer,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //bool
                                      toolBarButton(TablerIcons.circuit_switch_open, 'bool',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a boolean field. \nThis allows binary true or false input.',
                                      onTap: () {
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.bool,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //date
                                      toolBarButton(TablerIcons.calendar_event, 'date',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a date field. \nThis field comes with a date-picker. \nThis allows text input and tries to extract the date.',
                                      onTap: () {
                                        print( '________addText pressed LD_________');
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.date,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //time
                                      toolBarButton(TablerIcons.clock_hour_4, 'time',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a time field. \nThis field comes with a time-picker. \nThis allows text input and tries to extract the time.',
                                      onTap: () {
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.time,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      //phone
                                      toolBarButton(TablerIcons.phone, 'phone',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a telephone field. \nThis allows non-alphabet input. \nThis comes with a country code browser.',
                                      onTap: () {
                                        var newId = 'TX-${Uuid().v4()}';
                                        _addTextField(
                                          id: newId,
                                          textDecoration: newSuperDecoration(),
                                          type: SheetTextType.phone,
                                          indexPath: IndexPath(
                                            parent: spreadSheetList[currentPageIndex].indexPath,
                                            index: spreadSheetList[currentPageIndex].length),
                                            inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2], id: newId)],
                                          );
                                      },
                                      ),
                                      
                                      Padding(
                                        padding: EdgeInsets.only(top:4, left:4,right:3),
                                        
                                        // child: Icon(
                                        //   TablerIcons.txt,
                                        // ),
                                        child: Text(
                                          ' list ',
                                          style: GoogleFonts.lexend(
                                            color: defaultPalette.tertiary, 
                                            fontSize: 12,
                                            letterSpacing: -0.5,
                                            fontWeight: FontWeight.w600,
                                          ),
                                        )
                                        ),
                                      const SizedBox(height:2),
                                      //row
                                      toolBarButton(TablerIcons.dots, 'row',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a horizontal list.',
                                      hoverColor: defaultPalette.extras[1],
                                      onTap: (){
                                        setState(() {
                                          String newId = 'LI-${ const Uuid().v4()}';
                                            var newDecoration = newSuperDecoration();
                                            var newIndexPath = IndexPath(
                                                  parent: spreadSheetList[currentPageIndex].indexPath,
                                                  index: spreadSheetList[currentPageIndex].length);
                                          print(newIndexPath.toString());
                                          spreadSheetList[currentPageIndex].add(
                                            SheetList(
                                              id:newId, 
                                              parentId: spreadSheetList[currentPageIndex].id, 
                                              direction: Axis.horizontal,
                                              indexPath: newIndexPath, 
                                              sheetList: [], 
                                              listDecoration: newDecoration.id),
                                          );
                                          // _reassignSheetListIndexPath((spreadSheetList[currentPageIndex]));
                                        });
                                      }, 
                                      ),
                                      //column
                                      toolBarButton(TablerIcons.dots_vertical, 'col',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a vertical list.',
                                      hoverColor: defaultPalette.extras[1],
                                      onTap: (){
                                        setState(() {
                                          String newId = 'LI-${ const Uuid().v4()}';
                                            var newDecoration = newSuperDecoration();
                                            var newIndexPath = IndexPath(
                                                  parent: spreadSheetList[currentPageIndex].indexPath,
                                                  index: spreadSheetList[currentPageIndex].length);
                                          print(newIndexPath.toString());
                                          spreadSheetList[currentPageIndex].add(
                                            SheetList(
                                              id:newId, 
                                              parentId: spreadSheetList[currentPageIndex].id, 
                                              direction: Axis.horizontal,
                                              indexPath: newIndexPath, 
                                              sheetList: [], 
                                              listDecoration: newDecoration.id),
                                          );
                                          // _reassignSheetListIndexPath((spreadSheetList[currentPageIndex]));
                                        });
                                      }, 
                                      ),
                                      
                                      Padding(
                                        padding:EdgeInsets.only(top:4, left:4,right:3),
                                       
                                        child: Text(
                                          ' table ',
                                          style: GoogleFonts.lexend(
                                            color: defaultPalette.tertiary, 
                                            fontSize: 12,
                                            letterSpacing: -0.5,
                                            fontWeight: FontWeight.w600,
                                          ),
                                        )
                                        ),
                                      const SizedBox(height:2),
                                      //table
                                      toolBarButton(TablerIcons.table, 'table',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add a table.',
                                      hoverColor: defaultPalette.extras[3],
                                      onTap: () {
                                          setState(() {
                                            final tid   = 'TB-${Uuid().v4()}';
                                            final deco  = newSuperDecoration(placeholder: false);
                                            final ipath = IndexPath(
                                              parent: spreadSheetList[currentPageIndex].indexPath,
                                              index:  spreadSheetList[currentPageIndex].length,
                                            );

                                            spreadSheetList[currentPageIndex].add(
                                              buildDefaultTable(
                                                tableId:   tid,
                                                parentId: spreadSheetList[currentPageIndex].id,
                                                decoration: deco,
                                                indexPath:  ipath,
                                                rows:       5, // or your desired defaults
                                                cols:       8,
                                              ),
                                            );
                                          });

                                        },
                                      ),
                                      //itemTable
                                      toolBarButton(TablerIcons.logs, 'itemTable',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'add an item table with fields corresponding to the current bill type.\nFields include Item Description, Quantity, Rate, Unit, etc.',
                                      hoverColor: defaultPalette.extras[3],
                                      onTap: () {
                                          setState(() {
                                            String newId = 'TB-${ const Uuid().v4()}';
                                            var newDecoration = newSuperDecoration(placeholder: false);
                                            var newIndexPath = IndexPath(
                                                  parent: spreadSheetList[currentPageIndex].indexPath,
                                                  index: spreadSheetList[currentPageIndex].length);
                                            spreadSheetList[currentPageIndex].add(
                                              buildInvoiceTable(
                                                type: SheetType.values[lm!.type],
                                                tableId: newId, 
                                                parentId: spreadSheetList[currentPageIndex].id, 
                                                decoration: newDecoration,
                                                indexPath:  newIndexPath)
                                            );
                                          });
                                          assignIndexPathsAndDisambiguate(labelList, spreadSheetList);
                                        },
                                      ),
                                      const Expanded(child: SizedBox()),
                                      toolBarButton(TablerIcons.device_floppy, 'save',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'save the current layout. ',
                                      hoverColor: defaultPalette.secondary,
                                      onTap: () {
                                          setState(() {
                                            saveLayout();
                                          });
                                        },
                                      ),
                                      toolBarButton(TablerIcons.upload, 'export',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'export as pdf. \nChoose the path to save it.',
                                      hoverColor: defaultPalette.secondary,
                                      onTap: () async {
                                                  await _capturePng().then((onValue) {
                                                  _genPdf();
                                                });
                                                },
                                      ),
                                      toolBarButton(TablerIcons.printer, 'print',
                                      fontSize: 12,
                                      iconSize: 13,
                                      tooltip: 'print as pdf.',
                                      hoverColor: defaultPalette.secondary,
                                      onTap: () async {
                                                  await _capturePng().then((onValue) {
                                                  _printPdf();
                                                });
                                                },
                                      ),
                                      SizedBox(height:5)
                                    ] //sheetTableHeight in UI tweakin
                                  )
                                ),
                                //emulating the pdf preview //Desktop WEB
                                Expanded(
                                  flex: (20000).round(),
                                  child: Container(
                                    height: sHeight,
                                    child: zz.Zoom(
                                      centerOnScale: false,
                                      initTotalZoomOut: true,
                                      maxScale: 5,
                                      zoomSensibility: 2,
                                      // key: ValueKey(currentPageIndex),
                                      backgroundColor: defaultPalette.transparent,
                                      canvasColor: defaultPalette.transparent,
                                      transformationController:
                                          transformationcontroller,
                                      opacityScrollBars: 0,
                                      onScaleUpdate: (p0, p1) {
                                        setState(() {
                                          pdfPreviewPaddingScaleFactor = p1;
                                          // print(pdfPreviewPaddingScaleFactor);
                                        });
                                      },
                                      initScale: 0.01,
                                      child: Transform.scale(
                                        scale: 0.8,
                                        // scale: 1,
                                        alignment: Alignment.topLeft,
                                        child: Container(
                                          padding: EdgeInsets.only(
                                              bottom: 500,
                                              top: 60 *
                                                  (1 /
                                                      pdfPreviewPaddingScaleFactor),
                                              left: 40,
                                              right: 5000),
                                          decoration: BoxDecoration(
                                              color: defaultPalette.transparent),
                                          // alignment: Alignment.center,
                                          child: _generateWidWin(
                                              sWidth, sHeight * 0.9),
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          // coloredcontainer fill on right side of the screen
                          Positioned(
                            left: sWidth / 2,
                            top: 0,
                            child: Container(
                              width: sWidth / 2,
                              height: sHeight,
                              color: defaultPalette.tertiary,
                              child: IgnorePointer(
                                ignoring: true,
                                child: AnimatedContainer(
                                  duration: Durations.extralong1,
                                  height: sHeight,
                                  width: sWidth,
                                  alignment: Alignment.centerRight,
                                  decoration: BoxDecoration(),
                                  //layGraph
                                  child: Opacity(
                                    opacity: 0.35,
                                    child: LineChart(LineChartData(
                                        lineBarsData: [LineChartBarData()],
                                        titlesData:
                                            const FlTitlesData(show: false),
                                        gridData: FlGridData(
                                            getDrawingVerticalLine: (value) => FlLine(
                                                color: defaultPalette.primary
                                                    .withOpacity(0.8),
                                                dashArray: [5, 5],
                                                strokeWidth: 1),
                                            getDrawingHorizontalLine: (value) =>
                                                FlLine(
                                                    color: defaultPalette.primary
                                                        .withOpacity(0.8),
                                                    dashArray: [5, 5],
                                                    strokeWidth: 1),
                                            show: true,
                                            horizontalInterval: 5,
                                            verticalInterval: 30),
                                        borderData: FlBorderData(show: false),
                                        minY: 0,
                                        maxY: 50,
                                        maxX: dateTimeNow.millisecondsSinceEpoch
                                                    .ceilToDouble() /
                                                500 +
                                            250,
                                        minX: dateTimeNow.millisecondsSinceEpoch
                                                .ceilToDouble() /
                                            500)),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          //
                          //
                          //
                          //
                          //
                          //Spread SHEET Layout //Desktop WEB
                          Positioned(
                            left: (sWidth * wH1DividerPosition),
                            width: (sWidth *
                                (1 - wH1DividerPosition - wH2DividerPosition)).clamp(200, double.infinity),
                            // flex: ((1 - wH1DividerPosition - wH2DividerPosition) *
                            //         10000)
                            //     .round(),
                            top:  35,
                            height: sHeight - 40,
                            child: GestureDetector(
                              onTap: () {
                                _unfocusAll();
                                setState(() {
                                  // panelIndex.runTimeType = null;
                                  panelIndex.parentId = '';
                                  panelIndex.parentIndexPath = null;
                                  panelIndex.id = '';
                                  if (whichPropertyTabIsClicked !=1) {
                                  whichPropertyTabIsClicked = 1;
                                  Future.delayed(Durations.short1).then(
                                    (value) {
                                      // print("YUHUUUUUUUU");
                                      whichPropertyTabIsClicked = 1;
                                      propertyCardsController.swipeDefault();
                                    },
                                  );
                                }
                                });
                              },
                              onSecondaryTap: () {
                                print("secondary tap YUHUUUUUUUU");
                              },
                              child: CustomBorder(
                                color: defaultPalette.extras[0],
                                radius: Radius.circular(20),
                                strokeWidth: 2,
                                dashPattern: [30, 10],
                                strokeCap: StrokeCap.butt,
                                animateBorder: true,
                                dashRadius: Radius.circular(50),
                                animateDuration: Duration(milliseconds: 5500),
                                child: Container(
                                  decoration: BoxDecoration(
                                    color: defaultPalette.extras[0],
                                    borderRadius: BorderRadius.circular(20),
                                    // border: Border.all(color: defaultPalette.tertiary,strokeAlign: BorderSide.strokeAlignOutside,width: 4)
                                  ),
                                  padding: EdgeInsets.symmetric(
                                      vertical:3, horizontal: 2).copyWith(right: 0),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(15),
                                    child: Stack(
                                      children: [
                                        // Graph //Desktop WEB
                                        Positioned.fill(child: IgnorePointer(
                                            ignoring: true,
                                            child: AnimatedContainer(
                                              duration: Durations.extralong1,
                                              height: sHeight,
                                              width: sWidth,
                                              alignment: Alignment.centerRight,
                                                        
                                              padding: const EdgeInsets.only(
                                                top: 0,
                                              ),
                                              //layGraph
                                              child: Opacity(
                                                opacity: 0.35,
                                                child: LineChart(LineChartData(
                                                    lineBarsData: [
                                                      LineChartBarData()
                                                    ],
                                                    titlesData: const FlTitlesData(
                                                        show: false),
                                                    gridData: FlGridData(
                                                        getDrawingVerticalLine: (value) => FlLine(
                                                            color: defaultPalette
                                                                .primary
                                                                .withOpacity(0.2),
                                                            dashArray: [5, 5]),
                                                        getDrawingHorizontalLine:
                                                            (value) => FlLine(
                                                                color: defaultPalette
                                                                    .primary
                                                                    .withOpacity(0.2),
                                                                dashArray: [5, 5]),
                                                        show: true,
                                                        horizontalInterval: 10,
                                                        verticalInterval: 30),
                                                    borderData: FlBorderData(show: false),
                                                    minY: 0,
                                                    maxY: 50,
                                                    maxX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500 + 250,
                                                    minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                              ),
                                            ),
                                          ),),
                                        //Main SpreadSheet //Desktop WEB
                                        Positioned.fill(child: buildListWidget(spreadSheetList[currentPageIndex]))
                                        
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          //
                          //
                          /////REQUIRED FIELDS
                          Positioned(
                            left:sWidth * (1 - wH2DividerPosition),
                            bottom: 0,
                            height: (sHeight * 0.1)+10,
                            width: sWidth * (wH2DividerPosition),
                            
                            child: Stack(
                              children: [
                                //required fields card
                                Positioned.fill(
                                  child: Padding(
                                    padding: const EdgeInsets.all(6.0).copyWith(top: 10),
                                    child: Container(
                                      padding: const EdgeInsets.all(3.0).copyWith(left: 3,right:0),
                                      decoration: BoxDecoration(
                                          color: defaultPalette.primary,
                                          border:Border.all(width:2, color: defaultPalette.extras[0],),
                                          borderRadius: BorderRadius.circular(9),
                                        ),
                                      child: ClipRRect(
                                        borderRadius: BorderRadius.circular(4),
                                        child: Row(
                                            crossAxisAlignment: CrossAxisAlignment.end,
                                            children: [
                                              //the bill type display card
                                              Expanded(
                                                flex:15,
                                                child: Container(
                                                  height: (sHeight * 0.1)+10,
                                                  padding: const EdgeInsets.all(3.0).copyWith(left: 4),
                                                  alignment: Alignment(1, 1),
                                                  decoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    border:Border.all(width:1.5,color: defaultPalette.extras[0],),
                                                    borderRadius: BorderRadius.circular(9).copyWith(
                                                    bottomLeft: Radius.circular(9),
                                                    bottomRight: Radius.circular(9),
                                                  ),
                                                  ),
                                                  child:Text(
                                                  '${SheetType.values[lm!.type].name.replaceFirstMapped(RegExp(r'^[a-z]+(?=[A-Z])'), (m) => '${m[0]}\n')}  ',
                                                  maxLines:2,
                                                  overflow:TextOverflow.ellipsis,
                                                  textAlign: TextAlign.end,
                                                  style: GoogleFonts.lexend(
                                                    fontSize: mapValueDimensionBased(10, 20, sWidth, sHeight, b: false),
                                                    color: defaultPalette.primary,
                                                    letterSpacing: -0.3,
                                                    height: 1,
                                                    fontWeight: FontWeight.w700,
                                                  ),
                                                ),
                                                                        
                                                ),
                                              ),
                                              //teh horizontal layout scroll
                                              const SizedBox(width: 2,),
                                              Expanded(
                                                flex:50,
                                                child:Container(
                                                  decoration: BoxDecoration(
                                                    color: defaultPalette.primary,
                                                    borderRadius: BorderRadius.circular(7),),
                                                  child: Row(
                                                    children: [
                                                      SizedBox(width: 2,),
                                                      Expanded(
                                                        child: ScrollConfiguration(
                                                        behavior: ScrollBehavior()
                                                            .copyWith(scrollbars: false),
                                                        child: DynMouseScroll(
                                                            durationMS: 500,
                                                            scrollSpeed: 1,
                                                            builder: (context, controller, physics) {
                                                              return ScrollbarUltima(
                                                                alwaysShowThumb: true,
                                                                controller: controller,
                                                                scrollbarPosition:
                                                                    ScrollbarPosition.bottom,
                                                                backgroundColor: defaultPalette.primary,
                                                                isDraggable: true,
                                                                maxDynamicThumbLength: 90,
                                                                minDynamicThumbLength: 20,
                                                                thumbBuilder:
                                                                    (context, animation, widgetStates) {
                                                                  return Container(
                                                                    margin: EdgeInsets.only(right: 4, top:0, bottom:mapValueDimensionBased(0, 3, sWidth, sHeight),left: 2),
                                                                    decoration: BoxDecoration(
                                                                        color: defaultPalette.extras[0],
                                                                        borderRadius:
                                                                            BorderRadius.circular(2)),
                                                                    height: 5,
                                                                  );
                                                                },
                                                                child: SingleChildScrollView(
                                                                  controller: controller,
                                                                  scrollDirection: Axis.horizontal,
                                                                  padding: const EdgeInsets.only(right: 4),
                                                                  physics: physics,
                                                                  child: LayoutBuilder(
                                                                    builder: (context, constraints) {
                                                                      double itemHeight = 32; // Approximate label height + margin
                                                                      int rowCount = (constraints.maxHeight / itemHeight).floor().clamp(1, labelList.length ==0?1:labelList.length);
                                                                      // Split items across rows vertically
                                                                      List<List<RequiredText>> columns = [];
                                                                      int colCount = (labelList.length / rowCount).ceil();

                                                                      Widget buildLabel(RequiredText label) {
                                                                        final bool isItemSheet = label.name == 'itemSheet';
                                                                        bool isMapped = label.indexPath.index != -951;
                                                                        if (getItemAtPath(label.indexPath).id == 'yo') {
                                                                          label.indexPath = IndexPath(index: -951);
                                                                          isMapped = false;
                                                                        } else if (!isItemSheet && getItemAtPath(label.indexPath) is! SheetText){
                                                                          label.indexPath = IndexPath(index: -951);
                                                                          isMapped = false;
                                                                        }
                                                                        //  print(getItemAtPath(label.indexPath).id);
                                                                        //   print(isItemSheet);
                                                                        //    print(isMapped);
                                                                        final SheetText? linkedText = isItemSheet? null:
                                                                            !isItemSheet && isMapped ? getItemAtPath(label.indexPath) as SheetText? : null;
                                                                        
                                                                        final String previewText = isMapped && linkedText != null
                                                                            ? linkedText.textEditorConfigurations.controller.document.toPlainText().trim()
                                                                            : '';
                                                                        final bool isOptional = label.isOptional;
                                                                        //  print(getItemAtPath(label.indexPath).id);

                                                                        return Tooltip(
                                                                          decoration: BoxDecoration(
                                                                            color: defaultPalette.extras[0],
                                                                            borderRadius: BorderRadius.circular(8),
                                                                          ),
                                                                          richMessage: TextSpan(
                                                                            style: GoogleFonts.lexend(
                                                                              fontSize: 13,
                                                                              color: defaultPalette.primary,
                                                                            ),
                                                                            children: [
                                                                              TextSpan(
                                                                                text: label.name,
                                                                                style: const TextStyle(fontWeight: FontWeight.bold),
                                                                              ),
                                                                              const TextSpan(text: '\n'),
                                                                              if (isMapped)
                                                                                ...[
                                                                                  const TextSpan(
                                                                                    text: 'value: ',
                                                                                    style: TextStyle(fontWeight: FontWeight.bold),
                                                                                  ),
                                                                                  TextSpan(
                                                                                    text: isItemSheet
                                                                                        ? '[SheetTable assigned]'
                                                                                        : (previewText.isNotEmpty
                                                                                            ? (previewText.length > 100
                                                                                                ? '${previewText.substring(0, 100)}...'
                                                                                                : previewText)
                                                                                            : '[Empty]'),
                                                                                  ),
                                                                                ]
                                                                              else
                                                                                const TextSpan(
                                                                                  text: 'Unassigned',
                                                                                  style: TextStyle(fontWeight: FontWeight.bold),
                                                                                ),
                                                                              const TextSpan(text: '\n'),
                                                                              const TextSpan(
                                                                                text: 'type: ',
                                                                                style: TextStyle(fontWeight: FontWeight.bold),
                                                                              ),
                                                                              TextSpan(
                                                                                text: isItemSheet
                                                                                    ? 'table'
                                                                                    : SheetTextType.values[label.sheetTextType].name,
                                                                              ),
                                                                              if (isOptional) ...[
                                                                                const TextSpan(text: '\n'),
                                                                                const TextSpan(
                                                                                  text: 'optional',
                                                                                  style: TextStyle(fontWeight: FontWeight.bold),
                                                                                ),
                                                                              ],
                                                                            ],
                                                                          ),
                                                                          child: GestureDetector(
                                                                            onTap: () {
                                                                              if ((item.id != 'yo' || item.id != '') ) {
                                                                                
                                                                                if (label.name !='itemSheet' && label.indexPath.index ==-951) {
                                                                                  setState(() {
                                                                                    item.name = label.name;
                                                                                    label.indexPath = item.indexPath;
                                                                                    item.type = SheetTextType.values[label.sheetTextType];
                                                                                    item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(
                                                                                      label.sheetTextType,
                                                                                      item.textEditorConfigurations.controller,
                                                                                      check: true,
                                                                                      textItem: item,
                                                                                      );
                                                                                    doubleCheckLabelList(labelList);
                                                                                  });
                                                                                } else {
                                                                                  var sheetItem = getItemAtPath(label.indexPath);
                                                                                  if (sheetItem is! SheetText) {
                                                                                    doubleCheckLabelList(labelList);
                                                                                  } else {
                                                                                    setState(() {
                                                                                      panelIndex.id = sheetItem.id;
                                                                                      panelIndex.parentId = sheetItem.parentId;
                                                                                      panelIndex.itemIndexPath = sheetItem.indexPath;
                                                                                      panelIndex.parentIndexPath = sheetItem.indexPath.parent;
                                                                                      item = sheetItem;
                                                                                    });
                                                                                  }

                                                                                }
                                                                              }
                                                                            },
                                                                            child: Container(
                                                                              margin: const EdgeInsets.only(right: 4, bottom: 2, left: 0),
                                                                              padding: const EdgeInsets.symmetric(vertical: 3, horizontal: 8),
                                                                              decoration: BoxDecoration(
                                                                                color: !isMapped ?  defaultPalette.extras[label.isOptional? 1:4] : defaultPalette.secondary,
                                                                                border: Border.all(
                                                                                  color: defaultPalette.primary,
                                                                                  width: 1.5,
                                                                                ),
                                                                                borderRadius: BorderRadius.circular(20),
                                                                              ),
                                                                              child: Text(
                                                                                label.name,
                                                                                style: GoogleFonts.lexend(
                                                                                  fontSize: 14,
                                                                                  color:
                                                                                      !isMapped ? label.isOptional? defaultPalette.extras[0]: defaultPalette.primary : defaultPalette.extras[0],
                                                                                  letterSpacing: -0.3,
                                                                                  fontWeight: FontWeight.w500,
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ),
                                                                        );
                                                                      }

                                      
                                      
                                                                      for (int i = 0; i < colCount; i++) {
                                                                        List<RequiredText> column = [];
                                                                        for (int j = 0; j < rowCount; j++) {
                                                                          int index = j + i * rowCount;
                                                                          if (index < labelList.length) {
                                                                            column.add(labelList[index]);
                                                                          }
                                                                        }
                                                                        columns.add(column);
                                                                      }
                                      
                                                                      return Row(
                                                                        crossAxisAlignment: CrossAxisAlignment.start,
                                                                        children: columns.map((columnItems) {
                                                                          return Column(
                                                                            children: columnItems.map((label) => buildLabel(label)).toList(),
                                                                          );
                                                                        }).toList(),
                                                                      );
                                                                    },
                                                                  ),
                                                                )
                                      
                                                              );
                                                            }
                                                          ),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ) 
                                            )
                                            ],
                                          ),
                                      ),
                                    ),
                                     
                                  ),
                                ),
                                //asterisk button
                                Positioned(
                                  top: mapValueDimensionBased(2, 4, sWidth, sHeight),
                                  left: mapValueDimensionBased(2, 0, sWidth, sHeight),
                                  child: ElevatedLayerButton(
                                    onClick: () {
                                      
                                      void showPositionedSheetTypeOverlay({
                                        required BuildContext context,
                                        required Offset position,
                                        required double width,
                                        List<InputBlock>? inputBlocks,
                                      }) {
                                        var oWidth = width;
                                        var oHeight = sHeight-40;
                                        var typeList = SheetType.values;
                                        final overlay = Overlay.of(context);
                                        // Remove overlay on outside tap
                                        if (sheetTypeBrowserEntry !=null) {
                                        sheetTypeBrowserEntry!.remove();
                                        sheetTypeBrowserEntry = null;
                                      }
                                        sheetTypeBrowserEntry = OverlayEntry(
                                          builder: (context) {
                                            return StatefulBuilder(builder: (context, updateState) {
                                              
                                              return Positioned(
                                                left: position.dx,
                                                top: position.dy,
                                                child: GestureDetector(
                                                  onPanUpdate: (details) {
                                                    updateState((){
                                                      position = Offset(position.dx + details.delta.dx,position.dy + details.delta.dy );
                                                    });
                                                  },
                                                  child: Stack(
                                                    children: [
                                                      SizedBox(height: oHeight,width: oWidth,),
                                                      Material(
                                                        color: Colors.transparent,
                                                        child: Container(
                                                          width: oWidth,
                                                          height: oHeight,
                                                          padding: const EdgeInsets.all(4).copyWith(right: 0,left: 0),
                                                          decoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            borderRadius: BorderRadius.circular(20),
                                                            border: Border.all(
                                                              width: 2,
                                                              color: defaultPalette.extras[0],
                                                            )
                                                          ),
                                                          child: Column(
                                                            children: [
                                                              // Search Bar
                                                              Container(
                                                                decoration: BoxDecoration(
                                                                  border: Border.all(color: defaultPalette.primary),
                                                                  borderRadius: BorderRadius.circular(15),
                                                                ),
                                                                height: 30,
                                                                child: TextFormField(
                                                                  style: GoogleFonts.lexend(
                                                                  color: defaultPalette.extras[0],
                                                                  letterSpacing:-1,
                                                                  fontSize: 15,
                                                                  ),
                                                                  onChanged: (value) => updateState((){
                                                                    typeList = SheetType.values.where((sheetType) =>
                                                                              sheetType.name.toLowerCase().contains(value.toLowerCase()))
                                                                          .toList();
                                                                  }),
                                                                  cursorColor: defaultPalette.tertiary,
                                                                  controller: textFieldSearchController,
                                                                  decoration: InputDecoration(
                                                                    contentPadding: EdgeInsets.all(0),
                                                                    hintText: 'searchTypes...',
                                                                    focusColor: defaultPalette.extras[0],
                                                                    hintStyle: GoogleFonts.lexend(
                                                                      color: defaultPalette.extras[0],
                                                                      letterSpacing:-1,
                                                                      fontSize: 15),
                                                                    prefixIcon: Icon(TablerIcons.search, size:25,
                                                                        color: defaultPalette.extras[0]),
                                                                    suffixIcon: GestureDetector(
                                                                      onTap: () {
                                                                        
                                                                        sheetTypeBrowserEntry?.remove();
                                                                        sheetTypeBrowserEntry = null;
                                                                      },
                                                                      child: Icon(TablerIcons.x, size:25,
                                                                          color: defaultPalette.extras[0]),
                                                                    ),
                                                                    border: OutlineInputBorder(
                                                                      borderSide: BorderSide.none, 
                                                                      borderRadius: BorderRadius.circular(12),
                                                                    ),
                                                                  ),
                                                                ),
                                                              ),
                                                              const SizedBox(height: 10),
                                                      
                                                              // Filtered list inside styled container
                                                              Expanded(
                                                                child:ScrollConfiguration(
                                                                behavior: ScrollBehavior()
                                                                    .copyWith(scrollbars: false),
                                                                child: DynMouseScroll(
                                                                    durationMS: 500,
                                                                    scrollSpeed: 1,
                                                                    builder: (context, controller, physics) {
                                                                      return ClipRRect(
                                                                        borderRadius: BorderRadius.circular(15),
                                                                        child: SingleChildScrollView(
                                                                          controller: controller,
                                                                          physics: physics,
                                                                          padding: const EdgeInsets.all(4).copyWith(left: 6,right: 6),
                                                                          child: Column(
                                                                            children: [
                                                                              ...typeList.asMap().entries.map((entry) {
                                                                                return  MouseRegion(
                                                                                  cursor:SystemMouseCursors.click,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        lm!.type = entry.value.index;
                                                                                        lm!.save();
                                                                                        labelList = getLabelList(SheetType.values[lm!.type], labelList);
                                                                                        assignIndexPathsAndDisambiguate(labelList, spreadSheetList);
                                                                                      });
                                                                                      updateState(() {
                                                                                        
                                                                                      },);
                                                                                    },
                                                                                    child: Stack(
                                                                                      children: [
                                                                                        Container(
                                                                                          width: oWidth,
                                                                                          height: 112,
                                                                                          margin:const EdgeInsets.all(2).copyWith(left: 0,right:0),
                                                                                          decoration: BoxDecoration(
                                                                                            color:defaultPalette.extras[0],
                                                                                            borderRadius: BorderRadius.circular(12),
                                                                                          ),
                                                                                        ),
                                                                                        if(lm!.type == entry.value.index)
                                                                                        Positioned(
                                                                                          right: -10,
                                                                                          top: -15,
                                                                                          child: Icon(TablerIcons.north_star,size: 150,color:defaultPalette.primary.withOpacity(0.05),)),
                                                                                        Container(
                                                                                          margin:const EdgeInsets.all(2).copyWith(left: 0,right:0),
                                                                                          child: Row(
                                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                            children: [
                                                                                              Container(
                                                                                                height: 100,
                                                                                                width: 65,
                                                                                                margin:const EdgeInsets.all(6),
                                                                                                alignment: Alignment(0, -0.8),
                                                                                                decoration: BoxDecoration(
                                                                                                    color:defaultPalette.primary,
                                                                                                    borderRadius: BorderRadius.circular(10)
                                                                                                  ),
                                                                                                child: Column(
                                                                                                  children: [
                                                                                                    Text(
                                                                                                      getLabelList(entry.value,null).length.toString(),
                                                                                                      maxLines: 1,
                                                                                                      style: GoogleFonts.lexend(
                                                                                                        fontSize: 45,
                                                                                                        letterSpacing: -1,
                                                                                                        color: defaultPalette.extras[0],
                                                                                                        fontWeight: FontWeight.w500),
                                                                                                      ),
                                                                                                      Row(
                                                                                                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                        children: [
                                                                                                          Text(
                                                                                                      getLabelList(entry.value,null).where((el) => !el.isOptional,).toList().length.toString(),
                                                                                                      maxLines: 1,
                                                                                                      style: GoogleFonts.lexend(
                                                                                                        fontSize: 25,
                                                                                                        letterSpacing: -1,
                                                                                                        color: defaultPalette.extras[4],
                                                                                                        fontWeight: FontWeight.w500),
                                                                                                      ),
                                                                                                          Text(
                                                                                                      getLabelList(entry.value,null).where((el) => el.isOptional,).toList().length.toString(),
                                                                                                      maxLines: 1,
                                                                                                      style: GoogleFonts.lexend(
                                                                                                        fontSize: 25,
                                                                                                        letterSpacing: -1,
                                                                                                        color: defaultPalette.extras[0],
                                                                                                        fontWeight: FontWeight.w500),
                                                                                                      ),
                                                                                                        ],
                                                                                                      )
                                                                                                  ],
                                                                                                ),
                                                                                              ),
                                                                                              Expanded(
                                                                                                child:SizedBox(
                                                                                                  height: 110,
                                                                                                  child: ScrollConfiguration(
                                                                                                  behavior: ScrollBehavior()
                                                                                                      .copyWith(scrollbars: false),
                                                                                                  child: DynMouseScroll(
                                                                                                      durationMS: 500,
                                                                                                      scrollSpeed: 1,
                                                                                                      builder: (context, controller, physics) {
                                                                                                        return ScrollbarUltima(
                                                                                                          alwaysShowThumb: true,
                                                                                                          controller: controller,
                                                                                                          scrollbarPosition:
                                                                                                              ScrollbarPosition.left,
                                                                                                          backgroundColor: defaultPalette.primary,
                                                                                                          isDraggable: true,
                                                                                                          maxDynamicThumbLength: 50,
                                                                                                          minDynamicThumbLength: 20,
                                                                                                          scrollbarPadding:  EdgeInsets.only(bottom: 8, top:20,left: 0),
                                                                                                          thumbBuilder:
                                                                                                              (context, animation, widgetStates) {
                                                                                                            return Container(
                                                                                                              decoration: BoxDecoration(
                                                                                                                  color: defaultPalette.primary,
                                                                                                                  borderRadius:
                                                                                                                      BorderRadius.circular(2)),
                                                                                                              width: 5,
                                                                                                            );
                                                                                                          },
                                                                                                          child: SingleChildScrollView(
                                                                                                            controller: controller,
                                                                                                            physics: physics,
                                                                                                            padding:  EdgeInsets.only(left:10,),
                                                                                                            child: Column(
                                                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                                                              children: [
                                                                                                                SizedBox(height: 60,),
                                                                                                                ...getLabelList(entry.value,null).asMap().entries.map((ent) {
                                                                                                                return RichText(
                                                                                                                  maxLines: 1,
                                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                                  text:TextSpan(children:[
                                                                                                                  TextSpan(
                                                                                                                    text:'${ent.key+1}.',
                                                                                                                  
                                                                                                                    style: GoogleFonts.lexend(
                                                                                                                      fontSize: 12,
                                                                                                                      letterSpacing: -0.2,
                                                                                                                      color:ent.value.isOptional? defaultPalette.primary.withOpacity(0.6):defaultPalette.extras[4],
                                                                                                                      fontWeight: FontWeight.w300),
                                                                                                                    ),
                                                                                                                  TextSpan(
                                                                                                                    text:' ${ent.value.name}',
                                                                                                                    style: GoogleFonts.lexend(
                                                                                                                      fontSize: 12,
                                                                                                                      letterSpacing: -0.2,
                                                                                                                      color: defaultPalette.primary.withOpacity(0.6),
                                                                                                                      fontWeight: FontWeight.w300),
                                                                                                                    )
                                                                                                                  ])
                                                                                                                );
                                                                                                              },).toList()],
                                                                                                            ),
                                                                                                          ),
                                                                                                        );
                                                                                                      }
                                                                                                    ),
                                                                                                  ),
                                                                                                )
                                                                                              ),
                                                                                              SizedBox(
                                                                                                height: 110,
                                                                                                child: Column(
                                                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                                  crossAxisAlignment: CrossAxisAlignment.end,
                                                                                                  children: [
                                                                                                    Expanded(
                                                                                                      child: Padding(
                                                                                                        padding: const EdgeInsets.all(10),
                                                                                                        child: Text(
                                                                                                          entry.value.name.replaceFirstMapped(RegExp(r'^[a-z]+(?=[A-Z])'), (m) => '${m[0]}\n'),
                                                                                                          maxLines: 2,
                                                                                                          textAlign: TextAlign.end,
                                                                                                          style: GoogleFonts.lexend(
                                                                                                            fontSize: 17,
                                                                                                            letterSpacing: -1,
                                                                                                            height: 1,
                                                                                                            color: defaultPalette.primary,
                                                                                                            fontWeight: FontWeight.w500),
                                                                                                          ),
                                                                                                      ),
                                                                                                    ),
                                                                                                    Container(
                                                                                                      height: 5,
                                                                                                      width: 50,
                                                                                                      margin: EdgeInsets.all(8),
                                                                                                      decoration: BoxDecoration(
                                                                                                      color:defaultPalette.primary,
                                                                                                      borderRadius: BorderRadius.circular(10)
                                                                                                    ),
                                                                                                    )
                                                                                                  ],
                                                                                                ),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                );
                                                                              },),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      );
                                                                    }
                                                                  ),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                      //left handle resize
                                                      Positioned(
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeLeftRight,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                if (oWidth>200 && oWidth<sWidth) {
                                                                  position = Offset(position.dx + details.delta.dx,position.dy );
                                                                }
                                                                oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:5, height: sHeight,)
                                                            ),
                                                        )
                                                        ),
                                                      //right handle resize
                                                      Positioned(
                                                        right: 0,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeLeftRight,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:5, height: sHeight,)
                                                            ),
                                                        )
                                                        ),
                                                      //top handle resize
                                                      Positioned(
                                                        top: 0,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpDown,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                if (oHeight>200) {
                                                                  position = Offset(position.dx,position.dy + details.delta.dy);
                                                                }
                                                                oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                                              });
                                                            },
                                                            child: SizedBox(width:oWidth, height:5,)
                                                            ),
                                                        )
                                                        ),
                                                      //bottom handle resize
                                                      Positioned(
                                                        top: oHeight-5,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpDown,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                                              });
                                                            },
                                                            child: SizedBox(width:oWidth, height:5,)
                                                            ),
                                                        )
                                                        ),
                                                      //bottomLeft handle resize
                                                      Positioned(
                                                        top: oHeight-5,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpRightDownLeft,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                                                if (oWidth>200 && oWidth<sWidth) {
                                                                  position = Offset(position.dx + details.delta.dx,position.dy );
                                                                }
                                                                oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:10, height:10,)
                                                            ),
                                                        )
                                                        ),
                                                      //bottomRight handle resize
                                                      Positioned(
                                                        top: oHeight-5,
                                                        right: 0,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpLeftDownRight,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                                                
                                                                oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:10, height:10,)
                                                            ),
                                                        )
                                                        ),
                                                      //topRight handle resize
                                                      Positioned(
                                                        top: 0,
                                                        right: 0,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpRightDownLeft,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                if (oHeight>200) {
                                                                  position = Offset(position.dx,position.dy + details.delta.dy);
                                                                }
                                                                oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                                                oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:10, height:10,)
                                                            ),
                                                        )
                                                        ),
                                                      //topLeft handle resize
                                                      Positioned(
                                                        top: 0,
                                                        child: MouseRegion(
                                                          cursor:SystemMouseCursors.resizeUpLeftDownRight,
                                                          child: GestureDetector(
                                                            behavior: HitTestBehavior.opaque,
                                                            onPanUpdate: (details) {
                                                              updateState((){
                                                                if (oHeight>200) {
                                                                  position = Offset(position.dx,position.dy + details.delta.dy);
                                                                }
                                                                oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                                                if (oWidth>200 && oWidth<sWidth) {
                                                                  position = Offset(position.dx + details.delta.dx,position.dy );
                                                                }
                                                                oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                                              });
                                                            },
                                                            child: SizedBox(width:10, height:10,)
                                                            ),
                                                        )
                                                        ),
                                                    
                                                    ],
                                                  ),
                                                ),
                                              );
                                            });
                                          },
                                        );
                                  
                                        overlay.insert(sheetTypeBrowserEntry!);
                                      }
                                      
                                      if (sheetTypeBrowserEntry ==null) {
                                        showPositionedSheetTypeOverlay(
                                          context: context,
                                          position: Offset((sWidth * wH1DividerPosition),35),
                                          width: sWidth * (1 - wH1DividerPosition - wH2DividerPosition),
                                                                          
                                        );
                                      } else {
                                        sheetTypeBrowserEntry!.remove();
                                        sheetTypeBrowserEntry = null;
                                      }
                                    },
                                    buttonHeight: mapValueDimensionBased(30, 43, sWidth, sHeight),
                                    buttonWidth: mapValueDimensionBased(30, 43, sWidth, sHeight),
                                    borderRadius: BorderRadius.circular(999),
                                    animationDuration: const Duration(milliseconds: 100),
                                    animationCurve: Curves.ease,
                                    topDecoration: BoxDecoration(
                                      color: defaultPalette.extras[labelList.any((label) => label.indexPath.index == -951)?4:0],
                                      border: Border.all(width: 2, color: defaultPalette.primary,),
                                      
                                    ),
                                    topLayerChild: Center(
                                      child: Icon(
                                        TablerIcons.north_star,
                                        color: defaultPalette.primary,
                                        size:  mapValueDimensionBased(16, 28, sWidth, sHeight),)
                                    ),
                                  
                                    subfac: 3,
                                    depth: 3,
                                    baseDecoration: BoxDecoration(
                                      color: defaultPalette.extras[0],
                                      border: Border.all(color: defaultPalette.extras[0]),
                                    ),
                                  ),
                                ),
                            
                              ],
                            ),
                          ),
                          //
                          //
                          //////////PROPERTIES SECTION
                          Positioned(
                            width: sWidth * (wH2DividerPosition),
                            top: 0,
                            height: sHeight * 0.9,
                            left: sWidth * (1 - wH2DividerPosition),
                            child: Stack(
                              children: [
                                //animatedborders Properties page, text, list tab animatedborders on the top right
                                Container(
                                  height: (50),
                                  margin:
                                      EdgeInsets.only(top: 29, left: 0, right: 6),
                                  padding: EdgeInsets.only(bottom: 0),
                                  decoration: BoxDecoration(
                                    color: defaultPalette.transparent,
                                    borderRadius: BorderRadius.circular(25),
                                  ),
                                  child: Row(
                                    children: [
                                      Expanded(
                                          flex: 1,
                                          child: Padding(
                                            padding:
                                                EdgeInsets.only(left: 9, top: 10),
                                            child: CustomBorder(
                                              color: whichPropertyTabIsClicked ==
                                                      1
                                                  ? defaultPalette.primary
                                                  : defaultPalette.transparent,
                                              animateDuration:
                                                  const Duration(seconds: 1),
                                              animateBorder: true,
                                              radius: const Radius.circular(10),
                                              dashPattern: const [15, 10],
                                              strokeWidth: 4,
                                              child: SizedBox(
                                                height: 45,
                                                width: _getPropertiesButtonWidth(
                                                    'page'),
                                              ),
                                            ),
                                          )),
                                      //text field properties button border
                                      if (panelIndex.id != '' && getItemAtPath(panelIndex.itemIndexPath) is SheetText)
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 4, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 2
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(8),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 5,
                                                child: SizedBox(
                                                  height: 43,
                                                  width: (2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5),
                                                ),
                                              ),
                                            )),
                                      //sheet list properties button border
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("LI"))
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 5, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 3
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(6),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 5,
                                                child: SizedBox(
                                                  height: 45,
                                                  width: 2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5,
                                                ),
                                              ),
                                            )),
                                      //sheet table properties button border
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("TB"))
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 5, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 4
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(6),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 4,
                                                child: SizedBox(
                                                  height: 45,
                                                  width: 2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5,
                                                ),
                                              ),
                                            )),
                                    
                                    ],
                                  ),
                                ),
                                //buttons Properties page, text, list tab browser buttons on the top right
                                Container(
                                  height: (50),
                                  margin:
                                      EdgeInsets.only(top: 29, left: 0, right: 6),
                                  padding: EdgeInsets.only(bottom: 0),
                                  decoration: BoxDecoration(
                                    color: defaultPalette.transparent,
                                    borderRadius: BorderRadius.circular(25),
                                  ),
                                  child: Row(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      //page properties button button
                                      Expanded(
                                        flex: 1,
                                        child: ElevatedLayerButton(
                                          // isTapped: false,t
                                          onClick: () {
                                            setState(() {
                                              whichPropertyTabIsClicked = 1;
                                              Future.delayed(Durations.short1).then(
                                                (value) {
                                                  // print("YUHUUUUUUUU");
                                                  whichPropertyTabIsClicked = 1;
                                                  propertyCardsController.swipeDefault();
                                                },
                                              );       
                                            });
                                          },
                                          buttonHeight: 50,
                                          buttonWidth:
                                              _getPropertiesButtonWidth('page'),
                                          borderRadius: BorderRadius.circular(8),
                                          animationDuration:
                                              const Duration(milliseconds: 100),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.script,
                                            size: 20,
                                            // color: Colors.blue,
                                          ),
                                          subfac: 10,
                                          baseDecoration: BoxDecoration(
                                            color: defaultPalette.extras[0],
                                            border: Border.all(),
                                          ),
                                        ),
                                      ),
                                      //text field properties button button
                                      if (panelIndex.id != '' && item.id != ''&& item.id != 'yo' && getItemAtPath(panelIndex.itemIndexPath) is SheetText)
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //The green panel
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 10, left: 4),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.tertiary,
                                                  borderRadius:
                                                      BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //text tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:
                                                        defaultPalette.transparent,
                                                    borderRadius:
                                                        BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      //button that switched the tab to text formatting
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 0;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.typeface,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                          ),
                                                        ),
                                                      ),
                                                      //button that switched the tab to text font
                                                      Positioned(
                                                        bottom:0, 
                                                        right:(_getPropertiesButtonWidth('text-field')/3) -2 ,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 1;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'text-field')/3)-2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.currency_florin,
                                                            size: 13,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                                      //button that switched the tab to text SuperDecoration
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              // var tmpinx = int.tryParse(textDecorationPath.last.substring(textDecorationPath.last.indexOf('/') + 1))??-33;
                                                      
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 2;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                              decorationIndex = -1;
                                                              isListDecorationLibraryToggled = false;
                                                              isListDecorationPropertiesToggled = false;
                                                              showDecorationLayers = false;
                                                              updateSheetDecorationvariables(sheetDecorationMap[textDecorationPath.last] as SuperDecoration);
                                                              textDecorationNameController.text = (sheetDecorationMap[textDecorationPath.last] as SuperDecoration).name;
                                                      
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'text-field')/3)-2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                    ],
                                                  )
                                                ),
                                              ),
                                              // the property tab switch main button
                                              Positioned(
                                                top: -2,
                                                right: 0,
                                                child: ElevatedLayerButton(
                                                  // isTapped: false,0
                                                  onClick: () {
                                                    setState(() {
                                                      // var tmpinx = int.tryParse(textDecorationPath.last.substring(textDecorationPath.last.indexOf('/') + 1))??-33;
                                                       
                                                        
                                                      whichPropertyTabIsClicked = 2;
                                                      // propertyTabController.jumpToPage(1);
                                                      textPropertyCardsController
                                                          .animateTo(Offset(1, 1),
                                                              duration:
                                                                  Duration.zero,
                                                              curve: Curves.linear);
                                                     _findItem(); 
                                                     decorationIndex = -1;
                                                      isListDecorationLibraryToggled = false;
                                                      isListDecorationPropertiesToggled = false;
                                                      updateSheetDecorationvariables(sheetDecorationMap[textDecorationPath.last] as SuperDecoration);
                                                      textDecorationNameController.text = (sheetDecorationMap[textDecorationPath.last] as SuperDecoration).name;
                                                      
              
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth: _getPropertiesButtonWidth('text-field') + 2,
                                                  borderRadius:
                                                      BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.start,
                                                    children: [
                                                      const Icon(
                                                        TablerIcons
                                                            .text_recognition,
                                                        size: 15,
                                                        // color: Colors.blue,
                                                      ),
                                                      Text(
                                                        'text',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette
                                                                .black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth: 3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    // border: Border.all(),
                                                  ),
                                                ),
                                              )
                                            ],
                                          ),
                                        ),
                                      //sheetlist properties button button on top the whole thing
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("LI"))
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //Yellow Panel behind
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 9, left: 5),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.extras[1],
                                                  borderRadius: BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //list tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:defaultPalette.transparent,
                                                    borderRadius:BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                            if (whichPropertyTabIsClicked != 3) {
                                                                whichPropertyTabIsClicked = 3;
                                                                _findSheetListItem();
                                                              }
                                                              if (whichPropertyTabIsClicked == 3 && whichListPropertyTabIsClicked !=0) {
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(0),);
                                                                  
                                                                  whichListPropertyTabIsClicked =0;
                                                                } else {
                                                                  // print('heryaa');
                                                                  // Future.delayed(Durations.short4).then((value) => listPropertyCardsController.swipeDefault(),);
                                                                  
                                                                }
                                                                
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/2)-5,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.logs,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 3) {
                                                                // var tmpinx = int.tryParse(listDecorationPath.last.substring(listDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 3;
                                                                _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationMap[listDecorationPath.last] as SuperDecoration);
                                                                listDecorationNameController.text = (sheetDecorationMap[listDecorationPath.last] as SuperDecoration).name;
                                                              
                                                              }
                                                              if (whichPropertyTabIsClicked == 3 && whichListPropertyTabIsClicked !=1) {
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(1),);
                                                                  
                                                                  whichListPropertyTabIsClicked =1;
                                                                } else {
                                                                  // print('heryaa');
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(1),);
                                                                  
                                                                }
                                                              // listPropertyCardsController.swipeDefault();
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'sheet-list')/2) -5,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                    ],
                                                  )
                                                ),
                                              ),
              
                                              //the propety tab switch main button to list properties
                                              Positioned(
                                                top:-2,
                                                right:0,
                                                child: ElevatedLayerButton(
                                                  onClick: () {
                                                    setState(() {
                                                      if (whichPropertyTabIsClicked != 3) {
                                                        // var tmpinx = int.tryParse(listDecorationPath.last.substring(listDecorationPath.last.indexOf('/') + 1))??-33;
                                                        whichPropertyTabIsClicked = 3;
                                                        _findSheetListItem();
                                                        decorationIndex = -1;
                                                        isListDecorationLibraryToggled = false;
                                                        isListDecorationPropertiesToggled = false;
                                                        showDecorationLayers = false;
                                                        updateSheetDecorationvariables(sheetDecorationMap[listDecorationPath.last] as SuperDecoration);
                                                        listDecorationNameController.text = (sheetDecorationMap[listDecorationPath.last] as SuperDecoration).name;
                                                      
                                                      }
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth:
                                                      _getPropertiesButtonWidth(
                                                          'sheet-list'),
                                                  borderRadius:BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.start,
                                                    children: [
                                                      const Icon(
                                                        TablerIcons
                                                            .brackets_contain,
                                                        size: 15,
                                                      ),
                                                      Text(
                                                        'List',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette
                                                                .black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth: 3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    
                                                  ),
                                                ),
                                              
                                              ),
                                            ],
                                          ),
                                        ),
                                      //sheettable properties button button on top of the whole thing
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("TB"))
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //Amethyst Panel behind
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 9, left: 5),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.extras[3],
                                                  borderRadius:
                                                      BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //table tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:
                                                        defaultPalette.transparent,
                                                    borderRadius:
                                                        BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      //table property tab
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 4) {
                                                                // var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 4;
                                                                // _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                // showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationMap[tableDecorationPath.last] as SuperDecoration);
                                                                tableDecorationNameController.text = (sheetDecorationMap[tableDecorationPath.last] as SuperDecoration).name;
                                                            
                                                              }
                                                              if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=0) {
                                                                  Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(0),);
                                                                  
                                                                whichTablePropertyTabIsClicked =0;
                                                              } else {
                                                                print('heryaa');
                                                                Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(0),);
                                                                
                                                              }
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.table_options,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                                      //cell property tab
                                                      Positioned(
                                                        bottom:0,
                                                        right:(_getPropertiesButtonWidth('text-field')/3) -2 ,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 4) {
                                                                // var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 4;
                                                                // _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                // showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationMap[tableDecorationPath.last] as SuperDecoration);
                                                                tableDecorationNameController.text = (sheetDecorationMap[tableDecorationPath.last] as SuperDecoration).name;
                                                            
                                                              }
                                                              if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=1) {
                                                                  Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(1),);
                                                                  
                                                                whichTablePropertyTabIsClicked =1;
                                                              } else {
                                                                print('heryaa');
                                                                Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(1),);
                                                                
                                                              }
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            Icons.dataset_outlined,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                                      //table decoration
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                            // var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                            if (whichPropertyTabIsClicked != 4) {
                                                              whichPropertyTabIsClicked = 4;
                                                              // _findSheetListItem();
                                                              decorationIndex = -1;
                                                              isListDecorationLibraryToggled = false;
                                                              isListDecorationPropertiesToggled = false;
                                                              // showDecorationLayers = false;
                                                              updateSheetDecorationvariables(sheetDecorationMap[tableDecorationPath.last] as SuperDecoration);
                                                              tableDecorationNameController.text = (sheetDecorationMap[tableDecorationPath.last] as SuperDecoration).name;
                                                          
                                                            }
                                                            if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=2) {
                                                              Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(2),);
                                                              
                                                              whichTablePropertyTabIsClicked =2;
                                                            } else {
                                                              print('heryaa');
                                                              Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(2),);
                                                              
                                                            }
                                                            decorationIndex = -1;
                                                            isListDecorationLibraryToggled = false;
                                                            isListDecorationPropertiesToggled = false;
                                                            // switch (whichTableDecorationIsClicked) {
                                                            //   case 0:
                                                            //     updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                            //     tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;  
                                                                
                                                            //     break;
                                                            //   default:
                                                            // }
                                                            _findSheetTableItem(sheetTableItem, updateVariables: false);
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'sheet-list')/3) -2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                             
                                                    ],
                                                  )
                                                ),
                                              ),
                                      
                                              //the propety tab switch main button to table properties
                                              Positioned(
                                                top:-2,
                                                right:0,
                                                child: ElevatedLayerButton(
                                                  // isTapped: false,
                                                  // toggleOnTap: true,
                                                  onClick: () {
                                                    setState(() {
                                                      if (whichPropertyTabIsClicked != 4) {
                                                        // var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                        whichPropertyTabIsClicked = 4;
                                                        // _findSheetListItem();
                                                        decorationIndex = -1;
                                                        isListDecorationLibraryToggled = false;
                                                        isListDecorationPropertiesToggled = false;
                                                        // showDecorationLayers = false;
                                                        updateSheetDecorationvariables(sheetDecorationMap[tableDecorationPath.last] as SuperDecoration);
                                                        tableDecorationNameController.text = (sheetDecorationMap[tableDecorationPath.last] as SuperDecoration).name;
                                                            
                                                      }
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth:
                                                      _getPropertiesButtonWidth(
                                                          'sheet-list'),
                                                  borderRadius:BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.center,
                                                    children: [
                                                      const Icon(
                                                        Icons.table_chart_outlined,
                                                        size: 14,
                                                      ),
                                                      Text(
                                                        'Table',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette.black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth:3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    // border: Border.all(),
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      
                                    ],
                                  ),
                                ),
                                
                                //Content inside properties CARDS Main Parent
                                Container(
                                  padding: EdgeInsets.only(top: 73),
                                  child: FadeInLeft(child: _getProperTiesCards()),
                                ),
                                
                              ],
                            ),
                          ),
                          //
                          //
                          //
                          //RESIZE HANDLE VERTICAL 2
                          Positioned(
                              top: Platform.isAndroid ? 35 : 0,
                              left: sWidth * (1 - wH2DividerPosition) - 3,
                              child: MouseRegion(
                                cursor: SystemMouseCursors.resizeColumn,
                                child: GestureDetector(
                                  onPanUpdate: (details) {
                                    double newPosition = ((0.9 -
                                                wH2DividerPosition -
                                                wH1DividerPosition) +
                                            details.delta.dx /
                                                context.size!.width)
                                        .clamp(0.1, 0.6);

                                    setState(() {
                                      wH2DividerPosition =
                                          (newPosition - .9 + wH1DividerPosition)
                                              .abs()
                                              .clamp((170/sWidth), (sWidth * (1 - wH1DividerPosition - wH2DividerPosition)).clamp(200, double.infinity)/sWidth);
                                    });
                                  },
                                  child: Container(
                                    color: defaultPalette.transparent,
                                    height: sHeight,
                                    width: 8,
                                  ),
                                ),
                              )),
                          //RESIZE HANDLE VERTICAL 1
                          Positioned(
                              top: 0,
                              left: (sWidth * wH1DividerPosition) - 6,
                              child: MouseRegion(
                                cursor: SystemMouseCursors.resizeColumn,
                                
                                child: GestureDetector(
                                  onPanUpdate: (details) {
                                    double newPosition = (wH1DividerPosition +
                                            details.delta.dx /
                                                context.size!.width)
                                        .clamp((50/sWidth), (sWidth * (1 - wH1DividerPosition - wH2DividerPosition)).clamp(200, double.infinity)/sWidth);
                                    setState(() {
                                      wH1DividerPosition = newPosition;
                                    });
                                  },
                                  child: Container(
                                    color: Colors.transparent,
                                    height: sHeight,
                                    width: 8,
                                  ),
                                ),
                              )),
                          //
                        ],
                      ),
                    ),
                    // Windows top bar
                    if (Platform.isWindows)
                      GestureDetector(
                        behavior: HitTestBehavior.translucent,
                        onPanStart: (details) {
                          appWindow.startDragging();
                        },
                        onDoubleTap: () {
                          appWindow.maximizeOrRestore();
                        },
                        child: Container(
                          color: Colors.transparent,
                          height: 40,
                          child: Consumer(builder: (context, ref, c) {
                            return Stack(
                              children: [
                                AnimatedPositioned(
                                  right: 0,
                                  top: -2,
                                  duration: Durations.short4,
                                  child: SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: AnimatedContainer(
                                      duration: Durations.short4,
                                      padding: const EdgeInsets.only(
                                          right: 8, bottom: 4),
                                      margin: const EdgeInsets.only(top: 0),
                                      decoration: const BoxDecoration(
                                          color: Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(12),
                                            bottomLeft: Radius.circular(12),
                                          )),
                                      child: Row(
                                        children: [
                                          //minimize button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Duration.zero)
                                                  .then((y) {
                                                appWindow.minimize();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 10),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.rectangle,
                                              size: 15,
                                              // color: Colors.blue,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                          //
                                          //maximize button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Durations.short1)
                                                  .then((y) {
                                                appWindow.maximizeOrRestore();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 1),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.triangle,
                                              size: 14,
                                              // color: Colors.amber,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                          //close button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Duration.zero)
                                                  .then((y) {
                                                appWindow.close();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 1),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.circle,
                                              size: 15,
                                              // color: Colors.red,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                        ],
                                      ),
                                      //
                                    ),
                                  ),
                                ),
                              ],
                            );
                          }),
                        ),
                      ),
              
                    //
                    //BILLBLAZE MAIN TITLE //Desktop WEB
                    AnimatedPositioned(
                      duration: defaultDuration,
                      top: 5,
                      left: 50,
                      child: AnimatedTextKit(
                        // key: ValueKey(appinioLoop),
                        animatedTexts: [
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.abrilFatface(
                                  fontSize: 13,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.zcoolKuaiLe(
                                  fontSize: 13,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.greatVibes(
                                  fontSize: 13,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze",
                              textStyle: GoogleFonts.libreBarcode39ExtendedText(
                                  fontSize: 13,
                                  letterSpacing: 0,
                                  height:1),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.redactedScript(
                                  fontSize: 13,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                        ],
                        // totalRepeatCount: 1,
                        repeatForever: true,
                        pause: const Duration(milliseconds: 30000),
                        displayFullTextOnTap: true,
                        stopPauseOnTap: true,
                      ),
                    ),
                    //
                    //SIDE BAR BUTTON //Desktop WEB
                    Positioned(
                      top: 3,
                      left: 3,
                      child: ElevatedLayerButton(
                        // isTapped: false,
                        // toggleOnTap: true,
                        onClick: () async {
                          final overlay =  OverlayEntry(builder: (context) => Scaffold(
                              backgroundColor: defaultPalette.extras[4],
                          body: Center(
                            child: LoadingAnimationWidget.newtonCradle(
                              color: Colors.white,
                              size: 150,
                            ),
                          ),),);
                          Overlay.of(context).insert(
                            overlay
                         );
                          await saveLayout();
                          
                          ref.read(propertyCardIndexProvider.notifier).update((s) => s = 0);
                          final pdf = pw.Document();
                          
                          widget.onPop(await pdf.save());
                          
                          Navigator.pop(context);
                          Future.delayed(Durations.long1).then((value) {
                            overlay.remove();
                            sheetTypeBrowserEntry?.remove();
                          },);
                          
                        },
                        buttonHeight: 40 ,
                        buttonWidth: 40 ,
                        borderRadius: BorderRadius.circular(9998),
                        animationDuration: const Duration(milliseconds: 100),
                        animationCurve: Curves.ease,
                        topDecoration: BoxDecoration(
                          color: Colors.white,
                          border: Border.all(),
                        ),
                        topLayerChild: Icon(
                          TablerIcons.forms,
                          size: 20,
                        ),
                        subfac: 2,
                        depth: 2,
                        baseDecoration: BoxDecoration(
                          color: Colors.green,
                          border: Border.all(),
                        ),
                      ),
                    ),
                    //
                    //Layout Name Rename
                    Positioned(
                      top: 0,
                      height: Platform.isAndroid ? 30 : 35,
                      width: sWidth / 7,
                      left: Platform.isAndroid ? sWidth / 2.5 : sWidth / 2,
                      // width: (sWidth * wH2DividerPosition - 10) * 0.3,
                      child: IntrinsicWidth(
                        child: Focus(
                          onFocusChange: _onFieldFocusChange,
                          child: TextFormField(
                            focusNode: layoutNamefocusNode,
                            cursorColor: defaultPalette.primary,
                            controller: layoutName,
              
                            textAlignVertical: TextAlignVertical.top,
                            textAlign: TextAlign.center,
                            decoration: InputDecoration(
                              contentPadding:
                                  const EdgeInsets.symmetric(horizontal: 5),
                              filled: true,
                              fillColor: defaultPalette.transparent,
                              border: OutlineInputBorder(
                                // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                borderRadius: BorderRadius.circular(
                                    5), // Replace with your desired radius
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    width: 0, color: defaultPalette.transparent),
                                borderRadius:
                                    BorderRadius.circular(5), // Same as border
                              ),
                              disabledBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    width: 1.2,
                                    color: defaultPalette.transparent),
                                borderRadius:
                                    BorderRadius.circular(6), // Same as border
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                  width: 3,
                                  color: nameExists
                                      ? layoutName.text == initialLayoutName
                                          ? defaultPalette.extras[1]
                                          : Colors.red
                                      : defaultPalette.transparent,
                                ),
                                borderRadius:
                                    BorderRadius.circular(5), // Same as border
                              ),
                            ),
                            // keyboardType: TextInputType.number,
                            style: GoogleFonts.bungee(
                                color: defaultPalette.black, fontSize: 12),
                            onChanged: (value) {
                              _checkLayoutName();
                            },
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ));
    } 
    //
  }

  String getPageFormatString(PdfPageFormat format) {
    if (format == PdfPageFormat.a4) return 'A4';
    if (format == PdfPageFormat.a3) return 'A3';
    if (format == PdfPageFormat.letter) return 'Lt';
    if (format == PdfPageFormat.legal) return 'Lg';
    if (format == PdfPageFormat.roll57) return 'Roll 57';
    if (format == PdfPageFormat.roll80) return 'Roll 80';
    if (format == PdfPageFormat.a5) return 'A5';
    if (format == PdfPageFormat.a6) return 'A6';
    if (format == PdfPageFormat.standard) return 'Standard';
    return 'cs';
  }

  PdfPageFormat getPageFormatFromString(String format) {
    switch (format) {
      case 'A4':
        return PdfPageFormat.a4;
      case 'A3':
        return PdfPageFormat.a3;
      case 'A5':
        return PdfPageFormat.a5;
      case 'A6':
        return PdfPageFormat.a6;
      case 'Letter':
        return PdfPageFormat.letter;
      case 'Legal':
        return PdfPageFormat.legal;
      case 'Standard':
        return PdfPageFormat.standard;
      case 'Roll 57':
        return PdfPageFormat.roll57;
      case 'Roll 80':
        return PdfPageFormat.roll80;
      default:
        return PdfPageFormat.a4;
    }
  }
  //in use
  Widget buildListWidget(SheetList sheetList) {
    // print('rebuilding listWidget');

    child(controller, physics) => ReorderableListView.builder(
    shrinkWrap: true,
    buildDefaultDragHandles: false,
    scrollDirection: sheetList.direction,
    scrollController:sheetList.id == spreadSheetList[currentPageIndex].id?null: controller,
    physics:sheetList.id == spreadSheetList[currentPageIndex].id?null: physics,
    itemCount: sheetList.length,
    onReorderStart: (index) {
      if (sheetList[index] is SheetText) {
        if (item.id == 'yo') {
          setState(() {
            whichPropertyTabIsClicked = 1;
            print(item.id);
            if (sheetList[index].id == panelIndex.id) {
                item =sheetList[index] as SheetText;
                panelIndex.itemIndexPath = sheetList[index].indexPath;
            }
          });
        }
      }
    },
    onReorder: (oldIndex, newIndex) {
      setState(() {
        if (newIndex > oldIndex) {
          newIndex -= 1;
        }
        final item = sheetList.removeAt(oldIndex);
        // buildlistw
        sheetList.insert(newIndex, item);
        _reassignSheetListIndexPath(sheetList);
      });
    },
    proxyDecorator: (child, index, animation) {
      return Container(child: child); },
    itemBuilder: (context, index) {
      // print('hello hello sprdListBuilding: ${sheetList[index]}');
      if (sheetList[index] is SheetText) {
        var sheetText = sheetList[index] as SheetText;
        // if (item.id == 'yo') {
        //   print(item.id);
        //   if (sheetText.id == panelIndex.id) {
        //       item =sheetText;
        //       panelIndex.itemIndexPath = sheetText.indexPath;
        //   }
        // }
        return ReorderableDragStartListener(
          index: index,
          key: ValueKey(sheetText.id),
          child: IntrinsicWidth(
            child: IntrinsicHeight(
              child: Stack(
                children: [
                  GestureDetector(
                    onTap: () {
                      FocusScope.of(context).unfocus();
                      
                      setState(() {
                        panelIndex.id = sheetText.id;
                        panelIndex.itemIndexPath = sheetText.indexPath;
                        panelIndex.parentId = sheetList.id;
                        panelIndex.parentIndexPath = sheetList.indexPath;
                        
                        whichPropertyTabIsClicked = 2;
                        item = sheetText;
                        _findItem();
                        
                      });
                      
                      print('clicked');
                      print(sheetListItem.id);
                      
                      print(panelIndex);
                    },
                    onSecondaryLongPressDown: (d) {
                      onRightClick(sheetText, d, index,sheetList);
                    },
                    child: buildSheetTextWidget(sheetList[index] as SheetText),
                  ),
                ],
              ),
            ),
          ),
        );
        // buildlistw
      } else if (sheetList[index] is SheetList) {
        return ReorderableDragStartListener(
          index: index,
          key: ValueKey(sheetList[index].id),
          child: Container(
              margin: EdgeInsets.only(top: 4),
              //we commented out the width here and added the contrained box
              // width:sheetList.id == spreadSheetList[currentPageIndex].id?
              // sWidth
              // : findSheetListBuildWidth(
              //             sheetList[index] as SheetList) <=
              //         50
              //     ? 50
              //     : findSheetListBuildWidth(
              //         sheetList[index] as SheetList),
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  minWidth: 0, // allow it to shrink
                  maxWidth: double.infinity, // no hard upper limit unless needed
                  minHeight: 0, // allow it to shrink
                  maxHeight: double.infinity,
                ),
                child: buildListWidget(
                                  sheetList[index] as SheetList),
              )),
        );
      }
        else if(sheetList[index] is SheetTable){
        return ReorderableDragStartListener(
          key: ValueKey(sheetList[index].id),
          index: index,
          child: buildSheetTableWidget(sheetList[index] as SheetTable)
          );
      }
      return Container(
        key: ValueKey(const Uuid().v4()),
        color: Colors.amberAccent,
        height: 12,
        // buildlistw
      );
      },
      
      );
  
    return Stack(
    children: [
      GestureDetector(
        behavior: HitTestBehavior.translucent,
        onTap: () {
          setState(() {
            panelIndex.parentIndexPath = sheetList.indexPath;
            panelIndex.parentId = sheetList.id;
            _findSheetListItem();
            whichPropertyTabIsClicked = 3;
            Future.delayed(Durations.short1).then(
              (value) async {
                print("YUHUUUUUUUU");
                listPropertyCardsController.setCardIndex(whichListPropertyTabIsClicked);
                await listPropertyCardsController.animateTo(Offset(1, 1),
                duration: Durations.short1, curve: Curves.linear);
                // listPropertyTabContainerController.animateTo(whichListPropertyTabIsClicked);
                // listPropertyCardsController.swipeDefault();
                // listPropertyCardsController.swipeDefault();
              },
            );
           
          });
        },
        child: ScrollConfiguration(
          behavior: ScrollBehavior().copyWith(scrollbars: false),
          child: Padding(
              padding: spreadSheetList[currentPageIndex].id == sheetList.id
              ? EdgeInsets.all(0)
              : const EdgeInsets.only(
            left: 4,
            right: 3
          ),
            child: CustomBorder(
              color: panelIndex.parentId == sheetList.id
              ? spreadSheetList[currentPageIndex].id == sheetList.id
                ? defaultPalette.transparent
                : defaultPalette.extras[1]
              : defaultPalette.transparent,
              radius: Radius.circular(15),
              strokeWidth: panelIndex.parentId == sheetList.id ? 1.5 : 0,
              dashPattern: [10, 5],
              strokeCap: StrokeCap.square,
              animateBorder: true,
              animateDuration: Duration(seconds: 5),
              //we took out width and put it in the contraints, now we commented out all height width
              child: Container(
                height:spreadSheetList[currentPageIndex].id == sheetList.id
                ?sHeight-40: findSheetListBuildHeight(sheetList).clamp(50, double.infinity),
                width: (spreadSheetList[currentPageIndex].id == sheetList.parentId ||spreadSheetList[currentPageIndex].id == sheetList.id)
                ? sWidth: (sheetList.id != spreadSheetList[currentPageIndex].id?(getItemAtPath(sheetList.indexPath.parent!)as SheetList).direction == Axis.vertical:false)
                ? sWidth: null,
                constraints: BoxConstraints(
                  minWidth: (spreadSheetList[currentPageIndex].id == sheetList.parentId ||spreadSheetList[currentPageIndex].id == sheetList.id)
                    ? sWidth
                    : (sheetList.id != spreadSheetList[currentPageIndex].id?(getItemAtPath(sheetList.indexPath.parent!)as SheetList).direction == Axis.vertical:false)
                    ? sWidth
                    : 150,
                  maxWidth: (spreadSheetList[currentPageIndex].id == sheetList.parentId ||spreadSheetList[currentPageIndex].id == sheetList.id)
                    ? sWidth
                    : (sheetList.id != spreadSheetList[currentPageIndex].id?(getItemAtPath(sheetList.indexPath.parent!)as SheetList).direction == Axis.vertical:false)
                    ? sWidth
                    : sheetList.direction == Axis.horizontal
                    ? sheetList.size.width.clamp(151, double.infinity)
                    : findSheetListBuildWidth(sheetList),
                ),
            padding: const EdgeInsets.only(top: 0, left: 1, right: 1),
                              
            // buildlistw
            decoration: BoxDecoration(
              border: Border.all(
                  width: (panelIndex.parentId == sheetList.id || selectedIndexPaths[sheetList.id] != null) ? 1.5 : 1.2,
                  color: (panelIndex.parentId == sheetList.id || selectedIndexPaths[sheetList.id] != null)
                      ?  spreadSheetList[currentPageIndex].id == sheetList.id
                        ? defaultPalette.transparent
                        :defaultPalette.extras[1]
                      : spreadSheetList[currentPageIndex].id == sheetList.id
                ? defaultPalette.transparent
                :Color(0xFFFFFFFF)),
              color: defaultPalette.transparent,
              borderRadius: BorderRadius.circular(15),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(15),
              child: DynMouseScroll(
              durationMS: 500,
              scrollSpeed: 1,
              builder: (context, controller, physics) {
                return ScrollbarUltima(
                  alwaysShowThumb: true,
                  controller: controller,
                  scrollbarPosition: sheetList.direction == Axis.vertical?
                    ScrollbarPosition.right : ScrollbarPosition.bottom,
                  backgroundColor: defaultPalette.primary,
                  isDraggable: true,
                  maxDynamicThumbLength: 80,
                  thumbBuilder:
                      (context, animation, widgetStates) {
                    return Container(
                      margin: EdgeInsets.symmetric(
                        vertical:5,
                        horizontal: sheetList.direction == Axis.vertical? 0:5
                        ),
                      decoration: BoxDecoration(
                        border: Border.all(),
                        color: defaultPalette.primary,
                        borderRadius:
                            BorderRadius.circular(99999)),
                      width:sheetList.id == spreadSheetList[currentPageIndex].id
                      ? 3
                      : sheetList.direction == Axis.vertical? 4:60,
                      height:sheetList.direction == Axis.vertical? 60:5,
                    );
                  },
                  child: Padding(
                    padding: EdgeInsets.only(right:sheetList.direction == Axis.vertical?
                      sheetList.id == spreadSheetList[currentPageIndex].id
                      ?3 : 3.5
                      :0),
                    child: spreadSheetList[currentPageIndex].id == sheetList.id
                    ? MinimapScrollbarWidget(
                      controller: controller,
                      physics: physics,
                      scaleFactor: 0.08,
                      miniSize: 30,
                      imageUpdateInterval: 5000000,
                      onTap: () {
                        setState(() {
                          panelIndex.id = '';
                          panelIndex.parentId = '';
                          panelIndex.itemIndexPath = IndexPath(index: -2);
                          panelIndex.parentIndexPath = IndexPath(index: -2);
                          print(panelIndex);
                          selectedIndexPaths ={};
                          whichPropertyTabIsClicked =1;
                        });
                      },
                      child: ConstrainedBox(
                        constraints: BoxConstraints(
                          minWidth: 0, // allow it to shrink
                          maxWidth: double.infinity, // no hard upper limit unless needed
                        ),
                        child: sheetList.isEmpty? SizedBox(height:50, width:100): child(controller,physics))) : child(controller,physics)
                    ),
                    );
                    }
                  ),
                ),
              ),
            ),
          
          ),
        ),
      ),
      if (panelIndex.parentId == sheetList.id &&  spreadSheetList[currentPageIndex].id != sheetList.id)
      Positioned(
          top: 0,
          child: SlideInLeft(
            duration: Durations.short2,
            child: GestureDetector(
              behavior: HitTestBehavior.deferToChild,
              onTapDown: (d) {
                setState(() {
                  panelIndex.parentId = sheetList.id;
                  // panelIndex.runTimeType = sheetList.runtimeType;
                });
                
                List<ContextMenuEntry> buildSheetListContextMenuEntries( SheetList sheetList) {
                  var entries = <ContextMenuEntry>[
                    MenuHeader(text: 'SheetList Menu')
                  ];
          
                  // Cut SheetList
          
                  entries.add(MenuItem(
                    label: 'Cut',
                    icon: TablerIcons.cut,
                    onSelected: () {
                      setState(() {
                        print(sheetListClipboard );
                        sheetListClipboard[0] = null;
                        sheetListClipboard[1] = (_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]));
                        _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).sheetList.removeWhere((element) => element==sheetListItem,);
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));
                        print(sheetListClipboard );
                        print(sheetListClipboard[1]?.id );
                      });
                      // });
                      // saveLayout();
                    },
                  ));
          
                  // Copy
                  entries.add(MenuItem(
                    label: 'Copy',
                    icon: TablerIcons.copy,
                    onSelected: () {
                      print(sheetListClipboard );
                      setState(() {
                        sheetListClipboard[0]=(getItemAtPath(sheetListItem.indexPath) as SheetList);
                        sheetListClipboard[1] = null;
                      });
                      print(sheetListClipboard );
                    },
                  ));
          
                  // Paste
                  entries.add(MenuItem(
                    label: 'Paste',
                    icon: TablerIcons.clipboard,
                    onSelected: () {
          
                      List<SheetItem> deepCopySheetList(
                        List<SheetItem> sheetList, {
                        required String parentIdOverride, // 👈 added param
                        required IndexPath indexPath,
                        Set<String>? visited,
                        int depth = 0,
                        int maxDepth = 50,
                      }) {
                        visited ??= <String>{};
          
                        return sheetList.asMap().entries.map((e) {
                          var childIndexPath = IndexPath(
                            parent: indexPath,
                            index: e.key,
                            );
                          if (depth > maxDepth) {
                            throw Exception("Too deeply nested structure");
                          }
          
                          if (visited!.contains(e.value.id)) {
                            throw Exception("Recursive structure detected: ${e.value.id}");
                          }
          
                          visited.add(e.value.id);
          
                          if (e.value is SheetText) {
                           
          
                            return _addTextField(
                              docString: (e.value as SheetText).textEditorConfigurations.controller.document.toDelta().toJson(),
                              id: 'TX-${ const Uuid().v4()}',
                              parentId: parentIdOverride,
                              shouldReturn: true,
                              textDecoration: (e.value as SheetText).textDecoration,
                              indexPath: childIndexPath,
                              inputBlocks: (e.value as SheetText).inputBlocks.map((e) => InputBlock(indexPath: e.indexPath, blockIndex: e.blockIndex, id: e.id),).toList(),
          
                              );
                          } else if (e.value is SheetList) {
                            final newId = 'LI-${ const Uuid().v4()}';
                            return SheetList(
                              id: newId,
                              parentId: parentIdOverride, // 👈 Apply to this nested list
                              direction: (e.value as SheetList).direction,
                              crossAxisAlignment: (e.value as SheetList).crossAxisAlignment,
                              mainAxisAlignment: (e.value as SheetList).mainAxisAlignment,
                              mainAxisSize: (e.value as SheetList).mainAxisSize,
                              size: (e.value as SheetList).size,
                              listDecoration: (e.value as SheetList).listDecoration,
                              sheetList: deepCopySheetList(
                                (e.value as SheetList).sheetList,
                                parentIdOverride: newId, // 👈 Recursive update to children
                                visited: {...visited},
                                depth: depth + 1,
                                indexPath: childIndexPath,
                              ),
                              indexPath: childIndexPath,
                            );
                          }
          
                          throw Exception("Unknown or Unaccounted SheetItem type in paste: ${e.value.runtimeType}");
                        }).toList();
                      }
          
          
                      final isNotCopied = sheetListClipboard[0] == null;
                      final originalItem = isNotCopied
                          ? sheetListClipboard[1]!
                          : sheetListClipboard[0]!;
                      final newId = isNotCopied ? originalItem.id : 'LI-${ Uuid().v4()}';
                      var newIndexPath = IndexPath(
                        parent:_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]).indexPath,
                        index: 0);
          
                      final newSheetList = deepCopySheetList(
                        originalItem.sheetList,
                        parentIdOverride: newId, // 👈 Pass new parentId to apply to all children
                        indexPath: newIndexPath
                      );
          
                      
          
                      final newItem = originalItem.copyWith(
                        id: newId,
                        parentId: sheetListItem.id,
                        sheetList: newSheetList,
                        indexPath: newIndexPath
                      );
          
          
                      setState(() {
                        _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex])
                            .insert(0, newItem);
                      });
                      _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]));
                      saveLayout();
                      sheetListClipboard[1] = null;
          
          
                    },
                  ));
          
                  entries.add(const MenuDivider());
          
                  entries.addAll([
                    const MenuHeader(text: 'ops'),
                  //ADD ITEMS
                  MenuItem.submenu(
                      label: 'Add',
                      icon: TablerIcons.new_section,
                      items: [
              MenuItem.submenu(
                  label: 'Text',
                  icon: TablerIcons.text_recognition,
                  items: [
                    //add text before the selected one
                    MenuItem(
                      label: 'Before',
                      icon: TablerIcons
                          .row_insert_top,
                      onSelected: () {
                        setState(() {
                          var newId = 'TX-${Uuid().v4()}';
                        var newItem = _addTextField( 
                          id: newId,
                          shouldReturn:  true,
                          textDecoration:  newSuperDecoration(),
                          indexPath: IndexPath(
                            parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                            index: 0),
                          inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId)],
                          );
                  
                        _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList)
                          , newItem);
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                        });
                      },
                    ),
                    //add text after the selected one
                    MenuItem(
                      label: 'After',
                      icon: TablerIcons
                          .row_insert_bottom,
                      onSelected: () {
                        setState(() {
                          var newId = 'TX-${Uuid().v4()}';
                        var newItem = _addTextField( 
                          id: newId,
                          shouldReturn:  true,
                          textDecoration:  newSuperDecoration(),
                          indexPath: IndexPath(
                            parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                            index: 0),
                          inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId,)],  
                          );
                  
                        var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                        if (index<_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).length) {
                          
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                              index+1,
                              newItem);
                        } else {
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).add(
                              newItem);
                        }
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                        });
                        
                      },
                    ),
                    //add text inside the selected one
                    MenuItem.submenu(
                      label: 'Inside',
                      icon: TablerIcons.code_plus,
                      items:[
                      MenuItem(
                        label: 'At first',
                        icon: TablerIcons.row_insert_top,
                        onSelected: () {
                          setState(() {
                            var newId = 'TX-${Uuid().v4()}';
                          var newItem = _addTextField( 
                            id: newId,
                            shouldReturn:  true,
                            textDecoration: newSuperDecoration(),
                            indexPath: IndexPath(
                            parent:sheetList.indexPath,
                            index: 0),inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId,)],
                            );
                   
                          var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                          if (index<sheetList.length) {
                            
                            sheetList.insert( 0, newItem);
                          } else {
                            sheetList.add(
                                newItem);
                          }
                          _reassignSheetListIndexPath(sheetList);  
                          
                          });
                        },
                      ),
                      //add to the end a text inside the list
                      MenuItem(
                        label: 'At Last',
                        icon: TablerIcons
                            .row_insert_bottom,
                        onSelected: () {
                          setState(() {
                            var newId = 'TX-${Uuid().v4()}';
                            var newItem = _addTextField( 
                              id: newId,
                              shouldReturn:  true,
                              textDecoration:  newSuperDecoration(),
                              indexPath: IndexPath(
                              parent:sheetList.indexPath,
                              index: sheetList.length),inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId,)],
                              );
                   
                              sheetList.add(
                                  newItem);
                            
                          });
                        },
                      ),
                  
                      ]
                    ),
                  
                  ]),
              MenuItem.submenu(
                  label: 'List',
                  icon: TablerIcons
                      .brackets_contain_start,
                  items: [
                    //add list before the selected one
                    MenuItem(
                      label: 'Before',
                      icon: TablerIcons
                          .row_insert_top,
                      onSelected: () {
                        setState(() {
                          var newId ='LI-${ const Uuid().v4()}';
          
                        _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList)
                          , SheetList(
                        direction:
                          Axis.horizontal,
                        id: newId,
                        parentId: sheetList.id,
                        listDecoration: newSuperDecoration().id,
                        sheetList: [
                        ],
                        indexPath: IndexPath(
                          parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                          index: 0)
                        ));
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                        
                        });
                      },
                    ),
                    //add list after the selected one
                    MenuItem(
                      label: 'After',
                      icon: TablerIcons
                          .row_insert_bottom,
                      onSelected: () {
                        setState(() {
                         var newId ='LI-${ const Uuid().v4()}';
                        var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                        if (index<_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).length) {
                          
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                              index+1,
                              SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration:  newSuperDecoration().id,
                          sheetList: [],
                        indexPath: IndexPath(
                          parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                          index: 0)
                        ));
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                        
                        } else {
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).add(
                              SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration:  newSuperDecoration().id,
                          sheetList: [],
                        indexPath: IndexPath(
                          parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                          index: 0)
                        ));
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                        
                        }
                        });
                        
                      },
                    ),
                    //add list inside the selected one
                    MenuItem.submenu(
                      label: 'Inside',
                      icon: TablerIcons.code_plus,
                      items:[
                      MenuItem(
                        label: 'At first',
                        icon: TablerIcons.row_insert_top,
                        onSelected: () {
                          setState(() {
                          var newId ='LI-${ const Uuid().v4()}';             
                          if (sheetList.length!=0) {
                            
                            sheetList.insert( 0, SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration: newSuperDecoration().id,
                          sheetList: [],
                          indexPath: IndexPath(
                            parent:sheetList.indexPath,
                            index: 0)
                          ));
                          } else {
                            sheetList.add(
                                SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration: newSuperDecoration().id,
                          sheetList: [],
                          indexPath: IndexPath(
                            parent: sheetList.indexPath,
                            index: sheetList.length)
                          ));
                          }
                            _reassignSheetListIndexPath(sheetList);
                          });
                        },
                      ),
                      //add a new row with a new textfield inside at the current index
                      MenuItem(
                        label: 'At Last',
                        icon: TablerIcons
                            .row_insert_bottom,
                        onSelected: () {
                          setState(() {
                            var newId ='LI-${ const Uuid().v4()}';
                            
                              sheetList.add(
                                  SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration: newSuperDecoration().id,
                          sheetList: [],
                          indexPath: IndexPath(
                            parent: sheetList.indexPath,
                            index: sheetList.length)
                          ));
                            
                          });
                        },
                      ),
                  
                      ]
                    ),
                  
                         
                    ])    
                  ]),
                  //Wrap ITEMS
                  MenuItem.submenu(
                  label: 'Wrap',
                  icon: TablerIcons.brackets_contain,
                  items: [
                    //In a row
                  MenuItem(
                    label: 'In a Row',
                    icon: TablerIcons.layout_rows ,
                    onSelected: () {
                      wrapInAList(0);
                    },
                  ),
                    //In a column
                  MenuItem(
                    label: 'In a Column',
                    icon: TablerIcons
                        .layout_columns,
                    onSelected: () {
                      wrapInAList(1);
                    },
                    ),
                  ]),
          
                    //Clear Field
                    MenuItem(
                      label: 'Empty The List',
                      icon: TablerIcons.square_rounded_x,
                      onSelected: () async {
                        await showAdaptiveDialog(
                          context: context,
                          builder: (context) {
                            return AlertDialog(
                              title: Text(
                                  'Do you really really want to Empty the List?'),
                              content: Text(
                                  'This will clear all the text fields from current SheetList. Are you sure?'),
                              actions: [
                                TextButton(
                                    onPressed: () {
                                      setState(() {
                                        var temp = _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]);
                                        
                                        (temp as SheetList).sheetList.clear();
          
                                        _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]).sheetList = temp.sheetList;
                                        saveLayout(); // Save changes after clearing
                                      });
                                      Navigator.pop(
                                          context); // Close the current context
                                    },
                                    child: Text('Yes')),
                                TextButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                    },
                                    child: Text('No')),
                              ],
                            );
                          },
                        );
                      },
                    ),
                    //Delete
                    MenuItem(
                      label: 'Delete',
                      icon: TablerIcons.trash,
                      onSelected: () async {
                        await showAdaptiveDialog(
                          context: context,
                          builder: (context) {
                            return AlertDialog(
                              title: const Text('Confirm Delete'),
                              content: const Text(
                                  'This will DELETE the current List with its contents. Are you sure?'),
                              actions: [
                                TextButton(
                                    onPressed: () {
                                      setState(() {
                                        // sheetList.removeAt(index);
                                        panelIndex.id = '';
                                        // panelIndex.runTimeType = null;
                                      });
                                      _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).sheetList
                                        .removeWhere((element) => element.id == sheetListItem.id,);
                                      
                                      // });
                                      _reassignSheetListIndexPath(getItemAtPath(sheetList.indexPath.parent!) as SheetList);
                                      saveLayout();
                                      Navigator.pop(context);
                                    },
                                    child: const Text('Yes')),
                                TextButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                    },
                                    child: const Text('No')),
                              ],
                            );
                          },
                        );
                      },
                    )
                  ]);
          
                  return entries;
                }
          
                final entries = buildSheetListContextMenuEntries(sheetList);
                var menu = ContextMenu(
                    entries: entries,
                    boxDecoration: BoxDecoration(
                        boxShadow: [
                          BoxShadow(
                            color: defaultPalette.black.withOpacity(0.3),
                            blurRadius: 2,
                            // spreadRadius: 10
                          )
                        ],
                        color: defaultPalette.primary,
                        borderRadius: BorderRadius.circular(10)),
                    position:
                        Offset(d.globalPosition.dx, d.globalPosition.dy));
                menu.show(context);
              },
              child: Container(
                alignment: Alignment.center,
                decoration: BoxDecoration(
                    border: Border.all(
                        width: 2,
                        color: panelIndex.parentId == sheetList.id
                            ? defaultPalette.extras[1]
                            : ui.Color(0xFFFFFFFF)),
                    color: defaultPalette.quaternary,
                    shape: BoxShape.circle),
                width: 15,
                height: 15,
              ),
            ),
          ),
        ), // Expandable menus and other widgets can stay the same
      
    ],
          );
  }
  
  Widget buildSheetTextWidget(SheetText sheetText) {
    
    DateTime? extractDateFromDelta(Document doc) {
    final plainText = doc.toPlainText().toLowerCase();

    // Month name map
    final monthMap = {
      'january': 1, 'jan': 1,
      'february': 2, 'feb': 2,
      'march': 3, 'mar': 3,
      'april': 4, 'apr': 4,
      'may': 5,
      'june': 6, 'jun': 6,
      'july': 7, 'jul': 7,
      'august': 8, 'aug': 8,
      'september': 9, 'sep': 9, 'sept': 9,
      'october': 10, 'oct': 10,
      'november': 11, 'nov': 11,
      'december': 12, 'dec': 12,
    };

    int? day;
    int? month;
    int? year;

    // 1. Find first 1-2 digit number NOT immediately followed by another digit (i.e., not part of a longer number)
    final dayMatch = RegExp(r'(?<!\d)(\d{1,2})(?=\D)').firstMatch(plainText);
    if (dayMatch != null) {
      day = int.tryParse(dayMatch.group(1)!);
    }

    // 2. Find 4-digit year
    final yearMatch = RegExp(r'\b(\d{4})\b').firstMatch(plainText);
    if (yearMatch != null) {
      year = int.tryParse(yearMatch.group(1)!);
    }

    // 3. Check for month by name
    final monthMatch = RegExp(
      r'\b(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sept|sep|october|oct|november|nov|december|dec)\b',
      caseSensitive: false,
    ).firstMatch(plainText);

    if (monthMatch != null) {
      final name = monthMatch.group(0)!.toLowerCase();
      month = monthMap[name];
    }

    // 4. If no textual month found, find second 1-2 digit group (distinct from day)
    if (month == null) {
      final allSmallNums = RegExp(r'(?<!\d)(\d{1,2})(?!\d)').allMatches(plainText).toList();
      // print(day?.toString());
      // print(allSmallNums.toString());
      if (allSmallNums.length >= 2) {
        final first = allSmallNums[0].group(1)!;
        final second = allSmallNums[1].group(1)!;
        // print(day?.toString());
        // if (day?.toString() == first) {
          // print('yea same');
          month = int.tryParse(second);
        // }
      }
    }

    // Final validation
    if (day != null && month != null && year != null) {
      try {
        return DateTime(year, month, day);
      } catch (_) {
        return null;
      }
    }

    return null;
  }

    TimeOfDay? extractTimeFromDelta(Document doc) {
      final plainText = doc.toPlainText();

      // Match: 2 digits + non-digit + 2 digits
      final regex = RegExp(r'(\d{1,2})\D+(\d{1,2})');

      final match = regex.firstMatch(plainText);

      if (match != null) {
        try {
          int hour = int.parse(match.group(1)!);
          int minute = int.parse(match.group(2)!);

          if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60) {
            return TimeOfDay(hour: hour, minute: minute);
          }
        } catch (_) {
          return null;
        }
      }

      return null;
    }
    // print(sheetText.type);
    var extractedDate = null;
    if (sheetText.type == SheetTextType.date) {
      extractedDate = extractDateFromDelta(sheetText.textEditorController.document);
      print('date');
    }
    if (sheetText.locked) {
      sheetText.textEditorConfigurations.controller.onReplaceText =(x,b,m)=>false;
    }
  return 
    Container(
      margin: const EdgeInsets.only(
        left: 2,
        top: 4,
        right: 2),
      padding: const EdgeInsets.only(
          top: 4,
          bottom: 4,
          left: 0,
          right: 4),
      decoration: BoxDecoration(
        color: defaultPalette.primary,
        border: Border.all(
          strokeAlign:
              BorderSide.strokeAlignInside,
          width:( panelIndex.id ==
                  sheetText.id || selectedIndexPaths[sheetText.id]!=null)
              ? 2
              : 1.2,
    
          color:( panelIndex.id ==
                  sheetText.id || selectedIndexPaths[sheetText.id]!=null)
              ? defaultPalette.tertiary
              : defaultPalette.black,
        ),
        borderRadius:
            BorderRadius.circular(10),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisSize: MainAxisSize.min,
        children: [
          
          Row(
            children: [
              if(sheetText.type == SheetTextType.date|| sheetText.type == SheetTextType.time || sheetText.type == SheetTextType.phone)
              const SizedBox(width:4),
              sheetText.type == SheetTextType.bool
                ? Transform.rotate(
                  angle: -pi/2,
                  child: Icon(
                    (bool.tryParse(
                     sheetText.textEditorConfigurations.controller.document.toPlainText().trim().toLowerCase()
                    )??false)?
                    TablerIcons.toggle_right_filled:
                    TablerIcons.toggle_left,
                    size:15),
                  ):
              Icon( sheetText.locked?
                 TablerIcons.lock:
                sheetText.type == SheetTextType.string
                ? TablerIcons.cursor_text
                : sheetText.type == SheetTextType.integer
                ? TablerIcons.numbers
                : sheetText.type == SheetTextType.date
                ? TablerIcons.calendar_week
                : sheetText.type == SheetTextType.time
                ? TablerIcons.clock_hour_8
                : sheetText.type == SheetTextType.phone
                ? TablerIcons.phone
                : TablerIcons.decimal,

                size:sheetText.type == SheetTextType.date || sheetText.type == SheetTextType.time
                ?16: 15,
              ),
              if(sheetText.type == SheetTextType.date|| sheetText.type == SheetTextType.time || sheetText.type == SheetTextType.phone)
              const SizedBox(width:2),
              
              if(sheetText.name != 'unlabeled')
          ...[
            ConstrainedBox(
              constraints: BoxConstraints(maxWidth: mapValue(value: (sWidth * (1 - wH1DividerPosition - wH2DividerPosition)).clamp(200, double.infinity), inMin: 200, inMax: 2122, outMin: 20, outMax: 200)),
              child: 
              Text(
                  sheetText.name,
                  maxLines: 2,
                  overflow:TextOverflow.ellipsis,
                  style: GoogleFonts.lexend(
                    letterSpacing: -1,
                    height:0.9,
                    fontWeight: FontWeight.w500,
                    fontSize: 12,
                    color: defaultPalette.black),
                ),
              ),
              const SizedBox(width:4),],
              //the fields
              Expanded(
              flex: 50,
              child: sheetText.type == SheetTextType.date
                  ? Container(
                      padding: EdgeInsets.symmetric(horizontal:0, vertical: 0),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5),
                      ),
                      child: Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: Container(
                                  padding:const  EdgeInsets.symmetric(horizontal: 2, vertical: 0),
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(5),
                                    color: defaultPalette.secondary,
                                  ),
                                  child: Text(
                                    '${extractedDate?.day.toString().padLeft(2, '0') ?? '--'}',
                                    textAlign: TextAlign.center,
                                    style: GoogleFonts.lexend(
                                  fontSize: 15,
                                  letterSpacing: -0.5,
                                  color: defaultPalette.extras[0],
                                  fontWeight: FontWeight.w500,
                                ),
                                  ),
                                ),
                              ),
                              Text('-'),
                              Expanded(
                                child: Container(
                                  padding:const  EdgeInsets.symmetric(horizontal: 2, vertical: 0),
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(5),
                                    color: defaultPalette.secondary,
                                  ),
                                  child: Text(
                                    '${extractedDate?.month.toString().padLeft(2, '0') ?? '--'}',
                                    textAlign: TextAlign.center,
                                    style: GoogleFonts.lexend(
                                      fontSize: 15,
                                      letterSpacing: -0.5,
                                      color: defaultPalette.extras[0],
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ),
                              Text('-'),
                              Expanded(
                                child: Container(
                                  padding: const EdgeInsets.only(right: 2,),
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(5),
                                    color: defaultPalette.secondary,
                                  ),
                                  child: Text(
                                    ' ${extractedDate?.year ?? '----'}  ',
                                    textAlign: TextAlign.center,
                                    style: GoogleFonts.lexend(
                                      fontSize: 15,
                                      letterSpacing: -0.5,
                                      color: defaultPalette.extras[0],
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height:4),
                          QuillEditor(
                            configurations: sheetText.textEditorConfigurations,
                            focusNode: sheetText.focusNode,
                            scrollController: ScrollController(),
                          ),
                        ],
                      ),
                    )
                  : sheetText.type == SheetTextType.time
                  ? Row(
                    children: [
                      Builder(builder: (context) {
                        final time = extractTimeFromDelta(sheetText.textEditorController.document);
                        final hourStr = time?.hour.toString().padLeft(2, '0') ?? '--';
                        final minuteStr = time?.minute.toString().padLeft(2, '0') ?? '--';
                        
                        return Expanded(
                          child: Column(
                            children: [
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                children: [
                                  Expanded(
                                    child: Container(
                                      alignment: Alignment(0, 0),
                                      padding: EdgeInsets.symmetric(horizontal: 4, vertical: 0),
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(5),
                                        color: defaultPalette.secondary,
                                      ),child: Text(hourStr, style: GoogleFonts.lexend(
                                    fontSize: 15,
                                    letterSpacing: -1,
                                  ),)),
                                  ),
                                  const Text(' : ', style:TextStyle(fontSize: 13)),
                                  Expanded(child: Container(
                                    alignment: const Alignment(0, 0),
                                    padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 0),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(5),
                                      color: defaultPalette.secondary,
                                    ),child: Text(minuteStr, style: GoogleFonts.lexend(
                                    fontSize: 15,
                                    letterSpacing: -1,
                                  ),))),
                                ],
                              ),
                              const SizedBox(height:4),
                              QuillEditor(
                                configurations: sheetText.textEditorConfigurations,
                                focusNode: sheetText.focusNode,
                                scrollController: ScrollController(),
                              ),
                            ],
                          ),
                        );
                      }),
                      
                    ],
                  )
                  : QuillEditor(
                      configurations: sheetText.textEditorConfigurations,
                      focusNode: sheetText.focusNode,
                      scrollController: ScrollController(),
                    ),
                      
              ),
              //the buttons in the end
              if(sheetText.hide)
              ...[
              SizedBox(width:2),
              ClipRRect(
                borderRadius: BorderRadius.circular(9999),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    focusColor: defaultPalette.primary,
                    hoverColor: defaultPalette.primary,
                    highlightColor: defaultPalette.primary,
                    onTap: () {
                      setState(() {
                        sheetText.hide = !sheetText.hide;
                      });
                    },
                    child: const Icon(
                      TablerIcons.eye_closed,
                      size: 15,
                    ),
                  ),
                ),
              ),
              ],
              if(sheetText.type == SheetTextType.phone)
              ...[const SizedBox(width: 2),
              ConstrainedBox(
                  constraints: BoxConstraints(minWidth: 20),
                  child: CountryCodePicker(
                    padding: EdgeInsets.only(left:2, right:4),
                    insetPadding: EdgeInsets.all(100),
                    flagWidth: 16,
                    // hideMainText: true,
                    margin: EdgeInsets.only(right:2),
                    alignLeft: false,
                    mode: CountryCodePickerMode.dialog,
                    onChanged: (country) {
                      print('Country code selected: ${country.code}');
                    },
                    initialSelection: 'AW',
                    elevation: 1,
                    shadowColor: defaultPalette.extras[0].withOpacity(0.3),
                    surfaceTintColor: defaultPalette.extras[0],
                    barrierColor: defaultPalette.extras[0].withOpacity(0.3),
                    showFlag: true,
                    showDropDownButton: false,
                    dialogBackgroundColor: defaultPalette.primary,
                    dialogTextStyle:  GoogleFonts.lexend(
                      fontSize: 15,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0],
                      fontWeight: FontWeight.w400,
                    ),
                    textStyle:  GoogleFonts.lexend(
                      fontSize: 12,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0],
                      fontWeight: FontWeight.w600,
                    ),
                    searchStyle:  GoogleFonts.lexend(
                      fontSize: 15,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0],
                      fontWeight: FontWeight.w400,
                    ),
                    searchDecoration: InputDecoration(
                      labelStyle: GoogleFonts.lexend(
                        fontSize: 24,
                        // fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0],
                      ),
                      hintStyle: GoogleFonts.lexend(
                        fontSize: 15,
                        color: defaultPalette.extras[0].withOpacity(0.6),
                      ),
                      errorStyle: GoogleFonts.lexend(
                        fontSize: 15,
                        color: defaultPalette.extras[0].withOpacity(0.6),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: defaultPalette.tertiary, width: 2),
                        borderRadius: BorderRadius.circular(8)
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: defaultPalette.tertiary, width: 2),
                        borderRadius: BorderRadius.circular(8)
                      )
                    ),
                    
                  ),
                )],
              
              if(sheetText.type == SheetTextType.date)
              ...[
                const SizedBox(width: 2),
                Material(
                  color: defaultPalette.primary,
                  child: InkWell(
                    child: Icon(TablerIcons.pencil, size: 18),
                    onTap: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: extractedDate ?? DateTime.now(),
                        firstDate: DateTime(1800),
                        lastDate: DateTime(2100),
                        barrierColor: defaultPalette.extras[0].withOpacity(0.5),
                        builder: (context, child) {
                        return Theme(
                          data: Theme.of(context).copyWith(
                            inputDecorationTheme: InputDecorationTheme(
                              labelStyle: GoogleFonts.lexend(
                                fontSize: 12,
                                // fontWeight: FontWeight.w600,
                                color: defaultPalette.extras[0],
                              ),
                              hintStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.extras[0].withOpacity(0.6),
                              ),
                              errorStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.extras[0].withOpacity(0.6),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(color: defaultPalette.tertiary, width: 2),
                                borderRadius: BorderRadius.circular(8)
                              )
                            ),
                            
                            textTheme: Theme.of(context).textTheme.copyWith(
                              titleLarge: GoogleFonts.lexend(
                                fontSize: 24,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              headlineSmall: GoogleFonts.lexend(
                                fontSize: 20,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              headlineMedium: GoogleFonts.lexend(
                                fontSize: 20,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                            ),
                            textButtonTheme: TextButtonThemeData(
                              
                              style: ButtonStyle(
                  
                                textStyle: WidgetStateProperty.all(
                                  GoogleFonts.lexend(
                                    fontSize: 15,
                                    letterSpacing: -1,
                                  ),
                                ),
                                foregroundColor: WidgetStateProperty.all(defaultPalette.tertiary),
                              ),
                            ),
                            datePickerTheme: DatePickerThemeData(
                              backgroundColor: defaultPalette.primary,
                              rangePickerBackgroundColor: defaultPalette.tertiary,
                              elevation: 20,
                              // Selected date/year/month
                              dayBackgroundColor: WidgetStateProperty.resolveWith((states) {
                                if (states.contains(WidgetState.selected)) {
                                  return defaultPalette.tertiary;
                                }
                                return null;
                              }),
                              locale: const Locale('en', 'IN'),
                              todayBorder: BorderSide.none,
                              todayBackgroundColor:  WidgetStateProperty.resolveWith((states) {
                                if (states.contains(WidgetState.selected)) {
                                  return defaultPalette.tertiary;
                                } else {
                                  return defaultPalette.primary;
                                }
                                return null;
                              }),
                              todayForegroundColor:  WidgetStateProperty.resolveWith((states) {
                                if (states.contains(WidgetState.selected)) {
                                  return defaultPalette.primary;
                                } else {
                                  return defaultPalette.extras[0];
                                }
                                return null;
                              }),
                              yearForegroundColor: WidgetStateProperty.resolveWith((states) {
                                if (states.contains(WidgetState.selected)) {
                                  return defaultPalette.primary;
                                }
                                return null;
                              }),
                              yearBackgroundColor: WidgetStateProperty.resolveWith((states) {
                                if (states.contains(WidgetState.selected)) {
                                  return defaultPalette.tertiary;
                                } else {
                                  return defaultPalette.transparent;
                                }
                                return null;
                              }),
                              dividerColor: defaultPalette.extras[0].withOpacity(0.4),
                              confirmButtonStyle:  ButtonStyle(
                              textStyle: WidgetStateProperty.all(
                                GoogleFonts.lexend(
                                  fontSize: 15,
                                  letterSpacing: -1,
                                  color: defaultPalette.tertiary,
                                  fontWeight: FontWeight.w400,
                                ),
                              ),
                              overlayColor: WidgetStateProperty.resolveWith((states) {
                                  if (states.contains(WidgetState.hovered)) {
                                    return defaultPalette.extras[0].withOpacity(0.08); // hover color
                                  }
                                  if (states.contains(WidgetState.pressed)) {
                                    return defaultPalette.tertiary.withOpacity(0.2); // splash/press
                                  }
                                  return null;
                                }),
                                splashFactory: InkRipple.splashFactory,
                              ),
                              cancelButtonStyle:  ButtonStyle(
                              textStyle: WidgetStateProperty.all(
                                GoogleFonts.lexend(
                                  fontSize: 15,
                                  letterSpacing: -1,
                                  color: defaultPalette.tertiary,
                                  fontWeight: FontWeight.w400,
                                ),
                              ),
                              overlayColor: WidgetStateProperty.resolveWith((states) {
                                  if (states.contains(WidgetState.hovered)) {
                                    return defaultPalette.extras[0].withOpacity(0.08); // hover color
                                  }
                                  if (states.contains(WidgetState.pressed)) {
                                    return defaultPalette.tertiary.withOpacity(0.2); // splash/press
                                  }
                                  return null;
                                }),
                                splashFactory: InkRipple.splashFactory,
                              ),
                              yearStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.tertiary,
                                letterSpacing: -1,
                              ),
                              dayStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.tertiary,
                                letterSpacing: -1,
                              ),
                              weekdayStyle: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.tertiary,
                                fontWeight: FontWeight.w600,
                              ),
                              headerHeadlineStyle: GoogleFonts.lexend(
                                fontSize: 30,
                                letterSpacing: -1,
                                color: defaultPalette.tertiary,
                                fontWeight: FontWeight.w600,
                              ),
                              rangePickerHeaderHeadlineStyle: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.tertiary,
                                // fontWeight: FontWeight.w600,
                              ),
                              rangePickerHeaderHelpStyle: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.tertiary,
                                fontWeight: FontWeight.w600,
                              ),
                              headerHelpStyle: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.tertiary,
                                // fontWeight: FontWeight.w600,
                              ),
                              // Optional border radius:
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16), // <- This is the border
                              ),
                            ),
                          ),
                          child: child!,
                        );
                      },
                      );
                      if (picked != null) {
                        final controller = sheetText.textEditorConfigurations.controller;
                        final doc = controller.document;
                        final delta = doc.toDelta();
                        final plainText = doc.toPlainText();
                        final formattedDay = picked.day.toString().padLeft(2, '0');
                        final formattedMonth = picked.month.toString().padLeft(2, '0');
                        final formattedYear = picked.year.toString();
                        final formattedDate ='${formattedDay}/${formattedMonth}/${formattedYear}';
                        if (plainText.trim().toLowerCase().isEmpty) {
                          print('object');
                          controller.replaceText(0, 0, formattedDate, TextSelection.collapsed(offset:0));
                        } else  if (plainText.trim().toLowerCase().length<5) {
                          controller.replaceText(0, plainText.trim().toLowerCase().length, formattedDate, TextSelection.collapsed(offset:0));
                        }
                        Map<String, dynamic>? getAttrsAt(int offset) {
                          int current = 0;
                          for (final op in delta.toList()) {
                            final text = op.data is String ? op.data as String : '';
                            if (current + text.length > offset) return op.attributes;
                            current += text.length;
                          }
                          return null;
                        }

                        // Mappings
                        final monthMap = {
                          1: 'January', 2: 'February', 3: 'March', 4: 'April',
                          5: 'May', 6: 'June', 7: 'July', 8: 'August',
                          9: 'September', 10: 'October', 11: 'November', 12: 'December'
                        };

                        
                        final monthNames = monthMap.values.map((e) => e.toLowerCase()).toList();

                        int? offsetDay, offsetMonth, offsetYear;
                        String? dayStr, monthStr, yearStr;

                        // 1. Day (first 1-2 digit standalone)
                        final dayMatch = RegExp(r'\b(\d{1,2})(st|nd|rd|th)?\b(?!\d)').firstMatch(plainText);
                        if (dayMatch != null) {
                          dayStr = dayMatch.group(1)!;
                          offsetDay = plainText.indexOf(dayStr, 0);
                        }

                        // 2. Year (4-digit)
                        final yearMatch = RegExp(r'\b(\d{4})\b').firstMatch(plainText);
                        if (yearMatch != null) {
                          yearStr = yearMatch.group(1)!;
                          offsetYear = plainText.indexOf(yearStr);
                        }

                        // 3. Month (try name first)
                        final monthNameMatch = RegExp(
                          r'\b(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sept|sep|october|oct|november|nov|december|dec)\b',
                          caseSensitive: false,
                        ).firstMatch(plainText);

                        if (monthNameMatch != null) {
                          monthStr = monthNameMatch.group(0)!;
                          offsetMonth = plainText.indexOf(monthStr, 0);
                        } else {
                          // fallback: second standalone 1-2 digit number
                          final smallNums = RegExp(r'\b(\d{1,2})\b(?!\d)').allMatches(plainText).toList();
                          if (smallNums.length >= 2) {
                            final first = smallNums[0].group(1)!;
                            final second = smallNums[1].group(1)!;
                            if (dayStr != null && first == dayStr) {
                              monthStr = second;
                              offsetMonth = plainText.indexOf(second, offsetDay! + dayStr.length);
                            }
                          }
                        }

                        if (yearStr != null && offsetYear != null) {
                          controller.replaceText(
                            offsetYear,
                            yearStr.length,
                            Delta()..insert(formattedYear, getAttrsAt(offsetYear)),
                            TextSelection.collapsed(offset: 0),
                          );
                        }

                        if (monthStr != null && offsetMonth != null) {
                          final replacement = monthNameMatch != null ? monthMap[picked.month]! : formattedMonth;
                          controller.replaceText(
                            offsetMonth,
                            monthStr.length,
                            Delta()..insert(replacement, getAttrsAt(offsetMonth)),
                            TextSelection.collapsed(offset: 0),
                          );
                        }

                        if (dayStr != null && offsetDay != null) {
                          controller.replaceText(
                            offsetDay,
                            dayStr.length,
                            Delta()..insert(formattedDay, getAttrsAt(offsetDay)),
                            TextSelection.collapsed(offset: 0),
                          );
                        }

                      }
                    },
                  ),
                )
              ],
              if(sheetText.type == SheetTextType.time)
              ...[
                const SizedBox(width: 2),
                Material(
                  color: defaultPalette.primary,
                  child: InkWell(
                    child: const Icon(TablerIcons.pencil, size: 18),
                    onTap: () async {
                      final picked = await showTimePicker(
                        context: context,
                        initialTime: extractTimeFromDelta(sheetText.textEditorController.document) ?? TimeOfDay.now(),
                        builder: (context, child) {
                          return Theme(
                            data: Theme.of(context).copyWith(
                              inputDecorationTheme: InputDecorationTheme(
                              labelStyle: GoogleFonts.lexend(
                                fontSize: 24,
                                // fontWeight: FontWeight.w600,
                                color: defaultPalette.extras[0],
                              ),
                              hintStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.extras[0].withOpacity(0.6),
                              ),
                              errorStyle: GoogleFonts.lexend(
                                fontSize: 15,
                                color: defaultPalette.extras[0].withOpacity(0.6),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(color: defaultPalette.tertiary, width: 2),
                                borderRadius: BorderRadius.circular(8)
                              )
                            ),
                            
                            textTheme: Theme.of(context).textTheme.copyWith(
                              titleLarge: GoogleFonts.lexend(
                                fontSize: 24,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              titleMedium: GoogleFonts.lexend(
                                fontSize: 48,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              
                              titleSmall: GoogleFonts.lexend(
                                fontSize: 48,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              headlineSmall: GoogleFonts.lexend(
                                fontSize: 20,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              headlineMedium: GoogleFonts.lexend(
                                fontSize: 20,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              bodyLarge: GoogleFonts.lexend(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              displayLarge: GoogleFonts.lexend(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                              headlineLarge: GoogleFonts.lexend(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.black,
                              ),
                            ),
                            textButtonTheme: TextButtonThemeData(
                              
                              style: ButtonStyle(
                  
                                textStyle: WidgetStateProperty.all(
                                  GoogleFonts.lexend(
                                    fontSize: 15,
                                    letterSpacing: -1,
                                  ),
                                ),
                                foregroundColor: WidgetStateProperty.all(defaultPalette.tertiary),
                              ),
                            ),
                            timePickerTheme: TimePickerThemeData(
                                backgroundColor: defaultPalette.primary,
                                hourMinuteTextStyle: GoogleFonts.lexend(
                                  fontSize: 48,
                                  fontWeight: FontWeight.w600,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1,
                                ),
                                dayPeriodTextStyle: GoogleFonts.lexend(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1,
                                ),
                                helpTextStyle: GoogleFonts.lexend(
                                  fontSize: 15,
                                  fontWeight: FontWeight.w400,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1,
                                ),
                                entryModeIconColor: defaultPalette.extras[0],
                                dialHandColor: defaultPalette.tertiary,
                                dialBackgroundColor: defaultPalette.primary,
                                hourMinuteColor: defaultPalette.primary,
                                timeSelectorSeparatorTextStyle: WidgetStatePropertyAll(GoogleFonts.lexend(
                                  fontSize: 48,
                                  fontWeight: FontWeight.w400,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1,
                                ),)
                              ),
                              
                            ),
                            child: Localizations.override(
                              context: context,
                              locale: const Locale('en', 'GB'), // DD/MM/YYYY and 24-hour format
                              child: child!,
                            ),
                          );
                        },
                      
                      );
                      if (picked != null) {
                        final formattedTime = '${picked.hour.toString().padLeft(2, '0')}:${picked.minute.toString().padLeft(2, '0')}';
                        final controller = sheetText.textEditorConfigurations.controller;
                        final plainText = controller.document.toPlainText();
                        if (plainText.trim().toLowerCase().isEmpty) {
                          // print('object');
                          controller.replaceText(0, 0, formattedTime, TextSelection.collapsed(offset:0));
                        }
                        final match = RegExp(r'(\d{1,2})\D+(\d{1,2})').firstMatch(plainText);
                        
                        if (match == null) {
                          final now = TimeOfDay.now();
                          final formatted = '${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}';
                          final originalDelta = controller.document.toDelta();
                          final attrs = originalDelta.isNotEmpty ? originalDelta.first.attributes : null;

                          controller.replaceText(
                            0,
                            controller.document.length - 1,
                            Delta()..insert(formatted, attrs),
                            TextSelection.collapsed(offset: formatted.length),
                          );
                        } else {
                          final hourStr = picked.hour.toString().padLeft(2, '0');
                          final minuteStr = picked.minute.toString().padLeft(2, '0');
                          final delta = controller.document.toDelta();

                          int docOffset = 0;
                          int hourOffset = -1;
                          int minuteOffset = -1;
                          int hourLength = match.group(1)!.length;
                          int minuteLength = match.group(2)!.length;
                          int hourIndex = match.start + plainText.substring(match.start).indexOf(match.group(1)!);
                          int minuteIndex = match.start + plainText.substring(match.start).indexOf(match.group(2)!);

                          // Traverse the delta to find attribute-preserving offsets
                          for (final op in delta.toList()) {
                            final insert = op.data;
                            final length = insert is String ? insert.length : 1;

                            if (hourOffset == -1 && docOffset + length >= hourIndex) {
                              hourOffset = docOffset + (hourIndex - docOffset);
                            }

                            if (minuteOffset == -1 && docOffset + length >= minuteIndex) {
                              minuteOffset = docOffset + (minuteIndex - docOffset);
                            }

                            docOffset += length;
                          }

                          if (hourOffset != -1 && minuteOffset != -1) {
                            controller.replaceText(
                              hourOffset,
                              hourLength,
                              hourStr,
                              TextSelection.collapsed(offset: hourOffset + hourStr.length),
                            );
                            controller.replaceText(
                              minuteOffset,
                              minuteLength,
                              minuteStr,
                              TextSelection.collapsed(offset: minuteOffset + minuteStr.length),
                            );
                          }
                        }

                      }
                    },
                  ),
                )
              ],
            ],
          ),
      
          if(sheetText.inputBlocks.length>1|| sheetText.inputBlocks[0].id != sheetText.id)
          Row(
            children: [
              // SizedBox(width:4),
              const Icon(
                TablerIcons.math_integral,
                size: 15,
              ),
              // SizedBox(width:4),
              Expanded(
                child: Container(
                  padding:EdgeInsets.symmetric(horizontal:4),
                  margin: EdgeInsets.only(top:4),
                  decoration:BoxDecoration(
                    color:defaultPalette.secondary,
                    borderRadius:BorderRadius.circular(5)
                  ),
                  child: QuillEditor(
                    configurations: buildCombinedQuillConfiguration(sheetText.inputBlocks),
                    focusNode: FocusNode(),
                    scrollController:
                        ScrollController(),
                  ),
                ),
              ),
            ],
          ),
        
        ],
      ),
    );                 
  }

  List<ContextMenuEntry> buildContextMenuEntries( QuillController textEditorController, int index, SheetText sheetText,SheetList sheetList) {
  var entries = <ContextMenuEntry>[];
  var style = GoogleFonts.lexend(
    color: defaultPalette.extras[0],
    fontWeight: FontWeight.w400,
    letterSpacing: -0.5,
    
  );
  bool hasSelection = textEditorController
        .selection.start !=
    textEditorController.selection.end;

  // Cut
  if (hasSelection) {
  entries.add(MenuItem(
    label: 'Cut',
    icon: TablerIcons.cut,
    style:  style,
    onSelected: () {
      var selectedText =
          textEditorController.document
              .getPlainText(
        textEditorController
            .selection.start,
        textEditorController
            .selection.end,
      );
      Clipboard.setData(ClipboardData(
          text: selectedText));
      textEditorController.replaceText(
        textEditorController
            .selection.start,
        textEditorController
                .selection.end -
            textEditorController
                .selection.start,
        '',
        null,
      );
    },
  ));
  }

  // Copy
  if (hasSelection) {
  entries.add(MenuItem(
    label: 'Copy',
    icon: TablerIcons.copy,
    style:  style,
    onSelected: () {
      var selectedText =
          textEditorController.document
              .getPlainText(
        textEditorController
            .selection.start,
        textEditorController
            .selection.end,
      );
      Clipboard.setData(ClipboardData(
          text: selectedText));
    },
  ));
  }

  // Paste
  entries.add(MenuItem(
  label: 'Paste',
  icon: TablerIcons.clipboard,
  style:  style,
  onSelected: () async {
    var data = await Clipboard.getData(
        'text/plain');
    if (data != null) {
      int baseOffset =
          textEditorController
              .selection.baseOffset;
      if (textEditorController
          .selection.isCollapsed) {
        textEditorController
            .replaceText(
          baseOffset,
          0, // No text to replace
          data.text!,
          null,
        );
      } else {
        textEditorController
            .replaceText(
          baseOffset,
          textEditorController.selection
                  .extentOffset -
              baseOffset,
          data.text!,
          null,
        );
      }
    }
  },
  ));

  // Select All
  entries.add(MenuItem(
  label: 'Select All',
  icon: TablerIcons.select_all,
  style:  style,
  onSelected: () {
    textEditorController
        .updateSelection(
            TextSelection(
              baseOffset: 0,
              extentOffset:
                  textEditorController
                      .document.length,
            ),
            ChangeSource.local);
  },
  ));

  entries.add(const MenuDivider());

  // Undo
  if (textEditorController.hasUndo) {
  entries.add(MenuItem(
    label: 'Undo',
    icon: TablerIcons.corner_up_left,
    style:  style,
    onSelected: () {
      textEditorController.undo();
    },
  ));
  } else {
  entries.add( MenuItem(
    label: 'Undo',
    icon: TablerIcons.corner_up_left,
    style:  style,
    onSelected: null,
  ));
  }

  // Redo
  if (textEditorController.hasRedo) {
  entries.add(MenuItem(
    label: 'Redo',
    icon: TablerIcons.corner_down_right,
    style:  style,
    onSelected: () {
      textEditorController.redo();
    },
  ));
  } else {
  entries.add( MenuItem(
    label: 'Redo',
    icon: TablerIcons.corner_down_right,
    style:  style,
    onSelected: null,
  ));
  }
  entries.addAll([
  const MenuHeader(text: 'ops'),
  //ADD ITEMS
  MenuItem.submenu(
      label: 'Add',
      icon: TablerIcons.new_section,
      style:  style,
      items: [
        MenuItem.submenu(
            label: 'Text',
            icon: TablerIcons
                .text_recognition,
            style:  style,
            items: [
              //add text before the selected one
              MenuItem(
                label: 'Before',
                icon: TablerIcons
                    .row_insert_top,
                style:  style,
                onSelected: () {
                  setState(() {
                    var newId = 'TX-${Uuid().v4()}';
                  var newItem = _addTextField( 
                    id: newId,
                    shouldReturn:  true,
                    textDecoration: newSuperDecoration(),
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                      inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId,)],
                    );
                  sheetList.insert( index, newItem);
                  _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
              //add text after the selected one
              MenuItem(
                label: 'After',
                icon: TablerIcons
                    .row_insert_bottom,
                style:  style,
                onSelected: () {
                  setState(() {
                    var newId = 'TX-${Uuid().v4()}';
                  var newItem = _addTextField( 
                    id: newId,
                    shouldReturn:  true,
                    textDecoration: newSuperDecoration(),
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newId,)],
                    );
                  
                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                        index+1,
                        newItem);
                  } else {
                    sheetList.add(
                        newItem);
                  }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              //add a new row with a new textfield inside at the current index
              MenuItem(
                label: 'In a New List',
                icon: TablerIcons
                    .code_plus,
                style:  style,
                onSelected: () {
                  setState(() {
                    var newId ='LI-${ const Uuid().v4()}';
                    var newList = SheetList(
                    direction: Axis.vertical,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration().id,
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );
                    var newItemId = 'TX-${Uuid().v4()}';
                    var newItem = _addTextField( 
                      id: newItemId,
                      shouldReturn:  true,
                      textDecoration: newSuperDecoration(),
                      indexPath: IndexPath(
                      parent: newList.indexPath,
                      index: newList.length),inputBlocks: [InputBlock(indexPath: IndexPath(index: -69), blockIndex: [-2],id: newItemId,)],
                      );
                    newList.sheetList.add(newItem);
                    
                    sheetList.insert(
                    index,
                    newList
                    );
                    print('plused');
                    print(sheetList.id);
                    _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
            ]),
        MenuItem.submenu(
            label: 'List',
            icon: TablerIcons
                .brackets_contain_start,
            style:  style,
            items: [
              //add row before the selected one
              MenuItem(
                label: 'Row Before',
                icon: TablerIcons
                    .row_insert_top,
                style:  style,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  sheetList.insert(
                  index,
                  SheetList(
                  direction:
                    Axis.horizontal,
                  id: newId,
                  parentId: sheetList.id,
                  listDecoration: newSuperDecoration().id,
                  sheetList: [
                  ],
                  indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  ));
                  _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
              //add row after the selected one
              MenuItem(
                label: 'Row After',
                icon: TablerIcons
                    .row_insert_bottom,
                style:  style,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  

                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                    index+1,
                    SheetList(
                    direction:
                      Axis.horizontal,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration().id,
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  )); 
                  } else {
                    sheetList.add(
                      SheetList(
                      direction:
                        Axis.vertical,
                      id: newId,
                      parentId: sheetList.id,
                      listDecoration: newSuperDecoration().id,
                      sheetList: [
                      ],
                      indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                      ));
                      }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              
              //add column before the selected one
              MenuItem(
                label: 'Column Before',
                icon: TablerIcons
                    .row_insert_top,
                style:  style,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  sheetList.insert(
                  index,
                  SheetList(
                  direction:
                    Axis.vertical,
                  id: newId,
                  parentId: sheetList.id,
                  listDecoration:  newSuperDecoration().id,
                  sheetList: [
                  ],
                  indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  ));
                  _reassignSheetListIndexPath(sheetList);

                  });
                },
              ),
              //add column after the selected one
              MenuItem(
                label: 'Column After',
                icon: TablerIcons
                    .row_insert_bottom,
                style:  style,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid().v4()}';
                  

                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                    index+1,
                    SheetList(
                    direction:
                      Axis.vertical,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration().id,
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    ));    
                  } else {
                    sheetList.add(
                      SheetList(
                      direction:
                        Axis.vertical,
                      id: newId,
                      parentId: sheetList.id,
                      listDecoration: newSuperDecoration().id,
                      sheetList: [
                      ],indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                      ));
                      }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              
            ])    
      ]),
  //Wrap ITEMS
  MenuItem.submenu(
      label: 'Wrap',
      icon: TablerIcons.brackets_contain,
      style:  style,
      items: [
        MenuItem(
          label: 'In a Row',
          icon: TablerIcons.layout_rows ,
          style:  style,
          onSelected: () {
            setState(() {
              
                wrapTextInAList(0);
                _reassignSheetListIndexPath(sheetList);
            });
          },
        ),
        MenuItem(
          label: 'In a Column',
          icon: TablerIcons
              .layout_columns,
          style:  style,
          onSelected: () {
            setState(() {
              
                wrapTextInAList(1);
                _reassignSheetListIndexPath(sheetList);     
              
            });
          },
        ),
            
      ]),
  //Clear Field
  MenuItem(
    label: 'Clear',
    icon: TablerIcons.square_rounded_x,
    style:  style,
    onSelected: () async {
      await showAdaptiveDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title:
                Text('Confirm Clear'),
            content: Text(
                'This will clear the text from current Text Field. Are you sure?'),
            actions: [
              TextButton(
                  onPressed: () {
                    setState(() {
                      sheetText
                              .textEditorController
                              .document =
                          Document();
                    });
                    Navigator.pop(
                        context);
                  },
                  child: Text('Yes')),
              TextButton(
                  onPressed: () {
                    Navigator.pop(
                        context);
                  },
                  child: Text('No')),
            ],
          );
        },
      );
    },
  ),
  //Delete
  MenuItem(
    label: 'Delete',
    icon: TablerIcons.trash,
    style:  style,
    onSelected: () async {
      await showAdaptiveDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text(
                'Confirm Delete'),
            content: const Text(
                'This will DELETE the current Text Field with its contents. Are you sure?'),
            actions: [
              TextButton(
                  onPressed: () {
                    setState(() {
                      sheetList
                          .removeAt(
                              index);
                      panelIndex.id =
                          '';
                      _reassignSheetListIndexPath(sheetList);    
                      doubleCheckLabelList(labelList);
                    });
                    Navigator.pop(
                        context);
                  },
                  child: const Text(
                      'Yes')),
              TextButton(
                  onPressed: () {
                    Navigator.pop(
                        context);
                  },
                  child:
                      const Text('No')),
            ],
          );
        },
      );
    },
  )
  ]);

  return entries;
  }

  void onRightClick(SheetText sheetText, LongPressDownDetails d, int index, SheetList sheetList) {
    setState(() {
    panelIndex.id = sheetText.id;
    panelIndex.parentId = sheetText.parentId;
    panelIndex.parentIndexPath = sheetText.indexPath.parent;
    panelIndex.itemIndexPath = sheetText.indexPath;
    _findItem();
    });
  print('secondaryyyTapppppp');
  
  final entries = buildContextMenuEntries(
  sheetText.textEditorController, index, sheetText, sheetList);
  ContextMenu(
      entries: entries,
      boxDecoration: BoxDecoration(
          boxShadow: [
            BoxShadow(
              color: defaultPalette
                  .black
                  .withOpacity(0.3),
              blurRadius: 2,
            )
          ],
          color: defaultPalette.primary,
          borderRadius:
              BorderRadius.circular(
                  10)),
      position: Offset(
          d.globalPosition.dx,
          d.globalPosition.dy))
  .show(context);
  }
  
  void wrapInAList(int s) {
    setState(() {
      var listItem = (getItemAtPath(sheetListItem.indexPath.parent!) as SheetList).removeAt(sheetListItem.indexPath.index);
      
      var newId = 'LI-${ const Uuid().v4()}';              
      listItem.parentId = newId;  
      var newIndexPath = IndexPath(
        parent: listItem.indexPath.parent,
        index: listItem.indexPath.index);
      var newListIndexPath = IndexPath(
        parent: newIndexPath,
        index: 0);  
      var newlist = _reassignSheetListTreeIndexPath(sheetListItem.sheetList, newListIndexPath);
      
      (getItemAtPath(sheetListItem.indexPath.parent!) as SheetList).insert(
      listItem.indexPath.index,
      SheetList(
      direction:s==0? Axis.horizontal: Axis.vertical,
      id: newId,
      parentId: listItem.parentId,
      listDecoration: newSuperDecoration().id,
      sheetList: [
        (listItem as SheetList).copyWith(
          parentId: newId,
          indexPath: newListIndexPath,
          sheetList: newlist
        )
      ],
      indexPath: newIndexPath
      ));
      
      
      // panelIndex.id = listItem.id;
      panelIndex.parentId =  newId;
      panelIndex.parentIndexPath = newIndexPath;
      _findSheetListItem();
      
    });
  }
  
  void wrapTextInAList(int s) {
    setState(() {
      var textItem = (getItemAtPath(item.indexPath.parent!) as SheetList).removeAt(item.indexPath.index);
      print(textItem);
      var newId = 'LI-${ const Uuid().v4()}';              
      textItem.parentId = newId;  
      var newIndexPath = IndexPath(
        parent: textItem.indexPath.parent,
        index: textItem.indexPath.index);
      var newTextIndexPath = IndexPath(
        parent: newIndexPath,
        index: 0);  
      print(newIndexPath.toString());
      print(newTextIndexPath.toString());
      (getItemAtPath(item.indexPath.parent!) as SheetList).insert(
      newIndexPath.index,
      SheetList(
      direction:s==0? Axis.horizontal: Axis.vertical,
      id: newId,
      parentId: textItem.parentId,
      listDecoration: newSuperDecoration().id,
      sheetList: [
        textItem..indexPath = newTextIndexPath
      ],
      indexPath: newIndexPath
      ));
      
      
      // panelIndex.id = listItem.id;
      panelIndex.parentId =  newId;
      panelIndex.parentIndexPath = newIndexPath;
      _findSheetListItem();
      
    });
  }
  
  Widget buildSheetTableWidget(SheetTable sheetTable){
    var tableHeight = 0.0;
    var tableWidth = 0.0;
    sheetTable.rowData.forEach((element) => tableHeight += element.size+2,);
    sheetTable.columnData.forEach((element) => tableWidth += element.size+16,);
    

    Widget alphabetHeader(String s, int ind){
      return MouseRegion(
      cursor: SystemMouseCursors.resizeColumn,
      child: GestureDetector(
        onHorizontalDragUpdate: (details) {
          // Accumulate deltas without setState
          // print(details.delta.dx);
          _showOverlayAt(details.globalPosition + Offset(5,0), 
          sheetTable.columnData[ind - 1].size.toStringAsFixed(0), numberToColumnLabel(ind ));
           final col = ind  - 1;
          setState(() {
            sheetTable.columnData[col].size = (sheetTable.columnData[col].size + details.delta.dx)
            .clamp(sheetTable.columnData[col].minSize, sheetTable.columnData[col].maxSize);
          });
          // print(sheetTable.columnData[col].size);
        },
        onHorizontalDragEnd: (_) {
         
          _hideOverlay();
        },
        child: Container(
          width: sheetTable.columnData[ind-1].size+14,
          height: 18,
          margin: const EdgeInsets.only(bottom:3, left:1,right:1),
          alignment: Alignment(0, 0),
          decoration: BoxDecoration(
            color: defaultPalette.primary,
            border: Border(
              top: BorderSide.none,
              left: BorderSide.none,
              bottom: BorderSide.none,
              right: BorderSide(color: defaultPalette.extras[0].withOpacity(0.2))
              ),
              // borderRadius: BorderRadius.circular(0).copyWith(topRight: Radius.circular(vicinity.column == (sheetTable as SheetTable).columnData.length-1?12:0))
          ),
          child: sheetTable.columnData[ind-1].hide?
          Icon(TablerIcons.eye_closed, size: 13, color: defaultPalette.extras[0],):
          Text('${s}',
          style: GoogleFonts.lexend(
            letterSpacing: -1,
            fontSize: 12
          ),
          ),
        )));
      }

    Widget numberSideHeader(int ind){
      return Padding(
        padding: const EdgeInsets.only(right:2.0),
        child: MouseRegion(
            cursor: SystemMouseCursors.resizeRow,
            child: GestureDetector(
              onVerticalDragStart: (c) {
                
              },
              onVerticalDragUpdate: (details) {
                // Accumulate deltas without setState
                // _showOverlayAt(details.globalPosition + Offset(5,0), 
                // sheetTable.rowData[ind - 1].size.toStringAsFixed(0),  ind.toString());
                final row = ind - 1;
                 _showOverlayAt(details.globalPosition + Offset(5,0), 
                  sheetTable.rowData[ind - 1].size.toStringAsFixed(0), ind.toString() );
                setState(() {
                  sheetTable.rowData[row].size = (sheetTable.rowData[row].size + details.delta.dy)
                  .clamp(sheetTable.rowData[row].minSize, sheetTable.rowData[row].maxSize);
                });
              },
              onVerticalDragEnd: (_) {
                
                _hideOverlay();
              },
              child: Container(
              height:  sheetTable.rowData[ind - 1].size,
              width:15,
              margin: const EdgeInsets.symmetric(vertical: 1),
              alignment: Alignment(0, 0),
              decoration: BoxDecoration(
                color: defaultPalette.primary,
                border: Border(
                  top: BorderSide.none,
                  left: BorderSide.none,
                  bottom: BorderSide(color: defaultPalette.extras[0].withOpacity(0.4)),
                  right: BorderSide.none),
              ),
              child: sheetTable.rowData[ind-1].hide?
              Icon(TablerIcons.eye_closed, size: 13, color: defaultPalette.extras[0],):
              Text('${ind}',
              style: GoogleFonts.lexend(
                letterSpacing: -1,
                fontSize: 13
              ),
              ),
            ),
          ),
        ),
      );
    }

    //return to builTableWidget
    return GestureDetector(
        onTap: () {
          setState(() {
            if (panelIndex.id == '' || panelIndex.id =='yo' || item.id == 'yo') {
              panelIndex.id = sheetTable.cellData[0][0].sheetItem.id;
              panelIndex.itemIndexPath = sheetTable.cellData[0][0].sheetItem.indexPath;
              item = sheetTable.cellData[0][0].sheetItem as SheetText;
            }
            panelIndex.parentId = sheetTable.id;
            panelIndex.parentIndexPath = sheetTable.indexPath;
          });
        _findSheetTableItem(sheetTable);
        
        },
        onSecondaryTapDown: (d) {
          setState(() {
            panelIndex.id = sheetTable.cellData[0][0].sheetItem.id;
            panelIndex.parentId = sheetTable.id;
            panelIndex.parentIndexPath = sheetTable.indexPath;
            panelIndex.itemIndexPath = sheetTable.cellData[0][0].sheetItem.indexPath;
            _findItem();
            });
          print('secondaryyyTapppppp');
          
          final entries = <ContextMenuEntry>[
            MenuItem(
              label: 'delete',
              icon: TablerIcons.trash,
              hoverColor: defaultPalette.primary.withOpacity(0.8),
              style: GoogleFonts.lexend(
                letterSpacing: -1,
                fontSize: 12
              ),
              onSelected: () {
                var listItem = getItemAtPath(sheetTable.indexPath.parent!);
                setState(() {
                  (listItem as SheetList).sheetList.removeAt(sheetTable.indexPath.index);
                  _reassignSheetListIndexPath((listItem as SheetList));
                  assignIndexPathsAndDisambiguate(labelList, spreadSheetList);
                  doubleCheckLabelList(labelList);
                  resetPanelIndex();
                  whichPropertyTabIsClicked = 1;
                });
              },
            )
          ];
          ContextMenu(
              entries: entries,
              boxDecoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: defaultPalette
                          .black
                          .withOpacity(0.3),
                      blurRadius: 2,
                    )
                  ],
                  color: defaultPalette.extras[0],
                  borderRadius:
                      BorderRadius.circular(
                          10)),
              position: Offset(
                  d.globalPosition.dx,
                  d.globalPosition.dy))
          .show(context);
        },
        child: Container(
          margin: const EdgeInsets.all(4).copyWith(right:4),
          height:tableHeight+18+30+(sheetTable.name=='unlabeled'?0:18), // _+_+label height
          width:tableWidth,
          decoration:BoxDecoration(
            color:defaultPalette.primary,
            borderRadius: BorderRadius.circular(10),
            border: Border.fromBorderSide(
                panelIndex.parentId == sheetTable.id ?
                BorderSide(
                strokeAlign:
                    BorderSide.strokeAlignOutside,
                width: 2,
                color:defaultPalette.extras[3],): BorderSide.none
              ),
            ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Column(
              children: [
                if(sheetTable.name!='unlabeled')
                SizedBox(
                  height: 18,
                  child: Text(sheetTable.name,
                    maxLines:1,
                    overflow:TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                    letterSpacing: -1,
                    fontSize: 12
                  ),),
                ),
                Expanded(
                  child: Stack(
                    children: [
                      // the grey bg for table cells
                      Container(
                        margin: EdgeInsets.only(top:19, left:15, bottom: 5,right: 6),
                        decoration: BoxDecoration(
                        color:defaultPalette.secondary,
                        borderRadius: BorderRadius.circular(3)
                      ),
                      ),
                      // the Table
                      Row(
                        children: [
                          // 1,2,3,4 numbers side
                          Column(
                            children:[ 
                              Container(
                                height:22.5,
                                alignment: Alignment(0, 0),
                                decoration: BoxDecoration(
                                  color: defaultPalette.primary,
                                  border: Border(
                                    top: BorderSide.none,
                                    left: BorderSide.none,
                                    bottom: BorderSide(color: defaultPalette.extras[0].withOpacity(0.4)),
                                    right: BorderSide.none),
                                ),
                              ),
                              ...sheetTable.rowData.asMap().entries.map((rowEntry){
                              return numberSideHeader(rowEntry.key+1);
                            }).toList()
                            ],
                          ),
                          // ABCD and Cells
                          Expanded(
                            child: Container(
                              margin: EdgeInsets.only(right: 8),
                              child: ScrollConfiguration(
                                behavior: ScrollBehavior()
                                    .copyWith(scrollbars: false),
                                child: DynMouseScroll(
                                    durationMS: 500,
                                    scrollSpeed: 1,
                                    builder: (context, controller, physics) {
                                      return ScrollbarUltima(
                                        alwaysShowThumb: true,
                                        controller: controller,
                                        scrollbarPosition:
                                            ScrollbarPosition.bottom,
                                        backgroundColor: defaultPalette.primary,
                                        isDraggable: true,
                                        maxDynamicThumbLength: 90,
                                        thumbBuilder:
                                            (context, animation, widgetStates) {
                                          return Container(
                                            margin: EdgeInsets.only(bottom: 7.5),
                                            decoration: BoxDecoration(
                                                // border: Border.all(
                                                //   color:defaultPalette.extras[0].withOpacity(0.4)
                                                // ),
                                                color: defaultPalette.primary,
                                                borderRadius:
                                                    BorderRadius.circular(2)),
                                            height: 6,
                                          );
                                        },
                                        child: SingleChildScrollView(
                                        padding:const EdgeInsets.only(bottom: 4),
                                        controller: controller,
                                        physics: physics,
                                        scrollDirection:Axis.horizontal,
                                        child: SizedBox(
                                          width: tableWidth+1,
                                          child: Column(
                                            children:[
                                              //A B C D Headers
                                              Row(
                                              children: [
                                                SizedBox(width:1),
                                                ...sheetTable.columnData.asMap().entries.map((colEntry){
                                                return alphabetHeader(numberToColumnLabel(colEntry.key+1), colEntry.key+1);
                                              }).toList()],
                                              ),
                                              Expanded(
                                                child: CustomMultiChildLayout(
                                                  delegate: SheetTableUIWidgetLayoutDelegate(
                                                    cells: sheetTable.cellData,
                                                    columnData: sheetTable.columnData,
                                                    rowData: sheetTable.rowData,
                                                  ),
                                                  children:[
                                                  for (var rowEntry in sheetTable.cellData)
                                                    for (var cell in rowEntry)
                                                      if (cell.isVisible)
                                                        LayoutId(
                                                          id: cell.id, // like "A1", "B3"
                                                          child: GestureDetector(
                                                            onTap: () {
                                                              var (row, col) = parseCellId(cell.id);
                                                              setState(() {
                                                                item = cell.sheetItem as SheetText;
                                                                panelIndex.id = cell.sheetItem.id;
                                                                panelIndex.parentId = cell.sheetItem.parentId;
                                                                panelIndex.parentIndexPath = sheetTable.indexPath;
                                                                panelIndex.itemIndexPath = cell.sheetItem.indexPath;
                                                                sheetTableItem = sheetTable;
                                                                _findSheetTableItem(sheetTable);
                                                                sheetTableVariables.rowLayerIndex = row;
                                                                sheetTableVariables.columnLayerIndex = col;
                                                                whichTablePropertyTabIsClicked = 1;
                                                                _findItem();
                                                              });
                                                            },
                                                            child: Container(
                                                              decoration: BoxDecoration(
                                                                color: defaultPalette.primary,
                                                                borderRadius: BorderRadius.circular(2),
                                                              ),
                                                              margin: const EdgeInsets.all(1),
                                                              child: buildSheetTableTextWidget(cell, sheetTable),
                                                            ),
                                                          ),
                                                        )
                                                ],
                                                ),
                                              ),
                                              
                                            ]
                                            
                                          ),
                                        )
                                      ),
                                    );
                                  }
                                ),
                              ),
                            ),
                          )
                        
                        ],
                      ),
                    
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      );
  }

  Widget buildSheetTableTextWidget(SheetTableCell sheetTableCell, SheetTable sheetTable) {
    final sheetText = sheetTableCell.sheetItem as SheetText;
    /// Returns whether the given side of [sheetTableCell] is “selected”:
    /// 0 = top, 1 = bottom, 2 = left, 3 = right.
    bool checkSideSelection(int s) {
      final label = sheetTableCell.id;                // e.g. "C4"
      final match = RegExp(r"^([A-Z]+)(\d+)$").firstMatch(label);
      if (match == null) return false;

      final colLabel = match.group(1)!;               // e.g. "C"
      final rowNum = int.parse(match.group(2)!);      // e.g. 4

      final maxRows = sheetTable.cellData.length; 
      final maxCols = sheetTable.cellData.isNotEmpty
          ? sheetTable.cellData.first.length
          : 0;

      // zero‑based column index
      final colIdx0 = columnLabelToNumber(colLabel);

      String neighborLabel;

      switch (s) {
        case 0: // top
          if (rowNum == 1) return true;                  // edge
          neighborLabel = '$colLabel${rowNum - 1}';
          break;
        case 1: // bottom
          if (rowNum == maxRows) return true;            // edge
          neighborLabel = '$colLabel${rowNum + 1}';
          break;
        case 2: // left
          if (colIdx0 == 0) return true;                 // edge
          // numberToColumnLabel expects 1-based
          neighborLabel = '${numberToColumnLabel(colIdx0)}$rowNum';
          break;
        case 3: // right
          if (colIdx0 == maxCols - 1) return true;       // edge
          neighborLabel = '${numberToColumnLabel(colIdx0 + 2)}$rowNum';
          break;
        default:
          return false;
      }

      // Look up that neighbor cell
      final neighborCell = sheetTable.getCellFromLabel(neighborLabel);
      if (neighborCell == null) return true;           
      print(neighborLabel);
      
      // Check if *its* SheetText is selected
      final neighborItemId = (neighborCell.sheetItem as SheetText).id;
      print(selectedIndexPaths[neighborItemId]);
      return selectedIndexPaths[neighborItemId] == null;
    }
    BorderSide borderSide = BorderSide(
      width:2,
      color:isFormulaMode? defaultPalette.extras[0]:defaultPalette.tertiary,
    );

    return Stack(
      children: [
        MouseRegion(
          onEnter: (event) {
              if (isFormulaMode) {
                print(sheetTableCell.id);
                setState(() {
                  if (selectedIndexPaths[sheetTableCell.sheetItem.id] == null && !HardwareKeyboard.instance.isControlPressed) {
                    selectedIndexPaths.addAll({
                      sheetTableCell.sheetItem.id: 
                      PanelIndex(
                        id: sheetTableCell.sheetItem.id, 
                        parentId:sheetTableCell.sheetItem.parentId,
                        itemIndexPath: sheetTableCell.sheetItem.indexPath, 
                        parentIndexPath: sheetTableCell.indexPath.parent
                        )
                    });
                  } else if( HardwareKeyboard.instance.isControlPressed && panelIndex.id != sheetTableCell.sheetItem.id) {
                    selectedIndexPaths.remove(sheetTableCell.sheetItem.id);
                  }
                });
              }
            },
          onHover: (event) {
            if (isFormulaMode) {
                print(sheetTableCell.id);
                setState(() {
                  if (selectedIndexPaths[sheetTableCell.sheetItem.id] == null && !HardwareKeyboard.instance.isControlPressed) {
                    selectedIndexPaths.addAll({
                      sheetTableCell.sheetItem.id: 
                      PanelIndex(
                        id: sheetTableCell.sheetItem.id, 
                        parentId:sheetTableCell.sheetItem.parentId,
                        itemIndexPath: sheetTableCell.sheetItem.indexPath, 
                        parentIndexPath: sheetTableCell.indexPath.parent
                        )
                    });
                  } else if( HardwareKeyboard.instance.isControlPressed && panelIndex.id != sheetTableCell.sheetItem.id) {
                    selectedIndexPaths.remove(sheetTableCell.sheetItem.id);
                  }
                });
              }
            
          },
          child: Container(
          decoration: BoxDecoration(
            color: defaultPalette.primary,
            border:(panelIndex.id ==sheetText.id || selectedIndexPaths[sheetText.id]!=null)
              ?Border(
                top: checkSideSelection(0)? borderSide:BorderSide.none,
                bottom: checkSideSelection(1)? borderSide:BorderSide.none,
                left: checkSideSelection(2)? borderSide:BorderSide.none,
                right: checkSideSelection(3)? borderSide:BorderSide.none,
               )
              : Border.fromBorderSide( BorderSide.none,),
            borderRadius:
                BorderRadius.circular(0),
          ),
          child: Column(
          
            children: [
              
              Expanded(
                child: Row(
                  children: [
                     Icon(sheetText.locked?
                       TablerIcons.lock:
                      TablerIcons.cursor_text,
                      size: 14,
                    ),
                    Expanded(
                      child: KeyedSubtree(
                        key: ValueKey(sheetText.id),
                        child: QuillEditor(
                          configurations: sheetText
                              .textEditorConfigurations,
                          focusNode:
                              sheetText.focusNode,
                          scrollController:
                              ScrollController(),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              if( sheetText.inputBlocks.length>1 || sheetText.inputBlocks[0].id != sheetText.id)
               Expanded(
                 child: Row(
                  children: [
                    const Icon(
                      TablerIcons.math_integral,
                      size: 14,
                    ),
                    Expanded(
                      child: Container(
                        padding:EdgeInsets.symmetric(horizontal:4),
                        margin: EdgeInsets.all(2),
                        decoration:BoxDecoration(
                          color:defaultPalette.secondary,
                          borderRadius:BorderRadius.circular(5)
                        ),
                        child: Transform.scale(
                          scale:0.8,
                          child: QuillEditor(
                            configurations: buildCombinedQuillConfiguration(sheetText.inputBlocks),
                            focusNode: FocusNode(),
                            scrollController:
                                ScrollController(),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
               ),
            ],
          ),
            ),
        ),
        if(panelIndex.id == sheetText.id)
        Positioned(
          bottom:5,
          right:4,

          child: MouseRegion(
            cursor: SystemMouseCursors.allScroll,
            child: GestureDetector(
              behavior: HitTestBehavior.opaque,
              onTap: () => print('tap'),
              onLongPress: () => print('updating'),
              onHorizontalDragStart:(_) { 
                setState(() {
                  isFormulaMode = true;
                  selectedIndexPaths = {
                    sheetTableCell.sheetItem.id:PanelIndex(
                      id: sheetTableCell.sheetItem.id,
                      parentId:sheetTableCell.sheetItem.parentId,
                      itemIndexPath: sheetTableCell.sheetItem.indexPath, 
                      parentIndexPath: sheetTableCell.indexPath.parent
                      )
                  };
                });
                print('start');
              
              },
              onVerticalDragStart:(_){ 
                setState(() {
                  isFormulaMode = true;
                  selectedIndexPaths = {
                    sheetTableCell.sheetItem.id:PanelIndex(
                      id: sheetTableCell.sheetItem.id,
                      parentId:sheetTableCell.sheetItem.parentId,
                      itemIndexPath: sheetTableCell.sheetItem.indexPath, 
                      parentIndexPath: sheetTableCell.indexPath.parent
                      )
                  };
                });
                print('start');
              
              },
              onHorizontalDragEnd:(_) { 
                setState(() {
                  isFormulaMode = false;

                });
                print('End');
              
              },
              onVerticalDragEnd:(_){ 
                setState(() {
                  isFormulaMode = false;
                });
                print('End');
              
              },
              child: SizedBox(
                width: 15,
                height: 15,
                child: Transform.rotate(
                  angle: 0,
                  child: Icon(TablerIcons.medical_cross_filled, size: 15, color: defaultPalette.extras[0]),
                ),
              ),
            )

          ))
      ],
    );
                                       
  }

  QuillEditorConfigurations copyWithFontSize20(QuillEditorConfigurations original) {
  // Clone the Delta with size: 20 in all text segments
    final newDelta = Delta();

    for (final op in original.controller.document.toDelta().toList()) {
      if (op.data is String) {
        final text = op.data as String;
        final attrs = Map<String, dynamic>.from(op.attributes ?? {});
        attrs['size'] = 20;
        newDelta.push(Operation.insert(text, attrs));
      } else {
        newDelta.push(op);
      }
    }

    // Create a new document from updated Delta
    final newDoc = Document.fromDelta(newDelta);

    // Create a new controller with the new document
    final newController = QuillController(
      document: newDoc,
      selection: original.controller.selection,
      configurations: original.controller.configurations,
      editorFocusNode: original.controller.editorFocusNode,
      keepStyleOnNewLine: original.controller.keepStyleOnNewLine,
      onDelete: original.controller.onDelete,
      onReplaceText: original.controller.onReplaceText,
      onSelectionChanged: original.controller.onSelectionChanged,
      onSelectionCompleted: original.controller.onSelectionCompleted,
      readOnly: original.controller.readOnly,
    );

    // Return a copy of the configuration with updated controller
    return original.copyWith(controller: newController);
  }

  double findSheetListBuildHeight(SheetList sheetList) {

    double getMaxFontSizeFromOps(List<Map<String, dynamic>> lineOps) {
      double maxFontSize = 16.0; // fallback default

      for (final op in lineOps) {
        final attributes = op['attributes'] as Map<String, dynamic>? ?? {};
        if (attributes.containsKey('size')) {
          final sizeAttr = attributes['size'];
          //  print('$sizeAttr, $maxFontSize, &&&&&&&&&, text, attributes');
          if ((double.tryParse(sizeAttr)??0) > maxFontSize) {
            maxFontSize = double.tryParse(sizeAttr)??0;
          }
        }
      }
      // print(' $maxFontSize, &&&&&&&&&, text, attributes');
      return maxFontSize;
    }

    double calculateLineHeightForLine(List<Map<String, dynamic>> lineOps, double fontSize) {
      double maxLineHeight = 1.0;
      String fontFamily = 'Lexend'; // default fallback

      for (var op in lineOps) {
        final attributes = op['attributes'] as Map<String, dynamic>? ?? {};

        // Respect lineHeight attribute
        if (attributes.containsKey('lineHeight')) {
          final lhRaw = attributes['lineHeight'];
          double? lh = double.tryParse('$lhRaw');
          if (lh != null && lh > maxLineHeight) {
            maxLineHeight = lh;
          }
        }

        // Extract font if specified
        if (attributes.containsKey('font')) {
          final fontAttr = attributes['font'];
          fontFamily = fontAttr.toString();
        }
      }

      // Use a single sample string to calculate actual height
      final textPainter = TextPainter(
        text: TextSpan(
          text: 'A', // Tall glyph, minimal width
          style: TextStyle(
            fontFamily: fontFamily, fontSize: fontSize),
        ),
        textDirection: TextDirection.ltr,
        maxLines: 1,
      )..layout();

      final actualHeight = textPainter.height;

      return actualHeight * maxLineHeight;
    }


    double calculateItemHeight(dynamic item) {
      double calculatedHeight = 0;

      // Handling SheetText
      if (item is SheetText) {
        final doc = item.textEditorController.document;
        final delta = doc.toDelta();
        double maxFontSize = getMaxFontSize(item.textEditorController);

        if (delta.isEmpty || doc.toPlainText().isEmpty) {
          calculatedHeight = 20+14.4; // fallback for empty
        } else {
          double totalHeight = 0;
          // print('$totalHeight, $maxFontSize, fontSize, text, attributes');
          // Temporarily accumulate line text until we hit \n
          String currentLine = '';
          List<Map<String, dynamic>> lineOps = [];

          for (var op in delta.toList()) {
            final String? insert = op.data is String ? op.data as String : null;
            final Map<String, dynamic>? attributes = op.attributes;

            if (insert != null) {
              for (int i = 0; i < insert.length; i++) {
                String char = insert[i];
                currentLine += char;
                lineOps.add({'char': char, 'attributes': Map<String, dynamic>.from(attributes ?? {})});


                if (char == '\n') {
                  // print('lineOps: $lineOps, fontSize, text, attributes');
                  maxFontSize = getMaxFontSizeFromOps(lineOps);
                  double lineHeight = calculateLineHeightForLine(lineOps, maxFontSize);
                  // totalHeight += lineHeight;
                  if (lineHeight<16) {
                    totalHeight +=21;
                  } else {
                    totalHeight +=lineHeight.ceil()+7;
                  }

                  // Reset for next line
                  currentLine = '';
                  lineOps = [];
                }
              }
            }
          }
          
          // Handle any remaining text not ending with \n
          if (lineOps.isNotEmpty) {
            totalHeight += calculateLineHeightForLine(lineOps, maxFontSize);
          }
          // print('$totalHeight, $maxFontSize, {delta.toList()}, text, attributes');
          calculatedHeight = totalHeight +14.4 ; // top/bottom padding
          // print('$totalHeight, $maxFontSize, $calculatedHeight, {delta.toList()} , attributes');
        }
        if (item.type == SheetTextType.date || item.type == SheetTextType.time ) {
          calculatedHeight += 25;
        }
        if ((item.inputBlocks.length > 1 && item.inputBlocks.isNotEmpty)) {
          calculatedHeight += calculateItemHeight(SheetText(
            id: 'id', 
            parentId: 'parentId', 
            textEditorConfigurations: buildCombinedQuillConfiguration(item.inputBlocks),
            textDecoration: SuperDecoration(id: ''), 
            name: 'name', 
            hide: true, 
            inputBlocks: [],
            indexPath: IndexPath(index: -67)))+10;
        }
      }

      // Handling nested SheetLists
      else if (item is SheetList) {
        // print(item.id);
        calculatedHeight = (findSheetListBuildHeight(item)+1.6+4).clamp(60, double.infinity);
        //1.6 to add the borderWidth and 4 is padding compensation
        // print(item.id+': $calculatedHeight');
      }

      else if (item is SheetTable) {
        var tableHeight = 0.0;
        item.rowData.forEach((element) => tableHeight += element.size,);
        calculatedHeight = tableHeight
      +18 //height of A B C row
      +20;
      }

      // print(item.id+': $calculatedHeight');
      return calculatedHeight;
    }

    double height = 0;

    // If direction is vertical, accumulate heights
    if (sheetList.direction == Axis.vertical) {
      for (int i = 0; i < sheetList.length; i++) {
        height += calculateItemHeight(sheetList[i]);
      }
    }
    // If direction is horizontal, return the max height
    else {
      for (int i = 0; i < sheetList.length; i++) {
        double itemHeight = calculateItemHeight(sheetList[i]);
        if (itemHeight > height) {
          height = itemHeight+12;
        }
      }
    }
    

    return height;
  }

  double findSheetListBuildWidth(SheetList sheetList) {
    double width = 0;
    const double defaultFontSize = 8.0;

    double calculateLineWidthFromDelta(Delta delta) {
      double lineWidth = 0.0;

      for (final op in delta.toList()) {
        final text = op.data is String ? op.data as String : '';
        final attributes = op.attributes ?? {};

        final fontSize = double.tryParse(attributes['size']??defaultFontSize.toString()) ?? defaultFontSize;

        final letterSpacing = double.tryParse(attributes['letterSpacing']??'0') ?? 0.0;

        final wordSpacing = double.tryParse(attributes['wordSpacing']??'0') ?? 0.0;

        for (int i = 0; i < text.length; i++) {
          final char = text[i];

          lineWidth += fontSize;

          if (char == ' ') {
            lineWidth += wordSpacing/2;
          }
          // print('$letterSpacing, $wordSpacing, $fontSize, $text, $attributes');
          // Add letterSpacing unless it's the last character in this op
          if (i != text.length - 1) {
            lineWidth += letterSpacing/2;
          }
        }
      }

      return lineWidth;
    }

    if (sheetList.direction == Axis.horizontal) {
      for (var item in sheetList.sheetList) {
        if (item is SheetText) {
          final doc = item.textEditorController.document;
          final delta = doc.toDelta();
          final lines = delta.toList().fold<List<Delta>>(
            [Delta()],
            (list, op) {
              if (op.data is String && (op.data as String).contains('\n')) {
                final parts = (op.data as String).split('\n');
                for (var i = 0; i < parts.length; i++) {
                  final part = parts[i];
                  if (part.isNotEmpty) {
                    list.last.insert(part, op.attributes);
                  }
                  if (i < parts.length - 1) list.add(Delta());
                }
              } else {
                list.last.insert(op.data, op.attributes);
              }
              return list;
            },
          );

          if (lines.isEmpty || doc.toPlainText().trim().isEmpty) {
            width += 180;
          } else {
            final maxLineWidth = lines
                .map((lineDelta) => calculateLineWidthFromDelta(lineDelta))
                .reduce((a, b) => a > b ? a : b);
            width += maxLineWidth;
          }
        } else if (item is SheetList) {
          width += findSheetListBuildWidth(item) + 20;
        } else if (item is SheetTable) {
          width += item.columnData.fold(0.0, (sum, col) => sum + col.size);
        }
      }
    } else {
      for (var item in sheetList.sheetList) {
        if (item is SheetText) {
          final doc = item.textEditorController.document;
          final delta = doc.toDelta();
          final lines = delta.toList().fold<List<Delta>>(
            [Delta()],
            (list, op) {
              if (op.data is String && (op.data as String).contains('\n')) {
                final parts = (op.data as String).split('\n');
                for (var i = 0; i < parts.length; i++) {
                  final part = parts[i];
                  if (part.isNotEmpty) {
                    list.last.insert(part, op.attributes);
                  }
                  if (i < parts.length - 1) list.add(Delta());
                }
              } else {
                list.last.insert(op.data, op.attributes);
              }
              return list;
            },
          );

          if (lines.isEmpty || doc.toPlainText().trim().isEmpty) {
            width = width > 180 ? width : 180;
          } else {
            final maxLineWidth = lines
                .map((lineDelta) => calculateLineWidthFromDelta(lineDelta))
                .reduce((a, b) => a > b ? a : b);
            width = width > (maxLineWidth + 60)
                ? width
                : (maxLineWidth + 60);
          }
        } else if (item is SheetList) {
          final nestedWidth = findSheetListBuildWidth(item);
          width =  width.clamp((nestedWidth +0), double.infinity) ;
        }
      }
    }
    // print('findWidth: '+width.toString());
    return width.clamp(mapValue(value: (sWidth *(1 - wH1DividerPosition - wH2DividerPosition)).clamp(200, double.infinity), inMin: 200, inMax: 2122, outMin: 240, outMax: 400), double.infinity);
  }

  /// Function to extract the maximum font size from a text editor's document
  double getMaxFontSize(QuillController controller) {
    double maxFontSize = 16.0; // Default font size

    // Iterate through each operation in the document's delta
    for (var operation in controller.document.toDelta().operations) {
      if (operation.attributes != null &&
          operation.attributes!.containsKey('size')) {
        final String fontSizeString = operation.attributes?['size'];
        final double fontSize = double.tryParse(fontSizeString) ?? 15.0;
        if (fontSize > maxFontSize) {
          maxFontSize = fontSize;
        }
      }
    }

    return maxFontSize;
  }

  Future<void> saveLayout() async {
    await _capturePng(pixelRatio: 0.5);
    var lmBox = Boxes.getLayouts();
    var lm = lmBox.get(key);
    lm?.docPropsList = docPropToBox(documentPropertiesList);
    lm?.spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm?.modifiedAt = DateTime.now();
    lm?.pdf = _images;
    lm?.labelList = labelList;
    lm?.save();
    print(lm?.pdf?.length);
    saveDecorations(sheetDecorationMap);
  }

  void saveDecorations(Map<String, SheetDecoration> sheetDecorationMap) {
    final decorationBox = Boxes.getDecorations();

    for (var decoration in sheetDecorationMap.entries) {
      if (decoration.value is SuperDecoration) {
        decorationBox.put(decoration.key, (decoration.value as SuperDecoration).toSuperDecorationBox());
        // print('Saved SuperDecoration with ID: ${decoration.id}');
      } else {
        decorationBox.put(decoration.key, (decoration.value as ItemDecoration).toItemDecorationBox());
        // print('Saved ItemDecoration with ID: ${decoration.id}');
      }
    }
  }

  bool textFieldTapDown(TapDownDetails details, String newId, IndexPath indexPath) {
    if (!mounted) return false;
    setState(() {
      print('tapdown');
      print(newId);
      print(indexPath);
      print(getItemAtPath(indexPath));
      SheetText? textItem;
      var textItemParent; 

      try {
        textItem = getItemAtPath(indexPath) as SheetText;
        textItemParent = getItemAtPath(indexPath.parent??IndexPath(index:-19));
        if (textItem.id != newId) {
          print(newId);
          textItem = _sheetItemIterator(newId, spreadSheetList[currentPageIndex],shouldReturn: true) as SheetText;
        }
        // print('yo: '+newId);
      } on Exception catch (e) {
        // You can optionally handle the error here
        // print('yo: '+newId);
        textItem = _sheetItemIterator(newId, spreadSheetList[currentPageIndex],shouldReturn: true) as SheetText;
      } finally {
        // print('yo5: '+newId);
        textItem ??= _sheetItemIterator(newId, spreadSheetList[currentPageIndex],shouldReturn: true) as SheetText;
        panelIndex.id = textItem.id; 
        panelIndex.parentId = textItemParent.id;
        panelIndex.parentIndexPath = textItem.indexPath.parent;
        panelIndex.itemIndexPath = textItem.indexPath;
        if (textItem.parentId != textItemParent.id) {
          textItem.parentId = textItemParent.id;
        }
        _findItem();

        // print('yo99: '+panelIndex.toString());
        if (panelIndex.parentId.startsWith("LI")) {
          _findSheetListItem();
        }
        if (panelIndex.parentId.startsWith("TB")) {
          _findSheetTableItem(null);
        }
        // var tmpinx = int.tryParse(textItem.textDecoration.id.substring(textItem.textDecoration.id.indexOf('/') + 1))??-155;
        // print((sheetDecorationList[tmpinx] as SuperDecoration).itemDecorationList);
        decorationIndex =-1;
        updateSheetDecorationvariables(sheetDecorationMap[textItem.textDecoration.id] as SuperDecoration?);
        // print(sheetDecorationVariables.length);
        whichPropertyTabIsClicked = 2;
        // propertyTabController.jumpToPage(1);
        // textItem.textEditorConfigurations.controller.editorFocusNode?.requestFocus();
        print('end fieldDown: ');
        //  print('SUPP: ');
        //   print('SUPPPP ');
        
      
      }

      
    });
    return false;
  }

  bool Function(int index, int length, Object? data) getReplaceTextFunctionForType(int index,QuillController controller, {
    check = false,
    SheetText? textItem=null,
  }) {
      if (check && textItem != null) {
        var type =SheetTextType.values[index];
        var placeholder = type==SheetTextType.number
              ? 'Enter Number'
              : type==SheetTextType.integer
              ? 'Enter Integer'
              : type==SheetTextType.bool
              ? 'Enter bool'
              : type==SheetTextType.date
              ? 'Enter Date'
              : type==SheetTextType.time
              ? 'Enter Time'
              : type==SheetTextType.phone
              ? 'Enter Number'
              : 'Enter Text';
        setState(() {
        textItem.textEditorConfigurations = QuillEditorConfigurations(
          controller: controller,
          enableScribble: textItem.textEditorConfigurations.enableScribble,
          enableSelectionToolbar: textItem.textEditorConfigurations.enableSelectionToolbar,
          autoFocus: textItem.textEditorConfigurations.autoFocus,
          onTapOutside: textItem.textEditorConfigurations.onTapOutside,
          contextMenuBuilder: textItem.textEditorConfigurations.contextMenuBuilder,
          placeholder:placeholder,
          customStyles:textItem.textEditorConfigurations.customStyles,
          
          // maxHeight: 50,
          customStyleBuilder: textItem.textEditorConfigurations.customStyleBuilder,
          builder: textItem.textEditorConfigurations.builder,
          onTapDown: (details, p1) {
            return textFieldTapDown(details, textItem.id, textItem.indexPath);
          },

        ); 
        // print('vyuihyuihyuih '+placeholder);
            });
      }
                                                    
      switch (SheetTextType.values[index]) {
        case SheetTextType.number:
          if(check){
            controller.onReplaceText = (int index, int length, Object? data) => true;
          String oldText = controller.document.toPlainText();
          if(oldText.trim().toLowerCase() == 'true'){oldText ='1';} else if (oldText.trim().toLowerCase() == 'false'){ oldText = '0';}
          final numericMatch = RegExp(r'-?\d+(\.\d+)?').firstMatch(oldText);
          oldText = numericMatch?.group(0) ?? 'yo';
          // print(controller.document.toDelta());
          // Enforce reset if old text is not a valid number
          if (double.tryParse(oldText) == null) {
            oldText = '0';
            controller.replaceText(0, controller.document.length - 1, oldText, const TextSelection.collapsed(offset: 1));
            // print(controller.document.toDelta());
          } else {
            controller.replaceText(0, controller.document.length - 1, oldText, const TextSelection.collapsed(offset: 1));
          }
            
          }
          
          return  (int index, int length, Object? data) {
            if (data is! String) return false;

            final oldText = controller.document.toPlainText();

            // Simulate what the text would become after this replacement
            final newText = oldText.replaceRange(index, index + length, data);

            // Allow empty string (so user can delete everything)
            if (newText.trim().isEmpty) return true;

            // Try parsing as a number
            final parsed = double.tryParse(newText.replaceAll(',', ''));
            final isValid = parsed != null;

            if (isValid) {
              return true; // Allow valid number
            } else {
              // Reject and restore selection
              controller.updateSelection(
                TextSelection.collapsed(offset: index),
                ChangeSource.local,
              );
              
              CustomToastBar(
                autoDismiss:true,
              snackbarDuration: Duration(milliseconds: 3000),
              builder: (context) {
                return buildInvalidToast('$newText is not a valid number');
              }
              ).show(context);
              return false; // Block invalid input
            }
          };
        
        case SheetTextType.integer:
          if(check)
          {controller.onReplaceText = (int index, int length, Object? data) => true;
          String oldText = controller.document.toPlainText();
          if(oldText.trim().toLowerCase() == 'true'){oldText ='1';} else if (oldText.trim().toLowerCase() == 'false'){ oldText = '0';}
          final numericMatch = RegExp(r'-?\d+(\.\d+)?').firstMatch(oldText);
          oldText = numericMatch?.group(0) ?? 'yo';
          // Enforce reset if old text is not a valid number
          if (int.tryParse(oldText) == null) {
            if (double.tryParse(oldText) == null) {
            oldText = '0';
            controller.replaceText(0, controller.document.length - 1, oldText, const TextSelection.collapsed(offset: 1));
            } else {
              var d= double.tryParse(oldText);
              controller.replaceText(0, controller.document.length - 1, d!.round().toString(), const TextSelection.collapsed(offset: 1));
          
            }
          } else {
            controller.replaceText(0, controller.document.length - 1, oldText, const TextSelection.collapsed(offset: 1));
          }
          }
         
          return  (int index, int length, Object? data) {
            if (data is! String) return false;

            final oldText = controller.document.toPlainText();
            final newText = oldText.replaceRange(index, index + length, data);

            if (newText.trim().isEmpty) return true;

            final parsed = int.tryParse(newText);
            if (parsed != null) return true;

            controller.updateSelection(TextSelection.collapsed(offset: index), ChangeSource.local);
            CustomToastBar(
              autoDismiss:true,
              snackbarDuration: Duration(milliseconds: 3000),
              builder: (context) {
                return buildInvalidToast('$newText is not a valid integer');
              },
            ).show(context);
            return false;
          };
          

        case SheetTextType.bool:
          const trueValues = ['true', '1', 'yes', 'positive', 'ha', 'yup','haa'];
          const falseValues = ['false', '0', 'no', 'negative', 'na', 'nope', 'nah'];
          if(check){
            
          String oldText = controller.document.toPlainText().trim().toLowerCase();

          String normalized = 'false'; // default fallback
          if (trueValues.contains(oldText)) {
            normalized = 'true';
          } else if (falseValues.contains(oldText)) {
            normalized = 'false';
          }
          if (oldText != normalized) {
            controller.onReplaceText = (int index, int length, Object? data) => true;
              controller.replaceText(
                0,
                controller.document.length - 1,
                normalized,
                const TextSelection.collapsed(offset: 1),
              );
          }
          }

          return  (int index, int length, Object? data) {
            if (data is! String) return false;
            if(data =='true' || data == 'false') return true;

            final oldText = controller.document.toPlainText().trim().toLowerCase();
            bool isCurrentlyTrue = trueValues.contains(oldText);
            bool isCurrentlyFalse = falseValues.contains(oldText);

            final toggled = isCurrentlyTrue ? 'false' : 'true';

            // Replace full text with toggled value
            SchedulerBinding.instance.addPostFrameCallback((_) {
              controller.replaceText(
                0,
                controller.document.length - 1,
                toggled,
                TextSelection.collapsed(offset: toggled.length),
              );
            });
            data = '';

            return true;
          };
          
        
        case SheetTextType.phone:
          if(check)
          {
            final doc = controller.document;
            final delta = doc.toDelta();
            final plainText = doc.toPlainText();

            Map<String, dynamic>? getAttrsAt(int offset) {
              int current = 0;
              for (final op in delta.toList()) {
                final text = op.data is String ? op.data as String : '';
                if (current + text.length > offset) return op.attributes;
                current += text.length;
              }
              return null;
            }

            // Clean text
            final cleaned = plainText.trim();
            final digitsOnly = cleaned.replaceAll(RegExp(r'[^\d+]'), '');

            // Extract country code if present
            final countryCodeMatch = RegExp(r'^\+(\d{1,3})').firstMatch(digitsOnly);
            final countryCode = countryCodeMatch?.group(0) ?? '';
            final numberPart = digitsOnly.replaceFirst(RegExp(r'^\+\d{1,3}'), '');

            // Limit digits to 10
            final truncatedNumber = numberPart.replaceAll(RegExp(r'[^\d]'), '').substring(0, numberPart.length.clamp(0, 10));
            final formatted = [
              if (countryCode.isNotEmpty) countryCode,
              if (truncatedNumber.isNotEmpty) truncatedNumber,
            ].join(' ');

            final attrs = getAttrsAt(0);

            // Allow temporary replacement
            controller.onReplaceText = (int index, int length, Object? data) => true;

            controller.replaceText(
              0,
              controller.document.length - 1,
              Delta()..insert(formatted, attrs),
              TextSelection.collapsed(offset: formatted.length),
            );
            }

            // Enforce rules for future edits
            return (int index, int length, Object? data) {
              if (data is! String) return false;

              // Only allow digits, spaces, brackets, or plus
              if (!RegExp(r'^[\d\s\+\(\)]*$').hasMatch(data)) return false;

              final currentText = controller.document.toPlainText();
              final updatedText = currentText.replaceRange(index, index + length, data);

              final digits = updatedText.replaceAll(RegExp(r'[^\d]'), '');
              final hasPlus = updatedText.startsWith('+');
              final countryCodeMatch = RegExp(r'^\+(\d{1,3})').firstMatch(updatedText);
              final codeLength = countryCodeMatch?.group(1)?.length ?? 0;
              final numberDigits = hasPlus ? digits.length - codeLength : digits.length;

              // Total digits (excluding country code) must not exceed 10
              return numberDigits <= 10;
            };
          
          break;

        case SheetTextType.string:
        default:
          return (int index, int length, Object? data) => true;
      }
  }

  Widget buildInvalidToast(String message) {
    return Container(
      padding: EdgeInsets.all(2),
      margin: const EdgeInsets.only(top: 11, left: 2, right: 5,bottom: 6),
      width: (sWidth*wH2DividerPosition)-10,
      height: 52,
      decoration: BoxDecoration(
        color: defaultPalette.primary,
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: defaultPalette.extras[0], width: 2),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(10),
        child: Text(
          '  ${message.replaceAll(RegExp(r'\n'), '')}',
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
          style: GoogleFonts.lexend(
            color: defaultPalette.extras[0],
            fontWeight: FontWeight.w400,
            letterSpacing: -1,
          ),
        ),
      ),
    );
  }

  void assignIndexPathsAndDisambiguate(
    List<RequiredText> labelList,
    List<SheetList> spreadSheetList,
  ) {
    print('assignPathAndDisambiguate');
    final unmatchedLabels = labelList
        .where((rt) => rt.indexPath.index == -951)
        .toList(); // Only unset RequiredText

    Map<String, List<SheetText>> matchedTexts = {};
    Map<String, List<SheetTable>> matchedTables = {};

    void collectItems(SheetList sheetList) {
      for (final item in sheetList.sheetList) {
        if (item is SheetText) {
          final name = item.name;
          if (unmatchedLabels.any((rt) => rt.name == name && rt.name != 'itemSheet')) {
            matchedTexts.putIfAbsent(name, () => []).add(item);
          }
        } else if (item is SheetTable) {
          final name = item.name;
          if (unmatchedLabels.any((rt) => rt.name == 'itemSheet' && rt.name == name)) {
            matchedTables.putIfAbsent(name, () => []).add(item);
          }
        } else if (item is SheetList) {
          collectItems(item);
        }
      }
    }

    for (final sheet in spreadSheetList) {
      collectItems(sheet);
    }

    for (final rt in unmatchedLabels) {
      if (rt.name == 'itemSheet') {
        final matches = matchedTables[rt.name];
        if (matches != null && matches.isNotEmpty) {
          rt.indexPath = matches.first.indexPath;

          // Rename further SheetTables if needed
          for (int i = 1; i < matches.length; i++) {
            matches[i].name = '${matches[i].name} (${i + 1})';
          }
        }
      } else {
        final matches = matchedTexts[rt.name];
        if (matches != null && matches.isNotEmpty) {
          rt.indexPath = matches.first.indexPath;

          // Rename further SheetTexts if needed
          for (int i = 1; i < matches.length; i++) {
            matches[i].name = '${matches[i].name} (${i + 1})';
          }
        }
      }
    }
    print('done');
  }

  void doubleCheckLabelList(List<RequiredText> labelList){
    for (int j = 0; j < labelList.length; j++) {
      final requiredText = labelList[j];
      if (requiredText.indexPath.index != -951)  {
        final sheetText = getItemAtPath(requiredText.indexPath);
        if (requiredText.name =='itemSheet') {
          if(!sheetText.id.startsWith('TB')){
            requiredText.indexPath = IndexPath(index: -951);
          }
        }
        if (sheetText is! SheetTable) {
          if (sheetText.id == 'yo' || sheetText.id.isEmpty || (sheetText as SheetText).name != requiredText.name) {
            
              requiredText.indexPath = IndexPath(index: -951);
            
          }
        }
      }
    }
  }
  
  double _getPropertiesButtonWidth(String s) {
    var widthWeHave = (sWidth * (wH2DividerPosition));
    // print('clcwidth:');
    // print(panelIndex);
    switch (s) {
      case 'page':
        if (panelIndex.id == ''||  getItemAtPath(panelIndex.itemIndexPath).runtimeType == SheetItem ) {
          if (panelIndex.parentId == '') {
            return widthWeHave - 4;
          }
          return widthWeHave * (1 / 3);
        }
        return widthWeHave * (1 / 5);
        break;
      case 'text-field':
        if (panelIndex.id == '' ||  getItemAtPath(panelIndex.itemIndexPath).runtimeType == SheetItem  ) {
          if (panelIndex.parentId == '' && !(panelIndex.parentId.startsWith('LI')||panelIndex.parentId.startsWith('TB')) ) {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3);
        }
        return widthWeHave * (2 / 5) + 2;
      case 'sheet-list':
        if (panelIndex.id == ''||  getItemAtPath(panelIndex.itemIndexPath).runtimeType == SheetItem  ) {
          if (panelIndex.parentId == '' && !(panelIndex.parentId.startsWith('LI')||panelIndex.parentId.startsWith('TB'))) {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3) + 2;
        }
        return widthWeHave * (2 / 5) + 3;

      default:
    }
    return 1 / 5;
  }

  PieAction getPieAction(String s) {
    return PieAction(
      tooltip: Text(s),
      onSelect: () {
        setState(() {
          documentPropertiesList[currentPageIndex].pageFormatController =
              getPageFormatFromString(s);
        });
        Future.delayed(Durations.short2).then((o) {
          _renderPagePreviewOnProperties();
        });
      },
      child: Text(
        getPageFormatString(getPageFormatFromString(s)),
        style: GoogleFonts.bungee(color: defaultPalette.primary),
      ),
    );
  }

  PieAction getPieActionForAddMove(String s, bool m) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              m ? 'A Page To The' : 'Move Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          m
              ? s == 'LEFT'
                  ? _addPdfPageAtIndex(
                      currentPageIndex,
                    )
                  : _addPdfPageAtIndex(
                      currentPageIndex+1,
                    )
              : s == 'LEFT'
                  ? _movePage(currentPageIndex, currentPageIndex - 1)
                  : _movePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              m ? 'Add' : 'Move',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              m
                  ? s == 'LEFT'
                      ? 'Before'
                      : 'After'
                  : s == 'LEFT'
                      ? 'Above'
                      : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }

  PieAction getPieActionForDuplicate(String s) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              'Duplicate Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          s == 'LEFT'
              ? _duplicatePage(currentPageIndex, currentPageIndex)
              : _duplicatePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Copy',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              s == 'LEFT' ? 'Above' : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }

  PieAction getPieActionForListAxis(int s, {bool cross = false}) {
    return PieAction(
        tooltip: Text(
          !cross
              ? MainAxisAlignment.values[s].name
              : CrossAxisAlignment.values[s].name,
          style: GoogleFonts.bungee(
            fontSize: 10,
          ),
        ), // Icon inside TextButton

        child: Text(
          !cross
              ? MainAxisAlignment.values[s].name
              : CrossAxisAlignment.values[s].name,
          style:
              GoogleFonts.bungee(fontSize: 10, color: defaultPalette.primary),
        ),
        onSelect: () {
          setState(() {
            if (!cross) {
              sheetListItem.mainAxisAlignment = MainAxisAlignment.values[s];
              print('Axis change clicked to: ${MainAxisAlignment.values[s]}');
            } else {
              sheetListItem.crossAxisAlignment = CrossAxisAlignment.values[s];
            }
          });
        });
  }

  MaterialAccentColor createSwatch(Color color, int numberOfShades) {
    final Map<int, Color> swatch = <int, Color>{};

    // Convert the input color to HSL for manipulation
    final HSLColor baseHsl = HSLColor.fromColor(color);

    // Define the minimum and maximum lightness values for better variety
    final double minLightness = 0.0; // Start darker than the color
    final double maxLightness = 1.0; // Lightness up to the very lightest shade

    // Calculate the step difference for both darker and lighter shades
    final double lightnessStep =
        (maxLightness - minLightness) / (numberOfShades - 1);

    // Create a range of shades dynamically, starting darker to the color and going lighter
    for (int i = 0; i < numberOfShades; i++) {
      final double adjustedLightness = minLightness + (i * lightnessStep);

      // Check for a unique key and lightness
      final colorShade = HSLColor.fromAHSL(
              baseHsl.alpha, baseHsl.hue, baseHsl.saturation, adjustedLightness)
          .toColor();

      // To prevent duplicate colors, we check if this exact color already exists
      if (!swatch.containsValue(colorShade)) {
        swatch[100 * (i + 1)] = colorShade;
      }
    }

    // Ensure the base color is always in the center at key 500
    swatch[500] = color;

    return MaterialAccentColor(color.value, swatch);
  }

  void updateSheetTextProperties(void Function(SheetText) updates){
    for (var i = 0; i < selectedIndexPaths.length; i++) {
      final element = selectedIndexPaths.values.toList()[i]; 
      if (selectedIndexPaths.keys.toList()[i].startsWith('TX')) {
        final sheetText = getItemAtPath(element.itemIndexPath);
        if (sheetText is SheetText) {
          print(sheetText.id);   
          updates(sheetText);  
        }
      }
    
    }
  }

  Future<void> relinkIndexPathsInInputBlocks() async {
    /// Try the fast path first, then fallback to your iterator.
    SheetItem _resolveItem(InputBlock b) {
      final maybe = getItemAtPath(b.indexPath);
      if (maybe == null || maybe.id == 'yo' || maybe.id != b.id) {
        // fallback: heavy search
        return _sheetItemIterator(b.id, spreadSheetList.first, shouldReturn:true);
      }
      return maybe;
    }
    /// Your existing recursive table‐finder, untouched:
    SheetTable? _searchTable(SheetList list, String blockId) {
      for (final item in list.sheetList) {
        if (item is SheetTable) {
          for (final row in item.cellData) {
            for (final cell in row) {
              if (cell.sheetItem is SheetText) {
                if ((cell.sheetItem as SheetText)
                        .inputBlocks
                        .any((blk) => blk.id == blockId)) {
                  return item;
                }
              }
            }
          }
        } else if (item is SheetList) {
          final sub = _searchTable(item, blockId);
          if (sub != null) return sub;
        }
      }
      return null;
    }
    /// Given an InputBlock b whose indexPath = (tableIndexPath)→rowIndex→colIndex,
/// b.indexPath.parent → rowIndexPath
/// b.indexPath.parent.parent → tableIndexPath
    SheetTable _findParentTableForBlock(InputBlock b) {
      print('path: '+b.indexPath.toString());
      print('path: '+b.id);
      // Fast path: climb up two levels in the indexPath
      // final rowIndexPath   = b.indexPath.parent!;
      // final tableIndexPath = rowIndexPath.parent!;
      try {
        print(b.indexPath);
        final candidate = getItemAtPath(b.indexPath);
        if (candidate is SheetTable) {
          return candidate;
        }
      } catch (_) {
        // ignore and fall through
      }

      // Fallback: expensive global search by id if our fast path failed
      for (final list in spreadSheetList) {
        final found = _searchTable(list, b.id);
        if (found != null) return found;
      }
      throw StateError('Could not locate parent SheetTable for block ${b.id}');
    }




    /// Recursively fix a single InputBlock (and any nested functions).
    void _relinkBlock(InputBlock b, [Map<String,int>? visited]) {
      visited ??= <String,int>{};
      visited[b.id] = (visited[b.id] ?? 0) + 1;

      // If we've seen this block > 50 times in one chain, cut it off:
      if (visited[b.id]! > 15) {
        // you could log or even reset b.function = null here
        print('⚠️ recursion detected on block ${b.id}, stopping relink.');
        return;
      }
      final target = _resolveItem(b);
      b.indexPath = target.indexPath;

      // 2) if it has a function, recurse into *that* function’s blocks:
      final fn = b.function;
      if (fn is InputBlockFunction) {
        print('is InputBlockFunction');
        for (final inner in fn.inputBlocks) {
          _relinkBlock(inner, Map<String,int>.from(visited));
        }
      }
      else if (fn is SumFunction) {
        print('is SumFunction');
        for (final inner in fn.inputBlocks) {
          _relinkBlock(inner,Map<String,int>.from(visited));
        }
      }
      else if (fn is CountFunction) {
        for (final inner in fn.inputBlocks) {
          _relinkBlock(inner,Map<String,int>.from(visited));
        }
      }
      else if (fn is ColumnFunction) {
        // pick the right row/column list by axisLabel:
        print('is ColumnFunction');
        final table = _findParentTableForBlock(b);

        int axis;
        try {
          axis = int.parse(fn.axisLabel) - 1;
          if (axis < table.rowData.length) {
            fn.inputBlocks =table.rowData[axis].rowInputBlocks;
          } else {
            fn.inputBlocks = 
              table.rowData[axis - table.rowData.length].rowInputBlocks;
            
          }
          // now recurse into those newly‑assigned blocks too:
          for (final inner in fn.inputBlocks) {
            _relinkBlock(inner,Map<String,int>.from(visited));
          }
        } catch (_) {
          axis = columnLabelToNumber(fn.axisLabel);
          if (axis < table.columnData.length) {
            fn.inputBlocks = table.columnData[axis].columnInputBlocks;
          } else {
            fn.inputBlocks = 
              table.columnData[axis - table.columnData.length].columnInputBlocks;
          }
          // now recurse into those newly‑assigned blocks too:
          for (final inner in fn.inputBlocks) {
            _relinkBlock(inner,Map<String,int>.from(visited));
          }
          }
        
      }
    }
    
    
    void _relinkInList(SheetList list) {
      for (final item in list.sheetList) {
        if (item is SheetText) {
          // fix *all* of its inputBlocks
          for (final b in item.inputBlocks) {
            _relinkBlock(b);
          }
        }
        else if (item is SheetTable) {
          print('is SheetTable');
          // descend into every cell
          for (final row in item.cellData) {
            for (final cell in row) {
              if (cell.sheetItem is SheetText) {
                for (final b in (cell.sheetItem as SheetText).inputBlocks) {
                  _relinkBlock(b);
                }
              }
              if (cell.sheetItem is SheetList) {
                _relinkInList(cell.sheetItem as SheetList);
              }
              if (cell.sheetItem is SheetTable) {
                // you could also recurse into nested tables if you have them
              }
            }
          }
        }
        else if (item is SheetList) {
          _relinkInList(item);
        }
      }
    }

    // finally, drive it:
    for (final top in spreadSheetList) {
      _relinkInList(top);
    }
  }

  _getProperTiesCards() {
    switch (whichPropertyTabIsClicked) {
      case 2:
        // The actual cards for text properties font, format and color
        return FadeInUp(
          onFinish: (direction) {
            setState(() {
              textPropertyCardsController
                  .setCardIndex(whichTextPropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
              backgroundCardCount: 1,
              backgroundCardOffset: Offset(4, 4),
              duration: Duration(milliseconds: 220),
              backgroundCardScale: 1,
              loop: true,
              cardCount: 3,
              allowUnSwipe: true,
              allowUnlimitedUnSwipe: true,
              initialIndex: whichTextPropertyTabIsClicked,
              controller: textPropertyCardsController,
              onCardPositionChanged: (position) {
                setState(() {
                  _cardPosition =
                      position.offset.dx.abs() + position.offset.dy.abs();
                  // print(_cardPosition);
                });
              },
              onSwipeEnd: (a, b, direction) {
                // print(direction.toString());
                setState(() {
                  // if (_cardPosition > 50) {
                  //   currentPageIndex = (currentPageIndex + 1) % pageCount;
                  //   _renderPagePreviewOnProperties();
                  // }
                  whichTextPropertyTabIsClicked = b;
                  _cardPosition = 0;
                });
              },
              onSwipeCancelled: (activity) {
                setState(() {
                  // currentPageIndex =
                  //     (currentPageIndex - 1) % pageCount;
                });
              },
              cardBuilder: (BuildContext context, int index) {
                var width = (sWidth * wH2DividerPosition - 30);
                int currentCardIndex = whichTextPropertyTabIsClicked;

                List<TextEditingController> fontTextControllers = [
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes['size']?.value.toString().replaceAll(RegExp(r'(?<=\.\d*?)0+$'), '') ?? '0')}',
                  TextEditingController()
                      ..text =
                          '${(item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value.toString().replaceAll(RegExp(r'(?<=\.\d*?)0+$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value.toString().replaceAll(RegExp(r'(?<=\.\d*?)0+$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value.toString().replaceAll(RegExp(r'(?<=\.\d*?)0+$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${item.name}',
                
                 ];
                
                bool getIsToggled( Map<String, Attribute> attrs, Attribute attribute) {
                  if (attribute.key == Attribute.list.key ||
                      attribute.key == Attribute.header.key ||
                      attribute.key == Attribute.script.key ||
                      attribute.key == Attribute.align.key) {
                    final currentAttribute = attrs[attribute.key];
                    if (currentAttribute == null) {
                      // print('returning false');
                      return false;
                    }
                    // print(
                    // 'returning ${currentAttribute.value == attribute.value}');
                    return currentAttribute.value == attribute.value;
                  }
                  // print('returning ${attrs.containsKey(attribute.key)}');
                  return attrs.containsKey(attribute.key);
                }

                Widget buildElevatedLayerButton( { 
                  double buttonHeight = 30,double buttonWidth = 50,
                  Duration animationDuration = Durations.short2,
                  Curve animationCurve = Curves.ease,
                  required void Function() onClick,
                  BoxDecoration? baseDecoration,
                  BoxDecoration? topDecoration,
                  required Widget topLayerChild,
                  BorderRadius? borderRadius,
                  bool toggleOnTap = false,
                  bool isTapped = false,
                  double subfac = 5,
                  double elevation = 3}) {
                  borderRadius= borderRadius ?? BorderRadius.circular(10);
                  topDecoration = topDecoration ?? BoxDecoration(
                    color: defaultPalette.primary,
                    border: Border.all(
                        width:1.3, color:defaultPalette.extras[0]
                    ),
                  );
                  baseDecoration = baseDecoration ?? BoxDecoration(
                    color: Colors.green,
                    border: Border.all(width:1.3, color:defaultPalette.extras[0]),
                  );
                  var down = isTapped;
                  void _handleTapDown(TapDownDetails details) {
                    onClick();

                    setState(() {
                      down = true;
                      print(down);
                    });
                  }

                  void _handleTapUp(TapUpDetails details) {
                    if (!toggleOnTap && down) {
                      setState(() {
                        down = !down;
                      });
                    }
                  }

                  void _handleTapCancel() {}

                  return GestureDetector(
                    onTap: () {},
                    onTapDown: _handleTapDown,
                    onTapUp: _handleTapUp,
                    onTapCancel: _handleTapCancel,
                    child: SizedBox(
                      height: buttonHeight,
                      width: buttonWidth,
                      child: Stack(
                        alignment: Alignment.bottomRight,
                        children: [
                          Positioned(
                            bottom: 0,
                            right: 0,
                            child: Container(
                              width: buttonWidth - subfac,
                              height: buttonHeight - subfac,
                              decoration: baseDecoration!.copyWith(
                                borderRadius: borderRadius,
                              ),
                            ),
                          ),
                          AnimatedPositioned(
                            duration: animationDuration,
                            curve: animationCurve,
                            bottom: !down ? elevation : 0,
                            right: !down ? elevation : 0,
                            child: Container(
                              width: buttonWidth - subfac,
                              height: buttonHeight - subfac,
                              alignment: Alignment.center,
                              decoration: topDecoration!.copyWith(
                                borderRadius: borderRadius,
                              ),
                              child: topLayerChild,
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                }

                Widget titleTile(String name, IconData icon, {double fontSize = 18, double iconSize = 20, mainAxisAlignment= MainAxisAlignment.start, color= Colors.black,double space=0}) {
                  return Row(
                    mainAxisAlignment:mainAxisAlignment,
                    children: [
                    SizedBox(width: space,),
                    Icon(icon, size: iconSize, color: color),
                    Expanded(
                      child: Text(
                        name,
                        maxLines: 1,
                        style: GoogleFonts.lexend(
                            fontSize: fontSize,
                            color:color,
                            letterSpacing: -1,
                            fontWeight: FontWeight.w500),
                      ),
                    )
                  ]);
                }

                List<Widget> fontPropertyTile(int s) {
                return [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                         fontFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? 10
                            : HardwareKeyboard.instance.isShiftPressed
                                ? 0.1
                                : 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(fontTextControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                                s==0
                                ? 0
                                : double.negativeInfinity
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(4));
                          switch (s) {
                            case 0:
                              //  item.textEditorController
                              //   .formatSelection(
                              // Attribute.clone(
                              //     Attribute.size,
                              //     parsedValue.toString()),
                              // );
                              updateSheetTextProperties((p0) {
                                p0.updateFontSize( parsedValue);
                              },);
                              break;
                            case 1:
                              // item.textEditorController
                              //     .formatSelection(
                              //   LetterSpacingAttribute(
                              //       (parsedValue).toString()),
                              // );
                               updateSheetTextProperties((p0) {
                                p0.updateLetterSpacing( parsedValue);
                              },);
                              break;
                            case 2:
                              // item.textEditorController
                              //     .formatSelection(
                              //   WordSpacingAttribute(
                              //       (parsedValue).toString()),
                              // );
                               updateSheetTextProperties((p0) {
                                p0.updateWordSpacing( parsedValue);
                              },);
                              break;
                            case 3:
                              // item.textEditorController
                              //     .formatSelection(
                              //   LineHeightAttribute(
                              //       (parsedValue).toString()),
                              // );
                               updateSheetTextProperties((p0) {
                                p0.updateLineHeight( parsedValue);
                              },);
                              break;    
                            default:
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            s == 0 
                            ? TablerIcons.text_size 
                            : s==1
                            ? TablerIcons.letter_spacing
                            : s==2
                            ? TablerIcons.spacing_horizontal
                            : TablerIcons.spacing_vertical,
                            size: 16,
                          ),
                          Text(
                            s == 0 
                            ? ' size ' 
                            : s==1
                            ? ' letter '
                            : s==2
                            ? ' word '
                            : ' line ',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        onTapOutside: (event) => fontFocusNodes[s].unfocus(),
                        focusNode: fontFocusNodes[s],
                        controller: fontTextControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            print(value);
                          switch (s) {
                            case 0:
                               item.textEditorController
                                .formatSelection(
                              Attribute.clone(
                                  Attribute.size,
                                  value.toString()),
                              );
                              break;
                            case 1:
                              item.textEditorController
                                  .formatSelection(
                                LetterSpacingAttribute(
                                    (value).toString()),
                              );
                              break;
                            case 2:
                              item.textEditorController
                                  .formatSelection(
                                WordSpacingAttribute(
                                    (value).toString()),
                              );
                              break;
                            case 3:
                              item.textEditorController
                                  .formatSelection(
                                LineHeightAttribute(
                                    (value).toString()),
                              );
                              break;    
                            default:
                          }
                            

                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ];
                }

                MenuItem typeChangeItem(String s, int index){

                  
                  return MenuItem(
                    label: s,
                    icon: index==0
                    ? TablerIcons.cursor_text
                    : index==1
                    ? TablerIcons.numbers
                    : index==2
                    ? TablerIcons.number_123
                    : index==3
                    ? TablerIcons.circuit_switch_open
                    : index==4
                    ? TablerIcons.calendar_event
                    : index==5
                    ? TablerIcons.clock_hour_4
                    : TablerIcons.phone,
                    style:  GoogleFonts.lexend(
                      color: defaultPalette.extras[0],
                      fontWeight: FontWeight.w400,
                      letterSpacing: -0.5,
                      
                    ),
                    constraints: BoxConstraints(
                      minWidth: 100,
                      minHeight: 30
                    ),
                    // hoverColor: defaultPalette.extras[0],
                    onSelected: () {
                      setState(() {

                        item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(
                          index, 
                          item.textEditorConfigurations.controller,
                          check: true,
                          textItem: item,
                          );
                        item.type = SheetTextType.values[index];
                        
                      });
                    },
                    );
                }

                String formatValue(dynamic value) {
                  if (value is String) {
                    // Escape all newlines
                    final escaped = value.replaceAll('\n', r' \n ');
                    return "'$escaped'";
                  }
                  return value.toString();
                }

                TextStyle getStyleForValue(dynamic value) {
                  if (value is bool) {
                    return TextStyle(color: defaultPalette.tertiary, fontFamily: 'monospace',fontSize: 12);
                  } else if (value is num) {
                    return TextStyle(color: defaultPalette.extras[1], fontFamily: 'monospace',fontSize: 12);
                  } else if (value is String) {
                    return TextStyle(color: defaultPalette.extras[3],fontFamily: 'monospace',fontSize: 12); // brown
                  } else {
                    return TextStyle(color: defaultPalette.secondary, fontFamily: 'monospace',fontSize: 12);
                  }
                }
                
                Widget buildJsonEntry(Map<String, dynamic> map, int indent) {
                  List<InlineSpan> spans = [];

                  map.forEach((key, value) {
                    spans.add(
                      TextSpan(
                        text: '${'  ' * indent}$key: ',
                        style: TextStyle(
                          color: const Color(0xff3993DD), 
                          fontFamily: 'monospace', 
                          fontSize: 12
                          ),
                      ),
                    );

                    if (value is Map<String, dynamic>) {
                      spans.add(const TextSpan(text: '{\n'));
                      value.forEach((k, v) {
                        spans.add(TextSpan(
                          text: '${'  ' * (indent + 1)}$k: ',
                          style: const TextStyle(color: Color(0xff3993DD), fontFamily: 'monospace',fontSize: 12),
                        ));
                        spans.add(TextSpan(
                          text: formatValue(v),
                          style: getStyleForValue(v),
                        ));
                        spans.add(const TextSpan(text: '\n'));
                      });
                      spans.add(TextSpan(text: '${'  ' * indent}}'));
                    } else {
                      spans.add(TextSpan(
                        text: formatValue(value),
                        style: getStyleForValue(value),
                      ));
                      spans.add(const TextSpan(text: ',\n'));
                    }
                  });

                  return RichText(text: TextSpan(children: spans));
                }

                Widget buildStyledJsonBlock(List<dynamic> json) {
                  return Container(
                    color: defaultPalette.extras[0],
                    height: 250,
                    padding: EdgeInsets.only(top:43, left:5, right:5,bottom: 10),
                    child: ScrollConfiguration(
                      behavior: ScrollBehavior().copyWith(scrollbars: false),
                      child: DynMouseScroll(
                        durationMS: 500,
                        scrollSpeed: 1,
                        builder: (context, controller, physics) {
                          return ScrollbarUltima(
                            alwaysShowThumb: true,
                            controller: controller,
                            scrollbarPosition:
                                ScrollbarPosition.right,
                            backgroundColor: defaultPalette.primary,
                            isDraggable: true,
                            maxDynamicThumbLength: 90,
                            minDynamicThumbLength: 50,
                            thumbBuilder:
                                (context, animation, widgetStates) {
                              return Container(
                                margin: EdgeInsets.only(right:2, top:3, bottom:3),
                                decoration: BoxDecoration(
                                    // border: Border.all(
                                    //    color: defaultPalette.primary.withOpacity(0.2),
                                    // ),
                                    color: defaultPalette.extras[0],
                                    borderRadius:
                                        BorderRadius.circular(2)),
                                width: 5,
                              );
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                color: defaultPalette.primary.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(5).copyWith(topLeft:Radius.circular(0), topRight:Radius.circular(0))
                              ),
                              width: width,
                              child: SingleChildScrollView(
                              controller: controller,
                              physics: physics,
                              padding: EdgeInsets.only(right: 4),
                              child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    for (int i = 0; i < json.length; i++)
                                     ...[
                                    Text(
                                      '${i + 1}.   ',
                                      textAlign: TextAlign.end,
                                      style: GoogleFonts.lexend(
                                        fontSize: 10,
                                        color: Colors.white,
                                      ),
                                    ),
                                    SizedBox(height: 2),     
                                    Container(
                                      decoration: BoxDecoration(
                                        color: defaultPalette.extras[0],
                                        borderRadius: BorderRadius.circular(5)
                                      ),
                                      padding: EdgeInsets.all(5),
                                      margin: EdgeInsets.only(left:5, right:5),
                                      width: width,child: buildJsonEntry(json[i], 0)
                                    ),
                                    SizedBox(height: 5)
                                    ],
                                  
                                  ],
                                ),
                              ),
                            ),
                          );
                        }
                      ),
                    ),
                  );
                }
                
                Widget buildOrganizedSheetTextList(List<SheetList> spreadList, List<InputBlock>? inputBlocks, double oWidth) {
                  Map<int, List<Widget>> organized = {};

                  for (int pageIndex = 0; pageIndex < spreadList.length; pageIndex++) {
                    final page = spreadList[pageIndex];
                    List<Widget> pageWidgets = [const SizedBox(height:4),];

                    void collect(List<SheetItem> sheetItems, {String? parentLabel}) {
                      for (var sheetItem in sheetItems) {
                        if (sheetItem is SheetText) {
                          pageWidgets.addAll(
                            [
                              Container(
                                width:oWidth,
                                margin: EdgeInsets.symmetric(horizontal:4),
                                decoration: BoxDecoration(
                                
                                borderRadius:BorderRadius.circular(5)
                              ),
                                child: ClipRRect(
                                  borderRadius:BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.tertiary,
                                    child: InkWell(
                                      hoverColor:defaultPalette.extras[0],
                                      splashColor:defaultPalette.extras[0],
                                      highlightColor:defaultPalette.extras[0],
                                      onTap:(){
                                        setState(() {
                                          if (inputBlocks == null) {
                                            item.inputBlocks.add(InputBlock(
                                              indexPath: sheetItem.indexPath, 
                                              blockIndex: [-2],
                                              id: sheetItem.id,
                                              useConst: true,
                                              function: InputBlockFunction(inputBlocks: sheetItem.inputBlocks, label: sheetItem.name),
                                              ));
                                            // inputBlockExpansionList.add(false); 
                                          } else {
                                            inputBlocks.add(
                                              InputBlock(
                                              indexPath: sheetItem.indexPath, 
                                              blockIndex: [-2],
                                              useConst: true,
                                              function: InputBlockFunction(inputBlocks: sheetItem.inputBlocks, label: sheetItem.name),
                                              id: sheetItem.id)
                                            );
                                          }
                                        });
                                      },
                                      child: Text(
                                      ' '+sheetItem.name,
                                      maxLines:1,
                                      overflow:TextOverflow.ellipsis,
                                      style:GoogleFonts.lexend(
                                        color: defaultPalette.primary,
                                        fontWeight: FontWeight.w500,
                                        fontSize: 18,
                                        letterSpacing:-1
                                      ),
                                    ),
                                    ),
                                  ),
                                ),
                              ),
                            const SizedBox(height:4),
                            ]
                          );
                        } else if (sheetItem is SheetList) {
                          collect(sheetItem.sheetList, parentLabel: 'List: ${sheetItem.id}');
                        } else if (sheetItem is SheetTable) {
                          pageWidgets.add(
                            Container(
                              width: oWidth,
                              margin: EdgeInsets.symmetric(horizontal:4, vertical: 4),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  //table title
                                  Container(
                                    width:oWidth,
                                    decoration: BoxDecoration(
                                      color: defaultPalette.extras[3],
                                      borderRadius: BorderRadius.circular(5),
                                      
                                    ),
                                    margin: EdgeInsets.symmetric(vertical: 4),
                                    child: Text(
                                      ' ${sheetItem.name}',
                                      maxLines:1,
                                      overflow:TextOverflow.ellipsis,
                                      style:GoogleFonts.lexend(
                                        color: defaultPalette.extras[0],
                                        fontWeight: FontWeight.w500,
                                        fontSize: 18,
                                        letterSpacing:-1
                                      ),
                                    ),
                                  ),
                                  //table content horizontal scroll
                                  SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: SizedBox(
                                      // height: 20.0*sheetItem.cellData.length,
                                      width: 30.0*sheetItem.cellData[0].length,
                                      child: Table(
                                        defaultVerticalAlignment: TableCellVerticalAlignment.middle,
                                        children: [
                                          //the row that represents the cols A,B,C... used to add the entire col
                                          TableRow(
                                            children: [
                                              // the empty cell at the topleft corner
                                               Container(
                                                  width: 30,
                                                  height: 18,
                                                  decoration: BoxDecoration(
                                                    // color: defaultPalette.primary.withOpacity(0.2),
                                                    borderRadius: BorderRadius.circular(5),
                                                  ),
                                                  margin: EdgeInsets.all(2),
                                                  child:  ClipRRect(
                                                      borderRadius:BorderRadius.circular(5),
                                                      child: Material(
                                                        color: defaultPalette.primary.withOpacity(0.2),
                                                        child: InkWell(
                                                          hoverColor:defaultPalette.extras[0],
                                                          splashColor:defaultPalette.extras[0],
                                                          highlightColor:defaultPalette.extras[0],
                                                          onTap:(){
                                                            setState(() {
                                                            });
                                                          },
                                                          child: Text(
                                                          '',
                                                          textAlign: TextAlign.center,
                                                          style: GoogleFonts.lexend(
                                                            color: defaultPalette.primary,
                                                            fontWeight: FontWeight.w500,
                                                            fontSize: 12,
                                                            letterSpacing: -1,
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              // A, B, C,...
                                              ...sheetItem.columnData.asMap().entries.map((el) {
                                              return UtilityWidgets.maybeTooltip(
                                                message: ' add ${numberToColumnLabel(el.key+1)} column',
                                                child: Container(
                                                    width: 30,
                                                    height: 18,
                                                    decoration: BoxDecoration(
                                                      // color: defaultPalette.primary.withOpacity(0.2),
                                                      borderRadius: BorderRadius.circular(5),
                                                    ),
                                                    margin: EdgeInsets.all(2),
                                                    child:  ClipRRect(
                                                        borderRadius:BorderRadius.circular(5),
                                                        child: Material(
                                                          color: defaultPalette.primary.withOpacity(0.2),
                                                          child: InkWell(
                                                            hoverColor:defaultPalette.extras[0],
                                                            splashColor:defaultPalette.extras[0],
                                                            highlightColor:defaultPalette.extras[0],
                                                            onTap:(){
                                                              setState(() {
                                                                if (inputBlocks == null) {
                                                                  // for (var i = 0; i < sheetItem.cellData.length; i++) {
                                                                    item.inputBlocks.add(InputBlock(
                                                                      indexPath: sheetItem.indexPath, 
                                                                      blockIndex: [-2], 
                                                                      id: sheetItem.id,
                                                                      useConst: false,
                                                                      function: ColumnFunction(
                                                                        inputBlocks:  sheetItem.columnData[el.key].columnInputBlocks,
                                                                        func: 'sum',
                                                                        axisLabel: numberToColumnLabel(el.key+1),
                                                                      ),
                                                                      ));
                                                                  // }
                                                                  
                                                                  // inputBlockExpansionList.add(false); 
                                                                } else {
                                                                  
                                                                    inputBlocks.add( InputBlock(
                                                                      indexPath: sheetItem.indexPath, 
                                                                      blockIndex: [-2], 
                                                                      id: sheetItem.id,
                                                                      useConst: false,
                                                                      function: ColumnFunction(
                                                                        inputBlocks:  sheetItem.columnData[el.key].columnInputBlocks,
                                                                        func:  'sum',
                                                                        axisLabel: numberToColumnLabel(el.key+1),
                                                                      ),
                                                                    )
                                                                  );
                                                                  
                                                                }
                                                              });
                                                            },
                                                            child: Text(
                                                            numberToColumnLabel(el.key+1),
                                                            textAlign: TextAlign.center,
                                                            style: GoogleFonts.lexend(
                                                              color: defaultPalette.primary,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 12,
                                                              letterSpacing: -1,
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                              );
                                            },).toList()]
                                          ),
                                          //The rows representing cells A1, A2,...
                                          ...sheetItem.cellData.asMap().entries.map((elm) {
                                          return TableRow(
                                            children: [
                                              // to show the row number 1,2,3... used to add the entire row
                                              UtilityWidgets.maybeTooltip(
                                                message:'add all cells from ${(elm.key+1).toString()} row',
                                                child: Container(
                                                    width: 30,
                                                    height: 18,
                                                    decoration: BoxDecoration(
                                                      // color: defaultPalette.primary.withOpacity(0.2),
                                                      borderRadius: BorderRadius.circular(5),
                                                    ),
                                                    margin: EdgeInsets.all(2),
                                                    child:  ClipRRect(
                                                        borderRadius:BorderRadius.circular(5),
                                                        child: Material(
                                                          color: defaultPalette.primary.withOpacity(0.2),
                                                          child: InkWell(
                                                            hoverColor:defaultPalette.extras[0],
                                                            splashColor:defaultPalette.extras[0],
                                                            highlightColor:defaultPalette.extras[0],
                                                            onTap:(){
                                                              setState(() {
                                                                if (inputBlocks == null) {
                                                                  
                                                                    item.inputBlocks.add(
                                                                      InputBlock(
                                                                      indexPath: sheetItem.indexPath, 
                                                                      blockIndex: [-2], 
                                                                      id: sheetItem.id,
                                                                      useConst: false,
                                                                      function: ColumnFunction(
                                                                        inputBlocks:  sheetItem.rowData[elm.key].rowInputBlocks,
                                                                        func:  'sum',
                                                                        axisLabel: (elm.key+1).toString(),
                                                                      ),
                                                                    )
                                                                    );
                                                                  
                                                                  
                                                                  // inputBlockExpansionList.add(false); 
                                                                } else {
                                                                  
                                                                    inputBlocks.add( InputBlock(
                                                                      indexPath: sheetItem.indexPath, 
                                                                      blockIndex: [-2], 
                                                                      id: sheetItem.id,
                                                                      useConst: false,
                                                                      function: ColumnFunction(
                                                                        inputBlocks:  sheetItem.rowData[elm.key].rowInputBlocks,
                                                                        func:  'sum',
                                                                        axisLabel: (elm.key+1).toString(),
                                                                      ),
                                                                    )
                                                                    );
                                                                  
                                                                }
                                                              });
                                                            },
                                                            child: Text(
                                                            (elm.key+1).toString(),
                                                            textAlign: TextAlign.center,
                                                            style: GoogleFonts.lexend(
                                                              color: defaultPalette.primary,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 12,
                                                              letterSpacing: -1,
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                              ),
                                              ...elm.value.map((cell) {
                                              final sheetCellItem = cell.sheetItem;
                                              if (sheetCellItem is SheetText) {
                                                return Container(
                                                  width: 30,
                                                  height: 18,
                                                  decoration: BoxDecoration(
                                                    // color: defaultPalette.primary.withOpacity(0.2),
                                                    borderRadius: BorderRadius.circular(5),
                                                  ),
                                                  margin: EdgeInsets.all(2),
                                                  child:  ClipRRect(
                                                      borderRadius:BorderRadius.circular(5),
                                                      child: Material(
                                                        color: defaultPalette.primary.withOpacity(0.2),
                                                        child: InkWell(
                                                          hoverColor:defaultPalette.extras[0],
                                                          splashColor:defaultPalette.extras[0],
                                                          highlightColor:defaultPalette.extras[0],
                                                          onTap:(){
                                                            setState(() {
                                                              if (inputBlocks == null) {
                                                                item.inputBlocks.add(InputBlock(
                                                                  indexPath: sheetCellItem.indexPath, 
                                                                  blockIndex: [-2],
                                                                  id: sheetCellItem.id,
                                                                  function: InputBlockFunction(inputBlocks: sheetCellItem.inputBlocks, label: sheetCellItem.name)
                                                                  ));
                                                                // inputBlockExpansionList.add(false); 
                                                              } else {
                                                                inputBlocks.add(
                                                                  InputBlock(
                                                                  indexPath: sheetCellItem.indexPath, 
                                                                  blockIndex: [-2],
                                                                  id: sheetCellItem.id,
                                                                  function: InputBlockFunction(inputBlocks: sheetCellItem.inputBlocks, label: sheetCellItem.name)
                                                                  )
                                                                );
                                                              }
                                                            });
                                                          },
                                                          child: Text(
                                                          sheetCellItem.name,
                                                          textAlign: TextAlign.center,
                                                          style: GoogleFonts.lexend(
                                                            color: defaultPalette.primary,
                                                            fontWeight: FontWeight.w500,
                                                            fontSize: 12,
                                                            letterSpacing: -1,
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                );
                                              } else if (sheetCellItem is SheetList) {
                                                return const Padding(
                                                  padding: EdgeInsets.all(6.0),
                                                  child: Text('Nested List'),
                                                );
                                              } else {
                                                return const SizedBox.shrink();
                                              }
                                            }).toList()],
                                          );
                                        }).toList()
                                      ],
                                      ),
                                    ),
                                  )

                                ],
                              ),
                            ),
                          );
                        }

                      }
                    }

                    collect(page.sheetList);
                    organized[pageIndex + 1] = pageWidgets;
                  }
                  //return for buildOraginzedSheetTextList
                  return ClipRRect(
                    borderRadius:BorderRadius.circular(10).copyWith(
                      bottomLeft: Radius.circular(16),
                      bottomRight: Radius.circular(0),
                      topRight:Radius.circular(0),
                    ),
                    child:  ScrollConfiguration(
                      behavior: ScrollBehavior().copyWith(scrollbars: false),
                      child: DynMouseScroll(
                        durationMS: 500,
                        scrollSpeed: 1,
                        builder: (context, controller, physics) {
                          return  ScrollbarUltima(
                            alwaysShowThumb: true,
                            controller: controller,
                            scrollbarPosition:
                                ScrollbarPosition.right,
                            backgroundColor: defaultPalette.primary,
                            isDraggable: true,
                            maxDynamicThumbLength: 90,
                            minDynamicThumbLength: 50,
                            thumbBuilder:
                                (context, animation, widgetStates) {
                              return Container(
                                margin: EdgeInsets.only(right:0, top:3, bottom:10),
                                decoration: BoxDecoration(
                                    // border: Border.all(
                                    //    color: defaultPalette.primary.withOpacity(0.2),
                                    // ),
                                    color: defaultPalette.primary.withOpacity(0.1),
                                    borderRadius:
                                        BorderRadius.circular(2)),
                                width: 4,
                              );
                            },
                            child: SingleChildScrollView(
                              controller: controller,
                              physics: physics,
                              padding: EdgeInsets.only(right: 8),
                              child: Column(children: organized.entries.map((entry) {
                                return Container(
                                  
                                  margin:EdgeInsets.only(bottom:8),
                                  decoration:BoxDecoration(
                                    color: defaultPalette.primary.withOpacity(0.1),
                                    borderRadius:BorderRadius.circular(10),
                                    // border: Border.all(
                                    //   color: defaultPalette.extras[0],
                                    //   width: 2,
                                    //   )
                                  ),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      const SizedBox(height: 4),
                                      Text(
                                        '  Page ${spreadSheetList.indexWhere((el) => el.id == spreadList[entry.key-1].id,)+1}',
                                        style:GoogleFonts.lexend(
                                          color: defaultPalette.primary,
                                          fontWeight: FontWeight.w500,
                                          fontSize: 18,
                                          letterSpacing:-1
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Column(children:entry.value),
                                      const SizedBox(height: 4),
                                    ],
                                  ),
                                );
                              }).toList(),
                              )
                            ),
                          );
                        }
                      ),
                    ),
                  );
                }
                
                Widget inputBlocks(List<InputBlock> inputBlock,) {
                  //overlay textfields library
                  void showPositionedTextFieldOverlay({
                    required BuildContext context,
                    required Offset position,
                    required double width,
                    List<InputBlock>? inputBlocks,
                    required double height,
                  }) {
                    final overlay = Overlay.of(context);
                    var oHeight = height;
                    var oWidth = width;
                    final entry = OverlayEntry(
                      builder: (context) {
                        return StatefulBuilder(builder: (context, updateState) {
                          SheetList? filterSheetList(SheetList sheetList, String query) {
                            final lowerQuery = query.toLowerCase();

                            List<SheetItem> filteredItems = [];

                            for (var item in sheetList.sheetList) {
                              if (item is SheetTable) {
                                filteredItems.add(item); // keep all tables
                              } else if (item is SheetText) {
                                if (item.name.toLowerCase().contains(lowerQuery)) {
                                  filteredItems.add(item);
                                }
                              } else if (item is SheetList) {
                                final nestedFiltered = filterSheetList(item, query);
                                if (nestedFiltered != null && nestedFiltered.sheetList.isNotEmpty) {
                                  filteredItems.add(nestedFiltered);
                                }
                              }
                            }

                            if (filteredItems.isNotEmpty) {
                              return SheetList(
                                id: sheetList.id,
                                parentId: sheetList.parentId,
                                listDecoration: sheetList.listDecoration,
                                indexPath: sheetList.indexPath,
                                sheetList: filteredItems,
                              );
                            }

                            return null;
                          }

                          var filteredList = spreadSheetList
                            .map((sheetList) => filterSheetList(sheetList, textFieldSearchController.text))
                            .whereType<SheetList>()
                            .toList();
                          



                          return Positioned(
                            left: position.dx,
                            top: position.dy,
                            child: Stack(
                              children: [
                                GestureDetector(
                                  onPanUpdate: (details) {
                                    updateState((){
                                      position = Offset(position.dx + details.delta.dx,position.dy + details.delta.dy );
                                    });
                                  },
                                  child: Material(
                                    color: Colors.transparent,
                                    child: Container(
                                      width: oWidth,
                                      height: oHeight,
                                      padding: const EdgeInsets.all(4),
                                      decoration: BoxDecoration(
                                        color: defaultPalette.extras[0],
                                        borderRadius: BorderRadius.circular(20),
                                      ),
                                      child: Column(
                                        children: [
                                          // Search Bar
                                          Container(
                                            // padding: const EdgeInsets.symmetric(horizontal: 10),
                                            decoration: BoxDecoration(
                                              border: Border.all(color: defaultPalette.primary),
                                              borderRadius: BorderRadius.circular(15),
                                            ),
                                            height: 30,
                                            child: TextFormField(
                                              style: GoogleFonts.lexend(
                                              color: defaultPalette.primary,
                                              letterSpacing:-1,
                                              fontSize: 15,
                                              ),
                                              onChanged: (value) => updateState((){
                                                filteredList = spreadSheetList.map((sheetList) {
                                                final matchingTexts = sheetList.sheetList.where((item) {
                                                  if (item is SheetTable) return true; // keep all tables
                                                  if (item is SheetText) {
                                                    return item.name.toLowerCase().contains(value.toLowerCase());
                                                  }
                                                  return false;
                                                }).toList();
                                
                                                if (matchingTexts.isNotEmpty) {
                                                  return SheetList(
                                                    id: sheetList.id,
                                                    parentId: '',
                                                    listDecoration: '',
                                                    indexPath: IndexPath(index: -22),
                                                    // title: sheetList.title,
                                                    sheetList: matchingTexts,
                                                    // add any other fields if needed
                                                  );
                                                } else {
                                                  return null;
                                                }
                                              }).whereType<SheetList>().toList();
                                              }),
                                              cursorColor: defaultPalette.tertiary,
                                              controller: textFieldSearchController,
                                              decoration: InputDecoration(
                                                contentPadding: EdgeInsets.all(0),
                                                hintText: 'searchFields...',
                                                focusColor: defaultPalette.primary,
                                                hintStyle: GoogleFonts.lexend(
                                                  color: defaultPalette.primary,
                                                  letterSpacing:-1,
                                                  fontSize: 15),
                                                prefixIcon: Icon(TablerIcons.search, size:15,
                                                    color: defaultPalette.primary),
                                                border: OutlineInputBorder(
                                                  borderSide: BorderSide.none, 
                                                  borderRadius: BorderRadius.circular(12),
                                                ),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(height: 10),
                                  
                                          // Filtered list inside styled container
                                          Expanded(
                                            child: Container(
                                              padding: const EdgeInsets.all(4),
                                              decoration: BoxDecoration(
                                                borderRadius: BorderRadius.circular(14),
                                                border: Border.all(color: defaultPalette.primary),
                                              ),
                                              child: ClipRRect(
                                                borderRadius: BorderRadius.circular(14),
                                                child: Column(
                                                  children: [
                                                    const SizedBox(height: 5),
                                                    titleTile(
                                                      ' textFields',
                                                      TablerIcons.vocabulary,
                                                      fontSize: 16,
                                                      iconSize: 16,
                                                      color: defaultPalette.primary,
                                                      space: 5,
                                                    ),
                                                    const SizedBox(height: 10),
                                                    Expanded(child: buildOrganizedSheetTextList(filteredList, inputBlocks, oWidth)),
                                                  ],
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ),
                                //left handle resize
                                Positioned(
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          if (oWidth>200 && oWidth<sWidth) {
                                            position = Offset(position.dx + details.delta.dx,position.dy );
                                          }
                                          oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:5, height: sHeight,)
                                      ),
                                  )
                                  ),
                                //right handle resize
                                Positioned(
                                  right: 0,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:5, height: sHeight,)
                                      ),
                                  )
                                  ),
                                //top handle resize
                                Positioned(
                                  top: 0,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpDown,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          if (oHeight>200) {
                                            position = Offset(position.dx,position.dy + details.delta.dy);
                                          }
                                          oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                        });
                                      },
                                      child: SizedBox(width:oWidth, height:5,)
                                      ),
                                  )
                                  ),
                                //bottom handle resize
                                Positioned(
                                  top: oHeight-5,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpDown,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                        });
                                      },
                                      child: SizedBox(width:oWidth, height:5,)
                                      ),
                                  )
                                  ),
                                //bottomLeft handle resize
                                Positioned(
                                  top: oHeight-5,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpRightDownLeft,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                          if (oWidth>200 && oWidth<sWidth) {
                                            position = Offset(position.dx + details.delta.dx,position.dy );
                                          }
                                          oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:10, height:10,)
                                      ),
                                  )
                                  ),
                                //bottomRight handle resize
                                Positioned(
                                  top: oHeight-5,
                                  right: 0,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpLeftDownRight,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          oHeight = (oHeight + (details.delta.dy)).clamp(200, sHeight);
                                          
                                          oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:10, height:10,)
                                      ),
                                  )
                                  ),
                                //topRight handle resize
                                Positioned(
                                  top: 0,
                                  right: 0,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpRightDownLeft,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          if (oHeight>200) {
                                            position = Offset(position.dx,position.dy + details.delta.dy);
                                          }
                                          oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                          oWidth = (oWidth + (details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:10, height:10,)
                                      ),
                                  )
                                  ),
                                //topLeft handle resize
                                Positioned(
                                  top: 0,
                                  child: MouseRegion(
                                    cursor:SystemMouseCursors.resizeUpLeftDownRight,
                                    child: GestureDetector(
                                      behavior: HitTestBehavior.opaque,
                                      onPanUpdate: (details) {
                                        updateState((){
                                          if (oHeight>200) {
                                            position = Offset(position.dx,position.dy + details.delta.dy);
                                          }
                                          oHeight = (oHeight + (-details.delta.dy)).clamp(200, sHeight);
                                          if (oWidth>200 && oWidth<sWidth) {
                                            position = Offset(position.dx + details.delta.dx,position.dy );
                                          }
                                          oWidth = (oWidth + (-details.delta.dx)).clamp(200, sWidth);
                                        });
                                      },
                                      child: SizedBox(width:10, height:10,)
                                      ),
                                  )
                                  ),
                          
                              ],
                            ),
                          );
                        });
                      },
                    );

                    overlay.insert(entry);

                    // Remove overlay on outside tap
                    OverlayEntry? dismissEntry;
                    dismissEntry = OverlayEntry(
                      builder: (_) => GestureDetector(
                        onTap: () {
                          entry.remove();
                          dismissEntry?.remove();
                        },
                        behavior: HitTestBehavior.translucent,
                        child: const SizedBox.expand(),
                      ),
                    );

                    overlay.insert(dismissEntry, below: entry);
                  }
                  
                  List<Widget> buildFunctionTile(int index, double width, List<InputBlock> inputBlock, {Map<List<InputBlock>, int>? visited}){
                    var funcBlock = inputBlock[index];
                    var funcInputBlocks;
                    Widget Function(List<InputBlock> inBlock, int inx, { SheetFunction? parent }) sumFunctionInputBlocks;
                    Widget Function(List<InputBlock> inBlock, int inx, { SheetFunction? parent }) inputBlockFunctionInputBlocks =(List<InputBlock> inBlock, int inx , { SheetFunction? parent})=> Container(color:defaultPalette.extras[1]);
                    print(inputBlock[index].function);
                    if (inputBlock[index].function is SumFunction) {
                     funcInputBlocks =  (inputBlock[index].function as SumFunction).inputBlocks;
                    } else if (inputBlock[index].function is ColumnFunction) {
                      funcInputBlocks =  (inputBlock[index].function as ColumnFunction).inputBlocks;
                    } else if (inputBlock[index].function is InputBlockFunction) {
                      funcInputBlocks =  (inputBlock[index].function! as InputBlockFunction).inputBlocks;
                    } else if (inputBlock[index].function is CountFunction) {
                      funcInputBlocks =  (inputBlock[index].function! as CountFunction).inputBlocks;
                    }
                    // print('buildFunctionTile'+funcBlock.function.runtimeType.toString());
                    visited ??={};
                    visited[inputBlock] = (visited[inputBlock]??0)+1;
                    if((visited[inputBlock]??0)>5){
                      funcBlock.useConst = !funcBlock.useConst;
                      return [
                        Text(
                          '⚠️ Recursion detected'
                        )
                      ];
                    }
                    ////
                    ////
                        sumFunctionInputBlocks = (List<InputBlock> inBlock, int inx, {SheetFunction? parent}){
                          if (inx < 0 || inx >= inBlock.length) {
                            return SizedBox.shrink(
                            key: ValueKey(inx),
                          );
                          }
                          final block = inBlock[inx];
                          // If the block has a function, don't try to fetch an item at the indexPath
                          final hasFunction = block.function != null;
                          SheetFunction? sheetFunction;
                          int length =2;
                           if (inBlock[inx].function is SumFunction) {
                            sheetFunction =(inBlock[inx].function as SumFunction);
                            length = (inBlock[inx].function as SumFunction).inputBlocks.length;
                          } else if (inBlock[inx].function is ColumnFunction) {
                            sheetFunction =(inBlock[inx].function as ColumnFunction);
                            length = (inBlock[inx].function as ColumnFunction).inputBlocks.length;
                          } else if (inBlock[inx].function is CountFunction) {
                            sheetFunction =(inBlock[inx].function as CountFunction);
                            length = (inBlock[inx].function as CountFunction).inputBlocks.length;
                          }
                          // print(inBlock[inx].function.runtimeType);
                          // print('parent: ${parent}');
                          String? delta;
                          SheetText? itemAtPath;
                          if (!hasFunction || inBlock[inx].useConst) {
                            try {
                              final item = getItemAtPath(block.indexPath);
                              if (item is SheetText) {
                                itemAtPath = item;
                                delta = itemAtPath.textEditorConfigurations.controller.document.toPlainText();
                              } else {
                                throw Exception("Item is not SheetText");
                              }
                            } catch (e) {
                              return Container(
                                key: ValueKey(inx),
                                color:defaultPalette.extras[1]
                              ); // fail-safe
                            }
                          }
                          // print('SUMFUNCTIONINPUTTILE');
                          return ReorderableDragStartListener(
                            key: ValueKey(inx+2),
                            index: inx,
                            child: Row(
                              children: [
                                Expanded(
                                  child: Stack(
                                    children: [
                                      // const SizedBox(height: 45),
                                      if (inBlock[inx].useConst)
                                      ...[
                                        Container(
                                          // margin: const EdgeInsets.only(top: 10),
                                          padding: EdgeInsets.symmetric(vertical: 2),
                                          height: parent is! CountFunction?60:32,
                                          width: width,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(0),
                                            color: defaultPalette.tertiary,
                                          ),
                                          margin:EdgeInsets.only(bottom:1),
                                          child: Column(
                                            children: [
                                              //title for function
                                              Row(
                                                children: [
                                                  const SizedBox(width: 4),
                                                  Text(
                                                      inx.toString(),
                                                      textAlign: TextAlign.end,
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500,
                                                        fontSize: 18,
                                                        color: defaultPalette.primary,
                                                      ),
                                                    ),
                                                  // the number inside the field display
                                                  if(parent is! CountFunction)
                                                  Expanded(
                                                    flex: 4,
                                                    child: Container(
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(8),
                                                        color: double.tryParse(delta!) ==null? Color(0xffFF7477) :defaultPalette.secondary,
                                                      ),
                                                      padding: EdgeInsets.symmetric(horizontal:4),
                                                      margin: EdgeInsets.all(4).copyWith(bottom: 4),
                                                      child: Text(
                                                          delta,
                                                          textAlign: TextAlign.end,
                                                          maxLines: 1,
                                                          overflow: TextOverflow.ellipsis,
                                                          style: GoogleFonts.lexend(
                                                            letterSpacing: -1,
                                                            fontWeight: FontWeight.w500,
                                                            fontSize: 14,
                                                            color: defaultPalette.extras[0],
                                                          ),
                                                        ),
                                                    ),
                                                  ),  
                                                  Expanded(
                                                    flex: 5,
                                                    child: Text(
                                                      itemAtPath!.name,
                                                      textAlign: TextAlign.end,
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500,
                                                        fontSize: 18,
                                                        color: defaultPalette.primary,
                                                      ),
                                                    ),
                                                  ),
                                                  const SizedBox(width: 3),
                                                  ClipRRect(
                                                    borderRadius: BorderRadius.circular(99999),
                                                    child: Material(
                                                      color: defaultPalette.transparent,
                                                      child: InkWell(
                                                        hoverColor: defaultPalette.primary,
                                                        splashColor: defaultPalette.primary,
                                                        highlightColor: defaultPalette.primary,
                                                        onTap: () {
                                                          setState(() {
                                                            inBlock.removeAt(inx);
                                                          });
                                                        },
                                                        child: Icon(
                                                          TablerIcons.x,
                                                          size: 18,
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                  const SizedBox(width: 3),
                                                ],
                                              ),
                                              //sum cumulative and individual index
                                              if(parent is! CountFunction)
                                              Row(
                                                children: [

                                                  if (inBlock[inx].id !=item.id) 
                                                  ...[
                                                    const SizedBox(width: 3),
                                                    ElevatedLayerButton(
                                                      borderRadius: const BorderRadius.only(
                                                        topRight: Radius.circular(5),
                                                        topLeft: Radius.circular(5),
                                                        bottomRight: Radius.circular(10),
                                                        bottomLeft: Radius.circular(10),
                                                      ),
                                                      animationDuration: const Duration(milliseconds: 100),
                                                      animationCurve: Curves.ease,
                                                      topDecoration: BoxDecoration(
                                                        color: defaultPalette.primary,
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      topLayerChild: Row(
                                                        children: [
                                                          const SizedBox(width: 2),
                                                          Icon(inBlock[inx].useConst?TablerIcons.cursor_text:TablerIcons.math_integral, size: 12, color: defaultPalette.extras[0]),
                                                          
                                                        ],
                                                      ),
                                                      baseDecoration: BoxDecoration(
                                                        color: defaultPalette.extras[0],
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      depth: 2,
                                                      subfac: 2,
                                                      buttonHeight: 24,
                                                      buttonWidth: 20,
                                                      onClick: () {
                                                        setState(() {
                                                          inBlock[inx].useConst= !inBlock[inx].useConst;
                                                          print(inBlock);
                                                          // print(sheetTableItem);
                                                          // for (final row in sheetTableItem.rowData) {
                                                          //   for (final ib in row.rowInputBlocks) {
                                                          //     print('useConst: ${ib.useConst}, row: $row, cell: ${ib.id}');
                                                                
                                                          //   }
                                                          // }
                                                        });
                                                      },
                                                    ),
                                                  ],
                                                  Expanded(
                                                    child: Container(
                                                      margin: EdgeInsets.all(2).copyWith(top:4),
                                                      padding: EdgeInsets.all(3),
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(5),
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      child: Row(
                                                      children: [
                                                        const SizedBox(width: 3),
                                                        
                                                        Expanded(
                                                          child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                TextSpan(text: parent is ColumnFunction? ' ${parent.func}: ': ' sum: ',style: TextStyle(color:Color(0xffB388EB)),),
                                                                TextSpan(
                                                                  text: '${(parent is ColumnFunction && parent.func == 'count')? CountFunction(inputBlocks:inBlock.sublist(0,inx+1)).result(getItemAtPath,buildCombinedQuillConfiguration, spreadSheet: null).toPlainText() :SumFunction(inBlock.sublist(0,inx+1)).result(getItemAtPath,buildCombinedQuillConfiguration, spreadSheet: null).toPlainText()}',
                                                                  style: TextStyle(color:defaultPalette.primary),
                                                                ),
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                        ),
                                                        Expanded(
                                                          child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                                TextSpan(
                                                                  text: '${(inx).clamp(0, double.infinity)}',
                                                                  style: TextStyle(color:defaultPalette.primary),
                                                                ),
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                              ),
                                                    ),
                                                  ),
                                                ],
                                              )
                                
                                            ],
                                          ),
                                        ),
                                      ],

                                      if(!inBlock[inx].useConst && inBlock[inx].function is InputBlockFunction)
                                      inputBlockFunctionInputBlocks(inBlock, inx,parent : parent),
                                      if(!inBlock[inx].useConst && (inBlock[inx].function is SumFunction || inBlock[inx].function is ColumnFunction|| inBlock[inx].function is CountFunction))
                                      GestureDetector(
                                        onTap:(){
                                          setState(() {
                                            if (sheetFunction is SumFunction) {
                                              selectedInputBlocks =(sheetFunction as SumFunction).inputBlocks;
                                            } else if (sheetFunction is ColumnFunction) {
                                              selectedInputBlocks =(sheetFunction as ColumnFunction).inputBlocks;
                                            } else if (sheetFunction is InputBlockFunction) {
                                              selectedInputBlocks =(sheetFunction as InputBlockFunction).inputBlocks;
                                            } else if (sheetFunction is CountFunction) {
                                              selectedInputBlocks =(sheetFunction as CountFunction).inputBlocks;
                                            } 
                                            
                                          });
                                        },
                                        child: Stack(
                                          children:[
                                            if(inBlock[inx].isExpanded)
                                            Padding(
                                              padding: const EdgeInsets.only(top:28.0),
                                              child: buildFunctionTile(inx, width,inBlock, visited:visited==null?null: Map<List<InputBlock>,int>.from(visited))[0],
                                            ),
                                            AnimatedMeshGradient(
                                              colors: [
                                                  // defaultPalette.extras[0],
                                                  defaultPalette.primary,
                                                  defaultPalette.primary,
                                                  defaultPalette.primary,
                                                  sheetFunction is SumFunction
                                                    ? selectedInputBlocks ==(sheetFunction as SumFunction).inputBlocks 
                                                      ? defaultPalette.extras[0]
                                                      : defaultPalette.primary
                                                      : defaultPalette.primary,
                                                ],
                                              options: AnimatedMeshGradientOptions(
                                                  amplitude: 5,
                                                  grain: 0.1,
                                                  frequency: 15,
                                                  
                                                ),
                                              child: Container(
                                                width: width,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(0),
                                                  // color: defaultPalette.primary,
                                                ),
                                                child: Column(
                                                  children: [
                                                    //the title of function
                                                    Row(
                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                      children: [
                                                        const SizedBox(width: 4),
                                                        //inx
                                                        Text(
                                                            inx.toString(),
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              foreground: Paint()
                                                              ..color = defaultPalette.primary
                                                              ..blendMode = BlendMode.difference
                                                            ),
                                                          ),
                                                        //delta
                                                        Expanded(
                                                          flex:4,
                                                          child: Container(
                                                            decoration: BoxDecoration(
                                                              borderRadius: BorderRadius.circular(5),
                                                              color: defaultPalette.extras[0],
                                                            ),
                                                            padding: EdgeInsets.symmetric(horizontal:4,vertical: 2),
                                                            margin: EdgeInsets.all(4).copyWith(bottom: 2),
                                                            child: Row(
                                                              children: [
                                                                if(sheetFunction is ColumnFunction)
                                                            Material(
                                                              color: defaultPalette.transparent,
                                                              child: InkWell(
                                                                hoverColor: defaultPalette.primary.withOpacity(0.05),
                                                                highlightColor: defaultPalette.primary.withOpacity(0.05),
                                                                splashColor: defaultPalette.primary.withOpacity(0.05),
                                                                onTapDown:(d){
                                                                  ContextMenu(
                                                                    entries: [
                                                                      MenuItem(
                                                                        label: 'sum',
                                                                        icon: TablerIcons.sum,
                                                                        style: GoogleFonts.lexend(
                                                                          fontWeight: FontWeight.w300,
                                                                          color: defaultPalette.primary,
                                                                        ),
                                                                        hoverColor: defaultPalette.extras[0],
                                                                      onSelected: () {
                                                                        setState(() {
                                                                          (sheetFunction as ColumnFunction).func = 'sum';
                                                                        });
                                                                        
                                                                      },
                                                                      ),
                                                                      MenuItem(label: 'count',
                                                                      icon: TablerIcons.tallymarks,
                                                                      style: GoogleFonts.lexend(
                                                                          fontWeight: FontWeight.w300,
                                                                          color: defaultPalette.primary,
                                                                        ),
                                                                      hoverColor: defaultPalette.extras[0],
                                                                      onSelected: () {
                                                                        setState(() {
                                                                          (sheetFunction as ColumnFunction).func = 'count';
                                                                        });
                                                                      },
                                                                      ),
                                                                    ],
                                                                    boxDecoration: BoxDecoration(
                                                                        boxShadow: [
                                                                          BoxShadow(
                                                                            color: defaultPalette
                                                                                .black,
                                                                            blurRadius: 2,
                                                                          )
                                                                        ],
                                                                        color: defaultPalette.extras[0],
                                                                        borderRadius:
                                                                            BorderRadius.circular(
                                                                                10)),
                                                                    position: Offset(
                                                                        d.globalPosition.dx,
                                                                        d.globalPosition.dy+20))
                                                                .show(context);
                                                                  },
                                                                  child: Row(
                                                                    children: [
                                                                      Icon(
                                                                        TablerIcons.caret_down_filled,
                                                                        size: 12,
                                                                        color: defaultPalette.primary,
                                                                      ),
                                                                      if(width>220)
                                                                      Text(
                                                                        '${(sheetFunction as ColumnFunction).func}:',
                                                                        maxLines: 1,
                                                                        overflow:TextOverflow.ellipsis,
                                                                        style: GoogleFonts.lexend(
                                                                          letterSpacing: -0.5,
                                                                          fontWeight: FontWeight.w400,
                                                                          fontSize: 12,
                                                                          color: defaultPalette.extras[8],
                                                                        ),),
                                                                      const SizedBox(width: 3),
                                                                    ],
                                                                  ),
                                                                  
                                                                  )
                                                                ),
                                                                // if(sheetFunction is! ColumnFunction)
                                                                Expanded(
                                                                  child: RichText(
                                                                  text: TextSpan(
                                                                    style: GoogleFonts.lexend(
                                                                      letterSpacing: -1,
                                                                      fontWeight: FontWeight.w400,
                                                                      fontSize: 14,
                                                                      color: defaultPalette.extras[0],
                                                                    ),
                                                                    children: [
                                                                      if(sheetFunction is SumFunction)
                                                                      TextSpan(text: ' sum: ',style: TextStyle(color:Color(0xffB388EB)),),
                                                                      if(sheetFunction is CountFunction)
                                                                      TextSpan(text: ' count: ',style: TextStyle(color:Color(0xffB388EB)),),
                                                                      TextSpan(
                                                                        text: '${block.function!.result(getItemAtPath,buildCombinedQuillConfiguration,).toPlainText()}',
                                                                        style: TextStyle(color:defaultPalette.primary),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  overflow: TextOverflow.ellipsis,
                                                                  maxLines: 1,
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ),    
                                                        //label
                                                        Expanded(
                                                          flex:5,
                                                          child: Text(
                                                            sheetFunction is! ColumnFunction
                                                            ? sheetFunction?.name ??''
                                                            : (double.tryParse((sheetFunction as ColumnFunction).axisLabel) ==null? 'column ': 'row ')+ (sheetFunction).axisLabel,
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              height: 1,
                                                              foreground: Paint()
                                                              ..color = defaultPalette.primary
                                                              ..blendMode = BlendMode.difference
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                        //remove function button 
                                                        Padding(
                                                          padding: const EdgeInsets.only(top:4),
                                                          child: ClipRRect(
                                                            borderRadius: BorderRadius.circular(99999),
                                                            child: Material(
                                                              color: defaultPalette.transparent,
                                                              child: InkWell(
                                                                hoverColor: defaultPalette.primary,
                                                                splashColor: defaultPalette.primary,
                                                                highlightColor: defaultPalette.primary,
                                                                onTap: () {
                                                                  setState(() {
                                                                    inBlock.removeAt(inx);
                                                                  });
                                                                },
                                                                child: Icon(
                                                                  TablerIcons.x,
                                                                  size: 17,
                                                                ),
                                                              ),
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                    ),
                                                    //index 0-0
                                                    Row(
                                                      children: [
                                                        const SizedBox(width: 4),
                                                        //inx invis
                                                        Text(
                                                            inx.toString(),
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              // color: defaultPalette.primary,
                                                              foreground: Paint()
                                                              ..blendMode = BlendMode.dst
                                                            ),
                                                          ),
                                                        
                                                        Expanded(
                                                          flex:4,
                                                          child: Container(
                                                            margin: EdgeInsets.all(2).copyWith(top:0, left:4),
                                                            padding: EdgeInsets.all(2),
                                                            decoration: BoxDecoration(
                                                              borderRadius: BorderRadius.circular(5),
                                                              color: defaultPalette.extras[0],
                                                            ),
                                                            child: Row(
                                                            children: [
                                                              const SizedBox(width: 3),
                                                              
                                                              Expanded(
                                                                child: RichText(
                                                                  text: TextSpan(
                                                                    style: GoogleFonts.lexend(
                                                                      letterSpacing: -1,
                                                                      fontWeight: FontWeight.w400,
                                                                      fontSize: 14,
                                                                      color: defaultPalette.extras[0],
                                                                    ),
                                                                    children: [
                                                                      TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                                      TextSpan(
                                                                        text: '0 - ${(length - 1).clamp(0, double.infinity)}',
                                                                        style: TextStyle(color:defaultPalette.primary),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  overflow: TextOverflow.ellipsis,
                                                                  maxLines: 1,
                                                                ),
                                                              ),
                                                              const SizedBox(width: 3),
                                                            ],
                                                          ),
                                                          ),
                                                        ),
                                                        Expanded(
                                                          flex:5,
                                                          child:sheetFunction is! ColumnFunction?
                                                           SizedBox():
                                                           Text(
                                                            (getItemAtPath(inBlock[inx].indexPath) as SheetTable).name,
                                                            textAlign: TextAlign.end,
                                                            maxLines:1,
                                                            overflow:TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w400,
                                                              fontSize: 14,
                                                              color: defaultPalette.extras[0],
                                                            ),
                                                           )
                                                           ),
                                                        SizedBox(width:23),
                                                      ],
                                                    ),
                                                    
                                                    //sum cumulative and individual index
                                                    Container(
                                                      margin: EdgeInsets.all(2).copyWith(top:4, left:38,bottom: 4),
                                                      padding: EdgeInsets.all(3),
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(5),
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      child: Row(
                                                      children: [
                                                        const SizedBox(width: 3),
                                                        Expanded(
                                                          child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                TextSpan(text: parent is SumFunction || (parent is ColumnFunction && parent.func =='sum')
                                                                ? 'sum: '
                                                                : parent is CountFunction || (parent is ColumnFunction && parent.func =='count')
                                                                  ? 'count: '
                                                                  : parent is InputBlockFunction
                                                                    ? 'str: ':'',
                                                                style: TextStyle(color:Color(0xffB388EB)),),
                                                                TextSpan(
                                                                  text: '${(((parent is ColumnFunction && parent.func == 'count')|| parent is CountFunction)? CountFunction(inputBlocks:inBlock.sublist(0,inx+1)): SumFunction(inBlock.sublist(0,inx+1))).result(getItemAtPath,buildCombinedQuillConfiguration,).toPlainText()}',
                                                                  style: TextStyle(color:defaultPalette.primary),
                                                                ),
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                        ),
                                                        Expanded(
                                                          child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                                TextSpan(
                                                                  text: '${(inx).clamp(0, double.infinity)}',
                                                                  style: TextStyle(color:defaultPalette.primary),
                                                                ),
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                    ),
                                                    ),
                                                                          
                                                    
                                                    
                                                    ],
                                                ),
                                              ),
                                            ),
                                            Positioned(
                                              top:54,
                                              child: ElevatedLayerButton(
                                                  isTapped: inBlock[inx].isExpanded,
                                                  borderRadius: const BorderRadius.only(
                                                    topRight: Radius.circular(5),
                                                    topLeft: Radius.circular(5),
                                                    bottomRight: Radius.circular(5),
                                                    bottomLeft: Radius.circular(5),
                                                  ),
                                                  animationDuration: const Duration(milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: defaultPalette.primary,
                                                    border: Border.all(color: defaultPalette.extras[0]),
                                                  ),
                                                  topLayerChild: Row(
                                                    children: [
                                                      Expanded(child: Icon(TablerIcons.medical_cross_filled, size: 13, color: defaultPalette.extras[0])),
                                                      
                                                    ],
                                                  ),
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    border: Border.all(color: defaultPalette.extras[0]),
                                                  ),
                                                  depth: 2,
                                                  subfac: 5,
                                                  buttonHeight: 24,
                                                  buttonWidth: 35,
                                                  onClick: () {
                                                    setState(() {
                                                      // inputBlockExpansionList[index] = !// inputBlockExpansionList[index];
                                                      inBlock[inx].isExpanded =!inBlock[inx].isExpanded;
                                                    });
                                                  },
                                                ),
                                            ),
                        
                                            
                                            ]
                                          
                                          ))
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          );
                        };
                        inputBlockFunctionInputBlocks = (List<InputBlock> inBlock, int inx,{SheetFunction? parent}){
                          if (inx < 0 || inx >= inBlock.length) {
                            return SizedBox.shrink(
                              key: ValueKey(inx),
                            );
                          }
                          final block = inBlock[inx];
                          // If the block has a function, don't try to fetch an item at the indexPath
                          final hasFunction = block.function != null;
                          SheetFunction? sheetFunction;
                          int length =2;
                          
                          if (hasFunction) {
                            if (sheetFunction is SumFunction) {
                              sheetFunction =(inBlock[inx].function as  SumFunction);
                              length = (inBlock[inx].function as  SumFunction).inputBlocks.length;
                            } else if (sheetFunction is ColumnFunction) {
                              sheetFunction =(inBlock[inx].function as  ColumnFunction);
                              length = (inBlock[inx].function as  ColumnFunction).inputBlocks.length;
                            } else if (sheetFunction is InputBlockFunction) {
                              sheetFunction =(inBlock[inx].function as  InputBlockFunction);
                              length = (inBlock[inx].function as  InputBlockFunction).inputBlocks.length;
                            } 
                            
                          }
                          String? delta;
                          SheetText? itemAtPath;
                          print('useConst: '+inBlock[inx].useConst.toString());
                          if (!hasFunction || inBlock[inx].useConst) {
                            try {
                              final item = getItemAtPath(block.indexPath);
                              if (item is SheetText) {
                                itemAtPath = item;
                                delta = itemAtPath.textEditorConfigurations.controller.document.toPlainText();
                              } else {
                                throw Exception("Item is not SheetText");
                              }
                            } catch (e) {
                              return Container(
                                key: ValueKey(inx),
                                color:defaultPalette.extras[1]
                              ); // fail-safe
                            }
                          }
                          return ReorderableDragStartListener(
                            key: ValueKey(inx),
                            index: inx,
                            child: Row(
                              children: [
                                Expanded(
                                  child: Stack(
                                    children: [
                                      // const SizedBox(height: 45),
                                      if (inBlock[inx].useConst)
                                      ...[
                                        Container(
                                          // margin: const EdgeInsets.only(top: 10),
                                          padding: EdgeInsets.symmetric(vertical: 2),
                                          height: 60,
                                          width: width,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(0),
                                            color: defaultPalette.tertiary,
                                          ),
                                          margin:EdgeInsets.only(bottom:1),
                                          child: Column(
                                            children: [
                                              //title for function
                                              Row(
                                                children: [
                                                  const SizedBox(width: 4),
                                                  Text(
                                                    inx.toString(),
                                                    textAlign: TextAlign.end,
                                                    maxLines: 1,
                                                    overflow: TextOverflow.ellipsis,
                                                    style: GoogleFonts.lexend(
                                                      letterSpacing: -1,
                                                      fontWeight: FontWeight.w500,
                                                      fontSize: 18,
                                                      color: defaultPalette.primary,
                                                    ),
                                                  ),
                                                  
                                                  Expanded(
                                                    flex: 5,
                                                    child: Text(
                                                      itemAtPath!.name,
                                                      textAlign: TextAlign.end,
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500,
                                                        fontSize: 18,
                                                        color: defaultPalette.primary,
                                                      ),
                                                    ),
                                                  ),
                                                  const SizedBox(width: 3),
                                                  ClipRRect(
                                                    borderRadius: BorderRadius.circular(99999),
                                                    child: Material(
                                                      color: defaultPalette.transparent,
                                                      child: InkWell(
                                                        hoverColor: defaultPalette.primary,
                                                        splashColor: defaultPalette.primary,
                                                        highlightColor: defaultPalette.primary,
                                                        onTap: () {
                                                          setState(() {
                                                            inBlock.removeAt(inx);
                                                          });
                                                        },
                                                        child: Icon(
                                                          TablerIcons.x,
                                                          size: 18,
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                  const SizedBox(width: 3),
                                                ],
                                              ),
                                              Row(
                                                children:[
                                                  // the number inside the field display
                                                  Expanded(
                                                    child: Container(
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(8),
                                                        color: defaultPalette.secondary,
                                                      ),
                                                      padding: EdgeInsets.symmetric(horizontal:4),
                                                      margin: EdgeInsets.all(4).copyWith(bottom: 4),
                                                      child: Text(
                                                        delta!,
                                                        textAlign: TextAlign.end,
                                                        maxLines: 1,
                                                        overflow: TextOverflow.ellipsis,
                                                        style: GoogleFonts.lexend(
                                                          letterSpacing: -1,
                                                          fontWeight: FontWeight.w500,
                                                          fontSize: 14,
                                                          color: defaultPalette.extras[0],
                                                        ),
                                                      ),
                                                    ),
                                                  ),  
                                                ]
                                              )
                                
                                            ],
                                          ),
                                        ),
                                      ],

                                      if(!inBlock[inx].useConst && (inBlock[inx].function is SumFunction || inBlock[inx].function is ColumnFunction || inBlock[inx].function is CountFunction))
                                      sumFunctionInputBlocks(inBlock, inx,parent:parent ),
                                      if(!inBlock[inx].useConst && inBlock[inx].function is InputBlockFunction)
                                      GestureDetector(
                                        onTap:(){
                                          setState(() {
                                            if (inBlock[inx].function is SumFunction) {
                                              selectedInputBlocks =(inBlock[inx].function as SumFunction).inputBlocks;
                                            } else if (inBlock[inx].function is ColumnFunction) {
                                              selectedInputBlocks =(inBlock[inx].function as ColumnFunction).inputBlocks;
                                            } else if (inBlock[inx].function is InputBlockFunction) {
                                              selectedInputBlocks =(inBlock[inx].function as InputBlockFunction).inputBlocks;
                                            } 
                                          });
                                        },
                                        child: Stack(
                                          
                                          children:[
                                            if(inBlock[inx].isExpanded)
                                            Padding(
                                              padding: const EdgeInsets.only(top:23.0),
                                              child: buildFunctionTile(inx, width,inBlock,visited:visited==null?null: Map<List<InputBlock>,int>.from(visited))[0],
                                            ),
                                            AnimatedMeshGradient(
                                              colors: [
                                                  // defaultPalette.extras[0],
                                                  defaultPalette.primary,
                                                  defaultPalette.primary,
                                                  defaultPalette.primary,
                                                  defaultPalette.primary,
                                                ],
                                              options: AnimatedMeshGradientOptions(
                                                  amplitude: 5,
                                                  grain: 0.1,
                                                  frequency: 15,
                                                  
                                                ),
                                              child: Container(
                                                // margin: const EdgeInsets.only(top: 10, bottom: 5),
                                                width: width,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(0),
                                                  // color: defaultPalette.primary,
                                                ),
                                                child: Column(
                                                  children: [
                                                    //the title of function
                                                    Row(
                                                      crossAxisAlignment: CrossAxisAlignment.center,
                                                      children: [
                                                        const SizedBox(width: 4),
                                                        //inx
                                                        Text(
                                                            inx.toString(),
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              foreground: Paint()
                                                              ..color = defaultPalette.primary
                                                              ..blendMode = BlendMode.difference
                                                            ),
                                                          ),
                                                        //delta
                                                        Expanded(
                                                          flex:4,
                                                          child: Container(
                                                            decoration: BoxDecoration(
                                                              borderRadius: BorderRadius.circular(5),
                                                              color: defaultPalette.extras[0],
                                                            ),
                                                            padding: EdgeInsets.symmetric(horizontal:4,vertical: 2),
                                                            margin: EdgeInsets.all(4).copyWith(bottom: 2),
                                                            child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 14,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                TextSpan(text: 'str: ',
                                                                style: TextStyle(color:Color(0xffB388EB)),),
                                                                if(inBlock[inx].function is InputBlockFunction)
                                                                TextSpan(text: '${(inBlock[inx].function as InputBlockFunction).getConfigurations(buildCombinedQuillConfiguration).controller.document.toPlainText()}: ',
                                                                style: TextStyle(color:defaultPalette.primary),),
                                                                
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                          ),
                                                        ),    
                                                        //label
                                                        Expanded(
                                                          flex:5,
                                                          child: Text(
                                                            (getItemAtPath(inBlock[inx].indexPath) as SheetText).name ??'',
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              height: 1,
                                                              foreground: Paint()
                                                              ..color = defaultPalette.primary
                                                              ..blendMode = BlendMode.difference
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                        //remove function button 
                                                        Padding(
                                                          padding: const EdgeInsets.only(top:4),
                                                          child: ClipRRect(
                                                            borderRadius: BorderRadius.circular(99999),
                                                            child: Material(
                                                              color: defaultPalette.transparent,
                                                              child: InkWell(
                                                                hoverColor: defaultPalette.primary,
                                                                splashColor: defaultPalette.primary,
                                                                highlightColor: defaultPalette.primary,
                                                                onTap: () {
                                                                  setState(() {
                                                                    inBlock.removeAt(inx);
                                                                    // inputBlockExpansionList.removeAt(index);
                                                                  });
                                                                },
                                                                child: Icon(
                                                                  TablerIcons.x,
                                                                  size: 17,
                                                                ),
                                                              ),
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                    ),
                                                    //index 0-0
                                                    Row(
                                                      children: [
                                                        const SizedBox(width: 4),
                                                        //inx invis
                                                        Text(
                                                            inx.toString(),
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              // color: defaultPalette.primary,
                                                              foreground: Paint()
                                                              ..blendMode = BlendMode.dst
                                                            ),
                                                          ),
                                                        
                                                        Expanded(
                                                          flex:4,
                                                          child: Container(
                                                            margin: EdgeInsets.all(2).copyWith(top:0, left:4),
                                                            padding: EdgeInsets.all(2),
                                                            decoration: BoxDecoration(
                                                              borderRadius: BorderRadius.circular(5),
                                                              color: defaultPalette.extras[0],
                                                            ),
                                                            child: Row(
                                                            children: [
                                                              const SizedBox(width: 3),
                                                              
                                                              Expanded(
                                                                child: RichText(
                                                                  text: TextSpan(
                                                                    style: GoogleFonts.lexend(
                                                                      letterSpacing: -1,
                                                                      fontWeight: FontWeight.w400,
                                                                      fontSize: 14,
                                                                      color: defaultPalette.extras[0],
                                                                    ),
                                                                    children: [
                                                                      TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                                      TextSpan(
                                                                        text: '0 - ${(length - 1).clamp(0, double.infinity)}',
                                                                        style: TextStyle(color:defaultPalette.primary),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  overflow: TextOverflow.ellipsis,
                                                                  maxLines: 1,
                                                                ),
                                                              ),
                                                              const SizedBox(width: 3),
                                                            ],
                                                          ),
                                                          ),
                                                        ),
                                                        Expanded(
                                                          flex:5,
                                                          child: SizedBox()),
                                                        SizedBox(width:30),
                                                      ],
                                                    ),
                                                    
                                                    //sum cumulative and individual index
                                                    Container(
                                                      margin: EdgeInsets.all(2).copyWith(top:0, left:50,bottom: 4),
                                                      padding: EdgeInsets.all(3),
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(5),
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      child: Row(
                                                      children: [
                                                        const SizedBox(width: 3),
                                                        
                                                               Expanded(
                                                                child: RichText(
                                                                  text: TextSpan(
                                                                    style: GoogleFonts.lexend(
                                                                      letterSpacing: -1,
                                                                      fontWeight: FontWeight.w400,
                                                                      fontSize: 12,
                                                                      color: defaultPalette.extras[0],
                                                                    ),
                                                                    children: [
                                                                      
                                                                      TextSpan(text: parent is SumFunction || (parent is ColumnFunction && parent.func =='sum')
                                                                      ? ' sum: '
                                                                      : parent is CountFunction || (parent is ColumnFunction && parent.func =='count')
                                                                        ? ' count: '
                                                                        : ' str: '
                                                                      ,style: TextStyle(color:Color(0xffB388EB)),),
                                                                      TextSpan(
                                                                        text: '${(parent is ColumnFunction && parent.func == 'count')
                                                                        ? CountFunction(inputBlocks:inBlock.sublist(0,inx+1)).result(getItemAtPath,buildCombinedQuillConfiguration, spreadSheet: null).toPlainText() 
                                                                        : SumFunction(inBlock.sublist(0,inx+1)).result(getItemAtPath,buildCombinedQuillConfiguration, spreadSheet: null).toPlainText()}',
                                                                        style: TextStyle(color:defaultPalette.primary),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                  overflow: TextOverflow.ellipsis,
                                                                  maxLines: 1,
                                                                ),
                                                              ),
                                                        Expanded(
                                                          child: RichText(
                                                            text: TextSpan(
                                                              style: GoogleFonts.lexend(
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w400,
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                              ),
                                                              children: [
                                                                
                                                                TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                                TextSpan(
                                                                  text: '${(inx).clamp(0, double.infinity)}',
                                                                  style: TextStyle(color:defaultPalette.primary),
                                                                ),
                                                              ],
                                                            ),
                                                            overflow: TextOverflow.ellipsis,
                                                            maxLines: 1,
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                      ),
                                                    ),
                                                                          
                                                    
                                                    
                                                    ],
                                                ),
                                              ),
                                            ),
                                            Positioned(
                                              top:54,
                                              child: Row(
                                                children: [
                                                  if (inBlock[inx].useConst !=item.id) 
                                                  ...[
                                                    const SizedBox(width: 3),
                                                    ElevatedLayerButton(
                                                      borderRadius: const BorderRadius.only(
                                                        topRight: Radius.circular(5),
                                                        topLeft: Radius.circular(5),
                                                        bottomRight: Radius.circular(10),
                                                        bottomLeft: Radius.circular(10),
                                                      ),
                                                      animationDuration: const Duration(milliseconds: 100),
                                                      animationCurve: Curves.ease,
                                                      topDecoration: BoxDecoration(
                                                        color: defaultPalette.primary,
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      topLayerChild: Row(
                                                        children: [
                                                          const SizedBox(width: 2),
                                                          Icon(inBlock[inx].useConst?TablerIcons.cursor_text:TablerIcons.math_integral, size: 12, color: defaultPalette.extras[0]),
                                                          
                                                        ],
                                                      ),
                                                      baseDecoration: BoxDecoration(
                                                        color: defaultPalette.extras[0],
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      depth: 2,
                                                      subfac: 2,
                                                      buttonHeight: 22,
                                                      buttonWidth: 20,
                                                      onClick: () {
                                                        setState(() {
                                                          inBlock[inx].useConst= !inBlock[inx].useConst;
                                                          // rint(inBlock);
                                                        });
                                                      },
                                                    ),
                                                  ],
                                                  const SizedBox(width: 3),
                                                  ElevatedLayerButton(
                                                      isTapped: inBlock[inx].isExpanded,
                                                      borderRadius: const BorderRadius.only(
                                                        topRight: Radius.circular(5),
                                                        topLeft: Radius.circular(5),
                                                        bottomRight: Radius.circular(10),
                                                        bottomLeft: Radius.circular(10),
                                                      ),
                                                      animationDuration: const Duration(milliseconds: 100),
                                                      animationCurve: Curves.ease,
                                                      topDecoration: BoxDecoration(
                                                        color: defaultPalette.primary,
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      topLayerChild: Row(
                                                        children: [
                                                          const SizedBox(width: 2),
                                                          Icon(TablerIcons.medical_cross_filled, size: 12, color: defaultPalette.extras[0]),
                                                          
                                                        ],
                                                      ),
                                                      baseDecoration: BoxDecoration(
                                                        color: defaultPalette.extras[0],
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      depth: 2,
                                                      subfac: 2,
                                                      buttonHeight: 22,
                                                      buttonWidth: 20,
                                                      onClick: () {
                                                        setState(() {
                                                          inBlock[inx].isExpanded =!inBlock[inx].isExpanded;
                                                        });
                                                      },
                                                    ),
                                                ],
                                              ),
                                            ),
                        
                                            
                                            ]
                                          
                                          ))
                                    
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          );
                       
                        };
                        
                    ////
                    ////
                    // return for funtionTileBlock
                    switch (funcBlock.function.runtimeType) {
                      case SumFunction || CountFunction:
                        return [ 
                          if(funcBlock.isExpanded)
                          Container(
                            padding: EdgeInsets.only(top:57, left:0, right:0,bottom: 0),
                            width: width+13,
                            child: Column(
                              children: [
                                Container(
                                  color:defaultPalette.transparent,
                                  //reorderable for functioninputblockchildren
                                  child: ScrollConfiguration(
                                    behavior: ScrollBehavior().copyWith(scrollbars: false),
                                    child: DynMouseScroll(
                                      durationMS: 500,
                                      scrollSpeed: 1,
                                      builder: (context, controller, physics) {
                                        return ReorderableListView.builder(
                                          shrinkWrap: true,
                                          buildDefaultDragHandles: false,
                                          scrollDirection: Axis.vertical,
                                          scrollController:controller,
                                          physics:physics,
                                          itemCount: funcInputBlocks.length,
                                          onReorder: (oldIndex, newIndex) {
                                            setState(() {
                                              if (newIndex > oldIndex) {
                                                newIndex -= 1;
                                              }
                                              final sheetItem = funcInputBlocks.removeAt(oldIndex);
                                              // buildlistw
                                              funcInputBlocks.insert(newIndex, sheetItem);
                                            });
                                          },
                                          proxyDecorator: (child, index, animation) {
                                            return Container(child: child); },
                                          itemBuilder: (context, inx) {
                                              return sumFunctionInputBlocks(funcInputBlocks, inx, parent:funcBlock.function );
                                          });
                                        }
                                      ),
                                    ),
                                ),
                                //add field or function inside the expansion of a function tile
                                Container(
                                  width:width,
                                  margin:EdgeInsets.only(right:1),
                                  child: Material(
                                  color: defaultPalette.primary,
                                  child: InkWell(
                                    hoverColor: defaultPalette.secondary,
                                    splashColor: defaultPalette.secondary,
                                    highlightColor: defaultPalette.secondary,
                                    onTap: () {
                                      showPositionedTextFieldOverlay(
                                      context:context,
                                      position:Offset(sWidth - (sWidth*wH2DividerPosition)-(sWidth/4),40),
                                      width: width,
                                      inputBlocks: funcInputBlocks,
                                      height: sHeight-80,
                                      );
                                    },
                                    child: Icon(
                                      TablerIcons.plus,
                                      size: 18,
                                    ),
                                  ),
                                ),
                                ),
                              ],
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 10, bottom: 5),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                              child: AnimatedMeshGradient(
                                  colors: [
                                      // defaultPalette.extras[0],
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      selectedInputBlocks ==funcInputBlocks? defaultPalette.extras[0]: defaultPalette.primary,
                                    ],
                                  options: AnimatedMeshGradientOptions(
                                      amplitude: 5,
                                      grain: 0.1,
                                      frequency: 15,
                                      
                                    ),
                                child: Container(
                                  width: width,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                                  ),
                                  child: Column(
                                    children: [
                                      //the title of function
                                      Row(
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              inputBlock[index].function!.name,
                                              textAlign: TextAlign.end,
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 18,
                                                height: 1,
                                                color: defaultPalette.extras[0],
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                          //remove function button 
                                          Padding(
                                            padding: const EdgeInsets.only(top:4),
                                            child: ClipRRect(
                                              borderRadius: BorderRadius.circular(99999),
                                              child: Material(
                                                color: defaultPalette.transparent,
                                                child: InkWell(
                                                  hoverColor: defaultPalette.primary,
                                                  splashColor: defaultPalette.primary,
                                                  highlightColor: defaultPalette.primary,
                                                  onTap: () {
                                                    setState(() {
                                                      inputBlock.removeAt(index);
                                                      // inputBlockExpansionList.removeAt(index);
                                                    });
                                                  },
                                                  child: Icon(
                                                    TablerIcons.x,
                                                    size: 17,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                        ],
                                      ),
                                      //sum and index
                                      Container(
                                        margin: EdgeInsets.all(2),
                                        padding: EdgeInsets.all(1),
                                        decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(5),
                                          color: defaultPalette.extras[0],
                                        ),
                                        child: Row(
                                        children: [
                                          const SizedBox(width: 3),
                                          Expanded(
                                            child: RichText(
                                              text: TextSpan(
                                                style: GoogleFonts.lexend(
                                                  letterSpacing: -1,
                                                  fontWeight: FontWeight.w400,
                                                  fontSize: 14,
                                                  color: defaultPalette.extras[0],
                                                ),
                                                children: [
                                                  TextSpan(text:(funcBlock.function is SumFunction? ' sum: ':' count: '),style: TextStyle(color:Color(0xffB388EB)),),
                                                  TextSpan(
                                                    text: '${inputBlock[index].function!.result(getItemAtPath,buildCombinedQuillConfiguration,).toPlainText()}',
                                                    style: TextStyle(color:defaultPalette.primary),
                                                  ),
                                                ],
                                              ),
                                              overflow: TextOverflow.ellipsis,
                                              maxLines: 1,
                                            ),
                                          ),
                                          Expanded(
                                            child: RichText(
                                              text: TextSpan(
                                                style: GoogleFonts.lexend(
                                                  letterSpacing: -1,
                                                  fontWeight: FontWeight.w400,
                                                  fontSize: 14,
                                                  color: defaultPalette.extras[0],
                                                ),
                                                children: [
                                                  TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                  TextSpan(
                                                    text: '0-${(funcInputBlocks.length - 1).clamp(0, double.infinity)}',
                                                    style: TextStyle(color:defaultPalette.primary),
                                                  ),
                                                ],
                                              ),
                                              overflow: TextOverflow.ellipsis,
                                              maxLines: 1,
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                        ],
                                      ),
                                      )
                                      
                                      ],
                                  ),
                                ),
                              ),
                            ),
                          ),
                          ElevatedLayerButton(
                            
                            isTapped: funcBlock.isExpanded,
                            borderRadius: const BorderRadius.only(
                              topRight: Radius.circular(5),
                              topLeft: Radius.circular(5),
                              bottomRight: Radius.circular(10),
                              bottomLeft: Radius.circular(10),
                            ),
                            animationDuration: const Duration(milliseconds: 100),
                            animationCurve: Curves.ease,
                            topDecoration: BoxDecoration(
                              color: defaultPalette.primary,
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            topLayerChild: Row(
                              children: [
                                const SizedBox(width: 10),
                                Icon(TablerIcons.medical_cross_filled, size: 13, color: defaultPalette.extras[0]),
                                Expanded(
                                  child: Text(
                                    ' edit',
                                    maxLines: 1,
                                    style: GoogleFonts.bungee(
                                      fontSize: 12,
                                      color: defaultPalette.extras[0],
                                      // letterSpacing: -1,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            baseDecoration: BoxDecoration(
                              color: defaultPalette.extras[0],
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            depth: 2,
                            subfac: 2,
                            buttonHeight: 24,
                            buttonWidth: 80,
                            onClick: () {
                              setState(() {
                                // inputBlockExpansionList[index] = !// inputBlockExpansionList[index];
                                inputBlock[index].isExpanded =!inputBlock[index].isExpanded;
                              });
                            },
                          ),
                                  
                        ];
    
                      case ColumnFunction:
                        return [
                          if(funcBlock.isExpanded)
                          Container(
                            padding: EdgeInsets.only(top:57, left:0, right:0,bottom: 0),
                            child: Column(
                              children: [
                                Container(
                                  decoration:BoxDecoration(
                                    color:defaultPalette.transparent,
                                    // border:Border.all()
                                  ),
                                  //reorderable for functioninputblockchildren
                                  child: ScrollConfiguration(
                                    behavior: ScrollBehavior().copyWith(scrollbars: false),
                                    child: DynMouseScroll(
                                      durationMS: 500,
                                      scrollSpeed: 1,
                                      builder: (context, controller, physics) {
                                        return ListView.builder(
                                          shrinkWrap: true,
                                          scrollDirection: Axis.vertical,
                                          controller:controller,
                                          physics:physics,
                                          itemCount: funcInputBlocks.length,
                                            itemBuilder: (context, inx) {
                                              print('FUNCCCC:'+(funcBlock.function as ColumnFunction).func);
                                              switch ((funcBlock.function as ColumnFunction).func) {
                                                case 'sum':
                                                  return sumFunctionInputBlocks(funcInputBlocks, inx, parent:funcBlock.function);
                                                case 'count':
                                                  return sumFunctionInputBlocks(funcInputBlocks, inx, parent:funcBlock.function);  
                                                
                                                default:
                                              }
                                              return sumFunctionInputBlocks(funcInputBlocks, inx, parent:funcBlock.function);
                                          });
                                        }
                                      ),
                                    ),
                                ),
                              ],
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 10, bottom: 5),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                              child: AnimatedMeshGradient(
                                  colors: [
                                      // defaultPalette.extras[0],
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      selectedInputBlocks ==(inputBlock[index].function as ColumnFunction).inputBlocks? defaultPalette.extras[0]: defaultPalette.primary,
                                    ],
                                  options: AnimatedMeshGradientOptions(
                                      amplitude: 5,
                                      grain: 0.1,
                                      frequency: 15,
                                      
                                    ),
                                child: Container(
                                  width: width,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                                  ),
                                  child: Column(
                                    children: [
                                      //the title of function
                                      Row(
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              (double.tryParse((inputBlock[index].function! as ColumnFunction).axisLabel)!=null?'row':'column')+' '+(inputBlock[index].function! as ColumnFunction).axisLabel,
                                              textAlign: TextAlign.end,
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 18,
                                                height: 1,
                                                color: defaultPalette.extras[0],
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                          //remove function button 
                                          Padding(
                                            padding: const EdgeInsets.only(top:4),
                                            child: ClipRRect(
                                              borderRadius: BorderRadius.circular(99999),
                                              child: Material(
                                                color: defaultPalette.transparent,
                                                child: InkWell(
                                                  hoverColor: defaultPalette.primary,
                                                  splashColor: defaultPalette.primary,
                                                  highlightColor: defaultPalette.primary,
                                                  onTap: () {
                                                    setState(() {
                                                      inputBlock.removeAt(index);
                                                      // inputBlockExpansionList.removeAt(index);
                                                    });
                                                  },
                                                  child: Icon(
                                                    TablerIcons.x,
                                                    size: 17,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                        ],
                                      ),
                                      
                                      //sum/count and index
                                      Row(
                                        children: [
                                          const SizedBox(width: 3),
                                          Material(
                                            child: InkWell(
                                              hoverColor: defaultPalette.secondary,
                                              highlightColor: defaultPalette.secondary,
                                              splashColor: defaultPalette.secondary,
                                              onTapDown:(d){
                                                ContextMenu(
                                                  entries: [
                                                    MenuItem(
                                                      label: 'sum',
                                                      style: GoogleFonts.lexend(
                                                        fontWeight: FontWeight.w300,
                                                        color: defaultPalette.primary,
                                                      ),
                                                      hoverColor: defaultPalette.extras[0],
                                                    onSelected: () {
                                                      setState(() {
                                                        (funcBlock.function as ColumnFunction).func = 'sum';
                                                      });
                                                      
                                                    },
                                                    ),
                                                    MenuItem(label: 'count',
                                                    style: GoogleFonts.lexend(
                                                        fontWeight: FontWeight.w300,
                                                        color: defaultPalette.primary,
                                                      ),
                                                    hoverColor: defaultPalette.extras[0],
                                                    onSelected: () {
                                                      setState(() {
                                                        (funcBlock.function as ColumnFunction).func = 'count';
                                                      });
                                                    },
                                                    ),
                                                  ],
                                                  boxDecoration: BoxDecoration(
                                                      boxShadow: [
                                                        BoxShadow(
                                                          color: defaultPalette
                                                              .black,
                                                          blurRadius: 2,
                                                        )
                                                      ],
                                                      color: defaultPalette.extras[0],
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10)),
                                                  position: Offset(
                                                      d.globalPosition.dx,
                                                      d.globalPosition.dy+20))
                                              .show(context);
                                                },
                                                child: Row(
                                                  children: [
                                                    Icon(
                                                      TablerIcons.caret_down_filled,
                                                      size: 12,
                                                    ),
                                                    Text(
                                                      (funcBlock.function as ColumnFunction).func,
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w400,
                                                        fontSize: 14,
                                                        color: defaultPalette.extras[0],
                                                      ),),
                                                    const SizedBox(width: 3),
                                                  ],
                                                ),
                                                
                                                )
                                              ),
                                          Expanded(
                                            child: Container(
                                              margin: EdgeInsets.all(2),
                                              padding: EdgeInsets.all(1),
                                              decoration: BoxDecoration(
                                                borderRadius: BorderRadius.circular(5),
                                                color: defaultPalette.extras[0],
                                              ),
                                              child: Row(
                                              children: [
                                                const SizedBox(width: 3),
                                                
                                                Expanded(
                                                  child: RichText(
                                                    text: TextSpan(
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w400,
                                                        fontSize: 14,
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      children: [
                                                        // TextSpan(text: ' sum: ',style: TextStyle(color:Color(0xffB388EB)),),
                                                        TextSpan(
                                                          text: '${inputBlock[index].function!.result(getItemAtPath,buildCombinedQuillConfiguration,).toPlainText()}',
                                                          style: TextStyle(color:defaultPalette.primary),
                                                        ),
                                                      ],
                                                    ),
                                                    overflow: TextOverflow.ellipsis,
                                                    maxLines: 1,
                                                  ),
                                                ),
                                                Expanded(
                                                  child: RichText(
                                                    text: TextSpan(
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w400,
                                                        fontSize: 14,
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      children: [
                                                        TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                        TextSpan(
                                                          text: '0-${((inputBlock[index].function! as ColumnFunction).inputBlocks.length - 1).clamp(0, double.infinity)}',
                                                          style: TextStyle(color:defaultPalette.primary),
                                                        ),
                                                      ],
                                                    ),
                                                    overflow: TextOverflow.ellipsis,
                                                    maxLines: 1,
                                                  ),
                                                ),
                                                const SizedBox(width: 3),
                                              ],
                                            ),
                                            ),
                                          ),
                                        ],
                                      )
                                      
                                      ],
                                  ),
                                ),
                              ),
                            ),
                          ),
                          ElevatedLayerButton(
                            
                            isTapped: funcBlock.isExpanded,
                            borderRadius: const BorderRadius.only(
                              topRight: Radius.circular(5),
                              topLeft: Radius.circular(5),
                              bottomRight: Radius.circular(10),
                              bottomLeft: Radius.circular(10),
                            ),
                            animationDuration: const Duration(milliseconds: 100),
                            animationCurve: Curves.ease,
                            topDecoration: BoxDecoration(
                              color: defaultPalette.primary,
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            topLayerChild: Row(
                              children: [
                                const SizedBox(width: 10),
                                Icon(TablerIcons.medical_cross_filled, size: 13, color: defaultPalette.extras[0]),
                                Expanded(
                                  child: Text(
                                    ' view',
                                    maxLines: 1,
                                    style: GoogleFonts.bungee(
                                      fontSize: 12,
                                      color: defaultPalette.extras[0],
                                      // letterSpacing: -1,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            baseDecoration: BoxDecoration(
                              color: defaultPalette.extras[0],
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            depth: 2,
                            subfac: 2,
                            buttonHeight: 24,
                            buttonWidth: 80,
                            onClick: () {
                              setState(() {
                                // inputBlockExpansionList[index] = !// inputBlockExpansionList[index];
                                inputBlock[index].isExpanded =!inputBlock[index].isExpanded;
                              });
                            },
                          ),
                          
                        ];
                      
                      case InputBlockFunction:
                        return [
                          if(funcBlock.isExpanded)
                          Container(
                            padding: EdgeInsets.only(top:57, left:0, right:0,bottom: 0),
                            child: Column(
                              children: [
                                Container(
                                  decoration:BoxDecoration(
                                    color:defaultPalette.transparent,
                                    // border:Border.all()
                                  ),
                                  //reorderable for functioninputblockchildren
                                  child: ScrollConfiguration(
                                    behavior: ScrollBehavior().copyWith(scrollbars: false),
                                    child: DynMouseScroll(
                                      durationMS: 500,
                                      scrollSpeed: 1,
                                      builder: (context, controller, physics) {
                                        return ListView.builder(
                                          shrinkWrap: true,
                                          scrollDirection: Axis.vertical,
                                          controller:controller,
                                          physics:physics,
                                          itemCount: funcInputBlocks.length,
                                            itemBuilder: (context, inx) {
                                              return inputBlockFunctionInputBlocks(funcInputBlocks, inx, parent:funcBlock.function );
                                              
                                          });
                                        }
                                      ),
                                    ),
                                ),
                              ],
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 10, bottom: 5),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                              child: AnimatedMeshGradient(
                                  colors: [
                                      // defaultPalette.extras[0],
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      defaultPalette.primary,
                                      selectedInputBlocks ==(inputBlock[index].function as InputBlockFunction).inputBlocks? defaultPalette.extras[0]: defaultPalette.primary,
                                    ],
                                  options: AnimatedMeshGradientOptions(
                                      amplitude: 5,
                                      grain: 0.1,
                                      frequency: 15,
                                      
                                    ),
                                child: Container(
                                  width: width,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(8).copyWith(
                                      bottomRight: Radius.circular(funcBlock.isExpanded?0:8),
                                      bottomLeft: Radius.circular(funcBlock.isExpanded?0:8) 
                                    ),
                                  ),
                                  child: Column(
                                    children: [
                                      //the title of function
                                      Row(
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              (getItemAtPath(inputBlock[index].indexPath) as SheetText).name,
                                              textAlign: TextAlign.end,
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 18,
                                                height: 1,
                                                color: defaultPalette.extras[0],
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                          //remove function button 
                                          Padding(
                                            padding: const EdgeInsets.only(top:4),
                                            child: ClipRRect(
                                              borderRadius: BorderRadius.circular(99999),
                                              child: Material(
                                                color: defaultPalette.transparent,
                                                child: InkWell(
                                                  hoverColor: defaultPalette.primary,
                                                  splashColor: defaultPalette.primary,
                                                  highlightColor: defaultPalette.primary,
                                                  onTap: () {
                                                    setState(() {
                                                      inputBlock.removeAt(index);
                                                      // inputBlockExpansionList.removeAt(index);
                                                    });
                                                  },
                                                  child: Icon(
                                                    TablerIcons.x,
                                                    size: 17,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 3),
                                        ],
                                      ),
                                      
                                      //sum/count and index
                                      Row(
                                        children: [
                                          // const SizedBox(width: 3),
                                         
                                          Expanded(
                                            child: Container(
                                              margin: EdgeInsets.all(2),
                                              padding: EdgeInsets.all(1),
                                              decoration: BoxDecoration(
                                                borderRadius: BorderRadius.circular(5),
                                                color: defaultPalette.extras[0],
                                              ),
                                              child: Row(
                                              children: [
                                                const SizedBox(width: 3),
                                                
                                                Expanded(
                                                  child: RichText(
                                                    text: TextSpan(
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w400,
                                                        fontSize: 14,
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      children: [
                                                        // TextSpan(text: ' sum: ',style: TextStyle(color:Color(0xffB388EB)),),
                                                        TextSpan(
                                                          text: '${(inputBlock[index].function! as InputBlockFunction).getConfigurations(buildCombinedQuillConfiguration).controller.document.toPlainText()}',
                                                          style: TextStyle(color:defaultPalette.primary),
                                                        ),
                                                      ],
                                                    ),
                                                    overflow: TextOverflow.ellipsis,
                                                    maxLines: 1,
                                                  ),
                                                ),
                                                Expanded(
                                                  child: RichText(
                                                    text: TextSpan(
                                                      style: GoogleFonts.lexend(
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w400,
                                                        fontSize: 14,
                                                        color: defaultPalette.extras[0],
                                                      ),
                                                      children: [
                                                        TextSpan(text: 'index: ',style: TextStyle(color: Color(0xff3993DD)),),
                                                        TextSpan(
                                                          text: '0-${((inputBlock[index].function! as InputBlockFunction).inputBlocks.length - 1).clamp(0, double.infinity)}',
                                                          style: TextStyle(color:defaultPalette.primary),
                                                        ),
                                                      ],
                                                    ),
                                                    overflow: TextOverflow.ellipsis,
                                                    maxLines: 1,
                                                  ),
                                                ),
                                                const SizedBox(width: 3),
                                              ],
                                            ),
                                            ),
                                          ),
                                        ],
                                      )
                                      
                                      ],
                                  ),
                                ),
                              ),
                            ),
                          ),
                          ElevatedLayerButton(
                            
                            isTapped: funcBlock.isExpanded,
                            borderRadius: const BorderRadius.only(
                              topRight: Radius.circular(5),
                              topLeft: Radius.circular(5),
                              bottomRight: Radius.circular(10),
                              bottomLeft: Radius.circular(10),
                            ),
                            animationDuration: const Duration(milliseconds: 100),
                            animationCurve: Curves.ease,
                            topDecoration: BoxDecoration(
                              color: defaultPalette.primary,
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            topLayerChild: Row(
                              children: [
                                const SizedBox(width: 10),
                                Icon(TablerIcons.medical_cross_filled, size: 13, color: defaultPalette.extras[0]),
                                Expanded(
                                  child: Text(
                                    ' view',
                                    maxLines: 1,
                                    style: GoogleFonts.bungee(
                                      fontSize: 12,
                                      color: defaultPalette.extras[0],
                                      // letterSpacing: -1,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            baseDecoration: BoxDecoration(
                              color: defaultPalette.extras[0],
                              border: Border.all(color: defaultPalette.extras[0]),
                            ),
                            depth: 2,
                            subfac: 2,
                            buttonHeight: 24,
                            buttonWidth: 80,
                            onClick: () {
                              setState(() {
                                // inputBlockExpansionList[index] = !// inputBlockExpansionList[index];
                                inputBlock[index].isExpanded =!inputBlock[index].isExpanded;
                              });
                            },
                          ),
                          if (funcBlock.id !=item.id) 
                          Positioned(
                            left:80,
                            child: ElevatedLayerButton(
                                borderRadius: const BorderRadius.only(
                                  topRight: Radius.circular(5),
                                  topLeft: Radius.circular(5),
                                  bottomRight: Radius.circular(10),
                                  bottomLeft: Radius.circular(10),
                                ),
                                animationDuration: const Duration(milliseconds: 100),
                                animationCurve: Curves.ease,
                                topDecoration: BoxDecoration(
                                  color: defaultPalette.primary,
                                  border: Border.all(color: defaultPalette.extras[0]),
                                ),
                                topLayerChild: Row(
                                  children: [
                                    const SizedBox(width: 2),
                                    Icon(funcBlock.useConst?TablerIcons.cursor_text:TablerIcons.math_integral, size: 12, color: defaultPalette.extras[0]),
                                    
                                  ],
                                ),
                                baseDecoration: BoxDecoration(
                                  color: defaultPalette.extras[0],
                                  border: Border.all(color: defaultPalette.extras[0]),
                                ),
                                depth: 2,
                                subfac: 2,
                                buttonHeight: 24,
                                buttonWidth: 20,
                                onClick: () {
                                  setState(() {
                                    funcBlock.useConst= !funcBlock.useConst;
                                  });
                                },
                              ),
                          ),
                        
                        ];
                      
                      
                      default:
                        return [
                       ElevatedLayerButton(
                           borderRadius: const BorderRadius.only(
                             topRight: Radius.circular(5),
                             topLeft: Radius.circular(5),
                             bottomRight: Radius.circular(10),
                             bottomLeft: Radius.circular(10),
                           ),
                           animationDuration: const Duration(milliseconds: 100),
                           animationCurve: Curves.ease,
                           topDecoration: BoxDecoration(
                             color: defaultPalette.primary,
                             border: Border.all(color: defaultPalette.extras[0]),
                           ),
                           topLayerChild: Row(
                             children: [
                               const SizedBox(width: 2),
                               Icon(inputBlock[index].useConst?TablerIcons.cursor_text:TablerIcons.math_integral, size: 12, color: defaultPalette.extras[0]),
                               
                             ],
                           ),
                           baseDecoration: BoxDecoration(
                             color: defaultPalette.extras[0],
                             border: Border.all(color: defaultPalette.extras[0]),
                           ),
                           depth: 2,
                           subfac: 2,
                           buttonHeight: 24,
                           buttonWidth: 20,
                           onClick: () {
                             setState(() {
                               inputBlock[index].useConst= !inputBlock[index].useConst;
                             });
                           },
                         ),
                                                  
                    ];
                    }
                    
                  }
                  // print('inputTile'+inputBlock[index].function.runtimeType.toString());
                  //Return for inputBlock
                  return Column(
                    children: [
                      ScrollConfiguration(
                        behavior: ScrollBehavior().copyWith(scrollbars: false),
                        child: DynMouseScroll(
                          durationMS: 500,
                          scrollSpeed: 1,
                          builder: (context, controller, physics) {
                            return ReorderableListView.builder(
                                shrinkWrap: true,
                                buildDefaultDragHandles: false,
                                scrollDirection: Axis.vertical,
                                scrollController:controller,
                                physics:physics,
                                itemCount: inputBlock.length,
                                onReorder: (oldIndex, newIndex) {
                                  setState(() {
                                    if (newIndex > oldIndex) {
                                      newIndex -= 1;
                                    }
                                    final sheetItem = inputBlock.removeAt(oldIndex);
                                    // buildlistw
                                    inputBlock.insert(newIndex, sheetItem);
                                  });
                                },
                                proxyDecorator: (child, index, animation) {
                                  return Container(child: child); },
                                  itemBuilder: (context, index) {
                                  if (index < 0 || index >= inputBlock.length) {
                                    return SizedBox.shrink(
                                    key: ValueKey(index),
                                  );
                                  }
                      
                                  final block = inputBlock[index];
                      
                                  // If the block has a function, don't try to fetch an item at the indexPath
                                  final hasFunction = block.function != null;
                      
                                  Delta? delta;
                                  SheetText? itemAtPath;
                                  if (!hasFunction || inputBlock[index].useConst) {
                                    try {
                                      final item = getItemAtPath(block.indexPath);
                                      if (item is SheetText) {
                                        itemAtPath = item;
                                        delta = itemAtPath.textEditorConfigurations.controller.document.toDelta();
                                      } else {
                                        throw Exception("Item is not SheetText");
                                      }
                                    } catch (e) {
                                      return Container(
                                        key: ValueKey(index),
                                        color:defaultPalette.extras[1]
                                      );  // fail-safe
                                    }
                                  }
                                  print(inputBlock[index].useConst);
                      
                                  final json = delta?.toJson();
                                    return ReorderableDragStartListener(
                                    key: ValueKey(index),
                                    index: index,
                                    child: Padding(
                                      padding: const EdgeInsets.only(bottom:8.0, left:1.5),
                                      child: Row(
                                        children: [
                                          Expanded(
                                            child: Stack(
                                              children: [
                                                if (inputBlock[index].useConst)
                                                ...[
                                                  if (inputBlock[index].isExpanded)
                                                  buildStyledJsonBlock(json!),
                                                  Container(
                                                    margin: const EdgeInsets.only(top: 10),
                                                    height: 30,
                                                    width: width,
                                                    decoration: BoxDecoration(
                                                      borderRadius: BorderRadius.circular(8),
                                                      color: defaultPalette.tertiary,
                                                      border: Border.all(color: defaultPalette.extras[0]),
                                                    ),
                                                    child: Row(
                                                      children: [

                                                        Expanded(
                                                          child: Text(
                                                            itemAtPath?.name??'lol',
                                                            textAlign: TextAlign.end,
                                                            maxLines: 1,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500,
                                                              fontSize: 18,
                                                              color: defaultPalette.primary,
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                        ClipRRect(
                                                          borderRadius: BorderRadius.circular(99999),
                                                          child: Material(
                                                            color: defaultPalette.transparent,
                                                            child: InkWell(
                                                              hoverColor: defaultPalette.primary,
                                                              splashColor: defaultPalette.primary,
                                                              highlightColor: defaultPalette.primary,
                                                              onTap: () {
                                                                setState(() {
                                                                 inputBlock.removeAt(index);
                                                                });
                                                              },
                                                              child: Icon(
                                                                TablerIcons.x,
                                                                size: 18,
                                                              ),
                                                            ),
                                                          ),
                                                        ),
                                                        const SizedBox(width: 3),
                                                      ],
                                                    ),
                                                  ),
                                                  ElevatedLayerButton(
                                                      borderRadius: const BorderRadius.only(
                                                        topRight: Radius.circular(5),
                                                        topLeft: Radius.circular(5),
                                                        bottomRight: Radius.circular(10),
                                                        bottomLeft: Radius.circular(10),
                                                      ),
                                                      animationDuration: const Duration(milliseconds: 100),
                                                      animationCurve: Curves.ease,
                                                      topDecoration: BoxDecoration(
                                                        color: defaultPalette.primary,
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      topLayerChild: Row(
                                                        children: [
                                                          const SizedBox(width: 10),
                                                          Icon(TablerIcons.triangle_filled, size: 12, color: defaultPalette.extras[0]),
                                                          Expanded(
                                                            child: Text(
                                                              ' delta',
                                                              maxLines: 1,
                                                              style: GoogleFonts.bungee(
                                                                fontSize: 12,
                                                                color: defaultPalette.extras[0],
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w500,
                                                              ),
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                      baseDecoration: BoxDecoration(
                                                        color: defaultPalette.extras[0],
                                                        border: Border.all(color: defaultPalette.extras[0]),
                                                      ),
                                                      depth: 2,
                                                      subfac: 2,
                                                      buttonHeight: 24,
                                                      buttonWidth: 80,
                                                      onClick: () {
                                                        setState(() {
                                                          inputBlock[index].isExpanded= !inputBlock[index].isExpanded;
                                                        });
                                                      },
                                                    ),
                                                  if (inputBlock[index].id !=item.id) 
                                                  Positioned(
                                                    left:80,
                                                    child: ElevatedLayerButton(
                                                        borderRadius: const BorderRadius.only(
                                                          topRight: Radius.circular(5),
                                                          topLeft: Radius.circular(5),
                                                          bottomRight: Radius.circular(10),
                                                          bottomLeft: Radius.circular(10),
                                                        ),
                                                        animationDuration: const Duration(milliseconds: 100),
                                                        animationCurve: Curves.ease,
                                                        topDecoration: BoxDecoration(
                                                          color: defaultPalette.primary,
                                                          border: Border.all(color: defaultPalette.extras[0]),
                                                        ),
                                                        topLayerChild: Row(
                                                          children: [
                                                            const SizedBox(width: 2),
                                                            Icon(inputBlock[index].useConst?TablerIcons.cursor_text:TablerIcons.function, size: 12, color: defaultPalette.extras[0]),
                                                            
                                                          ],
                                                        ),
                                                        baseDecoration: BoxDecoration(
                                                          color: defaultPalette.extras[0],
                                                          border: Border.all(color: defaultPalette.extras[0]),
                                                        ),
                                                        depth: 2,
                                                        subfac: 2,
                                                        buttonHeight: 24,
                                                        buttonWidth: 20,
                                                        onClick: () {
                                                          setState(() {
                                                            inputBlock[index].useConst= !inputBlock[index].useConst;
                                                          });
                                                        },
                                                      ),
                                                  ),
                                                  
                                                ],
                                                            
                                                if(!inputBlock[index].useConst)
                                                GestureDetector(
                                                  onTap:(){
                                                    setState(() {
                                                      if (inputBlock[index].function is SumFunction) {
                                                         selectedInputBlocks = (inputBlock[index].function as SumFunction).inputBlocks;
                                                      } else if (inputBlock[index].function is CountFunction) {
                                                         selectedInputBlocks = (inputBlock[index].function as CountFunction).inputBlocks;
                                                      } else if (inputBlock[index].function is ColumnFunction) {
                                                         selectedInputBlocks = (inputBlock[index].function as ColumnFunction).inputBlocks;
                                                      } else if (inputBlock[index].function is InputBlockFunction) {
                                                         selectedInputBlocks = (inputBlock[index].function as InputBlockFunction).inputBlocks;
                                                      }
                                                     
                                                      
                                                     
                                                    });
                                                  },
                                                  child: Stack(children:buildFunctionTile(index,width,inputBlock)))
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                  });
                            }
                          ),
                        ),
                      //add textfields button
                      ClipRRect(
                        borderRadius:BorderRadius.circular(5),
                        child: SizedBox(
                          width:width,
                          child: Material(
                          color: defaultPalette.primary,
                          child: InkWell(
                            hoverColor: defaultPalette.secondary,
                            splashColor: defaultPalette.secondary,
                            highlightColor: defaultPalette.secondary,
                            onTap: () {
                              showPositionedTextFieldOverlay(
                                context:context,
                                position:Offset(sWidth - (sWidth*wH2DividerPosition)-(sWidth/4),40),
                                width: width,
                                height: sHeight-80,
                                );
                            },
                            child: Icon(
                              TablerIcons.plus,
                              size: 18,
                            ),
                          ),
                        ),
                        ),
                      ),
                    ],
                  );
                }

                TextEditingController hexController = TextEditingController()..text ='${item.textEditorController.getSelectionStyle().attributes['color']?.value ?? '#00000000'}';
                
                int crossAxisCount = 4;
                var iconWidth = (width / crossAxisCount)-4.6;
                var fCrossAxisCount = width < 200 ? 1 : width > 300 ? width > 420 ? 4 : 3 : 2;
                Color fontHex =hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value ?? defaultPalette.extras[0].hex);
                
                return Stack(
                  children: [
                    //The main bgCOLOR OF THE CARD
                    Positioned.fill(
                      child: AnimatedContainer(
                        duration: Durations.short3,
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color:index==2? defaultPalette.primary:index==1?defaultPalette.extras[0]: defaultPalette.secondary,
                          border: Border.all(width: 2, 
                          color:index==1?defaultPalette.secondary:defaultPalette.extras[0]),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                    //OPACITY OF BGCOLOR OF THE CARD
                    Positioned.fill(
                      child: AnimatedOpacity(
                        opacity: currentCardIndex == index
                            ? 0
                            // : index >= (currentCardIndex + 2) % 10
                            //     ? 1
                            : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                        duration: Duration(milliseconds: 300),
                        child: AnimatedContainer(
                          duration: Duration(milliseconds: 300),
                          margin:
                              EdgeInsets.all(10).copyWith(left: 5, right: 8),
                          alignment: Alignment.center,
                          decoration: BoxDecoration(
                            color: index == (currentCardIndex + 1) % 10
                                ? defaultPalette.extras[0]
                                : index == (currentCardIndex + 2) % 10
                                    ? defaultPalette.extras[0]
                                    : defaultPalette.extras[0],
                            border: Border.all(width: 2, color:defaultPalette.extras[0]),
                            borderRadius: BorderRadius.circular(25),
                          ),
                        ),
                      ),
                    ),
                     
                    if (index == 0) ...[
                      //GRAPH BEHIND FORMAT CARD
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(25),
                          child: Opacity(
                            opacity: 0.35,
                            child: LineChart(LineChartData(
                              lineBarsData: [LineChartBarData()],
                              titlesData: const FlTitlesData(show: false),
                              gridData: FlGridData(
                                getDrawingVerticalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0]
                                      .withOpacity(0.8),
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                getDrawingHorizontalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0]
                                      .withOpacity(0.8),
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                show: true,
                                horizontalInterval: 4,
                                verticalInterval: 40),
                              borderData: FlBorderData(show: false),
                              minY: 0,
                              maxY: 50,
                              maxX: dateTimeNow.millisecondsSinceEpoch
                                          .ceilToDouble() /
                                      500 +
                                  250,
                              minX: dateTimeNow.millisecondsSinceEpoch
                                      .ceilToDouble() /
                                  500)),
                          ),
                        ),
                      ),
                      //FORMATTING and font size space ALL THAT //Desktop WEB
                      Positioned(
                        child: Container(
                          height: sHeight * 0.9,
                          decoration: BoxDecoration(
                          ),
                          margin: EdgeInsets.only(
                            top: 15,
                            bottom: index == whichTextPropertyTabIsClicked? 15: 18,
                            left: 10,
                            right: 13),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(20),
                            child: ScrollConfiguration(
                              behavior: ScrollBehavior().copyWith(scrollbars: false),
                              child: DynMouseScroll(
                                durationMS: 500,
                                scrollSpeed: 1,
                                builder: (context, controller, physics) {
                                  return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                  crossAxisAlignment:CrossAxisAlignment.start,
                                  children: [
                                  //Id and Selected TEXT
                                  Container(
                                  margin: EdgeInsets.only(top:2, left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child: Column(
                                    children: [
                                  titleTile('textProperties', TablerIcons.cursor_text),  
                                  const SizedBox(
                                        height:3
                                      ),
                                  //id
                                  Row(
                                    children: [
                                      const SizedBox(
                                        width:4
                                      ),
                                      Expanded(
                                        child: Text('id: ${item.id}',
                                          textAlign: TextAlign.start,
                                          maxLines:1,
                                          style: TextStyle(
                                            height: 1,
                                            fontFamily: GoogleFonts.lexend().fontFamily,
                                            letterSpacing:-0.5,
                                            overflow: TextOverflow.ellipsis,
                                            fontWeight: FontWeight.w400,        
                                            color: defaultPalette.extras[0],
                                            fontSize: 8)),
                                      ),
                                    ],
                                  ),  
                                  const SizedBox(
                                    height:4
                                  ),
                                  //Selected Text
                                  Container(
                                    width: width,
                                    padding: EdgeInsets.all(4).copyWith(left:8),
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                      color: defaultPalette.secondary,
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all(
                                        width: 2,
                                        color: defaultPalette.extras[0])
                                    ),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        Expanded(
                                          child: Text(item.textEditorController.getPlainText(),
                                            textAlign: TextAlign.start,
                                            style: TextStyle(
                                              fontFamily: GoogleFonts.leagueSpartan().fontFamily,
                                              letterSpacing:-0.5,
                                              fontWeight: FontWeight.w800,        
                                              color: defaultPalette.extras[0],
                                              fontSize: 15)),
                                        ),
                                          ],
                                        ),
                                      ),
                                  //'label'
                                  Row(
                                    children: [
                                      Expanded(child: titleTile('label', TablerIcons.signature, fontSize:15)),
                                      
                                      //TextField
                                      Expanded(
                                        child: SizedBox(
                                          height: 20,
                                          child: TextField(
                                            focusNode: fontFocusNodes[6],
                                            controller: fontTextControllers[4],
                                            enabled: !item.parentId.startsWith('TB'),
                                            onSubmitted: (value) {
                                              setState(() {
                                                  if(lm!.type == 0) {
                                                    item.name = value;
                                                    return;
                                                  }
                                                  /// what are we doing here:
                                                  /// 
                                                  /// going through each requriedText(RT) in the labelList and seeing if the
                                                  /// submitted value matches the RT.name, if it does then check if rt.indexPath.index ==-951
                                                  /// if yes then that means the RT was unassigned so go ahead and assign the indexPath of this text to that RT
                                                  /// if no then fetch the item at rt.indexPath.index, if that item doesnt exist then again uk the drill else dont allow the item.name to update.
                                                  /// then finally for double check fetch the item for each RT and see if they exist, if they dont then assign the indexPath path to -951.
                                                  for (int j = 0; j < labelList.length; j++) {
                                                    final requiredText = labelList[j];
                                                    if (value == requiredText.name && value != 'itemSheet') {
                                                      final path = requiredText.indexPath;

                                                      if (path.index == -951) {
                                                        requiredText.indexPath = item.indexPath;
                                                        item.type = SheetTextType.values[requiredText.sheetTextType];
                                                        item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(
                                                          requiredText.sheetTextType,
                                                          item.textEditorConfigurations.controller,
                                                          check: true,
                                                          textItem: item,
                                                        );
                                                        item.name = value;
                                                      } else {
                                                        final sheetText = getItemAtPath(path);
                                                        if (sheetText.id == 'yo' || sheetText.id.isEmpty) {
                                                          requiredText.indexPath = item.indexPath;
                                                          item.type = SheetTextType.values[requiredText.sheetTextType];
                                                          item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(
                                                            requiredText.sheetTextType,
                                                            item.textEditorConfigurations.controller,
                                                            check: true,
                                                            textItem: item,

                                                          );
                                                          item.name = value;
                                                        } else if (sheetText is SheetText) {
                                                          if (sheetText.name == requiredText.name && sheetText.name !=item.name ) {
                                                            item.name = '$value-1';
                                                            break;
                                                          }
                                                        }
                                                      }
                                                    } else {
                                                      print('object');
                                                      item.name = value;
                                                      // item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(
                                                      //       SheetTextType.string.index,
                                                      //       item.textEditorConfigurations.controller,
                                                      //     );
                                                      // item.textEditorConfigurations = item.textEditorConfigurations.copyWith(placeholder: 'Enter String');
                                                    }
                                                  }

                                                  

                                                  // Final validation pass
                                                  doubleCheckLabelList(labelList);

                                              });
                                            },
                                            textAlignVertical: TextAlignVertical.top,
                                            textAlign: TextAlign.end,
                                            cursorColor: defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              contentPadding: const EdgeInsets.only(left: 2),
                                              labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                              hoverColor: defaultPalette.transparent,
                                              filled: true,
                                              fillColor: defaultPalette.transparent,
                                              border: InputBorder.none,
                                              enabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              disabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              focusedBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                borderRadius: BorderRadius.circular(12),
                                              ),
                                            ),
                                            style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                          ),
                                        ),
                                      ),
                                      const SizedBox(width:2)  
                                    ],
                                  ), 
                                  //'type'
                                  Row(
                                    children: [
                                      Expanded(child: titleTile('type', TablerIcons.writing, fontSize: 15, )),
                                      Expanded(
                                        child: MouseRegion(
                                          cursor:SystemMouseCursors.click,
                                          child: GestureDetector(
                                            onTapDown:(d){
                                              setState(() {
                                                // final entries = buildContextMenuEntries(sheetText.textEditorController, index, sheetText, sheetList);
                                                  ContextMenu(
                                                      entries: [
                                                        typeChangeItem('string',0),
                                                        typeChangeItem('number',1),
                                                        typeChangeItem('integer',2),
                                                        typeChangeItem('bool',3),
                                                        typeChangeItem('date',4),
                                                        typeChangeItem('time',5),
                                                        // typeChangeItem('email',6),
                                                        // typeChangeItem('url',7),
                                                        typeChangeItem('phone',8),
                                                        // typeChangeItem('choice',9),
                                                        // typeChangeItem('currency',10),
                                                      ],
                                                      boxDecoration: BoxDecoration(
                                                          boxShadow: [
                                                            BoxShadow(
                                                              color: defaultPalette
                                                                  .black,
                                                              blurRadius: 2,
                                                            )
                                                          ],
                                                          color: defaultPalette.primary,
                                                          borderRadius:
                                                              BorderRadius.circular(
                                                                  10)),
                                                      position: Offset(
                                                          d.globalPosition.dx,
                                                          d.globalPosition.dy+20))
                                                  .show(context);
                                              });
                                            },
                                            child: Container(
                                              height:26,
                                              decoration:BoxDecoration(
                                                color: defaultPalette.transparent,
                                                borderRadius:BorderRadius.circular(20),
                                              ),
                                              child: Row(
                                                children: [
                                                  Expanded(child: Text(
                                                    '${item.type.name}  ',
                                                    maxLines: 1,
                                                    overflow:TextOverflow.ellipsis,
                                                    textAlign: TextAlign.end,
                                                    style: GoogleFonts.lexend(
                                                      fontWeight: FontWeight.w500,
                                                      letterSpacing: -1,
                                                      fontSize:15
                                                    ))),
                                                  SizedBox(width:6)
                                                ],
                                              )
                                        ),
                                                                                ),
                                                                              ),
                                      ),
                                        
                                    ],
                                  ),
                                 const SizedBox(
                                    height:2
                                  ),
                                  //'hide'
                                  Container(
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10), 
                                    color:defaultPalette.secondary,
                                    border: Border.all(
                                      width:0.2
                                    ),),
                                    child: AnimatedToggleSwitch<bool>.dual(
                                      current: item.hide,
                                      first: false,
                                      second: true,
                                      onChanged: (value) {
                                        setState(() {
                                          updateSheetTextProperties((p0) {
                                            p0.toggleVisibility();
                                          },);
                                        });
                                      },
                                      animationCurve: Curves.easeInOutExpo,
                                      animationDuration: Durations.medium4,
                                      borderWidth:
                                          2, // backgroundColor is set independently of the current selection
                                      styleBuilder: (value) => ToggleStyle(
                                          borderRadius: BorderRadius.circular(10),
                                          indicatorBorderRadius: BorderRadius.circular(15),
                                          borderColor: defaultPalette.secondary,
                                          backgroundColor: defaultPalette.secondary,
                                          indicatorBorder:
                                              Border.all(
                                                width: 1.2,
                                                color: defaultPalette.extras[0]),
                                          indicatorColor: defaultPalette
                                              .primary), // indicatorColor changes and animates its value with the selection
                                      iconBuilder: (value) {
                                        return Icon(
                                            value == false
                                                ? Icons.remove_red_eye_outlined
                                                : TablerIcons.eye_closed,
                                            size: 18,
                                            color: defaultPalette.extras[0]);
                                      },
                                      textBuilder: (value) {
                                        return Text(
                                          value == false ? 'visible' : 'hidden',
                                          style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                        );
                                      },
                                      height: 23,
                                      spacing: (width) - 100,
                                    ),
                                  ),
                                  //'lock'
                                  Container(
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10), 
                                    color:defaultPalette.secondary,
                                    border: Border.all(
                                      width:0.2
                                    ),),
                                    child: AnimatedToggleSwitch<bool>.dual(
                                      current: item.locked,
                                      first: false,
                                      second: true,
                                      onChanged: (value) {
                                        setState(() {
                                          // item.locked = value; 
                                          // if (item.locked) {
                                          //   item.textEditorConfigurations.controller.onReplaceText = (int _,int_x, Object? _r) => false;
                                          // } else {
                                          //   item.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(item.type.index, item.textEditorConfigurations.controller);
                                          // }
                                          updateSheetTextProperties((p0) {
                                            p0.toggleLock();
                                            if (p0.locked) {
                                                  p0.textEditorConfigurations.controller.onReplaceText = (int _,int_x, Object? _r) => false;
                                                } else {
                                                  p0.textEditorConfigurations.controller.onReplaceText = getReplaceTextFunctionForType(p0.type.index, p0.textEditorConfigurations.controller);
                                                }
                                          },);
                                          FocusManager.instance.primaryFocus?.unfocus();
                                        });
                                      },
                                      animationCurve: Curves.easeInOutExpo,
                                      animationDuration: Durations.medium4,
                                      borderWidth:
                                          2, // backgroundColor is set independently of the current selection
                                      styleBuilder: (value) => ToggleStyle(
                                          borderRadius: BorderRadius.circular(10),
                                          indicatorBorderRadius: BorderRadius.circular(15),
                                          borderColor: defaultPalette.secondary,
                                          backgroundColor: defaultPalette.secondary,
                                          indicatorBorder:
                                              Border.all(
                                                width: 1.2,
                                                color: defaultPalette.extras[0]),
                                          indicatorColor: defaultPalette
                                              .primary), // indicatorColor changes and animates its value with the selection
                                      iconBuilder: (value) {
                                        return Icon(
                                            value == false
                                                ? TablerIcons.lock_open
                                                : TablerIcons.lock,
                                            size: 16,
                                            color: defaultPalette.extras[0]);
                                      },
                                      textBuilder: (value) {
                                        return Text(
                                          value == false ? 'unlocked' : 'locked',
                                          style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                        );
                                      },
                                      height: 23,
                                      spacing: (width) - 100,
                                    ),
                                  ),
                                  
                                  ],
                                  ),
                                  ),
                                  const SizedBox(
                                      height:5
                                    ),
                                  
                                  //Formating buttons 
                                  Container(
                                  margin: EdgeInsets.only(top:2, left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child: Column(
                                    children: [
                                  //FORMAT Title
                                  Container(
                                    width: width,
                                    padding: EdgeInsets.all(6).copyWith(left:8),
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                      color: defaultPalette.secondary,
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all(
                                        width: 2,
                                        color: defaultPalette.extras[0])
                                    ),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text('FOR \nMAT ',
                                            textAlign: TextAlign.start,
                                            style: TextStyle(
                                                height: 1,
                                                fontFamily:
                                                    GoogleFonts.lexend()
                                                        .fontFamily,
                                                letterSpacing:-1,
                                                fontWeight: FontWeight.w800,        
                                                color: defaultPalette
                                                    .extras[0],
                                                fontSize: 10)),
                                        Text('BO \nLD ',
                                            textAlign: TextAlign.start,
                                            style: TextStyle(
                                                height: 1,
                                                fontFamily:
                                                    GoogleFonts.bungee()
                                                        .fontFamily,
                                                color: defaultPalette
                                                    .extras[0],
                                                fontSize: 10)),
                                        Text('ITA \nLIC ',
                                            textAlign: TextAlign.start,
                                            style: TextStyle(
                                                height: 1,
                                                fontStyle: FontStyle.italic,
                                                fontFamily:
                                                    GoogleFonts.lexend()
                                                        .fontFamily,
                                                color: defaultPalette
                                                    .extras[0],
                                                fontSize: 10)), 
                                        Text('UNDER \nLINE ',
                                            textAlign: TextAlign.start,
                                            style: TextStyle(
                                                height: 1,
                                                decoration: TextDecoration.underline,
                                                letterSpacing:-1,
                                                fontFamily:
                                                    GoogleFonts.lexend()
                                                        .fontFamily,
                                                fontWeight: FontWeight.w900,         
                                                color: defaultPalette
                                                    .extras[0],
                                                fontSize: 10)),                       
                                      ],
                                    ),
                                  ),
                                  
                                  SizedBox(
                                    height:8
                                  ),
                                  //BOLD ITALICS UNDERLINE STRIKE
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                    //Bold
                                    buildElevatedLayerButton(
                                        buttonHeight:40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.bold),
                                        onClick: () {
                                          // final currentValue = item
                                          //     .textEditorController
                                          //     .getSelectionStyle()
                                          //     .attributes
                                          //     .containsKey(
                                          //         Attribute.bold
                                          //             .key);
                                          // item.textEditorController
                                          //     .formatSelection(
                                          //   currentValue
                                          //       ? Attribute.clone(
                                          //           Attribute
                                          //               .bold,
                                          //           null)
                                          //       : Attribute
                                          //           .bold,
                                          // );
                                          updateSheetTextProperties((p0){
                                            p0.toggleBold();
                                          });
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.bold,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),
                                    //Italics
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.italic),
                                      onClick: () {
                                        updateSheetTextProperties((p0){
                                            p0.toggleItalic();
                                          });
                                      },
                                      topLayerChild: const Icon(
                                        TablerIcons.italic,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //Underline
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                                item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes,
                                                Attribute
                                                    .underline),
                                      onClick:  () {
                                        updateSheetTextProperties((p0){
                                          p0.toggleUnderline();
                                        });
                                      },
                                      topLayerChild: const Icon(
                                        TablerIcons.underline,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //StrikeThrough
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.strikeThrough),
                                      onClick: () {
                                        updateSheetTextProperties((p0){
                                          p0.toggleStrikeThrough();
                                        });
                                      },
                                      topLayerChild: const Icon(
                                        TablerIcons.strikethrough,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    SizedBox(width:2)
                                    ],
                                  ),
                                  //ALIGN LEFT RIGHT CENTER JUSTIFY
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                    //LeftAlignment
                                    buildElevatedLayerButton(
                                        buttonHeight:40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.leftAlignment),
                                        onClick:  () {
                                            updateSheetTextProperties((p0){
                                              p0.alignLeft();
                                            });
                                            },
                                        topLayerChild: const Icon(
                                          TablerIcons.align_left,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),
                                    //CenterAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                                item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes,
                                                Attribute.centerAlignment),
                                      onClick: () {
                                        updateSheetTextProperties((p0){
                                          p0.alignCenter();
                                        });
                                      },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_center,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //RightAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.rightAlignment),
                                      onClick:  () {
                                            updateSheetTextProperties((p0){
                                              p0.alignRight();
                                            });
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_right,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //justifyAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.justifyAlignment),
                                      onClick: () {
                                          updateSheetTextProperties((p0){
                                            p0.alignJustify();
                                          });
                                        },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_justified,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    SizedBox(width:2)
                                    ],
                                  ),
                                  // BLOCKQUOTE, CODEBLOCK, UL, OL
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                      // BlockQuote
                                      buildElevatedLayerButton(
                                        buttonHeight: 40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.blockQuote),
                                        onClick: () {
                                          // final currentValue = item.textEditorController
                                          //     .getSelectionStyle()
                                          //     .attributes
                                          //     .containsKey(Attribute.blockQuote.key);
                                          // item.textEditorController.formatSelection(
                                          //   currentValue ? Attribute.clone(Attribute.blockQuote, null) : Attribute.blockQuote,
                                          // );
                                          updateSheetTextProperties((p0){
                                          p0.toggleBlockQuote();
                                        });
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.quote,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),

                                      // CodeBlock
                                      buildElevatedLayerButton(
                                        buttonHeight: 40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.codeBlock),
                                        onClick: () {
                                          updateSheetTextProperties((p0){
                                            p0.toggleCodeBlock();
                                          });
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.code,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),

                                      // Unordered List (Bullet)
                                      buildElevatedLayerButton(
                                        buttonHeight: 40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.ul),
                                        onClick: () {
                                          updateSheetTextProperties((p0){
                                          p0.toggleUnorderedList();
                                        });
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.list,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),

                                      // Ordered List (Numbered)
                                      buildElevatedLayerButton(
                                        buttonHeight: 40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.ol),
                                        onClick: () {
                                          updateSheetTextProperties((p0){
                                          p0.toggleOrderedList();
                                        });
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.list_numbers,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),

                                      SizedBox(width: 2),
                                    ],
                                  ),
                                  //SUB AND SUPERSCRIPT
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                      children: [
                                        //SUBSCRIPT
                                        buildElevatedLayerButton(
                                          buttonHeight: 40,
                                          buttonWidth:
                                              iconWidth * 2,
                                          toggleOnTap: true,
                                          isTapped: getIsToggled(
                                              item.textEditorController
                                                  .getSelectionStyle()
                                                  .attributes,
                                              Attribute.subscript),
                                          onClick: () {
                                            updateSheetTextProperties((p0){
                                              p0.toggleSubscript();
                                            });
                                          },
                                          topLayerChild: Icon(
                                            TablerIcons.subscript,
                                            color: Colors.black,
                                            size: 20,
                                          ),
                                        ),
                                        //SUPERSCIPT
                                        buildElevatedLayerButton(
                                          buttonHeight:40,
                                          buttonWidth:
                                              iconWidth * 2,
                                          toggleOnTap: true,
                                          isTapped: getIsToggled(
                                              item.textEditorController
                                                  .getSelectionStyle()
                                                  .attributes,
                                              Attribute
                                                  .superscript),
                                          onClick: () {
                                            
                                            updateSheetTextProperties((p0){
                                              p0.toggleSuperscript();
                                            });
                                          },
                                          
                                          topLayerChild: Icon(
                                            TablerIcons.superscript,
                                            color: Colors.black,
                                            size: 20,
                                          ),
                                        ),
                                        SizedBox(width:2)
                                      ],
                                    ),
                                  
                                  SizedBox(
                                    height:5
                                  ),
                                  ],
                                  ),
                                  ),
                                  
                                  const SizedBox(
                                      height:5
                                    ),
                                  //SIZE AND SPACINGS  of FONT
                                  Container(
                                  margin: EdgeInsets.only(left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  // SIZE AND SPACINGS of FONT
                                  child:  Column(
                                    children: [
                                      Container(
                                      width: width,
                                      padding: EdgeInsets.all(6).copyWith(left:8),
                                      margin: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15),
                                        border: Border.all(
                                          width: 2,
                                          color: defaultPalette.extras[0])
                                      ),
                                      child: Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text('FO \nNT ',
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                            height: 1,
                                            fontFamily:
                                                GoogleFonts.quintessential()
                                                    .fontFamily,
                                            // letterSpacing:-1,
                                            fontWeight: FontWeight.w900,        
                                            color: defaultPalette
                                                .extras[0],
                                          fontSize: 10)),
                                          Text('കുടും \nബം ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 0.6,
                                                  fontFamily: GoogleFonts.chilanka().fontFamily,
                                                  color: defaultPalette.extras[0],
                                                  fontSize: 15)),
                                          Text('書体 \n活字体 ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 1,
                                                  letterSpacing: -0.2,
                                                  fontFamily:
                                                      GoogleFonts.zenAntiqueSoft()
                                                          .fontFamily,
                                                  color: defaultPalette
                                                      .extras[0],
                                                  fontSize: 10)),  
                                          Text('𐤫𐤲𐤦𐤳 \n𐤨𐤯𐤦𐤫 ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 1,
                                                  letterSpacing:-1,
                                                  fontFamily:
                                                      GoogleFonts.notoSansLydian()
                                                          .fontFamily,
                                                  fontWeight: FontWeight.w900,         
                                                  color: defaultPalette
                                                      .extras[0],
                                                  fontSize: 10)),                       
                                                  ],
                                                ),
                                    ),
                                    titleTile('font', TablerIcons.currency_florin),
                                    Row(
                                      children: [
                                        Expanded(
                                          child: GestureDetector(
                                            onTap: () {
                                              setState(() {
                                              // whichTextPropertyTabIsClicked = 1;
                                              // textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked);
                                              controller.animateTo( 700, duration: Durations.extralong1, curve: Curves.easeInCirc);
                                            });
                                            },
                                            child: Container(
                                              alignment:Alignment(0,0),
                                              padding:EdgeInsets.all(2),
                                              decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(10), 
                                              color:defaultPalette.secondary,
                                              border: Border.all(
                                                width:0.2
                                              )
                                              ),
                                              child: Text((item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes[Attribute.font.key]
                                                    ?.value
                                                    ?.replaceAll( RegExp(r'_regular'), '') ?? 'mixFonts'),
                                                  style: TextStyle(
                                                    fontSize: 12,
                                                  fontFamily: (item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes[
                                                        Attribute.font.key]
                                                  ?.value )
                                                  ),        
                                                          ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                    Row(children:fontPropertyTile(0)),
                                    Row(children:fontPropertyTile(1)),
                                    Row(children:fontPropertyTile(2)),
                                    Row(children:fontPropertyTile(3)),
                                    ],
                                    ),
                                    ),
                                  
                                  const SizedBox(
                                      height:5
                                    ),
                                  
                                  //Color of FONT
                                  Container(
                                  margin: EdgeInsets.only(left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child:  Column(
                                  children: [
                                    Container(
                                      width: width,
                                      height: 35,
                                      margin: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                      color: defaultPalette.secondary,
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all(
                                        width: 2,
                                        color: defaultPalette.extras[0])
                                    ),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(14),
                                      child:const Stack(
                                        children: [
                                          MultipleBalloons(
                                            minSize: 5,
                                            maxSize: 35,
                                            maxSpeed: 1.5,
                                            maxSwayAmount: 30,
                                            minSwayAmount: 10,
                                          
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  titleTile(' color', TablerIcons.color_swatch),
                                  //the HEX TEXT FIELD
                                  Container(
                                    height: 25,
                                    padding: EdgeInsets.only(left: 2),
                                    margin: EdgeInsets.only(left: 3, right: 4),
                                    decoration: BoxDecoration(
                                        border: Border.all(width:0.3),
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15)),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.center,
                                      children: [
                                        Expanded(
                                          child: SizedBox(
                                            height: 25,
                                            child: TextField(
                                              focusNode: fontFocusNodes[5],
                                              controller: hexController,
                                              onSubmitted: (value) {
                                                setState(() {
                                                  item.textEditorController
                                                .formatSelection(
                                                  ColorAttribute(
                                                  value),
                                                  );
                                                  hexController.text =
                                                      '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                
                                                });
                                              },
                                              inputFormatters: [
                                                HexColorInputFormatter()
                                              ],
                                              textAlignVertical: TextAlignVertical.top,
                                              textAlign: TextAlign.center,
                                              cursorColor: defaultPalette.tertiary,
                                              decoration: InputDecoration(
                                                contentPadding: const EdgeInsets.only(left: 2),
                                                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                                hoverColor: defaultPalette.transparent,
                                                filled: true,
                                                fillColor: defaultPalette.transparent,
                                                border: InputBorder.none,
                                                enabledBorder: OutlineInputBorder(
                                                  borderSide: BorderSide.none,
                                                ),
                                                focusedBorder: OutlineInputBorder(
                                                  borderSide: BorderSide.none,
                                                  borderRadius: BorderRadius.circular(12),
                                                ),
                                              ),
                                              style: GoogleFonts.lexend(
                                                  letterSpacing: -1,
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 14,
                                                  color: defaultPalette.black),
                                            ),
                                          ),
                                        ),
                                        DecoratedBox(
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            border:const Border.fromBorderSide(
                                              BorderSide.none,
                                            ),
                                            color: hexToColor(item.textEditorController
                                              .getSelectionStyle()
                                              .attributes['color']
                                              ?.value),
                                          ),
                                          child:const SizedBox(
                                            width: 15,
                                            height: 15,
                                          ),
                                        ),
                                        const SizedBox(width:2) ,
                                        ClipRRect(
                                          borderRadius: BorderRadius.circular(9999),
                                          child: Material(
                                            color: defaultPalette.transparent,
                                            child: InkWell(
                                              focusColor: defaultPalette.primary,
                                              hoverColor: defaultPalette.primary,
                                              highlightColor: defaultPalette.primary,
                                              onTap: () {
                                                EyeDropper.enableEyeDropper(context, (p0) {
                                                  Color color = (p0?? hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value) );
                                                  setState(() {
                                                    updateSheetTextProperties((p0) {
                                                      p0.updateColor(color);
                                                    },);
                                                  hexController.text =
                                                      '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                
                                                });
                                                },);
                                              },
                                              child: const Icon(
                                                TablerIcons.color_picker,
                                                size: 19,
                                              ),
                                            ),
                                          ),
                                        ),
                                        const SizedBox(width:2)    
                                  ],
                                  ),
                                  ),
                                  const SizedBox(
                                      height:4
                                    ),
                                  //name that color Font Hex
                                  SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: Text(
                                      ' ${(ColorTools.nameThatColor(
                                        fontHex,
                                      )).toLowerCase()}',
                                      textAlign: TextAlign.start,
                                      style: GoogleFonts.lexend(
                                          fontSize: 14,
                                          letterSpacing: -1,
                                          color: defaultPalette.extras[0]),
                                    ),
                                  ),
                                  //wheel and HSv picker for Font Hex
                                  Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    if ((sWidth * wH2DividerPosition) > 220)
                                    Expanded(
                                      child: HSVPicker(
                                        color: HSVColor.fromColor(
                                          fontHex,
                                        ),
                                        onChanged: (value) {
                                          setState(() {
                                            updateSheetTextProperties((p0) {
                                              p0.updateColor(value.toColor());
                                            },);
                                            hexController.text =
                                                '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                          
                                          });
                                          },
                                      ),
                                    ),
                                    Expanded(
                                      child: IntrinsicHeight(
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          // crossAxisAlignment: CrossAxisAlignment.end,
                                          children: [
                                            //list COLOR WHEEL COLOR
                                            WheelPicker(
                                              color: HSVColor.fromColor(
                                                fontHex,
                                              ),
                                              onChanged: (HSVColor value) {
                                                setState(() {
                                                    updateSheetTextProperties((p0) {
                                              p0.updateColor(value.toColor());
                                            },);
                                                    hexController.text =
                                              '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                            });
                                                  },
                                                ),
                                              ],
                                            ),
                                          ),
                                          ),
                                        ],
                                      ),
                                  //list alpha picker
                                  AlphaPicker(
                                    alpha: (fontHex)
                                        .alpha,
                                    onChanged: (int value) {
                                      setState(() {
                                        updateSheetTextProperties((p0) {
                                              p0.updateColor(fontHex.withAlpha(value));
                                            },);
                                        hexController.text =
                                            '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                      });
                                    },
                                  ),
                                                                        
                                                  
                                                                        
                                  ],
                                  ),
                                  ),
                                  
                                  const SizedBox(
                                      height:5
                                  ),
                                  //FONT LIBRARY CARD
                                  Stack(
                                    children: [
                                      //tab system of fonts
                                      Container(
                                        height: 350,
                                        width: width + 3,
                                        decoration: BoxDecoration(
                                          color:defaultPalette.primary,
                                          borderRadius: BorderRadius.circular(20),
                                          border: Border.all(width:2, color: defaultPalette.extras[0])
                                        ),
                                        margin: const EdgeInsets.only( left: 2, bottom: 0, right: 0),
                                        padding:EdgeInsets.all(5).copyWith(top: 75),    
                                        child: ClipRRect(
                                          borderRadius: const BorderRadius.only(
                                              topLeft: Radius.circular(20),
                                              topRight: Radius.circular(20),
                                              bottomLeft: Radius.circular(20),
                                              bottomRight: Radius.circular(20)),
                                          child: TabContainer(
                                            tabs: [
                                              Icon(
                                                TablerIcons.search,
                                                size: selectedFontCategory == 'search'
                                                    ? 0
                                                    : 15,
                                                color: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circle,
                                                size: 12,
                                                color:fontsTabContainerController.index ==1?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circles,
                                                size: 12,
                                                color:fontsTabContainerController.index ==2?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circle_dashed,
                                                size: 12,
                                                color:fontsTabContainerController.index ==3?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.oval_vertical,
                                                size: 12,
                                                color:fontsTabContainerController.index ==4?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.grain,
                                                size: 12,
                                                color:fontsTabContainerController.index ==5?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                            ],
                                            tabEdge: TabEdge.left,
                                            controller: fontsTabContainerController,
                                            borderRadius: BorderRadius.only(
                                              topLeft: Radius.circular(10),
                                              topRight: Radius.circular(22),
                                              bottomLeft: Radius.circular(22),
                                              bottomRight: Radius.circular(22)),
                                            tabExtent: 20,
                                            tabsStart: 0,
                                            tabsEnd: 1,
                                            colors: [
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                            ],
                                            duration: Durations.short4,
                                            selectedTextStyle: GoogleFonts.abrilFatface(
                                              fontSize: 14,
                                              color: defaultPalette.extras[0],
                                            ),
                                            unselectedTextStyle: GoogleFonts.abrilFatface(
                                              fontSize: 12,
                                              color: defaultPalette.primary,
                                            ),
                                            children: [
                                              //SEARCH RESULT TAB
                                              Container(
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.secondary,
                                                  borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(10),
                                                      bottomLeft: Radius.circular(22),
                                                      bottomRight: Radius.circular(22)),
                                                ),
                                                margin: const EdgeInsets.only(
                                                    top: 55,
                                                    left: 3,
                                                    right: 3,
                                                    bottom: 3),
                                                child: ClipRRect(
                                                  borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(10),
                                                      bottomLeft: Radius.circular(22),
                                                      bottomRight: Radius.circular(22)),
                                                  child: GridView.builder(
                                                    gridDelegate:
                                                        SliverGridDelegateWithFixedCrossAxisCount(
                                                      crossAxisCount: fCrossAxisCount,
                                                      childAspectRatio: 2.8,
                                                      crossAxisSpacing: 5,
                                                      mainAxisSpacing: 0,
                                                    ),
                                                    itemCount: filteredFonts.length,
                                                    itemBuilder: (context, index) {
                                                      final fontName =
                                                          filteredFonts[index];
                                      
                                                      return Padding(
                                                        padding: const EdgeInsets.only(top:6, left:4, right:4, bottom: 0),
                                                        child: TextButton(
                                                          style: TextButton.styleFrom(
                                                          backgroundColor: item
                                                              .textEditorController
                                                              .getSelectionStyle()
                                                              .attributes[
                                                                  Attribute
                                                                      .font
                                                                      .key]
                                                              ?.value ==
                                                          GoogleFonts.getFont(
                                                                  fontName)
                                                              .fontFamily
                                                      ? defaultPalette
                                                          .tertiary
                                                      : defaultPalette
                                                          .primary,
                                                  foregroundColor:
                                                      defaultPalette
                                                          .extras[0],
                                                  minimumSize: Size(75, 75),
                                                  shape: RoundedRectangleBorder(
                                                    side: BorderSide(width: 0.4),
                                                              borderRadius: BorderRadius.circular(5)
                                                      ),
                                                    ),
                                                    onPressed: () {
                                                      updateSheetTextProperties((p0) {
                                                        p0.updateFontFamily(GoogleFonts.getFont( fontName).fontFamily??'Clear');
                                                      },);
                                                      setState(() {});
                                                    },
                                                    child: Text(
                                                      fontName,
                                                      textAlign: TextAlign.center,
                                                      style: GoogleFonts.getFont(
                                                          fontName,
                                                          fontSize: 14),
                                                      maxLines: 1,
                                                    )),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                              //OTHER FONT CATEGORIES TABS
                                              ...categorizedFonts.keys.map((category) {
                                                final fontsInCategory =
                                                    categorizedFonts[category]!
                                                        .where((font) =>
                                                            GoogleFonts.asMap()
                                                                .containsKey(font))
                                                        .toList();
                                      
                                                if (fontsInCategory.isEmpty) {
                                                  return Center(
                                                    child: Text(
                                                      'No fonts available in this category.',
                                                      style: TextStyle(
                                                          color: Colors.grey,
                                                          fontSize: 16),
                                                    ),
                                                  );
                                                }
                                                final fontName = fontsInCategory[index];
                                                return Container(
                                                  decoration: BoxDecoration(
                                                    color: defaultPalette.secondary,
                                                    border: Border.all(),
                                                    borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(20),
                                                      bottomLeft: Radius.circular(10),
                                                      bottomRight: Radius.circular(20)),
                                                  ),
                                                  margin: const EdgeInsets.only(
                                                      top: 3,
                                                      left: 3,
                                                      right: 3,
                                                      bottom: 32),
                                                  child: ClipRRect(
                                                    borderRadius: const BorderRadius.only(
                                                        topLeft: Radius.circular(10),
                                                        topRight: Radius.circular(20),
                                                        bottomLeft: Radius.circular(10),
                                                        bottomRight: Radius.circular(20)),
                                                    child: DynMouseScroll(
                                                        durationMS: 500,
                                                        scrollSpeed: 1,
                                                        builder: (context, controller, physics) {
                                                          return ScrollbarUltima(
                                                            alwaysShowThumb: true,
                                                            controller: controller,
                                                            scrollbarPosition:
                                                                ScrollbarPosition.right,
                                                            backgroundColor: defaultPalette.primary,
                                                            isDraggable: true,
                                                            maxDynamicThumbLength: 300,
                                                            minDynamicThumbLength: 80,
                                                            thumbBuilder:
                                                                (context, animation, widgetStates) {
                                                              return Container(
                                                                margin: EdgeInsets.symmetric(vertical: 12,).copyWith(right:3),
                                                                decoration: BoxDecoration(
                                                                    border: Border.all(),
                                                                    color: defaultPalette.primary,
                                                                    borderRadius:
                                                                        BorderRadius.circular(2)),
                                                                width: 5,
                                                              );
                                                            },
                                                            child: GridView.builder(
                                                              padding: const EdgeInsets.only(
                                                                right: 6,),
                                                              gridDelegate:
                                                                  SliverGridDelegateWithFixedCrossAxisCount(
                                                                crossAxisCount:
                                                                    fCrossAxisCount,
                                                                childAspectRatio: 2.5,
                                                                crossAxisSpacing: 0,
                                                                mainAxisSpacing: 0,
                                                              ),
                                                              itemCount:
                                                                  fontsInCategory.length,
                                                              controller: controller,
                                                              physics: physics,
                                                              itemBuilder:
                                                                  (context, index) {
                                                                final fontName =
                                                                    fontsInCategory[index];
                                                                                                  
                                                                return Container(
                                                                  padding: EdgeInsets.only(
                                                                        top:6, left:4, right:4,
                                                                          bottom: index ==fontsInCategory.length-1?5: 0),
                                                                  child: TextButton(
                                                                    style: TextButton.styleFrom(
                                                                      backgroundColor: item
                                                                        .textEditorController
                                                                        .getSelectionStyle()
                                                                        .attributes[Attribute.font.key]
                                                                        ?.value == GoogleFonts.getFont(fontName).fontFamily
                                                                        ? defaultPalette.tertiary
                                                                        : defaultPalette.primary,
                                                                      foregroundColor: defaultPalette.extras[0],
                                                                      minimumSize:Size(75, 80),
                                                                      shape: RoundedRectangleBorder(
                                                                            side: BorderSide(width: 0.4),
                                                                            borderRadius: BorderRadius.circular(5)
                                                                          ),
                                                                    ),
                                                                    onPressed: () {
                                                                      updateSheetTextProperties((p0) {
                                                                        p0.updateFontFamily(fontName);
                                                                      },);
                                                                      setState(() {});
                                                                    },
                                                                    child: Text(
                                                                      fontName,
                                                                      textAlign: TextAlign
                                                                          .center,
                                                                      style: GoogleFonts.getFont(
                                                                          color: defaultPalette.extras[0],
                                                                          fontName,
                                                                          fontSize: 14),
                                                                      maxLines: 1,
                                                                    )),
                                                              
                                                                );
                                                              },
                                                            ),
                                                          );
                                                        }),
                                                  ),
                                                );
                                              }).toList()
                                            ],
                                          ),
                                        ),
                                      ),
                                      
                                      //FONT TITLE TEXT
                                      Container(
                                        width: width,
                                        height: 75,
                                        margin: EdgeInsets.only(top:12),
                                        decoration: BoxDecoration(
                                        ),
                                        child:Stack(
                                          children: [
                                            Positioned(
                                              top: 0,
                                              left: 17,
                                              width: width,
                                              child: Text('font',
                                                  textAlign: TextAlign.start,
                                                  style: GoogleFonts.raleway(
                                                    letterSpacing:-0.3,
                                                    height: 1,
                                                    fontWeight: FontWeight.w800,
                                                    foreground: Paint()
                                                    ..style=PaintingStyle.stroke
                                                    ..strokeWidth=0
                                                    ,
                                                    fontSize: 25)
                                                    )),
                                            Positioned(
                                              top: 2,
                                              left: 70,
                                              child: Text('Library',
                                                  textAlign: TextAlign.start,
                                                  style: GoogleFonts.leagueSpartan(
                                                    height: 1,
                                                    letterSpacing:-0.5,
                                                    color: defaultPalette.extras[0],
                                                    fontWeight: FontWeight.w600,
                                                    fontSize: 25)
                                                    )),
                                            Row(
                                            children: [
                                              Expanded(
                                                child: Container(
                                                  width:width,
                                                  height:25,
                                                  alignment:Alignment(0,0),
                                                  margin: EdgeInsets.all(12).copyWith(top: 32,right: 5),
                                                  decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10), 
                                                  color:defaultPalette.secondary,
                                                  border: Border.all(
                                                    width:0.2
                                                  )
                                                  ),
                                                  child: Text((item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes[Attribute.font.key]
                                                        ?.value
                                                        ?.replaceAll( RegExp(r'_regular'), '') ?? 'mixFonts'),
                                                      style: TextStyle(
                                                        fontSize: 12,
                                                      fontFamily: (item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes[
                                                            Attribute.font.key]
                                                      ?.value )
                                                      ),        
                                                ),
                                                ),
                                              ),
                                            ],
                                                                                        )        
                                          ],
                                        )
                                      ),
                                      
                                      //CURRENT TAB
                                      Positioned(
                                          left: 45,
                                          bottom: 8,
                                          width: width,
                                          child: Text(
                                              selectedFontCategory == 'search'
                                                  ? ''
                                                  : selectedFontCategory,
                                              textAlign: TextAlign.start,
                                              maxLines: 1,
                                              style: GoogleFonts.leagueSpartan(
                                                  color: defaultPalette.primary,
                                                  fontSize: (width / 7).clamp(10, 20),
                                                  letterSpacing: 0))),
                                      //
                                      if (selectedFontCategory == 'search')
                                        //Search BAR TEXTFIELDFORM
                                        Positioned(
                                          right: 15,
                                          top: 75,
                                          width: width-16,
                                          child: TextFormField(
                                            style: GoogleFonts.bungee(
                                                color: defaultPalette.primary,
                                                fontSize: (width / 6).clamp(5, 15)),
                                            cursorColor: defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              // labelText: 'Search Fonts',
                                              contentPadding: EdgeInsets.all(0),
                                              hintText: 'Type to search fonts...',
                                              focusColor: defaultPalette.primary,
                                              hintStyle: GoogleFonts.leagueSpartan(
                                                  fontSize: 15,
                                                  color: defaultPalette.primary),
                                              prefixIcon: Icon(TablerIcons.search,
                                                  color: defaultPalette.primary),
                                              border: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                gapPadding: 2,
                                                borderRadius: BorderRadius.circular(22),
                                              ),
                                            ),
                                            onChanged: (query) {
                                              setState(() {
                                                filteredFonts = categorizedFonts.entries
                                                    .expand((entry) => entry.value)
                                                    .where((font) =>
                                                        font.toLowerCase().contains(query
                                                            .toLowerCase()) &&
                                                        GoogleFonts.asMap().containsKey(
                                                            font)) 
                                                    .toList();
                                              });
                                            },
                                          ),
                                        ),
                                  
                                      ],
                                    ),

                                  
                                  const SizedBox(
                                      height:2
                                  ),
                                ],
                              ),
                            );
                        }),
                      ),
                      ),
                      ),
                      ),
                    
                    ],

                    if (index == 1)
                    //FUNCTIONS //Desktop WEB
                    Positioned.fill(
                      child: Stack(
                        children: [
                          //GRAPH BEHIND Functions CARD
                          ...[
                          Padding(
                            padding: const EdgeInsets.all(10),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(25),
                              child: Opacity(
                                opacity: 0.35,
                                child: SizedBox(
                                  width: sWidth,
                                  height: sHeight,
                                  child: LineChart(LineChartData(
                                      lineBarsData: [LineChartBarData()],
                                      titlesData: const FlTitlesData(show: false),
                                      gridData: FlGridData(
                                          getDrawingVerticalLine: (value) => FlLine(
                                                  color: defaultPalette.secondary.withOpacity(0.4),
                                                  dashArray: [5, 5],
                                                  strokeWidth: 1),
                                          getDrawingHorizontalLine: (value) =>
                                              FlLine(
                                                  color: defaultPalette
                                                      .secondary.withOpacity(0.4),
                                                  dashArray: [5, 5],
                                                  strokeWidth: 1),
                                          show: true,
                                          horizontalInterval: 10,
                                          verticalInterval: 50),
                                      borderData: FlBorderData(show: false),
                                      minY: 0,
                                      maxY: 50,
                                      maxX: dateTimeNow.millisecondsSinceEpoch
                                                  .ceilToDouble() /
                                              500 +
                                          250,
                                      minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                              
                                ),
                              ),
                            ),
                          ),
                          Container(
                            width: width+10,
                            margin: EdgeInsets.only(left:6,top: 5),
                            color: defaultPalette.transparent
                          ),
                          ],
                          
                          Positioned(
                          child: Container(
                          height: sHeight * 0.9,
                          decoration: BoxDecoration(
                          ),
                          margin: EdgeInsets.only(
                              top: 15,
                              bottom: index == whichTextPropertyTabIsClicked? 15: 18,
                              left: 10,
                              right: 13),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(20),
                            child: ScrollConfiguration(
                              behavior: ScrollBehavior().copyWith(scrollbars: false),
                              child: DynMouseScroll(
                                durationMS: 500,
                                scrollSpeed: 1,
                                builder: (context, controller, physics) {
                                  return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                  crossAxisAlignment:CrossAxisAlignment.end,
                                  children: [
                                    // tracking indexPath for debugging
                                    // Text(item.indexPath.toString(),
                                    //   maxLines: 1,
                                    //   overflow: TextOverflow.ellipsis,
                                    //   style: GoogleFonts.lexend(
                                    //     height: 0.9,
                                    //     fontSize:18,
                                    //     color: Colors.white,
                                    //     letterSpacing: -1,
                                    //     fontWeight: FontWeight.w500),
                                    //   ),

                                  //Function Title
                                  Padding( 
                                    padding: const EdgeInsets.only(top:2, left:2, right:2),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(20),
                                      child: AnimatedMeshGradient(
                                        colors: [
                                            defaultPalette.primary,
                                            defaultPalette.primary,
                                            defaultPalette.extras[0],
                                            defaultPalette.primary,
                                          ],
                                        options: AnimatedMeshGradientOptions(
                                            amplitude: 50,
                                            grain: 0.1,
                                            frequency: 2
                                          ),
                                        child: Container(
                                          padding: EdgeInsets.all(3).copyWith(right:5,bottom:5),
                                          decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(20),
                                          border: Border.all(
                                            color: defaultPalette.primary, width:2
                                          )
                                        ),
                                          child:BlendMask(
                                          blendMode: BlendMode.difference,
                                          child: Column(
                                            children: [
                                              titleTile(' functions', TablerIcons.math_integral_x,fontSize: 20,iconSize: 22, color: defaultPalette.primary),  
                                              const SizedBox(
                                                    height:3
                                                  ),
                                              
                                              const SizedBox(
                                                    height:2
                                                  ),
                                              //function 'label'
                                              Row(
                                                children: [
                                                  Expanded(
                                                    child: Text(
                                                      fontTextControllers[4].text,
                                                      textAlign: TextAlign.end,
                                                      style: GoogleFonts.lexend(
                                                      letterSpacing: -0.6,
                                                      fontWeight: FontWeight.w500,
                                                      fontSize: 14,
                                                      height: 0.8,
                                                      color: defaultPalette.primary),
                                                      ),),
                                                   const SizedBox(width:2)  
                                                ],
                                              ), 
                                              Row(
                                                children:[
                                                  Expanded(
                                              child: MouseRegion(
                                                cursor:SystemMouseCursors.click,
                                                child: GestureDetector(
                                                  onTapDown:(d){
                                                    setState(() {
                                                     // final entries = buildContextMenuEntries(sheetText.textEditorController, index, sheetText, sheetList);
                                                        ContextMenu(
                                                            entries: [
                                                              typeChangeItem('string',0),
                                                              typeChangeItem('number',1),
                                                              typeChangeItem('integer',2),
                                                              typeChangeItem('bool',3),
                                                              typeChangeItem('date',4),
                                                              typeChangeItem('time',5),
                                                              typeChangeItem('phone',8),
                                                            ],
                                                            boxDecoration: BoxDecoration(
                                                                boxShadow: [
                                                                  BoxShadow(
                                                                    color: defaultPalette
                                                                        .black,
                                                                    blurRadius: 2,
                                                                  )
                                                                ],
                                                                color: defaultPalette.primary,
                                                                borderRadius:
                                                                    BorderRadius.circular(
                                                                        10)),
                                                            position: Offset(
                                                                d.globalPosition.dx,
                                                                d.globalPosition.dy+20))
                                                        .show(context);
                                                    });
                                                  },
                                                  child: Row(
                                                    children: [
                                                      Expanded(child: Text(
                                                        '${item.type.name}    ',
                                                        maxLines: 1,
                                                        overflow:TextOverflow.ellipsis,
                                                        textAlign: TextAlign.end,
                                                        style: GoogleFonts.lexend(
                                                          fontWeight: FontWeight.w300,
                                                          letterSpacing: -0.5,
                                                          fontSize:14,
                                                          color:defaultPalette.primary
                                                        ))),
                                                      const SizedBox(width:2) 
                                                    ],
                                                  ),
                                                ),
                                              ),
                                              ),
                                                ]
                                              ),
                                              const SizedBox(
                                                height:2
                                              ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                  const SizedBox(
                                    height:5
                                  ),
                                  const SizedBox(
                                    height:5
                                  ),
                                  //input blocks list and functions library
                                  GestureDetector(
                                    onTap: (){
                                      setState(() {
                                        selectedInputBlocks = item.inputBlocks;
                                      });
                                    },
                                    child: Container(
                                      padding: EdgeInsets.all(0).copyWith(top: 3),
                                      margin: const EdgeInsets.only(top:2, left:2, right:2),
                                      decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(20),
                                      // border: Border.all(
                                      //   color: defaultPalette.primary, width: 1.5)
                                        ),
                                        child: ClipRRect(
                                          borderRadius: BorderRadius.circular(20),
                                          child:Column(
                                            crossAxisAlignment:CrossAxisAlignment.start,
                                            children: [       
                                              //inputblock list   
                                              ...[const SizedBox(
                                                    height:4
                                                  ),
                                              //preview Text in function
                                              Container(
                                                width: width,
                                                padding: EdgeInsets.all(4).copyWith(left:8),
                                                margin: EdgeInsets.all(0),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.primary,
                                                  borderRadius: BorderRadius.circular(15),
                                                  border: Border.all(
                                                    width: 2,
                                                    color: defaultPalette.extras[0])
                                                ),
                                                child: SingleChildScrollView(
                                                  scrollDirection:Axis.horizontal,
                                                  child: Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      Text((buildCombinedQuillConfiguration(item.inputBlocks)).controller.document.toPlainText().replaceAll(RegExp(r'\n'), '\\n'),
                                                        textAlign: TextAlign.start,
                                                        style: TextStyle(
                                                          fontFamily: GoogleFonts.leagueSpartan().fontFamily,
                                                          letterSpacing:-0.5,
                                                          fontWeight: FontWeight.w800,        
                                                          color: defaultPalette.extras[0],
                                                          fontSize: 15)),
                                                        ],
                                                      ),
                                                ),
                                                  ),
                                              const SizedBox(
                                                  height:4
                                                ),
                                              titleTile(' inputBlocks', TablerIcons.subtask,fontSize: 15,iconSize: 20, color: defaultPalette.primary),  
                                              const SizedBox(
                                                    height:10,
                                                  ),
                                              //InputBlocks for Functions 
                                              inputBlocks(item.inputBlocks),
                                              const SizedBox(
                                                height:15
                                              ), ],
                                              //
                                              //
                                              //functions library
                                               Row(
                                                children: [
                                                  Expanded(
                                                    child: Stack(
                                                      children: [
                                                        const SizedBox(height: 40),
                                                        if(isMathFunctionLibraryToggled)
                                                        Container(
                                                          height:200,
                                                          width: width+13,
                                                          margin: EdgeInsets.only(top:15, left:5, right:5, bottom:5),
                                                          decoration: BoxDecoration(borderRadius: BorderRadius.circular(8).copyWith(
                                                                    bottomLeft: Radius.circular(15),
                                                                    bottomRight: Radius.circular(15)
                                                                  ),
                                                          color:defaultPalette.primary,),
                                                          child: Column(
                                                            children:[
                                                              SizedBox(height:30),
                                                              if (selectedInputBlocks !=null) 
                                                              MouseRegion(
                                                                cursor:SystemMouseCursors.click,
                                                                child: GestureDetector(
                                                                  onTap:(){
                                                                    setState(() {
                                                                      if (selectedInputBlocks !=null) {
                                                                        selectedInputBlocks!.add(InputBlock(
                                                                          indexPath: IndexPath(index: -1277), 
                                                                          blockIndex: [-2], 
                                                                          id: 'yo',
                                                                          useConst: false,
                                                                          function: SumFunction([])
                                                                          ));
                                                                      }
                                                                      // inputBlockExpansionList.add(true);
                                                                    
                                                                  });
                                                                  },
                                                                  child: Container(
                                                                    width: width,
                                                                    height:30,
                                                                    margin:EdgeInsets.all(4),
                                                                    decoration: BoxDecoration(color:defaultPalette.extras[0],
                                                                    borderRadius:BorderRadius.circular(5),),
                                                                    child: Row(
                                                                      children:[
                                                                        SizedBox(width:8),
                                                                        Expanded(child: 
                                                                        Text(
                                                                          'sum',
                                                                          maxLines: 1,
                                                                          overflow: TextOverflow.ellipsis,
                                                                          style: GoogleFonts.lexend(
                                                                            height: 0.9,
                                                                            fontSize:18,
                                                                            color: Colors.white,
                                                                            letterSpacing: -1,
                                                                            fontWeight: FontWeight.w500),
                                                                          ),
                                                                        )
                                                                      ]
                                                                    ),
                                                                  ),
                                                                ),
                                                              ),
                                                              MouseRegion(
                                                                cursor:SystemMouseCursors.click,
                                                                child: GestureDetector(
                                                                  onTap:(){
                                                                    setState(() {
                                                                      if (selectedInputBlocks !=null) {
                                                                        selectedInputBlocks!.add(InputBlock(
                                                                          indexPath: IndexPath(index: -1277), 
                                                                          blockIndex: [-2], 
                                                                          id: 'yo',
                                                                          useConst: false,
                                                                          function: CountFunction(inputBlocks:[])
                                                                          ));
                                                                      }
                                                                      // inputBlockExpansionList.add(true);
                                                                    
                                                                  });
                                                                  },
                                                                  child: Container(
                                                                    width: width,
                                                                    height:30,
                                                                    margin:EdgeInsets.all(4),
                                                                    decoration: BoxDecoration(color:defaultPalette.extras[0],
                                                                    borderRadius:BorderRadius.circular(5),),
                                                                    child: Row(
                                                                      children:[
                                                                        SizedBox(width:8),
                                                                        Expanded(child: 
                                                                        Text(
                                                                          'count',
                                                                          maxLines: 1,
                                                                          overflow: TextOverflow.ellipsis,
                                                                          style: GoogleFonts.lexend(
                                                                            height: 0.9,
                                                                            fontSize:18,
                                                                            color: Colors.white,
                                                                            letterSpacing: -1,
                                                                            fontWeight: FontWeight.w500),
                                                                          ),
                                                                        )
                                                                      ]
                                                                    ),
                                                                  ),
                                                                ),
                                                              ),
                                                            ]
                                                          )
                                                        ),
                                                        //gradient mesh tile for math functions
                                                        Container(
                                                          decoration: BoxDecoration(
                                                            boxShadow: [
                                                              BoxShadow(
                                                                blurRadius: 20,
                                                                offset: Offset(0, 2),
                                                                color: defaultPalette.extras[0].withOpacity(0.6)
                                                              )
                                                            ],
                                                          ),
                                                          child: Padding(
                                                            padding: const EdgeInsets.only(top: 10),
                                                            child: ClipRRect(
                                                              borderRadius: BorderRadius.circular(8).copyWith(
                                                                      bottomLeft: Radius.circular(15),
                                                                      bottomRight: Radius.circular(15)
                                                                    ),
                                                              child: AnimatedMeshGradient(
                                                                colors: [
                                                                    // defaultPalette.extras[0],
                                                                    defaultPalette.primary,
                                                                    defaultPalette.primary,
                                                                    defaultPalette.primary,
                                                                    defaultPalette.extras[0],
                                                                  ],
                                                                options: AnimatedMeshGradientOptions(
                                                                    amplitude: 10,
                                                                    grain: 0.1,
                                                                    frequency: 8,
                                                                    
                                                                  ),
                                                                child: Container(
                                                                  height: 30,
                                                                  width: width,
                                                                  decoration: BoxDecoration(
                                                                    borderRadius: BorderRadius.circular(8).copyWith(
                                                                      bottomLeft: Radius.circular(15),
                                                                      bottomRight: Radius.circular(15)
                                                                    ),
                                                                    border: Border.all(color: defaultPalette.primary),
                                                                  ),
                                                                  child: Row(
                                                                    children: [
                                                                      Expanded(
                                                                        child: BlendMask(
                                                                          blendMode: BlendMode.exclusion,
                                                                          child: Text(
                                                                            'functions',
                                                                            textAlign: TextAlign.end,
                                                                            maxLines: 1,
                                                                            overflow: TextOverflow.ellipsis,
                                                                            style: GoogleFonts.lexend(
                                                                              letterSpacing: -1,
                                                                              fontWeight: FontWeight.w500,
                                                                              fontSize: 19,
                                                                              color: defaultPalette.primary,
                                                                            ),
                                                                          ),
                                                                        ),
                                                                      ),
                                                                      const SizedBox(width: 15),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ),
                                                            ),
                                                          ),
                                                        ),
                                                        ElevatedLayerButton(
                                                          borderRadius: const BorderRadius.only(
                                                            topRight: Radius.circular(5),
                                                            topLeft: Radius.circular(5),
                                                            bottomRight: Radius.circular(10),
                                                            bottomLeft: Radius.circular(10),
                                                          ),
                                                          animationDuration: const Duration(milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            border: Border.all(color: defaultPalette.extras[0]),
                                                          ),
                                                          topLayerChild: Row(
                                                            children: [
                                                              const SizedBox(width: 10),
                                                              Icon(TablerIcons.variable_plus, size: 15, color: defaultPalette.extras[0]),
                                                              Expanded(
                                                                child: Text(
                                                                  ' math',
                                                                  maxLines: 1,
                                                                  style: GoogleFonts.bungee(
                                                                    fontSize: 12,
                                                                    color: defaultPalette.extras[0],
                                                                    letterSpacing: -1,
                                                                    fontWeight: FontWeight.w500,
                                                                  ),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            border: Border.all(color: defaultPalette.extras[0]),
                                                          ),
                                                          depth: 3,
                                                          subfac: 3,
                                                          buttonHeight: 24,
                                                          buttonWidth: 80,
                                                          onClick: () {
                                                            setState(() {
                                                              isMathFunctionLibraryToggled = !isMathFunctionLibraryToggled;
                                                            });
                                                          },
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ]
                                               ),
                                              const SizedBox(
                                                height:3
                                              ), 
                                            ],
                                          ),
                                        ),
                                      ),
                                  ),
                                  
                                  // Text(item.indexPath.toString()),
                                  const SizedBox(height:2,),
                                  ]));}
                                  )
                                )
                              )
                            )
                          )
                          ],
                      ),
                    ),

                    if( index == 2 ) ...buildSuperDecorationSwiperInterface(textDecorationPath, textDecorationNameController)
                  ],
                );
              }),
        );
      case 3:
        //The actual cards for list properties
        return FadeInLeft(
          onFinish: (direction) {
            setState(() {
              listPropertyCardsController
                  .setCardIndex(whichListPropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
            controller: listPropertyCardsController,
            backgroundCardCount: 1,
            backgroundCardOffset: Offset(3, 3),
            duration: Duration(milliseconds: 150),
            backgroundCardScale: 1,
            loop: true,
            cardCount: 2,
            allowUnSwipe: true,
            allowUnlimitedUnSwipe: true,
            initialIndex: whichListPropertyTabIsClicked,
            maxAngle: 50,
            threshold: 100,
            onCardPositionChanged: (position) {
              setState(() {
                // isListDecorationLibraryToggled = true;
                _cardPosition =
                    position.offset.dx.abs() + position.offset.dy.abs();
              });
            },
            onSwipeEnd: (a, b, direction) {
              // print(direction.toString());
              setState(() {
                // ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
                isListDecorationLibraryToggled = false;
                whichListPropertyTabIsClicked = b;
                _cardPosition = 0;
                if (sheetListItem.id == 'yo') {
                  _findSheetListItem();
                }
              });
            },
            onSwipeCancelled: (activity) {},
            cardBuilder: (BuildContext context, int index) {
              int currentCardIndex = whichListPropertyTabIsClicked;
              var width = (sWidth * wH2DividerPosition - 25);
              
              Widget roundButton2(
                void Function() onTap,
                Widget icon, {
                double borderRadius = 9999,
                bool isSelected = false,
                EdgeInsets padding = const EdgeInsets.all(3),
              }) {
                return ClipRRect(
                  borderRadius: BorderRadius.circular(borderRadius),
                  child: Material(
                    color: isSelected ? defaultPalette.primary : defaultPalette.secondary,
                    child: InkWell(
                      hoverColor: defaultPalette.primary,
                      splashColor: defaultPalette.primary,
                      highlightColor: defaultPalette.primary,
                      onTap: () {
                        setState(() {
                          onTap();
                        });
                      },
                      child: Container(
                          padding: padding,
                          decoration: BoxDecoration(
                            border: isSelected
                                ? Border.all(color: defaultPalette.extras[0])
                                : Border.fromBorderSide(BorderSide.none),
                            borderRadius: BorderRadius.circular(borderRadius),
                            // color: defaultPalette.primary
                          ),
                          child: icon),
                    ),
                  ),
                );
              }

              Widget titleTile(
              String name,
              IconData icon, {
              double fontSize = 13,
              double iconSize = 15,
              }) {
              return Row(children: [
                Icon(icon, size: iconSize),
                Expanded(
                  child: Text(
                    name,
                    maxLines: 1,
                    overflow:TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                        fontSize: fontSize,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w500),
                  ),
                )
              ]);
            }

              Widget toggleSelectionRow(
                List<Widget> icons,
                List<dynamic> values,
              ) {
                List<bool> selected = [];

                for (var v = 0; v < values.length; v++) {
                   {
                    if (values[v] is MainAxisAlignment) {
                      if (sheetListItem.mainAxisAlignment == values[v]) {
                        selected.add(true);
                      } else {
                        selected.add(false);
                      }
                    } else if (values[v] is CrossAxisAlignment) {
                      if (sheetListItem.crossAxisAlignment == values[v]) {
                        selected.add(true);
                      } else {
                        selected.add(false);
                      }
                    } 
                  }
                }

                Function() switchFunction(dynamic value) {
                  if (value is CrossAxisAlignment) {
                    return () {
                      sheetListItem.crossAxisAlignment = value;
                    };
                  } else {
                    return () {
                      sheetListItem.mainAxisAlignment = value;
                    };
                  }
                }

                return Container(
                  padding: EdgeInsets.all(2),
                  decoration: BoxDecoration(
                      color: defaultPalette.secondary,
                      border: Border.all(width:0.4),
                      borderRadius: BorderRadius.circular(20)),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      for (int i = 0; i < icons.length; i++) ...[
                        Expanded(
                            child: roundButton2(switchFunction(values[i]), icons[i], isSelected: selected[i], borderRadius: 20, ),),
                        if (i != icons.length - 1)
                          SizedBox(
                            width: 2,
                          )
                      ]
                    ],
                  ),
                );
              }

              return Stack(
                children: [
                  Positioned.fill(
                    child: AnimatedContainer(
                      duration: Durations.short3,
                      margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color:index==0? defaultPalette.secondary: defaultPalette.primary,
                        border: Border.all(width: 2),
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                  ),
                  Positioned.fill(
                    child: AnimatedOpacity(
                      opacity: currentCardIndex == index
                          ? 0
                          : index >= (currentCardIndex + 2) % 10
                              ? 1
                              : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                      duration: Duration(milliseconds: 300),
                      child: AnimatedContainer(
                        duration: Duration(milliseconds: 300),
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: index == (currentCardIndex + 1) % 10
                              ? defaultPalette.extras[0]
                              : index == (currentCardIndex + 2) % 10
                                  ? defaultPalette.extras[0]
                                  : defaultPalette.extras[0],
                          border: Border.all(width: 2),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                  ),

                  //List Properties
                  if (index == 0) ...[
                    //GRAPH BEHIND LIST PROPERTIES CARD
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(25),
                          child: Opacity(
                            opacity: 0.7,
                            child: LineChart(LineChartData(
                              lineBarsData: [LineChartBarData()],
                              titlesData: const FlTitlesData(show: false),
                              gridData: FlGridData(
                                getDrawingVerticalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0],
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                getDrawingHorizontalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0],
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                show: true,
                                horizontalInterval: 6,
                                verticalInterval: 60),
                              borderData: FlBorderData(show: false),
                              minY: 0,
                              maxY: 50,
                              maxX: dateTimeNow.millisecondsSinceEpoch
                                          .ceilToDouble() /
                                      500 +
                                  250,
                              minX: dateTimeNow.millisecondsSinceEpoch
                                      .ceilToDouble() /
                                  500)),
                          ),
                        ),
                      ),
                      
                    Positioned.fill(
                      child: Padding(
                        padding: EdgeInsets.all(15).copyWith(left: 11, right: 14),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: ScrollConfiguration(
                            behavior: ScrollBehavior()
                                .copyWith(scrollbars: false),
                            child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                    children: [
                                      Container(
                                        margin: EdgeInsets.only(top:2),
                                        padding: EdgeInsets.all(5),
                                        decoration: BoxDecoration(
                                        color:defaultPalette.primary,
                                        borderRadius: BorderRadius.circular(20),
                                        border: Border.all(color: defaultPalette.extras[0], width: 2)
                                        ),
                                        child: Column(
                                          children: [
                                        titleTile('listProperties', TablerIcons.brackets_contain_end,fontSize: 18, iconSize:20),  
                                        const SizedBox(
                                            height:3
                                          ),
                                        Row(
                                          children: [
                                            const SizedBox( width:4 ),
                                            Expanded(
                                              child: Text('id: ${sheetListItem.id}',
                                                textAlign: TextAlign.start,
                                                maxLines:1,
                                                style: TextStyle(
                                                  height: 1,
                                                  fontFamily: GoogleFonts.lexend().fontFamily,
                                                  letterSpacing:-0.5,
                                                  overflow: TextOverflow.ellipsis,
                                                  fontWeight: FontWeight.w400,        
                                                  color: defaultPalette.extras[0],
                                                  fontSize: 8)),
                                            ),
                                          ],
                                        ),  
                                        const SizedBox(
                                            height:10
                                          ),
                                        Container(
                                          decoration: BoxDecoration(border: Border.all(width:0.2), borderRadius:BorderRadius.circular(20)),
                                          child: AnimatedToggleSwitch<Axis>.dual(
                                            current:
                                                sheetListItem.direction,
                                            first: Axis.vertical,
                                            second: Axis.horizontal,
                                            onChanged: (value) {
                                              setState(() {
                                                sheetListItem
                                                    .direction = value;
                                              });
                                            },
                                            animationCurve:
                                                Curves.easeInOutExpo,
                                            animationDuration:
                                                Durations.medium4,
                                            borderWidth:
                                                2, // backgroundColor is set independently of the current selection
                                            styleBuilder: (value) =>
                                                ToggleStyle(
                                                    borderRadius:
                                                        BorderRadius
                                                            .circular(
                                                                20),
                                                    indicatorBorderRadius:
                                                        BorderRadius
                                                            .circular(
                                                                20),
                                                    borderColor:
                                                        defaultPalette
                                                            .secondary,
                                                    backgroundColor:
                                                        defaultPalette
                                                            .secondary,
                                                    indicatorBorder: Border.all(),
                                                    indicatorColor:
                                                        defaultPalette
                                                                .primary), // indicatorColor changes and animates its value with the selection
                                            iconBuilder: (value) {
                                              return Icon(
                                                  value ==
                                                          Axis
                                                              .horizontal
                                                      ? TablerIcons
                                                          .grip_horizontal
                                                      : TablerIcons
                                                          .grip_vertical,
                                                  size: 12,
                                                  color: defaultPalette
                                                      .extras[0]);
                                            },
                                            textBuilder: (value) {
                                              return Text(
                                                value == Axis.horizontal
                                                    ? 'Horizontal'
                                                    : 'Vertical',
                                                style:
                                                    GoogleFonts.bungee(
                                                        fontSize: 12),
                                              );
                                            },
                                            height: 25,
                                            spacing: (width) - 100,
                                          ),
                                        ),
                                        const SizedBox(
                                            height:3
                                          ),
                                        titleTile( ' mainAxisSize',
                                              TablerIcons.ruler_measure),
                                        Container(
                                          decoration: BoxDecoration(border: Border.all(width:0.2), borderRadius:BorderRadius.circular(20)),
                                          child: AnimatedToggleSwitch<MainAxisSize>.dual(
                                                current:
                                                    sheetListItem.mainAxisSize,
                                                first: MainAxisSize.min,
                                                second: MainAxisSize.max,
                                                onChanged: (value) {
                                                  setState(() {
                                                    sheetListItem
                                                        .mainAxisSize = value;
                                                  });
                                                },
                                                animationCurve:
                                                    Curves.easeInOutExpo,
                                                animationDuration:
                                                    Durations.medium4,
                                                borderWidth:
                                                    2, // backgroundColor is set independently of the current selection
                                                styleBuilder: (value) =>
                                                    ToggleStyle(
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    20),
                                                        indicatorBorderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    20),
                                                        indicatorBorder:Border.all(),
                                                        borderColor: defaultPalette.secondary,
                                                        backgroundColor: defaultPalette.secondary,
                                                        indicatorColor: defaultPalette.primary), // indicatorColor changes and animates its value with the selection
                                                iconBuilder: (value) {
                                                  return Icon(
                                                      value ==
                                                              MainAxisSize.min
                                                          ? TablerIcons
                                                              .viewport_narrow
                                                          : TablerIcons
                                                              .viewport_wide,
                                                      size: 12,
                                                      color: defaultPalette
                                                          .extras[0]);
                                                },
                                                textBuilder: (value) {
                                                  return Text(
                                                    value ==MainAxisSize.min
                                                        ? 'min'
                                                        : 'max',
                                                    style:
                                                        GoogleFonts.bungee(
                                                            fontSize: 12),
                                                  );
                                                },
                                                height: 25,
                                                spacing: (width) - 100,
                                              
                                              
                                              ),
                                        ),
                                        SizedBox(height:2),
                                        Row(
                                            children: [
                                              Expanded(

                                                child: titleTile( 
                                                  'mainAxisAlignment',
                                                  sheetListItem.direction == Axis.vertical? TablerIcons.caret_up_down: TablerIcons.caret_left_right),
                                              ),
                                              Expanded(
                                                child: Text(
                                                  '${sheetListItem.mainAxisAlignment.name}',
                                                  maxLines: 1,
                                                  textAlign: TextAlign.end,
                                                  overflow: TextOverflow.ellipsis,
                                                  style: GoogleFonts.lexend(
                                                      fontSize: 14,
                                                      height:2,
                                                      letterSpacing: -1,
                                                      fontWeight: FontWeight.w500),
                                                ),
                                              ),
                                              SizedBox(width:4),
                                            ],
                                          ),

                                          toggleSelectionRow(
                                            [
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_top:TablerIcons.layout_align_left, size:18),
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_center:TablerIcons.layout_align_middle, size:18),
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_bottom:TablerIcons.layout_align_right, size:18),
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_distribute_horizontal:TablerIcons.layout_distribute_vertical, size:18),
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.dots_vertical:TablerIcons.dots, size:18),
                                            Icon(sheetListItem.direction == Axis.vertical?TablerIcons.separator_horizontal:TablerIcons.separator_vertical, size:18),
                                            
                                          ], [
                                            MainAxisAlignment.start,
                                            MainAxisAlignment.center,
                                            MainAxisAlignment.end,
                                            MainAxisAlignment.spaceAround,
                                            MainAxisAlignment.spaceEvenly,
                                            MainAxisAlignment.spaceBetween
                                          ]),
                                                                                      
                                          SizedBox(height:4),
                                          Row(
                                            children: [
                                              Expanded(
                                                child: titleTile( 
                                                  'crossAxisAlignment',
                                                  sheetListItem.direction == Axis.vertical? TablerIcons.caret_up_down: TablerIcons.caret_left_right),
                                              ),
                                              Expanded(
                                                child: Text(
                                                  '${sheetListItem.crossAxisAlignment.name}',
                                                  maxLines: 1,
                                                  textAlign: TextAlign.end,
                                                  overflow: TextOverflow.ellipsis,
                                                  style: GoogleFonts.lexend(
                                                      fontSize: 14,
                                                      height:2,
                                                      letterSpacing: -1,
                                                      fontWeight: FontWeight.w500),
                                                ),
                                              ),
                                              SizedBox(width:4),
                                            ],
                                          ),
                                          toggleSelectionRow([
                                            Icon(TablerIcons.sign_left, size:18),
                                            Icon(TablerIcons.float_center, size:18),
                                            Icon(TablerIcons.sign_right, size:18), 
                                          ], [ 
                                            CrossAxisAlignment.start,
                                            CrossAxisAlignment.center,
                                            CrossAxisAlignment.end ]),
                                          
                                          SizedBox(height:4),
                                    
                                        ],
                                        ),
                                        ),
                                      
                                      
                                      
                                      // Text(sheetListItem.indexPath.toString()),
                                    ],
                                  ));
                            
                              }))),
                      ),
                    )
                  ],
                     
                  if(index == 1) ...buildSuperDecorationSwiperInterface(listDecorationPath, listDecorationNameController)
                ],
              );
            },
          ),
        );
      case 4:
        //The actual cards for table properties
        return FadeInRight(
          onFinish: (direction) {
            setState(() {
              tablePropertyCardsController
                  .setCardIndex(whichTablePropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
            controller: tablePropertyCardsController,
            backgroundCardCount: 1,
            backgroundCardOffset: Offset(3, 3),
            duration: Duration(milliseconds: 150),
            backgroundCardScale: 1,
            loop: true,
            cardCount: 3,
            allowUnSwipe: true,
            allowUnlimitedUnSwipe: true,
            initialIndex: whichTablePropertyTabIsClicked,
            maxAngle: 50,
            threshold: 100,
            onCardPositionChanged: (position) {
              setState(() {
                // isListDecorationLibraryToggled = true;
                _cardPosition =
                    position.offset.dx.abs() + position.offset.dy.abs();
              });
            },
            onSwipeEnd: (a, b, direction) {
              // print(direction.toString());
              setState(() {
                // ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
                isListDecorationLibraryToggled = false;
                whichTablePropertyTabIsClicked = b;
                _cardPosition = 0;
                if (sheetTableItem.id == 'yo') {
                  _findSheetListItem();
                }
              });
            },
            onSwipeCancelled: (activity) {},
            cardBuilder: (context, index) {
              var width = (sWidth * wH2DividerPosition - 30);
              var sheetTableDecoration = sheetDecorationMap[sheetTableItem.sheetTableDecoration.id];
              var sheetTablebgDecoration = sheetDecorationMap[sheetTableItem.sheetTablebgDecoration.id];
              String selectedDecorationTitle = 
              whichTableDecorationIsClicked == 0
              ? ' Table'
              : whichTableDecorationIsClicked == 1
                ? ' TableBG'
                : whichTableDecorationIsClicked == 2
                  ? ' Row '+(sheetTableVariables.rowLayerIndex+1).toString()
                  : ' Column '+numberToColumnLabel(sheetTableVariables.columnLayerIndex+1);
              List<TextEditingController> tableTextControllers=[
                TextEditingController()..text= (sheetTableItem.pinnedRows-1).toString(),
                TextEditingController()..text= (sheetTableItem.pinnedColumns-1).toString(),
                TextEditingController()..text= sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size.toStringAsFixed(2).replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text= sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size.toStringAsFixed(2).replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text= sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text= sheetTableItem.name,    
              ];
              
              Widget titleTile(
              String name,
              IconData icon, {
              double fontSize = 13,
              double iconSize = 20,
              }) {
              return Row(children: [
                Icon(icon, size: iconSize),
                Expanded(
                  child: Text(
                    name,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                        fontSize: fontSize,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w500),
                  ),
                  )
                ]);
              }
              
              List<Widget> tablePropertyTile(int s, String name, IconData icon) {
                return [
                  SizedBox(width:2),
                  MouseRegion(
                    cursor: s!=5? SystemMouseCursors.resizeLeftRight: SystemMouseCursors.basic,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                        //  fontFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? 5
                            : HardwareKeyboard.instance.isShiftPressed
                                ? 0.1
                                : 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(tableTextControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                                s==0
                                ? 0
                                : double.negativeInfinity
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(2));
                          switch (s) {
                            case 0:
                              sheetTableItem.pinnedRows=(parsedValue+1).ceil().clamp(1, sheetTableItem.rowData.length);
                              break;
                            case 1:
                              sheetTableItem.pinnedColumns=(parsedValue+1).ceil().clamp(1, sheetTableItem.columnData.length);
                              break;
                            case 2:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;
                            case 3:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;  
                            case 4:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, double.infinity);
                              break;
                            // case 5:
                            //   sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                            //   break;
                            case 6:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;  
                            case 7:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, double.infinity);
                              break;     
                            case 8:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan=(parsedValue.round()).clamp(1, (sheetTableItem.rowData.length-sheetTableVariables.rowLayerIndex));
                              applySpans(sheetTableItem);
                              break;  
                            case 9:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan=(parsedValue.round()).clamp(1, (sheetTableItem.columnData.length-sheetTableVariables.columnLayerIndex));
                              applySpans(sheetTableItem);
                              break;        
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            icon,
                            size: 16,
                          ),
                          Text(
                            name,
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        // onTapOutside: (event) => fontFocusNodes[s].unfocus(),
                        // focusNode: fontFocusNodes[s],
                        controller: tableTextControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            var parsedValue = double.parse(value);
                          switch (s) {
                            case 0:
                              sheetTableItem.pinnedRows=(double.parse(value)+1).ceil();
                              break;
                            case 1:
                              sheetTableItem.pinnedColumns=(double.parse(value)+1).ceil();
                              break;
                            case 2:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;
                            case 3:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;  
                            case 4:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, double.infinity);
                              break;
                            case 5:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;
                            case 6:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;  
                            case 7:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, double.infinity);
                              break;  
                            case 8:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan=(parsedValue).ceil().clamp(1, sheetTableItem.rowData.length);
                              break;  
                            case 9:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan=(parsedValue).ceil().clamp(1, sheetTableItem.columnData.length);
                              break;      
                          }
                          });
                        },
                      ),
                    ),
                  ),
                ];
                }

              Widget tableAxisCard(int axis) {
                return Stack(
                  children: [
                    //BackgroundColor
                    Container(
                      width: width,
                      height: 150,
                      padding: EdgeInsets.only(left: 1),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: defaultPalette.primary,
                        border: Border.all(width:2, color:defaultPalette.extras[0]),
                        borderRadius: BorderRadius.circular(20),
                      ),
                    ),
                    //Add row or column and TITLE 
                    Positioned(
                      left: 8,
                      top: 8,
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          ClipRRect(
                            borderRadius:BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.primary,
                              child: InkWell(
                                hoverColor: defaultPalette.secondary,
                                splashColor: defaultPalette.secondary,
                                highlightColor: defaultPalette.secondary,
                                onTap: () {
                                  setState(() {
                                    
                                    if (axis == 0) {
                                  // ─── Adding a new ROW ────────────────────────────────────
                                  final newRowIndex = sheetTableItem.rowData.length;
                                  final rowIndexPath = IndexPath(
                                    parent: sheetTableItem.indexPath,
                                    index: newRowIndex,
                                  );

                                  // Prepare the InputBlock list for the new row
                                  final rowInputBlocks = <InputBlock>[];

                                  // For each existing column, make a cell and link its InputBlock
                                  sheetTableItem.cellData.add(
                                    List.generate(sheetTableItem.columnData.length, (colIndex) {
                                      final newId = 'TX-${Uuid().v4()}';
                                      var itemIndexPath =IndexPath(
                                              parent: rowIndexPath,
                                              index: colIndex);
                                      final inputBlock = InputBlock(
                                        indexPath: itemIndexPath,
                                        blockIndex: [-2],
                                        id: newId,
                                      );

                                      var sheetTableCell = SheetTableCell(
                                        id: '${numberToColumnLabel(colIndex + 1)}${newRowIndex + 1}',
                                        parentId: sheetTableItem.id,
                                        indexPath: rowIndexPath,
                                        sheetItem: _addTextField(
                                          id: newId,
                                          parentId: sheetTableItem.id,
                                          textDecoration:
                                              sheetTableItem.sheetTableDecoration,
                                          shouldReturn: true,
                                          isCell: true,
                                          hide: false,
                                          inputBlocks: [inputBlock],
                                          indexPath: itemIndexPath,
                                          name:
                                              '${numberToColumnLabel(colIndex + 1)}${newRowIndex + 1}',
                                        ),
                                      );
                                      var ib = inputBlock.copyWith(
                                        function: InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name)
                                      );
                                      // 1) Link into this new row
                                      rowInputBlocks.add(ib);

                                      // 2) Also link into the existing column
                                      final column = sheetTableItem.columnData[colIndex];
                                        column.columnInputBlocks.add(ib);
                                      // }


                                      return sheetTableCell;
                                    }),
                                  );

                                  // Finally register the new row itself
                                  sheetTableItem.rowData.add(
                                    SheetTableRow(
                                      id: 'RW-${Uuid().v4()}',
                                      parentId: sheetTableItem.id,
                                      rowDecoration:
                                          sheetTableItem.sheetTableDecoration.id,
                                      indexPath: rowIndexPath,
                                      rowInputBlocks: rowInputBlocks,
                                    ),
                                  );
                                } else {
                                  // ─── Adding a new COLUMN ─────────────────────────────────
                                  final newColIndex = sheetTableItem.columnData.length;
                                  final colIndexPath = IndexPath(
                                    parent: sheetTableItem.indexPath,
                                    index: newColIndex,
                                  );

                                  // Prepare the InputBlock list for the new column
                                  final colInputBlocks = <InputBlock>[];

                                  // 1) Create the new column
                                  sheetTableItem.columnData.add(
                                    SheetTableColumn(
                                      id: 'CL-${Uuid().v4()}',
                                      parentId: sheetTableItem.id,
                                      size: 50,
                                      columnDecoration:
                                          sheetTableItem.sheetTableDecoration.id,
                                      indexPath: colIndexPath,
                                      columnInputBlocks: colInputBlocks,
                                    ),
                                  );

                                  // 2) For each existing row, add a cell and link into both the column and that row
                                  for (var rowIndex = 0;
                                      rowIndex < sheetTableItem.rowData.length;
                                      rowIndex++) {
                                    final rowIndexPath = IndexPath(
                                      parent: sheetTableItem.indexPath,
                                      index: rowIndex,
                                    );
                                    final newId = 'TX-${Uuid().v4()}';
                                    var itemIndexPath =IndexPath(
                                              parent: rowIndexPath,
                                              index:  sheetTableItem.cellData[rowIndex].length);
                                    final inputBlock = InputBlock(
                                      indexPath: itemIndexPath,
                                      blockIndex: [-2],
                                      id: newId,
                                    );
                                    var sheetTableCell =SheetTableCell(
                                        id:
                                            '${numberToColumnLabel(newColIndex + 1)}${rowIndex + 1}',
                                        parentId: sheetTableItem.id,
                                        indexPath: rowIndexPath,
                                        sheetItem: _addTextField(
                                          id: newId,
                                          parentId: sheetTableItem.id,
                                          textDecoration:
                                              sheetTableItem.sheetTableDecoration,
                                          shouldReturn: true,
                                          isCell: true,
                                          hide: false,
                                          inputBlocks: [inputBlock],
                                          name:
                                              '${numberToColumnLabel(newColIndex + 1)}${rowIndex + 1}',
                                          indexPath:itemIndexPath,
                                        ),
                                      );
                                    // inputBlock.function = InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name);
                                     var ib = inputBlock.copyWith(
                                        function: InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name)
                                      ); 
                                    // link into the new column
                                    colInputBlocks.add(ib);

                                    // link into the existing row
                                    sheetTableItem.rowData[rowIndex]
                                        .rowInputBlocks
                                        .add(ib);

                                    sheetTableItem.cellData[rowIndex].add(
                                      sheetTableCell
                                    );
                                  }
                                }
                                //when you clear blocks it will also clear the useConst data, every other field can be relinked but useConst would be lost
                                final Map<String, bool> useConstById = {};
                                // Rows
                                for (final row in sheetTableItem.rowData) {
                                  for (final ib in row.rowInputBlocks) {
                                    useConstById[ib.id] = ib.useConst;
                                    // print('useConst: ${useConstById[ib.id]}, row: $row, cell: ${ib.id}');
                                      
                                  }
                                }
                                // print('========');
                                      

                                // Columns
                                for (final col in sheetTableItem.columnData) {
                                  for (final ib in col.columnInputBlocks) {
                                    useConstById[ib.id] = ib.useConst;
                                  }
                                }
                                // for (final row in sheetTableItem.rowData) row.rowInputBlocks.clear();
                                for (final col in sheetTableItem.columnData) col.columnInputBlocks.clear();

                                  for (int r = 0; r < sheetTableItem.cellData.length; r++) {
                                    for (int c = 0; c < sheetTableItem.cellData[r].length; c++) {
                                      final cell = sheetTableItem.cellData[r][c];
                                      // print('At: '+cell.id+' '+sheetTableItem.rowData[r].rowInputBlocks.toString()+' '+sheetTableItem.columnData[c].columnInputBlocks.toString());
                                      
                                      if (cell.sheetItem is! SheetText) continue;
                                      // print('useConst: ${useConstById[cell.sheetItem.id]}, row: $r, cell: ${cell.id}');
                                      // sheetTableItem.rowData[r].rowInputBlocks.add(
                                      //   InputBlock(indexPath: cell.sheetItem.indexPath, blockIndex: [-2], id: cell.sheetItem.id, useConst: useConstById[cell.sheetItem.id] ?? true,
                                      //   function: InputBlockFunction(inputBlocks: (cell.sheetItem as SheetText).inputBlocks, label: (cell.sheetItem as SheetText).name)
                                      //   ));
                                      sheetTableItem.columnData[c].columnInputBlocks.add(
                                        InputBlock(indexPath: cell.sheetItem.indexPath, blockIndex: [-2], id: cell.sheetItem.id, useConst: useConstById[cell.sheetItem.id] ?? true,
                                        function: InputBlockFunction(inputBlocks: (cell.sheetItem as SheetText).inputBlocks, label: (cell.sheetItem as SheetText).name)));
                                      // print('At: '+cell.id+' '+sheetTableItem.rowData[r].rowInputBlocks.toString()+' '+sheetTableItem.columnData[c].columnInputBlocks.toString());
                                      

                                    }
                                  }

                                  });
                                },
                                child: Icon(
                                  TablerIcons.plus,
                                  size:23,
                                ),
                              ),
                            ),
                          ),
                          Icon(
                            axis == 0? TablerIcons.layout_rows : TablerIcons.layout_columns,
                            size:24,
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                              Text(
                              axis==0? 'rows ':'columns ',
                              maxLines: 1,
                              style: GoogleFonts.lexend(
                                height: 0.7,
                                fontSize:20,
                                letterSpacing: -1,
                                fontWeight: FontWeight.w500),
                              ),
                              // const SizedBox(
                              //   height:4
                              // ),
                              // Text(
                              // '  id: '+ (axis==0? sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].id:sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].id),
                              //   maxLines: 1,
                              //   overflow: TextOverflow.ellipsis,
                              //   textAlign: TextAlign.center,
                              //   style: GoogleFonts.lexend(
                              //     height: 0.8,
                              //     fontSize: 8,
                              //     letterSpacing: -1,
                              //     fontWeight: FontWeight.w500),
                              // ),                        
                            ],
                          ),
                          SizedBox(
                            width: 2,
                          ),
                        ],
                      ),
                    ),
                    //Properties of AXIS editor, textfields and decor display
                    Positioned(
                        left: 35,
                        top: 40,
                        height:100,
                        width:width - 43,
                        child: Container(
                          // padding: EdgeInsets.all(5),
                          decoration: BoxDecoration(
                          color:defaultPalette.secondary,
                          borderRadius: BorderRadius.circular(15),
                          // border: Border.all(color: defaultPalette.extras[0], width: 0.5)
                          ),
                          child: Column(
                            children: [
                               const SizedBox(
                                  height:10
                                ),
                                ...axis==0?
                                [
                                Row(children:tablePropertyTile(2,' size', TablerIcons.ruler_measure_2)),
                                Row(children:tablePropertyTile(3,' min', TablerIcons.point_filled)),
                                Row(children:tablePropertyTile(4,' max', TablerIcons.circle)),
                                ]
                                :
                                [
                                Row(children:tablePropertyTile(5,' size', TablerIcons.ruler_measure)),
                                Row(children:tablePropertyTile(6,' min', TablerIcons.point_filled)),
                                Row(children:tablePropertyTile(7,' max', TablerIcons.circle)),
                                ],
                                Container(
                                        margin: EdgeInsets.all(2),
                                        decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(10), 
                                        color:defaultPalette.secondary,
                                        // border: Border.all(
                                        //   width:0.2
                                        // ),
                                        ),
                                        child: AnimatedToggleSwitch<bool>.dual(
                                          current:axis==0?sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].hide: sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].hide,
                                          first: false,
                                          second: true,
                                          onChanged: (value) {
                                            setState(() {
                                              if(axis==0) sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].hide = value;
                                              else sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].hide = value;
                                              
                                            
                                            });
                                          },
                                          animationCurve: Curves.easeInOutExpo,
                                          animationDuration: Durations.medium4,
                                          borderWidth: 2, // backgroundColor is set independently of the current selection
                                          styleBuilder: (value) => ToggleStyle(
                                              borderRadius: BorderRadius.circular(10),
                                              indicatorBorderRadius: BorderRadius.circular(15),
                                              borderColor: defaultPalette.extras[0],
                                              backgroundColor: defaultPalette.extras[0],
                                              indicatorBorder:
                                                  Border.all(
                                                    width: 1.2,
                                                    color: defaultPalette.extras[0]),
                                              indicatorColor: defaultPalette
                                                  .primary), // indicatorColor changes and animates its value with the selection
                                          iconBuilder: (value) {
                                            return Icon(
                                                value == false
                                                    ? Icons.remove_red_eye_outlined
                                                    : TablerIcons.eye_closed,
                                                size: 15,
                                                color: defaultPalette.extras[0]);
                                          },
                                          textBuilder: (value) {
                                            return Text(
                                              value == false ? 'visible' : 'hidden',
                                              style: GoogleFonts.lexend(
                                              letterSpacing: -1,
                                              fontWeight: FontWeight.w400,
                                              fontSize: 12,
                                              color: defaultPalette.primary),
                                            );
                                          },
                                          height: 20,
                                          spacing: (width) - 100,
                                        ),
                                      ),
                                const SizedBox(
                                  height:3
                                ),
                              
                            ],
                          ),
                        )),
                    //THE LAYERS AND SCROLLBAR OF SHADOWLAYERS IN DECORATION EDITOR
                    Positioned(
                      top: 42,
                      left:2,
                      child: Column(
                        children: [
                          SizedBox(
                            width: 31,
                            height: 78,
                            child: ScrollConfiguration(
                              behavior: ScrollBehavior()
                                  .copyWith(scrollbars: false),
                              child: DynMouseScroll(
                                  durationMS: 500,
                                  scrollSpeed: 1,
                                  builder: (context, controller, physics) {
                                    return ScrollbarUltima(
                                      alwaysShowThumb: true,
                                      controller: controller,
                                      scrollbarPosition:
                                          ScrollbarPosition.left,
                                      backgroundColor: defaultPalette.primary,
                                      scrollbarLength:78,
                                      isDraggable: true,
                                      maxDynamicThumbLength: 60,
                                      thumbBuilder:
                                          (context, animation, widgetStates) {
                                        return Container(
                                          margin:EdgeInsets.only(top:0),
                                          decoration: BoxDecoration(
                                              border: Border.all(color: defaultPalette.extras[3],),
                                              color: defaultPalette.extras[3],
                                              borderRadius:
                                                  BorderRadius.circular(2)),
                                          width: 5,
                                        );
                                      },
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(left: 7.0),
                                        child: ReorderableListView(
                                          onReorder: (oldIndex, newIndex) {
                                            setState(() {
                                              
                                            });
                                          },
                                          proxyDecorator:
                                              (child, index, animation) {
                                            return child;
                                          },
                                          buildDefaultDragHandles: false,
                                          physics: physics,
                                          scrollController: controller,
                                          children: [
                                          for (int i = 0;
                                              i < (axis==0?sheetTableItem.rowData.length:sheetTableItem.columnData.length);
                                              i++)
                                          ReorderableDragStartListener(
                                            index: i,
                                            key: ValueKey(i),
                                            child: ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              child: Padding(
                                                padding: EdgeInsets.only(bottom: 0),
                                                child: Material(
                                                  color: defaultPalette.transparent,
                                                  child: InkWell(
                                                    hoverColor: defaultPalette.extras[3],
                                                    splashColor:
                                                        defaultPalette
                                                            .extras[3],
                                                    highlightColor:
                                                        defaultPalette
                                                            .extras[3],
                                                    onTap: () {
                                                      setState(() {
                                                        if (axis==0) {
                                                          sheetTableVariables.rowLayerIndex = i;
                                                        } else {
                                                          sheetTableVariables.columnLayerIndex = i;
                                                        }
                                                      });
                                                    },
                                                    child: Container(
                                                      margin:
                                                          EdgeInsets.only( bottom:1,
                                                              right: 1),
                                                      padding:
                                                          EdgeInsets.only(
                                                        left: 1,
                                                      ),
                                                      decoration:
                                                        BoxDecoration(
                                                            border: (axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? Border
                                                                    .all(
                                                                      color: defaultPalette.extras[3],
                                                                    )
                                                                //   top: BorderSide(), bottom: BorderSide(),left: BorderSide(), right: BorderSide.none
                                                                // )
                                                                : null,
                                                            color: (axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? defaultPalette
                                                                    .extras[3]
                                                                : null,
                                                            borderRadius:
                                                                BorderRadius.circular(
                                                                    5)),
                                                      child: Text(
                                                        ' ${axis ==0? i+1:numberToColumnLabel(i+1)}',
                                                        style: GoogleFonts.lexend(
                                                            fontSize: axis==0? 17:15,
                                                            letterSpacing:
                                                                -1,
                                                            color:(axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? defaultPalette.primary: defaultPalette
                                                                .extras[0]),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                          ],
                                        ),
                                      ),
                                    );
                                  }),
                              ),
                            ),
                            SizedBox(
                              height: 2,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.secondary,
                                      splashColor: defaultPalette.secondary,
                                      highlightColor: defaultPalette.secondary,
                                      onTap: () async {
                                        // print('yo is this even Wokring');
                                        setState(() {
                                          final Map<String, bool> useConstById = {};
                                          FocusManager.instance.primaryFocus?.unfocus();
                                          Future.delayed(Duration(milliseconds: 30));
                                          if(sheetTableVariables.columnLayerIndex == item.indexPath.index || sheetTableVariables.rowLayerIndex == item.indexPath.parent?.index){
                                            panelIndex.id = sheetTableItem.cellData[0][0].sheetItem.id;
                                            panelIndex.itemIndexPath = sheetTableItem.cellData[0][0].sheetItem.indexPath;
                                          }
                                           if (axis == 0 && sheetTableItem.rowData.length>1 ) {
                                            
                                            // Rows
                                            for (final row in sheetTableItem.rowData) {
                                              for (final ib in row.rowInputBlocks) {
                                                useConstById[ib.id] = ib.useConst;
                                              }
                                            }

                                            // Columns
                                            for (final col in sheetTableItem.columnData) {
                                              for (final ib in col.columnInputBlocks) {
                                                if (useConstById[ib.id] != false) {
                                                  useConstById[ib.id] = ib.useConst;
                                                }
                                              }
                                            }
                                          sheetTableItem.rowData.removeAt(sheetTableVariables.rowLayerIndex);
                                          sheetTableItem.cellData.removeAt(sheetTableVariables.rowLayerIndex);
                                          
                                          // 2) Now **rebuild** every row/column indexPath from scratch:
                                          for (var rowIdx = 0; rowIdx < sheetTableItem.rowData.length; rowIdx++) {
                                            // update the row itself:
                                            sheetTableItem.rowData[rowIdx].indexPath.index = rowIdx;

                                            // update each cell in that row:
                                            for (var colIdx = 0; colIdx < sheetTableItem.cellData[rowIdx].length; colIdx++) {
                                              
                                              final cell = sheetTableItem.cellData[rowIdx][colIdx];
                                              cell.indexPath.index = rowIdx;
                                              final rowIndexPath = cell.indexPath;
                                              if (cell.sheetItem is SheetText) {
                                                final st = cell.sheetItem as SheetText;
                                                // st.indexPath.index = ;
                                                // also update any self-linked InputBlock
                                                
                                              }
                                            }
                                          }
                                          

                                          if (sheetTableVariables.rowLayerIndex == sheetTableItem.rowData.length) {
                                            sheetTableVariables.rowLayerIndex--;
                                          }

                                         } else if(axis == 1 &&sheetTableItem.columnData.length>1 ){
                                          
                                          // Columns
                                          for (final col in sheetTableItem.columnData) {
                                            for (final ib in col.columnInputBlocks) {
                                              useConstById[ib.id] = ib.useConst;
                                            }
                                          }
                                          // Rows
                                          for (final row in sheetTableItem.rowData) {
                                            for (final ib in row.rowInputBlocks) {
                                              if (useConstById[ib.id] != false) {
                                                useConstById[ib.id] = ib.useConst;
                                              }
                                            }
                                          }

                                          sheetTableItem.columnData.removeAt(sheetTableVariables.columnLayerIndex);
                                          for (var i = 0; i < sheetTableItem.rowData.length; i++) {
                                            sheetTableItem.cellData[i].removeAt(sheetTableVariables.columnLayerIndex);
                                          }

                                          for (var rowIdx = 0; rowIdx < sheetTableItem.rowData.length; rowIdx++) {
                                            // update the row itself:
                                            sheetTableItem.rowData[rowIdx].indexPath.index = rowIdx;

                                            // update each cell in that row:
                                            for (var colIdx = 0; colIdx < sheetTableItem.cellData[rowIdx].length; colIdx++) {
                                              
                                              final cell = sheetTableItem.cellData[rowIdx][colIdx];
                                              cell.indexPath.index = rowIdx;
                                              if (cell.sheetItem is SheetText) {
                                                final st = cell.sheetItem as SheetText;
                                                st.indexPath.index = colIdx;
                                                // st.indexPath.index = ;
                                                // also update any self-linked InputBlock
                                                
                                              }
                                            }
                                          }

                                         }
                                         
                                          
                                         
                                          if (sheetTableVariables.columnLayerIndex == sheetTableItem.columnData.length) {
                                            sheetTableVariables.columnLayerIndex--;
                                          }
                                        reassignCellIds(sheetTableItem); 
                                        for (final row in sheetTableItem.rowData) row.rowInputBlocks.clear();
                                        for (final col in sheetTableItem.columnData) col.columnInputBlocks.clear();

                                         for (int r = 0; r < sheetTableItem.cellData.length; r++) {
                                            for (int c = 0; c < sheetTableItem.cellData[r].length; c++) {
                                              final cell = sheetTableItem.cellData[r][c];
                                              // print('At: '+cell.id+' '+sheetTableItem.rowData[r].rowInputBlocks.toString()+' '+sheetTableItem.columnData[c].columnInputBlocks.toString());
                                              
                                              if (cell.sheetItem is! SheetText) continue;
                                                sheetTableItem.rowData[r].rowInputBlocks.add(
                                                  InputBlock(indexPath: cell.sheetItem.indexPath, blockIndex: [-2], id: cell.sheetItem.id,
                                                  useConst: useConstById[cell.sheetItem.id] ?? true,
                                                  function: InputBlockFunction(inputBlocks: (cell.sheetItem as SheetText).inputBlocks, label: (cell.sheetItem as SheetText).name)
                                                  ));
                                                sheetTableItem.columnData[c].columnInputBlocks.add(
                                                  InputBlock(indexPath: cell.sheetItem.indexPath, blockIndex: [-2], id: cell.sheetItem.id,useConst: useConstById[cell.sheetItem.id] ?? true,
                                                  function: InputBlockFunction(inputBlocks: (cell.sheetItem as SheetText).inputBlocks, label: (cell.sheetItem as SheetText).name)
                                                  ));
                                              // print('At: '+cell.id+' '+sheetTableItem.rowData[r].rowInputBlocks.toString()+' '+sheetTableItem.columnData[c].columnInputBlocks.toString());
                                              

                                            }
                                          }
                                          for (final row in sheetTableItem.rowData) print('row :'+row.rowInputBlocks.toString());
                                          for (final col in sheetTableItem.columnData) print('col :'+col.columnInputBlocks.toString());
                                         
                                         _findItem();
                                         whichPropertyTabIsClicked = 4;
                                        });
                                         
                                        //  print(sheetTableItem.cellData.toString());
                                        await Future.delayed(Duration(milliseconds: 30));
                                      
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:  BorderRadius.circular(5),
                                              color:  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.trash,
                                            size: 18,
                                          )),
                                    ),
                                  ),
                                ),
                                
                              ],
                            )
                          
                          ],
                        )),
                      ],
                    );             
              }

              return Stack(
                children:[
                  Positioned.fill(
                    child: AnimatedContainer(
                      duration: Durations.short3,
                      margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color:whichTablePropertyTabIsClicked==2? defaultPalette.primary: defaultPalette.secondary,
                        border: Border.all(width: 2),
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                  ),
                  Positioned.fill(
                    child: AnimatedOpacity(
                      opacity: whichTablePropertyTabIsClicked == index
                          ? 0
                          : index >= (whichTablePropertyTabIsClicked + 2) % 10
                              ? 1
                              : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                      duration: Duration(milliseconds: 300),
                      child: AnimatedContainer(
                        duration: Duration(milliseconds: 300),
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: index == (whichTablePropertyTabIsClicked + 1) % 10
                              ? defaultPalette.extras[0]
                              : index == (whichTablePropertyTabIsClicked + 2) % 10
                                  ? defaultPalette.extras[0]
                                  : defaultPalette.extras[0],
                          border: Border.all(width: 2),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                  ),
                  //GRAPH BEHIND FORMAT CARD
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(25),
                      child: Opacity(
                        opacity: 0.35,
                        child: LineChart(LineChartData(
                          lineBarsData: [LineChartBarData()],
                          titlesData: const FlTitlesData(show: false),
                          gridData: FlGridData(
                            getDrawingVerticalLine: (value) => FlLine(
                              color: defaultPalette.extras[0].withOpacity(whichTablePropertyTabIsClicked==2?0.6:1),
                              dashArray:whichTablePropertyTabIsClicked==2? [2,8]:[5, 5],
                              strokeWidth: 1),
                            getDrawingHorizontalLine: (value) => FlLine(
                              color: defaultPalette.extras[0].withOpacity(whichTablePropertyTabIsClicked==2?0.6:1),
                              dashArray:whichTablePropertyTabIsClicked==2?[2,8]:[5, 5],
                              strokeWidth: 1),
                            show: true,
                            horizontalInterval: whichTablePropertyTabIsClicked==2?3:2,
                            verticalInterval: 30),
                          borderData: FlBorderData(show: false),
                          minY: 0,
                          maxY: 50,
                          maxX: dateTimeNow.millisecondsSinceEpoch
                                      .ceilToDouble() /
                                  500 +
                              250,
                          minX: dateTimeNow.millisecondsSinceEpoch
                                  .ceilToDouble() /
                              500)),
                      ),
                    ),
                  ),
                  
                  if (index == 0) ...[
                    Positioned.fill(
                      child: Padding(
                        padding: EdgeInsets.all(15).copyWith(left: 12, right: 14),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: ScrollConfiguration(
                            behavior: ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                    children: [
                                      // Text(sheetTableItem.indexPath.toString(),
                                      //   maxLines: 1,
                                      //   overflow: TextOverflow.ellipsis,
                                      //   style: GoogleFonts.lexend(
                                      //     height: 0.9,
                                      //     fontSize:18,
                                      //     letterSpacing: -1,
                                      //     fontWeight: FontWeight.w500),
                                      //   ),
                                      //Id of Table and label and decors for cell and bg
                                      Container(
                                      margin: EdgeInsets.only(top:2, left:0, right:0),
                                      padding: EdgeInsets.all(5),
                                      decoration: BoxDecoration(
                                      color:defaultPalette.primary,
                                      borderRadius: BorderRadius.circular(20),
                                      border: Border.all(color: defaultPalette.extras[0], width: 2)
                                      ),
                                      child: Column(
                                        children: [
                                        const SizedBox(
                                          height:3
                                        ),
                                        Row(
                                          children: [
                                            const Icon(TablerIcons.table,
                                              size:30,
                                              weight: 600,
                                            ),
                                            const SizedBox(
                                              width:3
                                            ),
                                            Expanded(
                                              child: Column(
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                mainAxisAlignment: MainAxisAlignment.start,
                                                children: [
                                                  Text('tableProperties',
                                                  maxLines: 1,
                                                  overflow: TextOverflow.ellipsis,
                                                  style: GoogleFonts.lexend(
                                                    height: 0.9,
                                                    fontSize:18,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500),
                                                  ),
                                                  const SizedBox(
                                                    height:4
                                                  ),
                                                  Text(
                                                  'id: '+ (sheetTableItem.id),
                                                    maxLines: 1,
                                                    overflow: TextOverflow.ellipsis,
                                                    textAlign: TextAlign.center,
                                                    style: GoogleFonts.lexend(
                                                      height: 1,
                                                      fontSize: 8,
                                                      letterSpacing: -1,
                                                      fontWeight: FontWeight.w500),
                                                  ),                        
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      // cells and rows and columns count
                                      Container(
                                        padding: EdgeInsets.all(0).copyWith(left:4,right: 4),
                                        height: 25,
                                        decoration: BoxDecoration(
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15),
                                        border: Border.all(
                                          width: 2,
                                          color: defaultPalette.extras[0]),
                                        ),
                                        child:Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            Icon(TablerIcons.border_all, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.columnData.length*sheetTableItem.rowData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                            Container(
                                              height: 35,
                                              width: 2,
                                              color: defaultPalette.extras[0],

                                            ),
                                            SizedBox(width: 2,),
                                            Icon(TablerIcons.layout_rows, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.rowData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                            Container(
                                              height: 35,
                                              width: 2,
                                              color: defaultPalette.extras[0],

                                            ),
                                            SizedBox(width: 2,),
                                            Icon(TablerIcons.layout_columns, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.columnData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                     
                                          ],
                                        ) ,
                                      ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      
                                      //decoration in table properties
                                      Row(
                                        children: [
                                          Expanded(
                                            child: Column(
                                              children: [
                                                  
                                                ElevatedLayerButton(
                                                  onClick: (){
                                                    setState(() {
                                                    whichTableDecorationIsClicked = 0;
                                                    tablePropertyCardsController.setCardIndex(2);
                                                    whichTablePropertyTabIsClicked =2;
                                                    _findSheetTableItem(sheetTableItem, updateVariables: false);
                                                  });
                                                  },
                                                  buttonHeight: 50,
                                                  buttonWidth: (width-12.5)/2,
                                                  borderRadius: BorderRadius.circular(15),
                                                  animationDuration: const Duration( milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    children: [
                                                      Container(
                                                        margin: EdgeInsets.all(4),
                                                        width:35,height:35,
                                                        decoration: BoxDecoration(
                                                          borderRadius: BorderRadius.circular(15),
                                                          border: Border.all()),
                                                        child: ClipRRect(
                                                          borderRadius: BorderRadius.circular(15),
                                                          child: buildDecoratedContainer(
                                                            sheetTableDecoration as SuperDecoration?, 
                                                            SizedBox(
                                                              width:width,
                                                              height:35,
                                                            ),
                                                            true),
                                                        ),
                                                      ),
                                                      Expanded(
                                                        child: Column(
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children: [
                                                            const SizedBox(
                                                              height:2
                                                            ),
                                                            titleTile(
                                                            ' cells ', 
                                                            TablerIcons.sparkles,
                                                            fontSize: 12,
                                                            iconSize:14
                                                            ), 
                                                            Text(
                                                              ' ${sheetTableDecoration?.name?? 'No Decoration'}',
                                                              maxLines: 1,
                                                              textAlign: TextAlign.start,
                                                              overflow: TextOverflow.ellipsis,
                                                              style: GoogleFonts.lexend(
                                                                color: defaultPalette.extras[0],
                                                                fontSize: 15,
                                                                letterSpacing: -1,
                                                                fontWeight: FontWeight.w500),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      
                                                    ],
                                                  ),
                                                  subfac: 2.5,
                                                  depth:2.5,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    border: Border.all(),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                          //bgdecoration in table properties
                                          Expanded(
                                            child: ElevatedLayerButton(
                                              onClick: (){
                                                whichTableDecorationIsClicked = 1;
                                                tablePropertyCardsController.setCardIndex(2);
                                                whichTablePropertyTabIsClicked =2;
                                                _findSheetTableItem(sheetTableItem, updateVariables: false);
                                              },
                                              buttonHeight: 50,
                                              buttonWidth: (width-12.5)/2,
                                              borderRadius: BorderRadius.circular(15),
                                              animationDuration: const Duration( milliseconds: 100),
                                              animationCurve: Curves.ease,
                                              topDecoration: BoxDecoration(
                                                color: Colors.white,
                                                border: Border.all(),
                                              ),
                                              topLayerChild: Row(
                                                children: [
                                                  Container(
                                                    margin: EdgeInsets.all(4),
                                                    width:35,height:35,
                                                    decoration: BoxDecoration(
                                                      borderRadius: BorderRadius.circular(15),
                                                      border: Border.all()),
                                                    child: ClipRRect(
                                                      borderRadius: BorderRadius.circular(15),
                                                      child: buildDecoratedContainer(
                                                        sheetTablebgDecoration as SuperDecoration?, 
                                                        SizedBox(
                                                          width:width,
                                                          height:35,
                                                        ),
                                                        true),
                                                    ),
                                                  ),
                                                    Expanded(
                                                      child: Column(
                                                         crossAxisAlignment: CrossAxisAlignment.start,
                                                      children: [
                                                        const SizedBox(
                                                          height:2
                                                        ),
                                                        titleTile(
                                                        ' bg ', 
                                                        TablerIcons.sparkles,
                                                        fontSize: 12,
                                                        iconSize:14
                                                        ), 
                                                          Text(
                                                            sheetTablebgDecoration?.name ?? 'No Decoration',
                                                            maxLines: 1,
                                                            textAlign: TextAlign.center,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              color: defaultPalette.extras[0],
                                                              fontSize: 15,
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  
                                                ],
                                              ),
                                              subfac: 2.5,
                                              depth:2.5,
                                              baseDecoration: BoxDecoration(
                                                color: defaultPalette.extras[0],
                                                border: Border.all(),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                      
                                      // Row(mainAxisAlignment:MainAxisAlignment.spaceBetween, children:tablePropertyTile(0, 'pinnedRows', TablerIcons.layout_sidebar)),
                                      const SizedBox(
                                            height:6
                                          ),
                                      //SheetTable 'label'
                                      Row(
                                        children: [
                                          Expanded(child: titleTile('label', TablerIcons.signature, fontSize:15)),
                                          Expanded(
                                            child: SizedBox(
                                              height: 20,
                                              child: TextField(
                                                // focusNode: fontFocusNodes[6],
                                                controller: tableTextControllers[10],
                                                onSubmitted: (value) {
                                                  RequiredText itemSheetLabel = labelList.firstWhere(
                                                    (rt) => rt.name == 'itemSheet',
                                                    orElse: () => RequiredText(name: '', sheetTextType: 0, indexPath:IndexPath(index: -567), isOptional:true),
                                                  );
                                                  if (itemSheetLabel.indexPath.index != -567 && value == itemSheetLabel.name) {
                                                    if (itemSheetLabel.indexPath.index == -951) {
                                                      // Not assigned yet, assign this table to it
                                                      setState(() {
                                                        itemSheetLabel.indexPath = sheetTableItem.indexPath;
                                                        sheetTableItem.name = value;
                                                      });
                                                    } else {
                                                      final existingItem = getItemAtPath(itemSheetLabel.indexPath);

                                                      if (existingItem is! SheetTable) {
                                                        // Reassign because previous assignment was not a SheetTable
                                                        setState(() {
                                                          itemSheetLabel.indexPath = sheetTableItem.indexPath;
                                                          sheetTableItem.name = value;
                                                        });
                                                      }
                                                      // Else: already assigned to another SheetTable, so do nothing
                                                    }
                                                  } else {
                                                    // Normal rename case
                                                    setState(() {
                                                      sheetTableItem.name = value;
                                                    });
                                                  }

                                                  
                                                    // print('its '+requiredText.name);
                                                    if (itemSheetLabel.indexPath.index != -567) {
                                                      print('imhere');
                                                      final existingItem = getItemAtPath(itemSheetLabel.indexPath);
                                                      
                                                      if (existingItem is! SheetTable || existingItem.name != 'itemSheet') {
                                                        // Reassign because previous assignment was not a SheetTable
                                                        setState(() {
                                                          itemSheetLabel.indexPath = IndexPath(index: -951);
                                                        });
                                                        print(labelList);
                                                      }
                                                    }
                                                    //  print('its '+requiredText.indexPath.toString());
                                                    
                                                  
                                                },

                                                textAlignVertical: TextAlignVertical.top,
                                                textAlign: TextAlign.end,
                                                cursorColor: defaultPalette.tertiary,
                                                decoration: InputDecoration(
                                                  contentPadding: const EdgeInsets.only(left: 2),
                                                  labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                                  hoverColor: defaultPalette.transparent,
                                                  filled: true,
                                                  fillColor: defaultPalette.transparent,
                                                  border: InputBorder.none,
                                                  enabledBorder: OutlineInputBorder(
                                                    borderSide: BorderSide.none,
                                                  ),
                                                  disabledBorder: OutlineInputBorder(
                                                    borderSide: BorderSide.none,
                                                  ),
                                                  focusedBorder: OutlineInputBorder(
                                                    borderSide: BorderSide.none,
                                                    borderRadius: BorderRadius.circular(12),
                                                  ),
                                                ),
                                                style: GoogleFonts.lexend(
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500,
                                                    fontSize: 14,
                                                    color: defaultPalette.black),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width:2)  
                                        ],
                                      ), 
                                      const SizedBox(
                                            height:4
                                          ),
                                      //'fit overflow'
                                      Container(
                                        margin: EdgeInsets.all(2),
                                        decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(10), 
                                        color:defaultPalette.secondary,
                                        border: Border.all(
                                          width:0.2
                                        ),),
                                        child: AnimatedToggleSwitch<bool>.dual(
                                          current: sheetTableItem.expand,
                                          first: true,
                                          second: false,
                                          onChanged: (value) {
                                            setState(() {
                                              sheetTableItem.expand = value;    
                                            });
                                          },
                                          animationCurve: Curves.easeInOutExpo,
                                          animationDuration: Durations.medium4,
                                          borderWidth:
                                              2, // backgroundColor is set independently of the current selection
                                          styleBuilder: (value) => ToggleStyle(
                                              borderRadius: BorderRadius.circular(10),
                                              indicatorBorderRadius: BorderRadius.circular(15),
                                              borderColor: defaultPalette.secondary,
                                              backgroundColor: defaultPalette.secondary,
                                              indicatorBorder:
                                                  Border.all(
                                                    width: 1.2,
                                                    color: defaultPalette.extras[0]),
                                              indicatorColor: defaultPalette
                                                  .primary), // indicatorColor changes and animates its value with the selection
                                          iconBuilder: (value) {
                                            return Icon(
                                                value == false
                                                    ? TablerIcons.wind
                                                    : TablerIcons.ripple,
                                                size: 15,
                                                color: defaultPalette.extras[0]);
                                          },
                                          textBuilder: (value) {
                                            return Text(
                                              value == false ? 'overflow' : 'fit',
                                              style: GoogleFonts.lexend(
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500,
                                                    fontSize: 14,
                                                    color: defaultPalette.black),
                                            );
                                          },
                                          height: 30,
                                          spacing: (width) - 100,
                                        ),
                                      ),
                                      
                                      const SizedBox(
                                            height:4
                                          )
                                      
                                      ],
                                      ),
                                      ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      
                                      //row and column property cards
                                      ...[
                                          tableAxisCard(0),
                                          const SizedBox(
                                            height:8
                                          ),
                                          tableAxisCard(1) 
                                      ],
                                      const SizedBox(
                                            height:5
                                          ),
                                      ],
                                  ));
                              }
                            )
                          )
                        )
                      )
                    )
                  ],
                  
                  if(index==1) ...[
                    Positioned.fill(
                      child: Padding(
                        padding: EdgeInsets.all(15).copyWith(left: 12, right: 14),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: ScrollConfiguration(
                            behavior: ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                      children:[
                                        Container(
                                        margin: EdgeInsets.only(top:4, left:2, right:2),
                                        padding: EdgeInsets.all(5),
                                        decoration: BoxDecoration(
                                        color:defaultPalette.primary,
                                        borderRadius: BorderRadius.circular(20),
                                        border: Border.all(color: defaultPalette.extras[0], width: 2)),
                                        child:  Stack(
                                          children: [
                                            // Text(sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].indexPath.toString(),
                                            //       maxLines: 1,
                                            //       overflow: TextOverflow.ellipsis,
                                            //       style: GoogleFonts.lexend(
                                            //         height: 0.9,
                                            //         fontSize:18,
                                            //         letterSpacing: -1,
                                            //         fontWeight: FontWeight.w500),
                                            //       ),
                                            Positioned(
                                              right:0,
                                              child: Text((sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].id),
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      textAlign: TextAlign.center,
                                                      style: GoogleFonts.mitr(
                                                        color:defaultPalette.extras[0].withOpacity(0.1),
                                                        height: 1,
                                                        fontSize:90,
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500),
                                                    ),
                                            ),   
                                            Column(
                                            children: [
                                            const SizedBox(
                                              height:3
                                            ),
                                            Row(
                                              children: [
                                                const Icon(TablerIcons.border_all,
                                                  size:30,
                                                  weight: 600,
                                                ),
                                                const SizedBox(
                                                  width:3
                                                ),
                                                //title and id of cell data
                                                Expanded(
                                                  child: Column(
                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                    mainAxisAlignment: MainAxisAlignment.start,
                                                    children: [
                                                      Text('cellProperties',
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      style: GoogleFonts.lexend(
                                                        height: 0.9,
                                                        fontSize:18,
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500),
                                                      ),                  
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                            const SizedBox(
                                                height:8
                                              ),     
                                          // Row(mainAxisAlignment:MainAxisAlignment.spaceBetween, children:tablePropertyTile(0, 'pinnedRows', TablerIcons.layout_sidebar)),
                                          Row(children:tablePropertyTile(8, ' rowSpan', TablerIcons.table_row)),
                                          Row(children:tablePropertyTile(9, ' colSpan', TablerIcons.table_column)),
                                          const SizedBox( height:4 ),
                                          
                                          
                                          ],
                                          ),
                                          ],
                                        ),
                                        ),
                                      ],
                                    ),
                                 );
                               }
                             ),
                           ),
                         ),
                       ),
                     )
                  ],
                  
                  if (index == 2) ...[
                  ...buildSuperDecorationSwiperInterface(
                    whichTableDecorationIsClicked ==0
                    ? tableDecorationPath
                    : whichTableDecorationIsClicked ==1
                    ? tablebgDecorationPath
                    : whichTableDecorationIsClicked ==2
                    ? rowDecorationPath
                    : columnDecorationPath
                    , 
                    whichTableDecorationIsClicked ==0
                    ? tableDecorationNameController
                    : whichTableDecorationIsClicked ==1
                    ? tablebgDecorationNameController
                    : whichTableDecorationIsClicked ==2
                    ? rowDecorationNameController
                    : columnDecorationNameController
                    
                    ),
                  ],
                  
                ]
              );
            },
            )
        );
      default:
    }

    return FadeInRight(
      from: 3,
      duration: Durations.short3,
      child: AppinioSwiper(
        backgroundCardCount: 1,
        backgroundCardOffset: Offset(4, 4),
        duration: Duration(milliseconds: 150),
        backgroundCardScale: 1,
        loop: true,
        cardCount: spreadSheetList.length < 2 ? 2 : spreadSheetList.length,
        allowUnSwipe: true,
        allowUnlimitedUnSwipe: true,
        initialIndex: currentPageIndex,
        controller: propertyCardsController,
        onCardPositionChanged: (position) {
          setState(() {
            _cardPosition = position.offset.dx.abs() + position.offset.dy.abs();
          });
        },
        onSwipeEnd: (a, b, direction) {
          // print(direction.toString());
          setState(() {
            ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
            if (_cardPosition > 50) {
              currentPageIndex = (currentPageIndex + 1) % pageCount;
            }
            // _currentCardIndex = b;
            _cardPosition = 0;
          });
        },
        onSwipeCancelled: (activity) {},
        cardBuilder: (BuildContext context, int index) {
          int currentCardIndex = ref.watch(propertyCardIndexProvider);
          int ind = pageCount <= 1 ? 0 : index;
          List<TextEditingController> pageFormatControllers = [
            TextEditingController()
              ..text = (documentPropertiesList[currentPageIndex].pageFormatController.width * pageUnit)
                  .toStringAsFixed(2),
            TextEditingController()
              ..text = (documentPropertiesList[currentPageIndex].pageFormatController.height * pageUnit)
                  .toStringAsFixed(2),
          ];
          List<TextEditingController> pageMarginControllers = [
            documentPropertiesList[currentPageIndex].marginAllController,
            documentPropertiesList[currentPageIndex].marginTopController,
            documentPropertiesList[currentPageIndex].marginBottomController,
            documentPropertiesList[currentPageIndex].marginLeftController,
            documentPropertiesList[currentPageIndex].marginRightController,
          ];

          TextEditingController pgHexController = TextEditingController(
              text: '#${colorToHex(documentPropertiesList[ind].pageColor)}');
          final widthBig = (sWidth * wH2DividerPosition);
          
          List<Widget> pagePropertyTile(int s) {
                return [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                         fontFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? pageUnit==1?100:10
                            : HardwareKeyboard.instance.isShiftPressed
                                ?pageUnit==1?0.5: 0.1
                                :pageUnit==1?10: 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(pageFormatControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                               0
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(4))/pageUnit;
                          switch (s) {
                            case 0:
                              documentPropertiesList[currentPageIndex].pageFormatController = PdfPageFormat( parsedValue, documentPropertiesList[currentPageIndex].pageFormatController.height);
                              
                              break;
                            case 1:
                              documentPropertiesList[currentPageIndex].pageFormatController = PdfPageFormat( documentPropertiesList[currentPageIndex].pageFormatController.width, parsedValue);
                            case 2:

                              break;   
                            default:
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            s == 0 
                            ? TablerIcons.ruler_measure
                            : s==1
                            ? TablerIcons.ruler_measure_2
                            : s==2
                            ? TablerIcons.spacing_horizontal
                            : TablerIcons.spacing_vertical,
                            size: 16,
                          ),
                          Text(
                            s == 0 
                            ? ' width ' 
                            : s==1
                            ? ' height '
                            : s==2
                            ? ' word '
                            : ' line ',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        onTapOutside: (event) => fontFocusNodes[s].unfocus(),
                        focusNode: fontFocusNodes[s],
                        controller: pageFormatControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            fontWeight: FontWeight.w400,
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            print(value);
                          var parsedValue = (double.tryParse(value)??0.0)/pageUnit;
                          switch (s) {
                            case 0:
                              documentPropertiesList[currentPageIndex].pageFormatController = PdfPageFormat( parsedValue, documentPropertiesList[currentPageIndex].pageFormatController.height);
                              
                              break;
                            case 1:
                              documentPropertiesList[currentPageIndex].pageFormatController = PdfPageFormat( documentPropertiesList[currentPageIndex].pageFormatController.width, parsedValue);
                              
                              break;   
                            default:
                          }
                            

                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 4,
                  ),
                  MouseRegion(
                    cursor: SystemMouseCursors.click,
                    child: GestureDetector(
                      onTap: () {
                        setState(() {
                          switch (pageUnit) {
                            case 1:
                              pageUnit = 1/72;
                              break;
                            case const (1/72):
                              pageUnit = 0.03528;
                              break;
                            case 0.03528:
                            pageUnit =  1;
                              break;
                              
                            default:
                          }
                        });
                      },
                      child: Text(
                        pageUnit ==1
                      ? 'pt'
                      : pageUnit == 1 / 72
                      ? 'in'
                      : pageUnit == 0.03528
                      ? 'cm'
                      : '',
                      style:GoogleFonts.lexend(
                        fontSize:13,
                        fontWeight: FontWeight.w600,
                        letterSpacing:-1,
                      )
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ];
                }
          List<Widget> pageMarginTile(int s) {
                return [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                        pageMarginFocusNodes[s].unfocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? 10
                            : HardwareKeyboard.instance.isShiftPressed
                                ? 0.5
                                : 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(pageMarginControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                                0
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(4));
                          switch (s) {
                            case 0:
                              documentPropertiesList[currentPageIndex]
                                  .marginAllController
                                  .text = newValue.toStringAsFixed(4);
                              documentPropertiesList[currentPageIndex]
                                  .marginTopController
                                  .text = newValue.toStringAsFixed(4);
                              documentPropertiesList[
                                      currentPageIndex]
                                  .marginBottomController
                                  .text = newValue.toStringAsFixed(4);
                              documentPropertiesList[
                                      currentPageIndex]
                                  .marginLeftController
                                  .text = newValue.toStringAsFixed(4);
                              documentPropertiesList[
                                      currentPageIndex]
                                  .marginRightController
                                  .text = newValue.toStringAsFixed(4);
                              break;
                            case 1:
                              pageMarginControllers[s].text = newValue.toStringAsFixed(4);
                              break;   
                            default:
                              pageMarginControllers[s].text = newValue.toStringAsFixed(4);
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            s == 0 
                            ? TablerIcons.box_margin
                            : s==1
                            ? TablerIcons.box_align_bottom
                            : s==2
                            ? TablerIcons.box_align_top
                            : s==2
                            ? TablerIcons.box_align_right
                            : TablerIcons.box_align_left,
                            size: 16,
                          ),
                          Text(
                            s == 0 
                            ? ' margin ' 
                            : s==1
                            ? ' top '
                            : s==2
                            ? ' bottom '
                            : s==3
                            ? ' left '
                            : ' right ',
                            style: GoogleFonts.lexend(
                                fontSize: 15,
                                letterSpacing: -1,
                                fontWeight: FontWeight.w600,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        onTapOutside: (event) => pageMarginFocusNodes[s].unfocus(),
                        obscureText: s==0? documentPropertiesList[currentPageIndex].useIndividualMargins: false,
                        focusNode: pageMarginFocusNodes[s],
                        controller: pageMarginControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            fontWeight: FontWeight.w400,
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            print(value);
                          var parsedValue = double.tryParse(value)??0.0;
                          switch (s) {
                            case 0:
                              documentPropertiesList[currentPageIndex]
                            .marginAllController.text = value;
                            documentPropertiesList[currentPageIndex]
                                .marginTopController
                                .text = value;
                            documentPropertiesList[currentPageIndex]
                                .marginBottomController
                                .text = value;
                            documentPropertiesList[ currentPageIndex]
                                .marginLeftController
                                .text = value;
                            documentPropertiesList[currentPageIndex]
                                .marginRightController
                                .text = value;
                              
                              break;
                            case 1:
                              pageMarginControllers[s].text = value;
                              
                              break;   
                            default:
                              pageMarginControllers[s].text = value;
                          }
                            

                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ];
                }

          return Stack(
            children: [
              Positioned.fill(
                child: AnimatedContainer(
                  duration: Durations.short3,
                  margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border.all(width: 2),
                    borderRadius: BorderRadius.circular(25),
                  ),
                ),
              ),

              Positioned.fill(
                child: AnimatedOpacity(
                  opacity: currentCardIndex == index
                      ? 0
                      : index >= (currentCardIndex + 2) % 10
                          ? 1
                          : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                  duration: Duration(milliseconds: 300),
                  child: AnimatedContainer(
                    duration: Duration(milliseconds: 300),
                    margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      color: index == (currentCardIndex + 1) % 10
                          ? defaultPalette.extras[0]
                          : index == (currentCardIndex + 2) % 10
                              ? defaultPalette.extras[0]
                              : defaultPalette.extras[0],
                      border: Border.all(width: 2),
                      borderRadius: BorderRadius.circular(25),
                    ),
                  ),
                ),
              ),

              // PROPERTIES Tab Parent
              Positioned.fill(
                top: 0,
                child: Container(
                  padding: EdgeInsets.only(top: 0, left: 0, right: 0, bottom: 0),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(25),
                    color: defaultPalette.transparent,
                  ),
                  margin: EdgeInsets.all(15),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(15),
                    child: PieCanvas(
                      child: ScrollConfiguration(
                        behavior: ScrollBehavior().copyWith(scrollbars: false),
                        child: DynMouseScroll(
                          durationMS: 500,
                          scrollSpeed: 1,
                          builder: (context, controller, physics) {
                            return SingleChildScrollView(
                              controller: controller,
                              physics: physics,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  SizedBox(height:4),
                                  //MINI PREVIEW AND PAGE NUMBER AND NEXTPREV PARENT PARENT
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      //PAGE PROPERTIES FOR {{{MINI PAGE RENDER}}}
                                      Container(
                                        height: 120,
                                        width: 95,
                                        alignment: Alignment.center,
                                        child: Stack(
                                          children: [
                                            //{{{GRAPH}}}
                                            ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(25),
                                              child: Container(
                                                height: 120,
                                                // width: ((sWidth * wH2DividerPosition)/2)<150?100:((sWidth * wH2DividerPosition)/2),
                                                width: 95,
                                                decoration: BoxDecoration(
                                                    borderRadius:
                                                        BorderRadius.circular(25),
                                                    border: Border.all(),
                                                    color: defaultPalette.extras[0]
                                                        .withOpacity(0.1)),
                                                child: Opacity(
                                                  opacity: 1,
                                                  child: LineChart(LineChartData(
                                                      lineBarsData: [
                                                        LineChartBarData()
                                                      ],
                                                      titlesData: const FlTitlesData(
                                                          show: false),
                                                      gridData: FlGridData(
                                                          getDrawingVerticalLine: (value) => FlLine(
                                                              color: defaultPalette
                                                                  .extras[0]
                                                                  .withOpacity(0.3),
                                                              dashArray: [5, 5],
                                                              strokeWidth: 1),
                                                          getDrawingHorizontalLine: (value) => FlLine(
                                                              color: defaultPalette
                                                                  .extras[0]
                                                                  .withOpacity(0.3),
                                                              dashArray: [5, 5],
                                                              strokeWidth: 1),
                                                          show: true,
                                                          horizontalInterval: 5,
                                                          verticalInterval: 30),
                                                      borderData:
                                                          FlBorderData(show: false),
                                                      minY: 0,
                                                      maxY: 50,
                                                      maxX: dateTimeNow.millisecondsSinceEpoch
                                                                  .ceilToDouble() /
                                                              500 +
                                                          250,
                                                      minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                                ),
                                              ),
                                            ),
                                            //{{{MINI PAGE}}}
                                            GestureDetector(
                                              onTap: () {
                                                _renderPagePreviewOnProperties();
                                              },
                                              child: Container(
                                                height: documentPropertiesList[
                                                                currentPageIndex]
                                                            .orientationController ==
                                                        pw.PageOrientation.portrait
                                                    ? 100
                                                    : 60,
                                                width: documentPropertiesList[
                                                                currentPageIndex]
                                                            .orientationController ==
                                                        pw.PageOrientation.portrait
                                                    ? 80
                                                    : 80,
                                                margin: const EdgeInsets.only(
                                                    top: 10, left: 8),
                                                decoration: BoxDecoration(
                                                  image: cachedImageData != null
                                                      ? DecorationImage(
                                                          image: MemoryImage(
                                                              cachedImageData!),
                                                          fit: documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .orientationController ==
                                                                  pw.PageOrientation
                                                                      .portrait
                                                              ? BoxFit.fitHeight
                                                              : BoxFit.fitWidth,
                                                        )
                                                      : null,
                                                ),
                                                child: cachedImageData == null
                                                    ? Center(
                                                        child:
                                                            CircularProgressIndicator(),
                                                      )
                                                    : null,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                      //PAGE NUMBER AND DELETE AND NEXT-PREV
                                      Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        // mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                        children: [
                                          if (((sWidth * wH2DividerPosition) -
                                                  145) >
                                              66)
                                            Container(
                                                height: 90,
                                                width:
                                                    (sWidth * wH2DividerPosition) -
                                                        150,
                                                alignment: Alignment.center,
                                                child: CountingAnimation(
                                                    value: (currentPageIndex + 1)
                                                        .toString(),
                                                    scrollCount: 3,
                                                    textStyle:
                                                        GoogleFonts.pressStart2p(
                                                            color: defaultPalette
                                                                .extras[0],
                                                            fontSize: 50))),
                                          Container(
                                            width:
                                                (sWidth * wH2DividerPosition) - 145,
                                            height: (sWidth * wH2DividerPosition) -
                                                        145 >
                                                    66
                                                ? 20
                                                : 120,
                                            child: Flex(
                                              direction:
                                                  (sWidth * wH2DividerPosition) -
                                                              145 >
                                                          66
                                                      ? Axis.horizontal
                                                      : Axis.vertical,
                                              mainAxisAlignment:
                                                  MainAxisAlignment.spaceAround,
                                              crossAxisAlignment:
                                                  (sWidth * wH2DividerPosition) -
                                                              145 >
                                                          66
                                                      ? CrossAxisAlignment.start
                                                      : CrossAxisAlignment.center,
                                              children: [
                                                if ((sWidth * wH2DividerPosition) -
                                                        145 <
                                                    66)
                                                  CountingAnimation(
                                                      value: documentPropertiesList[
                                                              currentPageIndex]
                                                          .pageNumberController
                                                          .text,
                                                      scrollCount: 3,
                                                      textStyle:
                                                          GoogleFonts.pressStart2p(
                                                              color: defaultPalette
                                                                  .extras[0],
                                                              fontSize: 20)),
                                                //{{PREVIOUS PAGE BUTTON}}
                                                GestureDetector(
                                                  onTap: () {
                                                    setState(() {
                                                      if (currentPageIndex == 0) {
                                                        // pdfScrollController.animateTo(
                                                        //     currentPageIndex *
                                                        //         ((1.41428571429 *
                                                        //                 ((sWidth *
                                                        //                     (1 -
                                                        //                         vDividerPosition)))) +
                                                        //             16),
                                                        //     duration:
                                                        //         const Duration(
                                                        //             milliseconds:
                                                        //                 100),
                                                        //     curve: Curves.easeIn);
                                                        _renderPagePreviewOnProperties();
                                                        return;
                                                      }
                                                      currentPageIndex--;
                                                      propertyCardsController
                                                          .setCardIndex(
                                                              currentPageIndex);
                            
                                                      propertyCardsController
                                                          .animateTo(Offset(1, 1),
                                                              duration:
                                                                  Durations.short1,
                                                              curve: Curves.linear);
                            
                                                      // pdfScrollController.animateTo(
                                                      //     currentPageIndex *
                                                      //         ((1.41428571429 *
                                                      //                 ((sWidth *
                                                      //                     (1 -
                                                      //                         vDividerPosition)))) +
                                                      //             16),
                                                      //     duration: const Duration(
                                                      //         milliseconds: 100),
                                                      //     curve: Curves.easeIn);
                                                      _renderPagePreviewOnProperties();
                                                    });
                                                  },
                                                  child: Icon(
                                                    TablerIcons
                                                        .arrow_badge_left_filled,
                                                    color: defaultPalette.extras[0],
                                                    size: 23,
                                                  ),
                                                ),
                                                //{{DELETE PAGE BUTTON}}
                                                GestureDetector(
                                                  onTap: () {
                                                    _confirmDeleteLayout(
                                                        deletePage: true);
                                                    // pdfScrollController.animateTo(
                                                    //     currentPageIndex *
                                                    //         ((1.41428571429 *
                                                    //                 ((sWidth *
                                                    //                     (1 -
                                                    //                         vDividerPosition)))) +
                                                    //             16),
                                                    //     duration: const Duration(
                                                    //         milliseconds: 100),
                                                    //     curve: Curves.easeIn);
                                                  },
                                                  child: Icon(
                                                    TablerIcons.trash,
                                                    color: defaultPalette.black,
                                                    size: 20,
                                                  ),
                                                ),
                                                //{{NEXT PAGE BUTTON}}
                                                GestureDetector(
                                                  onTap: () {
                                                    setState(() {
                                                      if (pageCount ==
                                                          (currentPageIndex + 1)) {
                                                        _addPdfPage();
                                                        currentPageIndex++;
                                                        propertyCardsController
                                                            .setCardIndex(
                                                                currentPageIndex);
                                                        propertyCardsController
                                                            .animateTo(Offset(1, 1),
                                                                duration: Durations
                                                                    .short1,
                                                                curve:
                                                                    Curves.linear);
                            
                                                        // pdfScrollController.animateTo(
                                                        //     currentPageIndex *
                                                        //         ((1.41428571429 *
                                                        //                 ((sWidth *
                                                        //                         (1 -
                                                        //                             vDividerPosition)) -
                                                        //                     6)) +
                                                        //             6),
                                                        //     duration:
                                                        //         const Duration(
                                                        //             milliseconds:
                                                        //                 100),
                                                        //     curve: Curves.easeIn);
                                                        _renderPagePreviewOnProperties();
                                                        return;
                                                      }
                                                      currentPageIndex++;
                                                      propertyCardsController
                                                          .setCardIndex(
                                                              currentPageIndex);
                                                      propertyCardsController
                                                          .animateTo(Offset(1, 1),
                                                              duration:
                                                                  Durations.short1,
                                                              curve: Curves.linear);
                            
                                                      // pdfScrollController.animateTo(
                                                      //     currentPageIndex *
                                                      //         ((1.41428571429 *
                                                      //                 ((sWidth *
                                                      //                         (1 -
                                                      //                             vDividerPosition)) -
                                                      //                     6)) +
                                                      //             6),
                                                      //     duration: const Duration(
                                                      //         milliseconds: 100),
                                                      //     curve: Curves.easeIn);
                                                      _renderPagePreviewOnProperties();
                                                    });
                                                  },
                                                  child: Icon(
                                                    TablerIcons
                                                        .arrow_badge_right_filled,
                                                    color: defaultPalette.extras[0],
                                                    size: 23,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      )
                                    ],
                                  ),
                                  //FORMATS TITLE
                            
                                  Container(
                                    width: sWidth * wH2DividerPosition,
                                    height: 15,
                                    alignment: Alignment.topCenter,
                                    margin: EdgeInsets.only(top: 10, right: 4),
                                    decoration: BoxDecoration(
                                        // color: defaultPalette.extras[0],
                                        borderRadius: BorderRadius.circular(5),
                                        border: Border.all(width: 0.1)),
                                    child: Text(
                                      'FORMATS',
                                      style: GoogleFonts.bungee(fontSize: 10),
                                    ),
                                  ),
                            
                                  SizedBox(height:8),
                                  
                                  // Container(
                                  //   decoration: BoxDecoration(
                                  //     // border: Border.all(),
                                  //     borderRadius: BorderRadius.circular(16),
                                  //   ),
                                  //   child: AnimatedToggleSwitch<pw.PageOrientation>.dual(
                                  //     current: documentPropertiesList[currentPageIndex].orientationController,
                                  //     first: pw.PageOrientation.portrait,
                                  //     second: pw.PageOrientation.landscape,
                                  //     onChanged: (value) {
                                  //       setState(() {
                                  //         documentPropertiesList[currentPageIndex].orientationController = value;
                                  //       });
                                  //     },
                                  //     animationCurve:
                                  //         Curves.easeInOutExpo,
                                  //     animationDuration:
                                  //         Durations.medium4,
                                  //     borderWidth:
                                  //         2, // backgroundColor is set independently of the current selection
                                  //     styleBuilder: (value) =>
                                  //         ToggleStyle(
                                  //             borderRadius:
                                  //                 BorderRadius
                                  //                     .circular(15),
                                  //             indicatorBorderRadius:
                                  //                 BorderRadius.circular(0),
                                  //             indicatorBorder: Border.all(),
                                  //             borderColor: defaultPalette.secondary,
                                  //             backgroundColor: defaultPalette.secondary,
                                  //             indicatorColor: defaultPalette.extras[0]), // indicatorColor changes and animates its value with the selection
                                  //     iconBuilder: (value) {
                                  //       return Icon(
                                  //           value == pw.PageOrientation.portrait? TablerIcons
                                  //                   .layout
                                  //               : TablerIcons
                                  //                   .template,
                                  //           size:15,
                                  //           color: defaultPalette.primary);
                                  //     },
                                  //     textBuilder: (value) {
                                  //       return Text(
                                  //         value == pw.PageOrientation.portrait? 'port\nrait'
                                  //             : 'land\nscape',
                                  //         maxLines: 2,
                                  //         overflow: TextOverflow.ellipsis,
                                  //         style:
                                  //             GoogleFonts.lexend(
                                  //                 fontSize: 15,
                                  //                 fontWeight: FontWeight.w600,
                                  //                 color:  defaultPalette.extras[0],
                                  //                 ),
                                  //       );
                                  //     },
                                  //     height:45,
                                  //     spacing:(sWidth * wH2DividerPosition - 45),
                                  //   ),
                                  // ),
                                  
                                  //
                                  //OPERATIONS BUTTONS
                                  Padding(
                                    padding: const EdgeInsets.only(right: 5,left:2),
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        // SizedBox(
                                        //   width:
                                        //       (sWidth * wH2DividerPosition - 45) /
                                        //           2,
                                        //   child: Row(
                                        //     mainAxisAlignment:
                                        //         MainAxisAlignment.spaceBetween,
                                        //     children: [
                                        //       //ADD PAGE BUTTON
                                        //       PieMenu(
                                        //         controller: opsAddPieController,
                                        //         actions: [
                                        //           getPieActionForAddMove(
                                        //               'LEFT', true),
                                        //           getPieActionForAddMove(
                                        //               'RIGHT', true)
                                        //         ],
                                        //         onToggle: (menuOpen) {
                                        //           if (!menuOpen) {
                                        //             opsAddPieController.closeMenu();
                                        //             opsMovePieController
                                        //                 .closeMenu();
                                        //             opsCopyPieController
                                        //                 .closeMenu();
                                        //             opsFormatPieController
                                        //                 .closeMenu();
                                        //           }
                                        //         },
                                        //         theme: PieTheme(
                                        //             rightClickShowsMenu: true,
                                        //             buttonSize:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         3)
                                        //                     .clamp(40, 100),
                                        //             spacing: 5,
                                        //             radius:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         2)
                                        //                     .clamp(50, 100),
                                        //             customAngle: -20,
                                        //             menuAlignment: Alignment.center,
                                        //             pointerSize: 20,
                                        //             menuDisplacement: Offset(0, 4),
                                        //             tooltipPadding:
                                        //                 EdgeInsets.all(5),
                                        //             tooltipTextStyle:
                                        //                 GoogleFonts.bungee(
                                        //                     fontSize: 20),
                                        //             buttonTheme: PieButtonTheme(
                                        //                 backgroundColor:
                                        //                     defaultPalette.tertiary,
                                        //                 iconColor:
                                        //                     defaultPalette.primary,
                                        //                 decoration: BoxDecoration(
                                        //                   border:
                                        //                       Border.all(width: 1),
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           200),
                                        //                   color: defaultPalette
                                        //                       .extras[0],
                                        //                 ))),
                                        //         child: Container(
                                        //           margin: const EdgeInsets.only(
                                        //               top: 8.0),
                                        //           // padding: const EdgeInsets.all(1),
                                        //           child: IconButton.filled(
                                        //               style: IconButton.styleFrom(
                                        //                 backgroundColor:
                                        //                     defaultPalette.extras[
                                        //                         0], // Background color
                                        //                 foregroundColor: defaultPalette
                                        //                     .primary, // Icon color
                                        //                 // Elevation of the button
                                        //                 padding: EdgeInsets.symmetric(
                                        //                     vertical: 10.0,
                                        //                     horizontal:
                                        //                         2), // Padding around the icon
                                        //                 shape:
                                        //                     RoundedRectangleBorder(
                                        //                   // Custom button shape
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           5.0),
                                        //                 ),
                                        //               ),
                                        //               constraints: BoxConstraints(
                                        //                 minWidth: (sWidth *
                                        //                             wH2DividerPosition -
                                        //                         65) /
                                        //                     6,
                                        //                 minHeight: 42,
                                        //               ), // Reduces the overall size further
                                        //               visualDensity:
                                        //                   VisualDensity.compact,
                                        //               iconSize: 12,
                                        //               onPressed: () {
                                        //                 opsAddPieController
                                        //                     .openMenu();
                                        //               },
                                        //               icon: Icon(TablerIcons.plus)),
                                        //         ),
                                        //       ),
                                        //       //MOVE PAGE BUTTON
                                        //       PieMenu(
                                        //         controller: opsMovePieController,
                                        //         actions: [
                                        //           getPieActionForAddMove(
                                        //               'LEFT', false),
                                        //           getPieActionForAddMove(
                                        //               'RIGHT', false),
                                        //         ],
                                        //         onToggle: (menuOpen) {
                                        //           if (!menuOpen) {
                                        //             opsAddPieController.closeMenu();
                                        //             opsMovePieController
                                        //                 .closeMenu();
                                        //             opsCopyPieController
                                        //                 .closeMenu();
                                        //             opsFormatPieController
                                        //                 .closeMenu();
                                        //           }
                                        //         },
                                        //         theme: PieTheme(
                                        //             rightClickShowsMenu: true,
                                        //             buttonSize:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         3)
                                        //                     .clamp(40, 100),
                                        //             spacing: 10,
                                        //             radius:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         2)
                                        //                     .clamp(50, 100),
                                        //             customAngle: -20,
                                        //             menuAlignment: Alignment.center,
                                        //             pointerSize: 20,
                                        //             menuDisplacement: Offset(0, 4),
                                        //             tooltipPadding:
                                        //                 EdgeInsets.all(0),
                                        //             tooltipTextStyle:
                                        //                 GoogleFonts.bungee(
                                        //                     fontSize: 20),
                                        //             buttonTheme: PieButtonTheme(
                                        //                 backgroundColor:
                                        //                     defaultPalette.tertiary,
                                        //                 iconColor:
                                        //                     defaultPalette.primary,
                                        //                 decoration: BoxDecoration(
                                        //                   border:
                                        //                       Border.all(width: 1),
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           200),
                                        //                   color: defaultPalette
                                        //                       .extras[0],
                                        //                 ))),
                                        //         child: Container(
                                        //           margin: const EdgeInsets.only(
                                        //               top: 8.0),
                                        //           // padding: const EdgeInsets.all(1),
                                        //           child: IconButton.filled(
                                        //               style: IconButton.styleFrom(
                                        //                 backgroundColor:
                                        //                     defaultPalette.extras[
                                        //                         0], // Background color
                                        //                 foregroundColor: defaultPalette
                                        //                     .primary, // Icon color
                                        //                 // Elevation of the button
                                        //                 padding: EdgeInsets.symmetric(
                                        //                     vertical:
                                        //                         10.0), // Padding around the icon
                                        //                 shape:
                                        //                     RoundedRectangleBorder(
                                        //                   // Custom button shape
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           5.0),
                                        //                 ),
                                        //               ),
                                        //               constraints: BoxConstraints(
                                        //                 minWidth: (sWidth *
                                        //                             wH2DividerPosition -
                                        //                         65) /
                                        //                     6.3,
                                        //                 minHeight: 42,
                                        //               ), // Reduces the overall size further
                                        //               visualDensity:
                                        //                   VisualDensity.compact,
                                        //               iconSize: 15,
                                        //               onPressed: () {
                                        //                 opsMovePieController
                                        //                     .openMenu();
                                        //               },
                                        //               icon: Icon(TablerIcons
                                        //                   .arrows_move_vertical)),
                                        //         ),
                                        //       ),
                                        //       //Duplicate PAGE BUTTON
                                        //       PieMenu(
                                        //         actions: [
                                        //           getPieActionForDuplicate('LEFT'),
                                        //           getPieActionForDuplicate('RIGHT')
                                        //         ],
                                        //         controller: opsCopyPieController,
                                        //         onToggle: (menuOpen) {
                                        //           if (!menuOpen) {
                                        //             opsAddPieController.closeMenu();
                                        //             opsMovePieController
                                        //                 .closeMenu();
                                        //             opsCopyPieController
                                        //                 .closeMenu();
                                        //             opsFormatPieController
                                        //                 .closeMenu();
                                        //           }
                                        //         },
                                        //         theme: PieTheme(
                                        //             rightClickShowsMenu: true,
                                        //             buttonSize:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         3)
                                        //                     .clamp(40, 100),
                                        //             spacing: 5,
                                        //             radius:
                                        //                 ((sWidth * wH2DividerPosition -
                                        //                             65) /
                                        //                         2)
                                        //                     .clamp(50, 100),
                                        //             customAngle: 20,
                                        //             menuAlignment: Alignment.center,
                                        //             pointerSize: 20,
                                        //             menuDisplacement: Offset(0, 4),
                                        //             tooltipPadding:
                                        //                 EdgeInsets.all(5),
                                        //             tooltipTextStyle:
                                        //                 GoogleFonts.bungee(
                                        //                     fontSize: 20),
                                        //             buttonTheme: PieButtonTheme(
                                        //                 backgroundColor:
                                        //                     defaultPalette.tertiary,
                                        //                 iconColor:
                                        //                     defaultPalette.primary,
                                        //                 decoration: BoxDecoration(
                                        //                   border:
                                        //                       Border.all(width: 1),
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           200),
                                        //                   color: defaultPalette
                                        //                       .extras[0],
                                        //                 ))),
                                        //         child: Container(
                                        //           margin: const EdgeInsets.only(
                                        //               top: 8.0),
                                        //           child: IconButton.filled(
                                        //               style: IconButton.styleFrom(
                                        //                 backgroundColor:
                                        //                     defaultPalette
                                        //                         .extras[0],
                                        //                 foregroundColor:
                                        //                     defaultPalette.primary,
                                        //                 padding: const EdgeInsets
                                        //                     .symmetric(
                                        //                     vertical: 10.0),
                                        //                 shape:
                                        //                     RoundedRectangleBorder(
                                        //                   borderRadius:
                                        //                       BorderRadius.circular(
                                        //                           5.0),
                                        //                 ),
                                        //               ),
                                        //               constraints: BoxConstraints(
                                        //                 minWidth: (sWidth *
                                        //                             wH2DividerPosition -
                                        //                         65) /
                                        //                     5.5,
                                        //                 minHeight: 42,
                                        //               ), // Reduces the overall size further
                                        //               visualDensity:
                                        //                   VisualDensity.compact,
                                        //               iconSize: 15,
                                        //               onPressed: () {
                                        //                 opsCopyPieController
                                        //                     .openMenu();
                                        //               },
                                        //               icon: const Icon(TablerIcons
                                        //                   .dots_vertical)),
                                        //         ),
                                        //       ),
                                        //     ],
                                        //   ),
                                        // ),
                                        Expanded(
                                          child: PieMenu(
                                            controller: currentPageIndex == index
                                                ? opsFormatPieController
                                                : null,
                                            actions: [
                                              getPieAction('A3'),
                                              getPieAction('A4'),
                                              getPieAction('A5'),
                                              getPieAction('A6'),
                                              getPieAction('Letter'),
                                              getPieAction('Legal'),
                                            ],
                                            theme: PieTheme(
                                                rightClickShowsMenu: true,
                                                buttonSize:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            6)
                                                        .clamp(40, 400),
                                                spacing: 1,
                                                radius:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            4)
                                                        .clamp(50, 400),
                                                customAngle: 0,
                                                menuAlignment: Alignment.center,
                                                menuDisplacement: Offset(
                                                    (sWidth * wH2DividerPosition -
                                                            38) /
                                                        6,
                                                    4),
                                                tooltipPadding: EdgeInsets.all(0),
                                                tooltipTextStyle:
                                                    GoogleFonts.bungee(fontSize: 20),
                                                buttonTheme: PieButtonTheme(
                                                    backgroundColor:
                                                        defaultPalette.primary,
                                                    iconColor:
                                                        defaultPalette.extras[0],
                                                    decoration: BoxDecoration(
                                                      border: Border.all(width: 3),
                                                      borderRadius:
                                                          BorderRadius.circular(200),
                                                      color: defaultPalette.extras[0],
                                                    ))),
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.only(top: 0.0),
                                              child: IconButton.filled(
                                                  style: IconButton.styleFrom(
                                                    backgroundColor:
                                                        defaultPalette.extras[0], // Background color
                                                    foregroundColor: defaultPalette
                                                        .primary, // Icon color
                                                    // Elevation of the button
                                                    padding: EdgeInsets.symmetric(
                                                        vertical:  10.0), // Padding around the icon
                                                    shape: RoundedRectangleBorder(
                                                      // Custom button shape
                                                      borderRadius:
                                                          BorderRadius.circular(5.0),
                                                    ),
                                                  ),
                                                  constraints: BoxConstraints(
                                                    minWidth:
                                                        (sWidth * wH2DividerPosition -
                                                                30) /
                                                            2,
                                                    minHeight: 45,
                                                  ), // Reduces the overall size further
                                                  visualDensity:
                                                      VisualDensity.compact,
                                                  iconSize: 20,
                                                  onPressed: () {
                                                    opsFormatPieController.openMenu();
                                                  },
                                                  icon: SizedBox(
                                                    width:
                                                        (sWidth * wH2DividerPosition -
                                                                52) /
                                                            2,
                                                    child: Row(
                                                      mainAxisAlignment:
                                                          MainAxisAlignment
                                                              .spaceAround,
                                                      children: [
                                                        // Icon(TablerIcons.file_smile),
                                                        Text(
                                                          getPageFormatString(
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .pageFormatController),
                                                          style: GoogleFonts.bungee(
                                                              color: defaultPalette
                                                                  .primary),
                                                        ),
                                                      ],
                                                    ),
                                                  )),
                                            ),
                                          ),
                                        ),
                                      SizedBox(width:8),
                                        Expanded(
                                          flex: 3,
                                          child: Column(
                                            children: [
                                              Row(
                                                children:pagePropertyTile(0)
                                              ),
                                              Row(
                                                children:pagePropertyTile(1)
                                              ),
                                            ],
                                          ),
                                        ),
                                     
                                      ],
                                    ),
                                  ),

                                  SizedBox(height:8),
                                  // //
                                  //ORIENTATIONS BUTTONS
                                  Padding(
                                    padding: const EdgeInsets.only(right: 4.0),
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceEvenly,
                                      children: [
                                        //PORTRAIT BUTTON
                                        ElevatedLayerButton(
                                        borderRadius: const BorderRadius.only(
                                          topRight: Radius.circular(5),
                                          topLeft: Radius.circular(5),
                                          bottomRight: Radius.circular(10),
                                          bottomLeft: Radius.circular(10),
                                        ),
                                        animationDuration: const Duration(milliseconds: 100),
                                        animationCurve: Curves.ease,
                                        topDecoration: BoxDecoration(
                                          color: defaultPalette.primary,
                                          border: Border.all(color: defaultPalette.extras[0]),
                                        ),
                                        topLayerChild: Row(
                                          mainAxisAlignment:MainAxisAlignment.spaceAround,
                                          children: [
                                            SizedBox(width:5),
                                            Icon(TablerIcons.building_estate, size: 20, color: defaultPalette.extras[0]),
                                            Expanded(
                                              child: Text(
                                                ' port\n rait',
                                                maxLines: 2,
                                                overflow: TextOverflow.ellipsis,
                                                style: GoogleFonts.lexend(
                                                  fontSize: 14,
                                                  color: defaultPalette.extras[0],
                                                  letterSpacing: -1,
                                                  height:0.9,
                                                  fontWeight: FontWeight.w800,
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                        baseDecoration: BoxDecoration(
                                          color: defaultPalette.extras[0],
                                          border: Border.all(color: defaultPalette.extras[0]),
                                        ),
                                        depth: 2,
                                        subfac: 2,
                                        buttonHeight: 38,
                                        buttonWidth: (widthBig/2)-20,
                                        onClick: () {
                                          setState(() {
                                            documentPropertiesList[currentPageIndex]
                                                      .orientationController =
                                                  pw.PageOrientation.portrait;
                                          });
                                        },
                                        ),
                                        //LANDSCAPE BUTTON
                                        SizedBox(width: 2),
                                        ElevatedLayerButton(
                                        borderRadius: const BorderRadius.only(
                                          topRight: Radius.circular(5),
                                          topLeft: Radius.circular(5),
                                          bottomRight: Radius.circular(10),
                                          bottomLeft: Radius.circular(10),
                                        ),
                                        animationDuration: const Duration(milliseconds: 100),
                                        animationCurve: Curves.ease,
                                        topDecoration: BoxDecoration(
                                          color: defaultPalette.primary,
                                          border: Border.all(color: defaultPalette.extras[0]),
                                        ),
                                        topLayerChild: Row(
                                          children: [
                                            const SizedBox(width: 5),
                                            Icon(TablerIcons.sunset_2, size: 22, color: defaultPalette.extras[0]),
                                            Expanded(
                                              child: Text(
                                                ' land\n scape',
                                                maxLines: 2,
                                                overflow: TextOverflow.ellipsis,
                                                style: GoogleFonts.lexend(
                                                  fontSize: 14,
                                                  color: defaultPalette.extras[0],
                                                  letterSpacing: -1,
                                                  height: 0.7,
                                                  fontWeight: FontWeight.w800,
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                        baseDecoration: BoxDecoration(
                                          color: defaultPalette.extras[0],
                                          border: Border.all(color: defaultPalette.extras[0]),
                                        ),
                                        depth: 2,
                                        subfac: 2,
                                        buttonHeight: 38,
                                        buttonWidth: (widthBig/2)-20,
                                        onClick: () {
                                          setState(() {
                                            documentPropertiesList[currentPageIndex]
                                                      .orientationController =
                                                  pw.PageOrientation.landscape;
                                          });
                                        },
                                        ),
                                        
                                        
                                      ],
                                    ),
                                  ),
                            
                                 
                                  // STYLES TITLE
                                  Container(
                                    width: sWidth * wH2DividerPosition - 35,
                                    height: 15,
                                    alignment: Alignment.topCenter,
                                    margin: EdgeInsets.only(top: 10, right: 2,),
                                    decoration: BoxDecoration(
                                        // color: defaultPalette.extras[0],
                                        borderRadius: BorderRadius.circular(5),
                                        border: Border.all(width: 0.1)),
                                    child: Text(
                                      'Styles',
                                      style: GoogleFonts.bungee(fontSize: 10),
                                    ),
                                  ),
                                  
                                  const SizedBox(
                                    height: 10,
                                  ),
                            
                                  // MARGIN Main
                                  Column(
                                    children: [
                                      //Margin TiTle
                                      SizedBox(
                                        height: textFieldHeight / 2,
                                        child: Row(
                                          children: [
                                            ...pageMarginTile(0),
                                           
                                             ////INDIVIDUAL MARGINS BUTTON
                                            MouseRegion(
                                              cursor:SystemMouseCursors.click,
                                              child: GestureDetector(
                                                onTap: () {
                                                    setState(() {
                                                      documentPropertiesList[
                                                                  currentPageIndex]
                                                              .useIndividualMargins =
                                                          !documentPropertiesList[
                                                                  currentPageIndex]
                                                              .useIndividualMargins;
                                                      if (documentPropertiesList[
                                                                  currentPageIndex]
                                                              .useIndividualMargins ==
                                                          false) {
                                                        documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginTopController
                                                                .text =
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginAllController
                                                                .text;
                                                        documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginBottomController
                                                                .text =
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginAllController
                                                                .text;
                                                        documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginLeftController
                                                                .text =
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginAllController
                                                                .text;
                                                        documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginRightController
                                                                .text =
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginAllController
                                                                .text;
                                                      }
                                                    });
                                                  },
                                                child: Icon(documentPropertiesList[
                                                                currentPageIndex]
                                                            .useIndividualMargins
                                                        ?
                                                            IconsaxPlusBold.maximize_1:IconsaxPlusLinear
                                                                .maximize_2,
                                                            size: 20,
                                                          ),
                                              ),
                                            )
                                          ],
                                        ),
                                      ),
                            
                                      if (documentPropertiesList[currentPageIndex]
                                          .useIndividualMargins)
                                        Column(
                                          children: [
                                            //TOP AND BOTTOM Margin TiTle
                                            const SizedBox(
                                              height: 5,
                                            ),
                                            SizedBox(
                                              height:sWidth*wH2DividerPosition>220? 25:45,
                                              child: Flex(
                                                direction: sWidth*wH2DividerPosition<220? Axis.vertical: Axis.horizontal ,
                                                children: [
                                                  Expanded(child: Row(children: pageMarginTile(1))),
                                                  Expanded(child: Row(children: pageMarginTile(2))),
                                                  
                                                ],
                                              ),
                                            ),
                                            SizedBox(
                                              height:sWidth*wH2DividerPosition>220? 25:45,
                                              child: Flex(
                                                direction: sWidth*wH2DividerPosition<220? Axis.vertical: Axis.horizontal ,
                                                children: [
                                                  Expanded(child: Row(children: pageMarginTile(3))),
                                                  Expanded(child: Row(children: pageMarginTile(4))),
                                                  
                                                ],
                                              ),
                                            ),
                                            const SizedBox(
                                              height: 10,
                                            ),
                                          ],
                                        ),
                                    ],
                                  ),
                                  
                                  //list COLOR PICKER Main
                                  ...[
                                    SizedBox(
                                    width: 2,
                                    height: 6,
                                  ),
                                    //title and hex code of plain color title
                                    Container(
                                      height: 20,
                                      padding: EdgeInsets.only(left: 0),
                                      margin: EdgeInsets.only(left: 0, right: 3),
                                      decoration: BoxDecoration(
                                          color: defaultPalette.primary,
                                          borderRadius: BorderRadius.circular(6)),
                                      child: Row(
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [
                                          DecoratedBox(
                                            decoration: BoxDecoration(
                                              shape: BoxShape.circle,
                                              border: Border.fromBorderSide(
                                                BorderSide(
                                                  width: 0.5
                                                ),
                                              ),
                                              color: documentPropertiesList[ind]
                                                  .pageColor,
                                            ),
                                            child: SizedBox(
                                              width: 15,
                                              height: 15,
                                            ),
                                          ),
                                          if(sWidth*wH2DividerPosition>220)
                                          SingleChildScrollView(
                                            scrollDirection: Axis.horizontal,
                                            child: Text(
                                              ' color ',
                                              maxLines:1,
                                              overflow:TextOverflow.ellipsis,
                                              style: GoogleFonts.lexend(
                                                  fontSize: 15,
                                                  letterSpacing: -1,
                                                  fontWeight: FontWeight.w600,
                                                  color: defaultPalette.extras[0]),
                                            ),
                                          ),
                                          Expanded(
                                            child: SizedBox(
                                              height: 18,
                                              child: TextField(
                                                controller: pgHexController,
                                                onSubmitted: (value) {
                                                  setState(() {
                                                documentPropertiesList[ind]
                                                    .pageColor = hexToColor(value);
                                                });
                                                },
                                                inputFormatters: [
                                                  HexColorInputFormatter()
                                                ],
                                                textAlignVertical: TextAlignVertical.top,
                                                textAlign: TextAlign.end,
                                                cursorColor: defaultPalette.tertiary,
                                                decoration: InputDecoration(
                                                  contentPadding: const EdgeInsets.only(left: 0),
                                                  labelStyle:
                                                      GoogleFonts.lexend(color: defaultPalette.black),
                                                  hoverColor: defaultPalette.transparent,
                                                  filled: true,
                                                  fillColor: defaultPalette.transparent,
                                                  border: InputBorder.none,
                                                  enabledBorder: OutlineInputBorder(
                                                    borderSide: BorderSide.none,
                                                  ),
                                                  focusedBorder: OutlineInputBorder(
                                                    borderSide: BorderSide.none,
                                                    borderRadius: BorderRadius.circular(5.0),
                                                  ),
                                                ),
                                                style: GoogleFonts.lexend(
                                                  fontSize: 13,
                                                  letterSpacing: -0.5,
                                                  fontWeight: FontWeight.w600,
                                                    color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                          ),
                                          
                                          ClipRRect(
                                            borderRadius: BorderRadius.circular(9999),
                                            child: Material(
                                              color: defaultPalette.transparent,
                                              child: InkWell(
                                                focusColor: defaultPalette.primary,
                                                hoverColor: defaultPalette.primary,
                                                highlightColor: defaultPalette.primary,
                                                onTap: () {
                                                  EyeDropper.enableEyeDropper(context, (value) {
                                                    setState(() {
                                                    if (value !=null) {
                                                      documentPropertiesList[ind]
                                                          .pageColor = value;
                                                    }
                                                   });
                                                  },);
                                                },
                                                child: const Icon(
                                                  TablerIcons.color_picker,
                                                  size: 19,
                                                ),
                                              ),
                                            ),
                                          ),
                                          // SizedBox(
                                          //   width: 2,
                                          // )
                                        ],
                                      ),
                                    ),
                                         
                                    SizedBox(
                                    width: 2,
                                    height: 4,
                                    ),
                            
                                    Container(
                                      width: widthBig,
                                      padding: EdgeInsets.only(left: 0, right: 3),
                                      margin: EdgeInsets.only(right:3,left:0),
                                      // decoration: BoxDecoration(
                                      //     border: Border.all(width:0.8, color:defaultPalette.extras[0].withOpacity(0.4)),
                                      //     color: defaultPalette.primary,
                                      //     borderRadius: BorderRadius.circular(5)),
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          Row(
                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                            children: [
                                              // if ((sWidth * wH2DividerPosition) > 220)
                                              Expanded(
                                                  child: HSVPicker(
                                                    color: HSVColor.fromColor(
                                                      documentPropertiesList[ind].pageColor,
                                                    ),
                                                    onChanged: (value) {
                                                      setState(() {
                                                        documentPropertiesList[ind]
                                                        .pageColor =  value.toColor().withAlpha(
                                                                (documentPropertiesList[ind].pageColor).alpha);
                                                      });
                                                    },
                                                  ),
                                                ),
                                              SizedBox(width: 5),
                                              Expanded(
                                                child: IntrinsicHeight(
                                                  child: Column(
                                                    mainAxisAlignment: MainAxisAlignment.start,
                                                    children: [
                                                      //list COLOR WHEEL COLOR
                                                      WheelPicker(
                                                        color: HSVColor.fromColor(documentPropertiesList[ind].pageColor,),
                                                        onChanged: (HSVColor value) {
                                                          setState(() {
                                                            documentPropertiesList[ind]
                                                              .pageColor =  value.toColor().withAlpha((documentPropertiesList[ind]
                                                                                                            .pageColor).alpha);
                                                          });
                                                          
                                                        },
                                                      ),
                                                      Text(
                                                        ' ${(ColorTools.nameThatColor(
                                                          documentPropertiesList[ind].pageColor,
                                                        )).toLowerCase()}',
                                                        maxLines:1,
                                                        overflow: TextOverflow.ellipsis,
                                                        style: GoogleFonts.lexend(
                                                            fontSize: 15,
                                                            letterSpacing: -1,
                                                            fontWeight: FontWeight.w600,
                                                            color: defaultPalette.extras[0]),
                                                      ),
                            
                                          
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                          //list alpha picker
                                          AlphaPicker(
                                            alpha: (documentPropertiesList[ind]
                                                      .pageColor).alpha,
                                            onChanged: (int value) {
                                              setState(() {
                                                documentPropertiesList[ind]
                                                  .pageColor = (documentPropertiesList[ind]
                                                        .pageColor).withAlpha(value);
                                              });
                                              
                                            },
                                          ),
                                        ],
                                      ),
                                    ),],
                                  
                                  const SizedBox(
                                    height: 30,
                                  )
                                ],
                              ),
                            );
                          }
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget buildDecoratedContainer(
    SuperDecoration? superDecoration,
    Widget child,
    bool isPreview, {
    List<String> visitedIds = const [],
    int depth = 0,
    int maxDepth = 10, // Adjustable depth limit for cycles
  }) {
    
    // Add current ID to visited list if not already present
    List<String> newVisitedIds = List.from(visitedIds);
    if ( superDecoration ==null) {
      return child;
    } else if (superDecoration.id == 'yo') {
      // print('SuperDecoration with id "yo" detected, returning child without decoration.');
      return child; // Return the child directly if it's a placeholder
    }
    // Check for cycle and update visited list only if not already in it
    if (visitedIds.contains(superDecoration.id)) {
      // print('Cycle detected');
      // If already visited and depth limit reached, break
      if (depth >= maxDepth) {
        print('Max depth reached at ${superDecoration.id}. Stopping further nesting.');
        return child;
      }
    } else {
      // Add to visited list since it is not yet visited
      newVisitedIds.add(superDecoration.id);
    }

    Widget current = child;
       
    // Get the decorations stack (direct descendants)
    List<SheetDecoration> stack = decorationListIterator(superDecoration.itemDecorationList);

    for (int i = stack.length - 1; i >= 0; i--) {
      final deco = stack[i];

      // Continue building the decoration if within depth limit
      if (depth < maxDepth) {
        if (deco is ItemDecoration) {
          BoxDecoration boxDecoration = deco.decoration;
          Border border = ((boxDecoration.border ?? Border.all(color: Colors.transparent)) as Border);

          current = Container(
            padding: deco.padding,
            margin: deco.margin,
            alignment: null,
            decoration: boxDecoration.copyWith(
              border: Border(
                top: border.top.copyWith(width: border.top.width.clamp(0, isPreview ? 15 : double.infinity)),
                bottom: border.bottom.copyWith(width: border.bottom.width.clamp(0, isPreview ? 15 : double.infinity)),
                left: border.left.copyWith(width: border.left.width.clamp(0, isPreview ? 15 : double.infinity)),
                right: border.right.copyWith(width: border.right.width.clamp(0, isPreview ? 15 : double.infinity)),
              ),
            ),
            foregroundDecoration: deco.foregroundDecoration,
            transform: deco.transform,
            child: current,
          );
        } else if (deco is SuperDecoration) {
          // Recursive call with updated visited list and increased depth
          current = buildDecoratedContainer(
            deco,
            current,
            isPreview,
            // visitedIds: newVisitedIds,
            depth: depth + 1,
            maxDepth: maxDepth,
          );
        }
      } else {
        // print('Depth limit reached, stopping recursion.');
      }
    }

    return current;
  }

  List<Widget> buildSuperDecorationSwiperInterface(List<String> itemDecorationPath, TextEditingController itemDecorationNameController){
    final width = (sWidth*wH2DividerPosition)-35;
    final isSizeBigForRow = (sWidth * wH2DividerPosition) > 200;
    Widget roundButton(
      void Function() onTap,
      Widget icon,
      String s, {
      double borderRadius = 9999,
      bool isSelected = false,
      EdgeInsets padding = const EdgeInsets.all(3),
      bool showText = true
    }) {
      return InkWell(
        hoverColor: defaultPalette.primary.withOpacity(0.5),
        splashColor: defaultPalette.primary.withOpacity(0.5),
        highlightColor: defaultPalette.primary.withOpacity(0.5),
        onTap: () {
          setState(() {
            onTap();
          });
        },
        child: Row(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(borderRadius),
              child: Material(
                color: isSelected
                    ? defaultPalette.primary
                    : defaultPalette.transparent,
                child: InkWell(
                  hoverColor: defaultPalette.primary.withOpacity(0.5),
                  splashColor:
                      defaultPalette.primary.withOpacity(0.5),
                  highlightColor:
                      defaultPalette.primary.withOpacity(0.5),
                  onTap: () {
                    setState(() {
                      onTap();
                    });
                  },
                  child: Container(
                      padding: padding,
                      decoration: BoxDecoration(
                        border: isSelected
                            ? Border.all(
                                color: defaultPalette.extras[0])
                            : Border.fromBorderSide(BorderSide.none),
                        borderRadius:
                            BorderRadius.circular(borderRadius),
                        // color: defaultPalette.secondary
                      ),
                      child: icon),
                ),
              ),
            ),
            // SizedBox(width: 2,),
            if (isSizeBigForRow && showText)
              Expanded(
                child: Text(
                  s,
                  maxLines: 1,
                  style: GoogleFonts.lexend(
                      fontSize: 13,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0]),
                ),
              )
          ],
        ),
      );
    }
    var inx = itemDecorationPath.last;
    if (sheetDecorationMap[inx] == null || sheetDecorationMap[inx]?.id =='yo' || sheetDecorationMap[inx]?.id =='') {
      print(sheetDecorationMap[inx]);
      inx = 'yo';
      return [
        
        Positioned.fill(
          top: 12,
          right: 9,
          left: 6,
          bottom: 11,
          child: Container(
            padding: EdgeInsets.all(0).copyWith(bottom:0, left:3, right:3),
            decoration: BoxDecoration(
              color: defaultPalette.transparent,
              borderRadius: BorderRadius.circular(12),
            ),
            child:ClipRRect(
              borderRadius:BorderRadius.circular(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Container(
                        height: 68,
                        margin: EdgeInsets.only(top: 5,),
                        padding: EdgeInsets.all(10).copyWith(left: 12),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text('Decoration',
                            maxLines:1,
                            overflow: TextOverflow.ellipsis,
                            style: GoogleFonts.lexend(
                              color: defaultPalette.extras[0],
                              fontWeight:FontWeight.w600,
                              letterSpacing: -1,
                              fontSize: 22,
                              height: 1.2,
                              )
                            ),
                            Text('Library', 
                            maxLines:1,
                            overflow: TextOverflow.ellipsis,
                            style: GoogleFonts.lexend(
                              color: defaultPalette.extras[0], 
                              fontWeight:FontWeight.w600,
                              letterSpacing: -1,
                              fontSize: 20,
                              height: 0.9,
                              )
                            )
                          ],
                        ),
                        ),
                      ),
                      Tooltip(
                        message: 'add New SuperDecoration.',
                        child: MouseRegion(
                          cursor:SystemMouseCursors.click,
                          child: GestureDetector(
                            onTap: () {
                            setState(() {
                              decorationIndex = -1;
                              isListDecorationLibraryToggled = false;
                              isListDecorationPropertiesToggled = false;
                              switch (whichPropertyTabIsClicked) {
                                case 2:
                                  item.textDecoration = newSuperDecoration(placeholder: false);
                                  _findItem();
                                  break;
                                case 3:
                                  sheetListItem.listDecoration = newSuperDecoration(placeholder: false).id;
                                  _findSheetListItem();
                                  break;
                                default:
                              }
                            });
                            },
                            child: Icon(TablerIcons.north_star)
                          )
                        ),
                      ),
                      SizedBox(width:10),
                    ],
                  ),
                  Text('   add a new one or select from the library.',
                    maxLines:1,
                    overflow: TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                    color: defaultPalette.extras[0], 
                    fontWeight:FontWeight.w500,
                    letterSpacing: -0.5,
                    fontSize: 11,
                    height: 1.2,
                    )
                  ),
                  //search bar for decoration library when id is 'yo'.
                  Container(
                  height: 25,
                  margin: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: defaultPalette.extras[0],
                    border: Border.all(color: defaultPalette.extras[0],),
                    borderRadius: BorderRadius.circular(10)
                  ),
                  child: TextFormField(
                      style: GoogleFonts.lexend(
                          color: defaultPalette.primary,
                          letterSpacing:-1,
                          fontSize: 15),
                      cursorColor: defaultPalette.tertiary,
                      controller: decorationSearchController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.all(0),
                        hintText: 'searchDecors...',
                        focusColor: defaultPalette.primary,
                        hintStyle: GoogleFonts.lexend(
                          color: defaultPalette.primary,
                          letterSpacing:-0.8,
                          fontWeight: FontWeight.w300,
                          fontSize: 14),
                        prefixIcon: Icon(TablerIcons.search, size:15,
                            color: defaultPalette.primary),
                        border: OutlineInputBorder(
                          borderSide: BorderSide.none, 
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      onChanged: (query) {
                        setState(() {
                          // Filter the list of SheetDecoration by their names
                          filteredDecorations = Map.fromEntries(
                            sheetDecorationMap.entries.where(
                              (entry) => entry.value.name.toLowerCase().contains(query.toLowerCase()),
                            ),
                          );
                            // Debugging output
                        });
                      },
                            
                    ),
                  ),
          
                  Expanded(
                    child: ScrollConfiguration(
                    behavior:
                        ScrollBehavior().copyWith(scrollbars: false),
                    child: DynMouseScroll(
                        durationMS: 500,
                        scrollSpeed: 1,
                        builder: (context, controller, physics) {
                          return Padding(
                            padding: const EdgeInsets.only(left:1.0),
                            child: ClipRRect(
                              borderRadius:BorderRadius.only(
                                bottomRight: Radius.circular(30),
                                bottomLeft: Radius.circular(30),
                              ),
                              child: buildSheetDecorationLibrary(
                                (p0, p1, p2, padding, showText) => roundButton(p0, p1, p2, padding: padding,showText: showText),
                                inx,
                                controller,
                                physics,
                                width,
                                itemDecorationPath,
                                itemDecorationNameController,
                                (sHeight*0.9)-50-12-11-68-11-25-46,
                                onlySuper: true,
                                onlyLibrary:true,
                              ),
                            ),
                          );
                      }
                    )),
                  )
                ],
              ),
            ),
          ),
        ),
        
      ];
    }
    var itinx = '';
    // prit(sheetTableVariables.rowLayerIndex);
    if(decorationIndex !=-1){
      // itinx = int.tryParse((sheetDecorationMap[itemDecorationPath.last] as SuperDecoration).itemDecorationList[decorationIndex].substring((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList[decorationIndex].indexOf('/') + 1))??-7;
      itinx = (sheetDecorationMap[itemDecorationPath.last] as SuperDecoration).itemDecorationList[decorationIndex];                              
    }
    
   // print('inxindex: '+inx.toString()+'||itinx: '+itinx.toString()+'\\decorationIndex: '+decorationIndex.toString());
    
    
    return [
                      
      Positioned.fill(
      child: AnimatedPadding(
        duration: Durations.medium1,
        padding: EdgeInsets.all(17.2).copyWith(right: 15, left: 12.2),
        child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Column(
              children: [
                //grey Balloon button and circlebutton elevated &&&  DECOR Title and the preview box and text information
                Row(
                  mainAxisAlignment:
                      MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    //grey Balloon button and circlebutton elevated on upper half
                    Column(
                      crossAxisAlignment:
                          CrossAxisAlignment.start,
                      mainAxisAlignment:
                          MainAxisAlignment.spaceBetween,
                      children: [
                        GestureDetector(
                          onTap: () {
                            setState(() {
                              decorationIndex = -1;
                              isListDecorationLibraryToggled = false;
                              isListDecorationPropertiesToggled = false;
                              updateSheetDecorationvariables(sheetDecorationMap[inx] as SuperDecoration);
                              itemDecorationNameController.text = (sheetDecorationMap[inx] as SuperDecoration).name;
                              print(sheetDecorationMap[inx]!.id);    
                              print((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList);
                               
                            });
                          },
                          child: AnimatedContainer(
                            duration: Durations.medium4,
                            curve: Curves.easeInOut,
                            height: 32,
                            width: 32,
                            child: Icon(TablerIcons.balloon,
                                size: 20,
                                color:whichPropertyTabIsClicked == 2
                                ? defaultPalette.primary
                                : whichPropertyTabIsClicked == 3
                                ? defaultPalette.extras[0]
                                : defaultPalette.primary,
                                // shadows: [
                                //   BoxShadow(
                                //     spreadRadius: 5,
                                //     blurRadius: 5,
                                //     color: defaultPalette.extras[0].withAlpha(0)
                                //   ),
                                // ], 
                                 ),
                            // padding: EdgeInsets.only(left:5),
                            decoration: BoxDecoration(
                              color:  whichPropertyTabIsClicked == 2
                                ? defaultPalette.tertiary
                                : whichPropertyTabIsClicked == 3
                                ? defaultPalette.extras[1]
                                : defaultPalette.extras[3],
                              border: Border.all(width:1),
                              borderRadius: BorderRadius.circular(500),
                            ),
                          ),
                        ),
                        SizedBox(height: 3),
                        
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            
                          
                            setState(() {
                              isListDecorationLibraryToggled = !isListDecorationLibraryToggled;
                            });
                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.file_search,
                            size: 18,
                            // color: defaultPalette.tertiary
                            // color: Colors.blue,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                        SizedBox(height: 2),
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            setState(() {
                              isListDecorationPropertiesToggled =
                                  !isListDecorationPropertiesToggled;
                            });
                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.adjustments_alt,
                            size: 18,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                        SizedBox(height: 3),
                        //add new itemdecoration Layer
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            setState(() {
                              showDecorationLayers = !showDecorationLayers;
                              if (item.id == 'yo') {
                                _findSheetListItem();
                              }
                            });
                            // setState(() {
                              
                            //   var itemDecoId = 'dITM-${ const Uuid().v4()}';
                            //   var itemDecoration = ItemDecoration(id: itemDecoId);
                            //   // var inx = int.tryParse(itemDecorationPath.last.substring(itemDecorationPath.last.indexOf('/') + 1))??-2;
                            //   var inx = itemDecorationPath.last;
                            //   if ((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length < 70) {
                            //     // Add the new decoration to the main list
                            //     sheetDecorationMap.addAll({itemDecoration.id:itemDecoration});
                            //     print('added to main list');
                            //     (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList =  [...(sheetDecorationMap[inx] as SuperDecoration).itemDecorationList, itemDecoId];
                            //     print('added to super list');
                            //     // Get the reference to the SuperDecoration from the list
                                
                            //     updateSheetDecorationvariables(sheetDecorationMap[inx] as  SuperDecoration);
                                
                            //   } else {
                            //     print('Guys come on, turn this into a super now');
                            //   }
                            // });

                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.stack_2,
                            size: 18,
                            // color: defaultPalette.tertiary
                            // color: Colors.blue,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(width: 3),
                    //DECOR Title and the preview box and text information besides
                    Expanded(
                      flex: 2,
                      child: Column(
                        mainAxisAlignment:
                            MainAxisAlignment.spaceBetween,
                        children: [
                          //Balloon Animation BG and TITLE saying "DECOR"
                          MouseRegion(
                            cursor:whichPropertyTabIsClicked == 4? SystemMouseCursors.click: SystemMouseCursors.basic,
                            child: GestureDetector(
                              onTap:(){
                                if(whichPropertyTabIsClicked == 4){ setState(() {
                                  whichTableDecorationIsClicked = (whichTableDecorationIsClicked +1)%2;
                                  _findSheetTableItem(sheetTableItem, updateVariables: false);
                                });}
                              },
                              child: Stack(
                                children: [
                                  Container(
                                    decoration: BoxDecoration(
                                      color:defaultPalette.extras[0],
                                      borderRadius: BorderRadius.circular(50),
                                      border: Border.all(
                                        width:1,
                                        color:defaultPalette.extras[0],)
                                    ),
                                    height: 30,
                                    child: ClipRRect(
                                      borderRadius:
                                    BorderRadius.circular(60),
                                      child: MultipleBalloons(
                                      minSize: 15,
                                      maxSize: 30,
                                      maxSpeed: 1.5,
                                      maxSwayAmount: 25,
                                      minSwayAmount: 2,
                                      balloonCount: 8,
                                      colors: [
                                        whichPropertyTabIsClicked ==2
                                        ? defaultPalette.tertiary
                                        : whichPropertyTabIsClicked ==3
                                        ? defaultPalette.extras[1]
                                        : defaultPalette.extras[3],
                                        
                                        whichPropertyTabIsClicked ==2
                                        ? defaultPalette.tertiary
                                        : whichPropertyTabIsClicked ==3
                                        ? defaultPalette.extras[1]
                                        : defaultPalette.extras[3],
                                        defaultPalette.secondary,
                              
                                      ]
                                      // [
                                      //   defaultPalette.extras[0],
                                      //   defaultPalette.extras[9],
                                      //   defaultPalette.extras[6],
                                      //   defaultPalette.extras[3],
                                      //   defaultPalette.tertiary,
                                      //   defaultPalette.extras[1],
                                      //   defaultPalette.extras[3],
                                      //   defaultPalette.tertiary,
                                      // ],
                                    ),
                                    ),
                                  ),
                                  Positioned(
                                    right: 0,
                                    height: 30,
                                    child: Text(
                                      whichPropertyTabIsClicked == 2
                                    ? "textDecor  "
                                    : whichPropertyTabIsClicked == 3
                                    ? 'listDecor '
                                    : whichTableDecorationIsClicked==0
                                      ?'tableDecor '
                                      :'tableBgDecor ',
                                      style: GoogleFonts.lexend(
                                          fontSize: 18,
                                          color: defaultPalette
                                              .primary),
                                      textAlign: TextAlign.start,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          SizedBox(height: 3),
                          //PreviewBox of Decoration AND Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                          Stack(
                            children: [
                              SizedBox(
                                  width: width, height: 80),
                              // PreviewBox of Decoration AND Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                              Row(
                              mainAxisAlignment:MainAxisAlignment .spaceBetween,
                              crossAxisAlignment:CrossAxisAlignment.end,
                              children: [
                                Expanded(
                                  //Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                                  child: Column(
                                    crossAxisAlignment:CrossAxisAlignment.start,
                                    children:  !isListDecorationPropertiesToggled
                                    ? [
                                      // if(whichPropertyTabIsClicked !=4)
                                      SizedBox(height:2),
                                      if(decorationIndex != -1)
                                      // Title saying "SUPER"
                                      Padding(
                                        padding: const EdgeInsets.only(left:2.0),
                                        child: Text(
                                          '' +('Layer ' + decorationIndex.toString())
                                          , 
                                          maxLines:1,
                                            style: GoogleFonts.lexend(
                                            color: defaultPalette.extras[0],
                                            height: 1.5,
                                            fontSize: 8,
                                          ),
                                          overflow: TextOverflow.ellipsis
                                        ),
                                      ),
                                      SizedBox(height:2),
                                      runtimeTypeBadge(
                                        (decorationIndex == -1 ?sheetDecorationMap[inx]:sheetDecorationMap[itinx])?? SuperDecoration(id: ''),
                                        onlyLibrary: false
                                        ),
                                      SizedBox(height:4),
                                      //Name of Decoration Editing Field.
                                      SizedBox(
                                        height:
                                            20,
                                        child:
                                            TextFormField(
                                          focusNode:
                                              itemDecorationNameFocusNode,
                                          cursorColor:
                                              defaultPalette.extras[0],
                                          controller:
                                              itemDecorationNameController,
                                          decoration:
                                              InputDecoration(
                                            filled:
                                                true,
                                            fillColor:
                                                defaultPalette.transparent,
                                            contentPadding:
                                                EdgeInsets.all(0),
                                            border:
                                                OutlineInputBorder(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                            enabledBorder:
                                                OutlineInputBorder(
                                              borderSide:
                                                  BorderSide(width: 0, color: defaultPalette.transparent),
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                            focusedBorder:
                                                OutlineInputBorder(
                                              borderSide:
                                                  BorderSide(
                                                width: 3,
                                                color: nameExists
                                                    ? layoutName.text == initialLayoutName
                                                        ? defaultPalette.extras[1]
                                                        : Colors.red
                                                    : defaultPalette.transparent,
                                              ),
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                          ),
                                          onChanged:
                                              (value) {
                                            setState(() {
                                            var currentItemDecoration = sheetDecorationMap[inx];
                                            // itemDecorationNameController.text = value;
                                            if (decorationIndex == -1) {
                                              if (currentItemDecoration is SuperDecoration) {
                                                // Update the decoration and the name in the list item
                                                var updatedDecoration = currentItemDecoration.copyWith(name: value);
                                                sheetDecorationMap[inx] = updatedDecoration;
                                                  
                                              }
                                            } else {
                                              currentItemDecoration = sheetDecorationMap[itinx];

                                              try {
                                                if (currentItemDecoration is SuperDecoration) {
                                                  currentItemDecoration= currentItemDecoration.copyWith(name: value);
                                                  sheetDecorationMap[itinx] = currentItemDecoration;
                                                } else if (currentItemDecoration is ItemDecoration) {
                                                  currentItemDecoration = currentItemDecoration.copyWith(name: value);
                                                  sheetDecorationMap[itinx] = currentItemDecoration;
                                                }
                                              } on Exception catch (e) {
                                                print('Error updating decoration: $e');
                                              }

                                            }
                                            
                                          });


                                          },
                                          style: GoogleFonts.lexend(
                                              color:
                                                  defaultPalette.black,
                                              fontSize: 15),
                                        ),
                                      ),
                                      //ID of Decoration display
                                      SingleChildScrollView(
                                        scrollDirection:
                                            Axis.horizontal,
                                        child: RichText(
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                            text: TextSpan(
                                                style: GoogleFonts.lexend(
                                                  color: defaultPalette.extras[0],
                                                  height: 1.5,
                                                  fontSize: 6,
                                                ),
                                                children: [
                                                  TextSpan(text: 'id: '),
                                                  TextSpan(
                                                    text:sheetDecorationMap[inx]!.id =='yo'
                                                    ?''
                                                    : decorationIndex == -1 
                                                    ? (sheetDecorationMap[inx] as SuperDecoration).id 
                                                    : (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList[decorationIndex],
                                                    style: GoogleFonts.lexend(color: defaultPalette.extras[0], fontSize: 6, fontWeight: FontWeight.normal),
                                                  ),
                                                ])),
                                      ),
                                      // SizedBox(height:5),
                                    ]
                                  : [],
                                  ),
                                ),
                                SizedBox(
                                  width: 5,
                                ),
                                //PreviewBox of Selected Decoration
                                Container(
                                  height: 80,
                                  width: 58,
                                  padding: EdgeInsets.only(
                                      right: 3),
                                  child:buildDecoratedContainer(
                                          decorationIndex == -1
                                              ? (sheetDecorationMap[inx] as SuperDecoration?)
                                              : SuperDecoration(
                                                  id: 'no',
                                                  itemDecorationList: [
                                                    ...(sheetDecorationMap[inx] as SuperDecoration)
                                                        .itemDecorationList
                                                        .sublist(0, (decorationIndex + 1).clamp(0, (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length))
                                                ]),
                                          SizedBox(
                                              width: 30,
                                              height: 30),
                                          true, maxDepth: 5),
                                )
                              ]),
                              // Layer Functions
                              AnimatedPositioned(
                                duration: Durations.medium4,
                                curve: Curves.easeInOut,
                                left:
                                    isListDecorationPropertiesToggled
                                        ? 0
                                        : -width,
                                top: 20,
                                width:
                                    isListDecorationPropertiesToggled
                                        ? width - 102
                                        : 50,
                                child: AnimatedContainer(
                                  duration: Durations.medium4,
                                  curve: Curves.easeInOut,
                                  height: 60,
                                  padding: EdgeInsets.all(4),
                                  transform: Matrix4.identity()
                                    ..translate(
                                        isListDecorationPropertiesToggled
                                            ? 0.0
                                            : (-((sHeight * 0.9) -250) /10).clamp(double.negativeInfinity,50))
                                    ..rotateZ(
                                        isListDecorationPropertiesToggled
                                            ? 0
                                            : -math.pi / 4),
                                  decoration: BoxDecoration(
                                      color:
                                          isListDecorationPropertiesToggled
                                              ? defaultPalette.secondary
                                              : defaultPalette.extras[0],
                                      borderRadius:
                                          BorderRadius.circular(
                                              isListDecorationPropertiesToggled
                                                  ? 10
                                                  : 0),
                                      border: Border.all()),
                                  child: Stack(
                                    children: [
                                      SingleChildScrollView(
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment
                                                  .start,
                                          children: [
                                            Text(
                                              ' layerFunctions',
                                              maxLines: 1,
                                              style: GoogleFonts.lexend(
                                                  fontSize: 13,
                                                  letterSpacing: -1,
                                                  color:
                                                      defaultPalette
                                                          .extras[0]),
                                            ),
                                            //duplicate
                                            roundButton(() {
                                              if (decorationIndex != -1) {
                                              
                                                var decoId = Uuid().v4();
                                                // print('Generated new ID: $decoId');
                                                // print('Parent decoration ID: ${sheetListItem.listDecoration.id}');
                                      
                                                // Step 1: Get the parent decoration safely
                                                var parentItemDecoration = sheetDecorationMap[inx];
                                      
                                                if (parentItemDecoration == null) {
                                                  print('Error: Could not find parent decoration.');
                                                  return;
                                                }
                                      
                                                // Ensure the parent is a SuperDecoration
                                                if (parentItemDecoration is! SuperDecoration) {
                                                  print('Error: Parent decoration is not a SuperDecoration.');
                                                  return;
                                                }
                                      
                                                // Step 2: Create a new decoration based on the current one
                                                var currentItemDecoration = sheetDecorationMap[itinx];
                                      
                                                if (currentItemDecoration == null) {
                                                  print(
                                                      'Error: Could not find current item decoration at index: $decorationIndex');
                                                  return;
                                                }
                                      
                                                // Step 3: Create the new decoration
                                                SheetDecoration newDecoration;
                                                if (currentItemDecoration is ItemDecoration) {
                                                  newDecoration = currentItemDecoration.copyWith(id:'dITM-$decoId');
                                                } else if (currentItemDecoration is SuperDecoration) {
                                                  newDecoration = currentItemDecoration.copyWith(
                                                    id: 'dSPR-$decoId',
                                                    itemDecorationList: List<String>.from(currentItemDecoration.itemDecorationList),
                                                  );
                                                } else {
                                                  print('Error: Unknown decoration type.');
                                                  return;
                                                }
                                      
                                                // Step 4: Add the new decoration to the list
                                                sheetDecorationMap.addAll({newDecoration.id:newDecoration});
                                                // print('New decoration added with ID: $decoId');
                                      
                                                // Step 5: Update the parent decoration with the new ID
                                                var updatedItemDecorationList = [
                                                  ...parentItemDecoration.itemDecorationList.sublist(0, decorationIndex),
                                                  decoId,
                                                  ...parentItemDecoration.itemDecorationList.sublist(decorationIndex),
                                                ];
                                      
                                                var updatedParentDecoration = parentItemDecoration.copyWith(
                                                  itemDecorationList: updatedItemDecorationList,
                                                );
                                      
                                      
                                                  sheetDecorationMap[parentItemDecoration.id] = updatedParentDecoration;
                                            }
                                      
                                      
                                            },
                                                Icon(
                                                  TablerIcons.copy,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'duplicate'),
                                            // make new
                                            roundButton(() {
                                              if (decorationIndex !=
                                                  -1) {}
                                            },
                                                Icon(
                                                  TablerIcons
                                                      .file_star,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'makeNew'),
                                            //delete
                                            roundButton(() {
                                              if (decorationIndex !=
                                                        -1) {
                                                if ((sheetDecorationMap[inx] as SuperDecoration)
                                                        .itemDecorationList
                                                        .length >
                                                    1) {(sheetDecorationMap[inx] as SuperDecoration)
                                                      .itemDecorationList
                                                      .removeAt(
                                                          decorationIndex);
                                                  decorationIndex -=
                                                      1;
                                                }
                                            }
                                            },
                                                Icon(
                                                  TablerIcons.trash,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'delete'),
                                          ],
                                        ),
                                      ),
                                      Positioned(
                                        width: 20,
                                        right:0,
                                        child: roundButton((){
                                          isListDecorationPropertiesToggled = !isListDecorationPropertiesToggled; 
                                        }, Icon(TablerIcons.x, size:14), '')),
                                    ],
                                  ),
                                ),
                              ),
                              //the path display
                              SizedBox(
                                width: width-102,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: Row(
                                    children: itemDecorationPath.map((ex) {
                                      // var tmpinx = int.tryParse(itemDecorationPath[(itemDecorationPath.indexOf(ex)-1).clamp(0, double.infinity).ceil()].substring(itemDecorationPath[(itemDecorationPath.indexOf(ex)-1).clamp(0, double.infinity).ceil()].indexOf('/') + 1))??-55;
                                      var tmpinx = itemDecorationPath[(itemDecorationPath.indexOf(ex)-1).clamp(0, double.infinity).ceil()];
                                      return 
                                        Wrap(
                                          children: [
                                            Material(
                                              color: defaultPalette.transparent,
                                              child: InkWell(
                                                hoverColor:  defaultPalette.secondary,
                                                  highlightColor:  defaultPalette.secondary,
                                                  splashColor:  defaultPalette.secondary,
                                                  onTap: () {
                                                    setState(() {
                                                      print(itemDecorationPath);
                                                      if (itemDecorationPath.last != ex) {
                                                        itemDecorationPath.removeRange(itemDecorationPath.indexOf(ex) + 1, itemDecorationPath.length);
                                                        decorationIndex =-1;
                                                        var tmpinx = ex;
                                                        itemDecorationNameController.text = sheetDecorationMap[tmpinx]!.name;
                                                        updateSheetDecorationvariables(sheetDecorationMap[tmpinx] as SuperDecoration);
                                                      }
                                                    });
                                                  },
                                                child:itemDecorationPath.indexOf(ex)==0
                                              ? Icon(TablerIcons.smart_home, size:15)
                                              :  Container(
                                                  padding: EdgeInsets.symmetric(horizontal: 2),
                                                  decoration: BoxDecoration(
                                                    shape: BoxShape.circle,),
                                                  child: Text(
                                                    (sheetDecorationMap[tmpinx] as SuperDecoration).itemDecorationList.indexOf(ex).toString(),
                                                    style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w600,
                                                    color: defaultPalette.extras[0])
                                                  ),              
                                                ),),
                                            ),
                                            const Icon(TablerIcons.chevron_compact_right, size:15),
                                          ],
                                        )
                                      ;
                                    },).toList(),
                                  ),
                                ),
                              ),
                              
                            ],
                          ),
                        ],
                      ),
                    ),
                    SizedBox(width: 2),
                  ],
                ),
              ],
            )),
        ),
      ),

      //TreeView of Properties per layer and THE ALL THE EDITOR UIs and LIBRARY
      Positioned(
        left: showDecorationLayers ? 48 : 12,
        top: 138,
        right: 16,
        bottom: 18,
        child: Builder(builder: (context) {
          var style = GoogleFonts.lexend(
              fontSize: 13, color: defaultPalette.extras[0]);
          var childStyle = style.copyWith(fontSize: 11);
          var iconColor = defaultPalette.extras[0];
          double childPinSize = 18;
          return ClipRRect(
            borderRadius: BorderRadius.circular(9).copyWith(
                bottomLeft: Radius.circular( showDecorationLayers ? 10 : 25),
                bottomRight: Radius.circular(20)),
            child: Container(
              decoration: BoxDecoration(
                color: defaultPalette.secondary,
                border: Border.all(color: defaultPalette.extras[0],),
                borderRadius: BorderRadius.circular(9).copyWith(
                    bottomLeft: Radius.circular(
                        showDecorationLayers ? 10 : 25),
                    bottomRight: Radius.circular(20)),
              ),
              child: Stack(
                children: [
                  //TreeView of Properties per layer and THE ALL THE EDITOR UIs
                  Padding(
                    padding: const EdgeInsets.all(0).copyWith(top: isListDecorationLibraryToggled? 35:0),
                    child: ScrollConfiguration(
                      behavior:
                          ScrollBehavior().copyWith(scrollbars: false),
                      child: DynMouseScroll(
                          durationMS: 500,
                          scrollSpeed: 1,
                          builder: (context, controller, physics) {
                            SheetDecoration currentItemDecoration = SuperDecoration(id: 'yo', name: 'name');
                            
                            if (decorationIndex != -1) {
                            currentItemDecoration = sheetDecorationMap[itinx]!;
                            }
                            return SingleChildScrollView(
                              controller:!isListDecorationLibraryToggled? controller:null,
                              physics:!isListDecorationLibraryToggled? physics:NeverScrollableScrollPhysics(),

                              child: Column(
                                children: [
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled)
                                  Container(
                                    decoration: BoxDecoration(
                                        color:
                                            defaultPalette.transparent,
                                        borderRadius:
                                            BorderRadius.circular(6)),
                                    child: decorationIndex != -1
                                  ? currentItemDecoration
                                      is ItemDecoration
                                  ? TreeView<String>(
                                      showSelectAll: true,
                                      showExpandCollapseButton:
                                          true,
                                      width:
                                          showDecorationLayers
                                              ? width - 30
                                              : width,
                                      onSelectionChanged:
                                          (p0) {
                                        // print(p0);
                                        setState(() {
                                        var selectedItemDecoration =sheetDecorationMap[itinx] as ItemDecoration;
                    
                                        // Update the decoration with new pinned properties
                                        selectedItemDecoration = selectedItemDecoration.copyWith(
                                          pinned: {
                                            'padding': {
                                              'isPinned': p0[1],      // 1
                                              'top': p0[2],           // 2
                                              'bottom': p0[3],        // 3
                                              'left': p0[4],          // 4
                                              'right': p0[5],         // 5
                                            },
                                            'margin': {
                                              'isPinned': p0[6],      // 6
                                              'top': p0[7],           // 7
                                              'bottom': p0[8],        // 8
                                              'left': p0[9],          // 9
                                              'right': p0[10],        // 10
                                            },
                                            'decoration': {
                                              'isPinned': p0[11],     // 11
                                              'color': p0[12],        // 12
                                              'border': p0[13],       // 13
                                              'borderRadius': {
                                                'isPinned': p0[14],   // 14
                                                'topLeft': p0[15],    // 15
                                                'topRight': p0[16],   // 16
                                                'bottomLeft': p0[17], // 17
                                                'bottomRight': p0[18],// 18
                                              },
                                              'boxShadow': p0[19],    // 19
                                              'image': {
                                                'isPinned': p0[20],   // 20
                                                'bytes': p0[21],      // 21
                                                'fit': p0[22],        // 22
                                                'repeat': p0[23],     // 23
                                                'alignment': p0[24],  // 24
                                                'scale': p0[25],      // 25
                                                'opacity': p0[26],    // 26
                                                'filterQuality': p0[27], // 27
                                                'invertColors': p0[28],  // 28
                                              },   
                                            },
                                            'foregroundDecoration': {
                                              'isPinned': p0[29],     // 29
                                              'color': p0[30],        // 30
                                              'border': p0[31],       // 31
                                              'borderRadius': {
                                                'isPinned': p0[32],   // 32
                                                'topLeft': p0[33],    // 33
                                                'topRight': p0[34],   // 34
                                                'bottomLeft': p0[35], // 35
                                                'bottomRight': p0[36],// 36
                                              },
                                              'boxShadow': p0[37],    // 37
                                              'image': {
                                                'isPinned': p0[38],   // 38
                                                'bytes': p0[39],      // 39
                                                'fit': p0[40],        // 40
                                                'repeat': p0[41],     // 41
                                                'alignment': p0[42],  // 42
                                                'scale': p0[43],      // 43
                                                'opacity': p0[44],    // 44
                                                'filterQuality': p0[45], // 45
                                                'invertColors': p0[46],  // 46
                                              }, 
                                            },
                                            'transform': {
                                              'isPinned': p0[47],     // 47
                                            },
                                          },
                                        );
                    
                                        // ✅ Update the main decoration list with the modified item decoration
                                        // int index = sheetDecorationMap.indexWhere((decoration) => decoration.id == selectedItemDecoration.id);
                                        
                                        sheetDecorationMap[selectedItemDecoration.id] = selectedItemDecoration;
                                        
                    
                                        // ✅ Update the decoration in the sheetListItem
                                          
                    
                                        print('Updated decoration: ${selectedItemDecoration.id}');
                                      });
                    
                                      },
                                      onExpansionChanged:
                                          (e) {
                                        setState(() {
                                          // print(expansionLevels);
                                          expansionLevels = [
                                            e[0],
                                            e[1],
                                            e[6],
                                            e[11],
                                            e[14],
                                            e[20],
                                            e[29],
                                            e[32],
                                            e[38],
                                          ];
                                        });
                                      },
                                      nodes: [
                                          TreeNode(
                                              indentSize: 2,
                                              selectable:
                                                  false,
                                              alternateChildren:
                                                  true,
                                              isExpanded:
                                                  expansionLevels[
                                                      0],
                                              children: [
                                                //padding
                                                TreeNode(
                                                    isExpanded:
                                                        expansionLevels[
                                                            1],
                                                    label: Text(
                                                        'padding',
                                                        style:
                                                            style),
                                                    isSelected:
                                                        currentItemDecoration.pinned['padding'][
                                                            'isPinned'],
                                                    icon: Icon(
                                                        TablerIcons
                                                            .box_padding,
                                                        size:
                                                            16,
                                                        color:
                                                            iconColor),
                                                    indentSize:
                                                        8,
                                                    alternateChildren:
                                                        false,
                                                    checkboxSize:
                                                        20,
                                                    children: [
                                                      TreeNode<String>(
                                                        label: Text('top',style: childStyle),
                                                        icon: Transform.rotate(
                                                            angle: pi,
                                                            child: Icon(TablerIcons.layout_bottombar_inactive, size: 15)),
                                                        checkboxSize:childPinSize,
                                                        isSelected:currentItemDecoration.pinned['padding']['top'],
                                                      ),
                                                      TreeNode<String>(
                                                        label: Text('bottom',style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_bottombar_inactive,
                                                            size: 15),
                                                        checkboxSize:childPinSize,
                                                        isSelected: currentItemDecoration.pinned['padding']['bottom'],
                                                      ),
                                                      TreeNode<String>(
                                                        label: Text('left',style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_sidebar_inactive,
                                                            size: 15),
                                                        checkboxSize:childPinSize,
                                                        isSelected:currentItemDecoration.pinned['padding']['left'],
                                                      ),
                                                      TreeNode<  String>(
                                                        label: Text(
                                                            'right',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_sidebar_right_inactive,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['padding']['right'],
                                                      )
                                                    ]),
                                                //margin
                                                TreeNode(
                                                    label: Text(
                                                        'margin',
                                                        style:
                                                            style),
                                                    isExpanded:
                                                        expansionLevels[
                                                            2],
                                                    icon: Icon(TablerIcons.box_margin,
                                                        size:
                                                            16,
                                                        color:
                                                            iconColor),
                                                    indentSize:
                                                        8,
                                                    alternateChildren:
                                                        false,
                                                    checkboxSize:
                                                        20,
                                                    isSelected: (currentItemDecoration)
                                                        .pinned['margin']['isPinned'],
                                                    children: [
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'top',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_bottom,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['top'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'bottom',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_top,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['bottom'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'left',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_right,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['left'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'right',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_left,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['right'],
                                                      )
                                                    ]),
                                                //decoration
                                                for (int i = 0;
                                                    i < 2;
                                                    i++)
                                                  TreeNode(
                                                      isExpanded: expansionLevels[i == 0
                                                          ? 3
                                                          : 6],
                                                      label: Text(
                                                          i == 0
                                                              ? 'decor'
                                                              : 'foreground',
                                                          style:
                                                              style),
                                                      icon: Icon(  TablerIcons .palette,
                                                          size:  16,
                                                          color: iconColor),
                                                      indentSize: 8,
                                                      alternateChildren:  false,
                                                      checkboxSize:   20,
                                                      isSelected: (currentItemDecoration).pinned[i ==0
                                                          ? 'decoration'
                                                          : 'foregroundDecoration']['isPinned'],
                                                      children: [
                                                        TreeNode< String>(
                                                          label: Text('color', style: childStyle),
                                                          icon: Icon(TablerIcons.color_swatch, size: 15),
                                                          checkboxSize: childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['color'],
                                                        ),
                                                        TreeNode< String>(
                                                          label:  Text('border', style: childStyle),
                                                          icon: Icon(TablerIcons.border_sides, size: 15),
                                                          checkboxSize:
                                                              childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['border'],
                                                        ),
                                                        TreeNode<String>(
                                                            label: Text('cornerRadius', style: childStyle),
                                                            icon: Icon(TablerIcons.border_corners, size: 15),
                                                            checkboxSize: childPinSize,
                                                            isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['isPinned'],
                                                            isExpanded: expansionLevels[i == 0 ? 4 : 7],
                                                            alternateChildren: false,
                                                            children: [
                                                              TreeNode<String>(label: Text('topLeft', style: childStyle), icon: Icon(TablerIcons.radius_top_left, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['topLeft']),
                                                              TreeNode<String>(label: Text('topRight', style: childStyle), icon: Icon(TablerIcons.radius_top_right, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['topRight']),
                                                              TreeNode<String>(label: Text('bottomLeft', style: childStyle), icon: Icon(TablerIcons.radius_bottom_left, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['bottomLeft']),
                                                              TreeNode<String>(label: Text('bottomRight', style: childStyle), icon: Icon(TablerIcons.radius_bottom_right, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['bottomRight']),
                                                            ]),
                                                        TreeNode<
                                                            String>(
                                                          label:
                                                              Text('shadow', style: childStyle),
                                                          icon:
                                                              Icon(TablerIcons.shadow, size: 15),
                                                          checkboxSize:
                                                              childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['boxShadow'],
                                                        ),
                                                        TreeNode<String>(
                                                            label: Text('image', style: childStyle),
                                                            isExpanded: expansionLevels[i == 0 ? 5 : 8],
                                                            icon: Icon(TablerIcons.photo, size: 15),
                                                            checkboxSize: childPinSize,
                                                            alternateChildren: false,
                                                            indentSize: 5,
                                                            isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['isPinned'],
                                                            children: [
                                                              TreeNode<String>(
                                                                label: Text('file', style: childStyle),
                                                                selectable: false,
                                                                icon: Icon(TablerIcons.file_type_jpg, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['bytes'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('fit', style: childStyle),
                                                                icon: Icon(TablerIcons.artboard, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['fit'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('repeat', style: childStyle),
                                                                icon: Icon(TablerIcons.layout_grid, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['repeat'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('align', style: childStyle),
                                                                icon: Icon(TablerIcons.align_box_left_stretch, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['alignment'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('scale', style: childStyle),
                                                                icon: Icon(TablerIcons.scale, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['scale'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('opacity', style: childStyle),
                                                                icon: Icon(TablerIcons.square_toggle, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['opacity'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('quality', style: childStyle),
                                                                icon: Icon(TablerIcons.michelin_star, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['filterQuality'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('invert', style: childStyle),
                                                                icon: Icon(TablerIcons.brightness_2, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['invertColors'],
                                                              ),
                                                            ]),
                                                        
                                                      ]),
                    
                                                //transform
                                                TreeNode(
                                                  label: Text(
                                                      'transform',
                                                      style:
                                                          style),
                                              icon: Icon(
                                                  TablerIcons .transform_point,
                                                  size:  16,
                                                  color: iconColor),
                                              indentSize: 17,
                                              alternateChildren: false,
                                              checkboxSize:  20,
                                              isSelected: (currentItemDecoration)
                                                  .pinned['transform']['isPinned'],
                                            ),
                                          ])
                                        ])
                                  : null
                                  : null,
                                  ),
                                  //ALL THE EDITOR UIs
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled && itinx !=-1)
                                    if (sheetDecorationMap[itinx]
                                      is ItemDecoration)
                                    ...buildItemDecorationEditor(context,
                                        (sheetDecorationMap[itinx]
                                            as ItemDecoration), shadowLayerIndex: sheetDecorationVariables[decorationIndex].listShadowLayerSelectedIndex),
                                  //If selected layer is superdecoration
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled && itinx !=-1)
                                    if (sheetDecorationMap[itinx]
                                      is SuperDecoration)
                                        ...buildSuperDecorationEditor(context,sheetDecorationMap[itinx]
                                            as SuperDecoration),
                                  // if(decorationIndex == -1 && !isListDecorationLibraryToggled )
                                  // ...buildSuperDecorationEditor(context,sheetDecorationMap[inx] as SuperDecoration),
                                            
                                  //THE LIBRARY FOR DECORATION          
                                  if(isListDecorationLibraryToggled)
                                  buildSheetDecorationLibrary(
                                    (p0, p1, p2, padding, showText) => roundButton(p0, p1, p2, padding: padding,showText: showText),
                                    inx,
                                    controller,
                                    physics,
                                    width,
                                    itemDecorationPath,
                                    itemDecorationNameController,
                                    sHeight-350,
                                  )
                                  ],
                              ),
                            );
                          }),
                    ),
                  ),
                  //Decoration Search Bar
                  if(isListDecorationLibraryToggled)
                  Container(
                  height: 25,
                  margin: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: defaultPalette.primary,
                    border: Border.all(color: defaultPalette.extras[0],),
                    borderRadius: BorderRadius.circular(5)
                  ),
                  child: TextFormField(
                      style: GoogleFonts.lexend(
                          color: defaultPalette.extras[0],
                          letterSpacing:-1,
                          fontSize: 15),
                      cursorColor: defaultPalette.tertiary,
                      controller: decorationSearchController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.all(0),
                        hintText: 'searchDecors...',
                        focusColor: defaultPalette.primary,
                        hintStyle: GoogleFonts.lexend(
                          color: defaultPalette.extras[0],
                          letterSpacing:-1,
                          fontSize: 15),
                        prefixIcon: Icon(TablerIcons.search, size:15,
                            color: defaultPalette.extras[0]),
                        border: OutlineInputBorder(
                          borderSide: BorderSide.none, 
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      onChanged: (query) {
                        setState(() {
                          // Filter the list of SheetDecoration by their names
                          filteredDecorations = Map.fromEntries(
                            sheetDecorationMap.entries.where(
                              (entry) => entry.value.name.toLowerCase().contains(query.toLowerCase()),
                            ),
                          );
                            // Debugging output
                        });
                      },
                            
                    ),
                  ),
                                      
                ],
              ),
            ),
          );
        }),
      ),

      //BLACK STRIP ANIMATED OF DECORATION LAYERs BACKGRGOUND
      AnimatedPositioned(
        duration: Durations.medium1,
        curve: Curves.easeOut,
        top: 136,
        left: showDecorationLayers ? 12.5 : 12,
        child: AnimatedContainer(
          duration:((whichPropertyTabIsClicked==2?whichTextPropertyTabIsClicked==2:false) ||(whichPropertyTabIsClicked==3?whichListPropertyTabIsClicked==1:false)||(whichPropertyTabIsClicked==4?whichTablePropertyTabIsClicked==2:false)) 
              ? Durations.medium4:Duration.zero,
          curve: Curves.easeInOut,
          height:
              showDecorationLayers ? (sHeight * 0.9) - 230 : 0,
          width: 25,
          alignment: Alignment.bottomCenter,
          padding: EdgeInsets.only(left:3),
          decoration: BoxDecoration(
            color: showDecorationLayers ?defaultPalette.extras[0]:defaultPalette.primary,
            // border:Border.all(color:defaultPalette.extras[0],width:1),
            borderRadius: BorderRadius.circular(
                    showDecorationLayers ? 50 : 0),
          ),
          child: Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(
                    showDecorationLayers ? 50 : 0),
                // child: BubbleBackground(
                //   // config: BubbleConfig(
                //   //   minRadius: 5,
                //   //   maxRadius: 15
                //   // ),      
                //                       ),
              ),
              // Text('\n\nLayers \n \n     ',
              //     style: GoogleFonts.bungee(
              //         color: defaultPalette.secondary.withOpacity(0.5),
              //         fontSize: 11)),
            ],
          ),
        ),
      ),
      
      //LAYERS OF DECORATION AS TILES REORDERABLE
      AnimatedPositioned(
        duration: Durations.medium3,
        curve: Curves.easeInBack,
        bottom: 20,
        left: showDecorationLayers ? 6.5 : -50,
        child: ClipRRect(
          borderRadius: BorderRadius.circular(0).copyWith(
              topRight: Radius.circular(5),
              bottomRight: Radius.circular(5)),
          child: AnimatedContainer(
              duration: Durations.medium1,
              curve: Curves.easeInOut,
              height: (sHeight * 0.9) - 230,
              width: 38,
              padding: EdgeInsets.only(bottom: 10),
              decoration: BoxDecoration(
                // color: defaultPalette.secondary,
                borderRadius: BorderRadius.circular(50).copyWith(
                  bottomLeft: Radius.circular(0),
                  bottomRight: Radius.circular(0)),
              ),
              child: Column(
                children: [
                  Tooltip(
                    message: 'addNewItemDecoration',
                    child: MouseRegion(
                      cursor:SystemMouseCursors.click,
                      child: GestureDetector(
                        onTap:() {
                          setState(() {
                            
                            var itemDecoId = 'dITM-${ const Uuid().v4()}';
                            var itemDecoration = ItemDecoration(id: itemDecoId);
                            // var inx = int.tryParse(itemDecorationPath.last.substring(itemDecorationPath.last.indexOf('/') + 1))??-2;
                            var inx = itemDecorationPath.last;
                            if ((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length < 70) {
                              // Add the new decoration to the main list
                              sheetDecorationMap.addAll({itemDecoration.id:itemDecoration});
                              print('added to main list');
                              (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList =  [...(sheetDecorationMap[inx] as SuperDecoration).itemDecorationList, itemDecoId];
                              print('added to super list');
                              // Get the reference to the SuperDecoration from the list
                              
                              updateSheetDecorationvariables(sheetDecorationMap[inx] as  SuperDecoration);
                              
                            } else {
                              print('Guys come on, turn this into a super now');
                            }
                          });
                
                        },
                        child: Container(
                          margin: EdgeInsets.only(left: 7,right: 8),
                          decoration:BoxDecoration(
                            color:defaultPalette.primary,
                            // border:Border.all(width:1.5),
                            borderRadius:BorderRadius.circular(20),
                            
                          ),
                          width: 38,
                          height: 23,
                          child: Icon(TablerIcons.plus, size:18)
                        ),
                      ),
                    ),
                  ),
                  SizedBox(height:4),
                  Expanded(
                    child: ScrollConfiguration(
                      behavior:
                          ScrollBehavior().copyWith(scrollbars: false),
                      child: DynMouseScroll(
                          durationMS: 500,
                          scrollSpeed: 1,
                          builder: (context, controller, physics) {
                            List<MapEntry<int, SheetDecoration>> decorationEntries = (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList
                            .asMap().entries.toList().reversed.map((entry) {
                              // Get the actual decoration using the ID
                              var tmpinx =entry.value;
                        
                              final decoration = sheetDecorationMap[tmpinx];
                              return MapEntry(entry.key, decoration!);
                            }).toList();
                            return ScrollbarUltima.semicircle(
                              alwaysShowThumb: true,
                              controller: controller,
                              scrollbarPosition: ScrollbarPosition.left,
                              backgroundColor: defaultPalette.extras[0],
                              scrollbarLength: (sHeight * 0.9) - 270,
                              isDraggable: true,
                              thumbCrossAxisSize: 5,
                              elevation: 0,
                              arrowsColor: defaultPalette.primary,
                              child: Padding(
                                padding:
                                    const EdgeInsets.only(left: 8.0),
                                child: ReorderableListView(
                                  onReorder: (oldIndex, newIndex) {
                                    setState(() {
                                      final itemList = (sheetDecorationMap[inx] as SuperDecoration)
                                          .itemDecorationList.reversed.toList();
                    
                                      final elem = itemList
                                            .removeAt(oldIndex);
                                        if ((newIndex !=
                                            itemList.length + 2)) {
                                          print('hah' +
                                              itemList.length
                                                  .toString() +
                                              ' ' +
                                              newIndex.toString());
                    
                                          
                                          if (oldIndex < newIndex) {
                                            itemList.insert(newIndex-1,elem);
                                            // decorationIndex =
                                            //     (newIndex - 1);
                                          } else {
                                            // decorationIndex =
                                            //     newIndex;
                                            itemList.insert(
                                              newIndex, elem);
                                          }
                                          print('hah' +
                                              oldIndex
                                                  .toString() +
                                              ' ' +
                                              newIndex.toString());
                                        } else {
                                          itemList.add(elem);
                                          // decorationIndex =
                                          //     itemList.length - 1;
                                          print(oldIndex.toString() +
                                              ' ' +
                                              newIndex.toString());
                                        }
                                        (sheetDecorationMap[inx] as SuperDecoration)
                                          .itemDecorationList = itemList.reversed.toList();
                                        
                                      updateSheetDecorationvariables((sheetDecorationMap[inx] as SuperDecoration));
                                    });
                                  },
                                  proxyDecorator:
                                      (child, index, animation) {
                                    return child;
                                  },
                                  buildDefaultDragHandles: false,
                                  physics: physics,
                                  scrollController: controller,
                                  children: [
                                    for (final entry in decorationEntries)
                                      ReorderableDragStartListener(
                                        index: (((sheetDecorationMap[inx] as SuperDecoration)
                                                .itemDecorationList
                                                .length -
                                            1) -
                                            entry.key),
                                        key: ValueKey(entry.key),
                                        child: Stack(
                                          children: [
                                            //tiny layer body of decoration
                                            AnimatedContainer(
                                              duration: Duration(
                                                  milliseconds: (500 +
                                                          (300 /(((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length == 1 
                                                          ? 2 
                                                          : (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length) - 1)) * entry.key)
                                                      .round()),
                                              curve: Curves.easeIn,
                                              height: (((sHeight * 0.9) - 250) / (decorationIndex == entry.key ? 8 : 10.3))
                                                  .clamp(0, decorationIndex == entry.key ? 70 : 50),
                                              alignment: Alignment.topCenter, // Set pivot to bottom-left
                                              transform: Matrix4.identity()
                                              ..translate(showDecorationLayers
                                                    ? 0.0
                                                    : (-((sHeight * 0.9) - 250) /10).clamp(double.negativeInfinity, 50))
                                                ..rotateZ( showDecorationLayers? 0: -math.pi / 2),
                                              margin: EdgeInsets.only(
                                                  bottom: 5,
                                                  right: showDecorationLayers
                                                      ? 0
                                                      : (10 *entry.key) + 1),
                                              padding: EdgeInsets.only(
                                                  top: 4, left: 15),
                    
                                              decoration: BoxDecoration(
                                                color: entry.value
                                                        is ItemDecoration
                                                    ? decorationIndex ==
                                                            entry.key
                                                        ? defaultPalette
                                                            .extras[0]
                                                        : defaultPalette
                                                            .tertiary
                                                    : decorationIndex ==
                                                            entry.key
                                                        ? defaultPalette
                                                            .extras[0]
                                                        :defaultPalette
                                                        .extras[1],
                                                border:Border.all()      ,  
                                                borderRadius:
                                                    BorderRadius.circular(
                                                            showDecorationLayers
                                                                ? 5
                                                                : 500)
                                                        .copyWith(),
                                              ),
                                            ),
                    
                                            //Border for when tapped
                                            AnimatedOpacity(
                                              duration: Duration(
                                                  milliseconds: (500 +
                                                          (300 /
                                                                  (((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length == 1 ? 2 : (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length) -
                                                                      1)) *
                                                              entry.key)
                                                      .round()),
                                              opacity:
                                                  decorationIndex ==
                                                          entry.key
                                                      ? 1
                                                      : 0,
                                              child: AnimatedContainer(
                                                duration: Duration(
                                                    milliseconds: 600),
                                                curve: Curves.easeIn,
                                                height: (((sHeight *
                                                                0.9) -
                                                            250) /
                                                        (decorationIndex ==
                                                                entry
                                                                    .key
                                                            ? 8
                                                            : 10.3))
                                                    .clamp(
                                                        0,
                                                        decorationIndex ==
                                                                entry
                                                                    .key
                                                            ? 70
                                                            : 50),
                                                alignment: Alignment
                                                    .topLeft, // Set pivot to bottom-left
                                                transform: Matrix4
                                                    .identity()
                                                  ..translate(showDecorationLayers
                                                      ? 0.0
                                                      : (-((sHeight * 0.9) -
                                                                  250) /
                                                              10)
                                                          .clamp(
                                                              double
                                                                  .negativeInfinity,
                                                              50))
                                                  ..rotateZ(
                                                      showDecorationLayers
                                                          ? 0
                                                          : -math.pi /
                                                              2),
                                                margin: EdgeInsets.only(
                                                    bottom: 5,
                                                    right: showDecorationLayers
                                                        ? 0
                                                        : (10 *
                                                                entry
                                                                    .key) +
                                                            1),
                                                padding:
                                                    EdgeInsets.all(1),
                                                decoration:
                                                    BoxDecoration(
                                                        // color: entry.value is ItemDecoration? defaultPalette.tertiary:defaultPalette.extras[1] ,
                                                        borderRadius:
                                                            BorderRadius.circular(
                                                                showDecorationLayers
                                                                    ? 5
                                                                    : 500),
                                                        border: Border(
                                                          right: BorderSide(
                                                              color:entry.value
                                                        is ItemDecoration
                                                    ? defaultPalette
                                                                  .tertiary: defaultPalette.extras[1],
                                                              width: 2),
                                                          left: BorderSide(
                                                              color: entry.value
                                                        is ItemDecoration
                                                    ? defaultPalette
                                                                  .tertiary: defaultPalette.extras[1],
                                                              width: 2),
                                                          top: BorderSide(
                                                              color: entry.value
                                                        is ItemDecoration
                                                    ? defaultPalette
                                                                  .tertiary: defaultPalette.extras[1],
                                                              width: 2),
                                                          bottom: BorderSide(
                                                              color: entry.value
                                                        is ItemDecoration
                                                    ? defaultPalette
                                                                  .tertiary: defaultPalette.extras[1],
                                                              width:
                                                                  16),
                                                        )),
                                                child:
                                                    buildDecoratedContainer(
                                                        SuperDecoration(
                                                            id: 'id',
                                                            itemDecorationList: [
                                                              (sheetDecorationMap[inx] as SuperDecoration)
                                                                  .itemDecorationList[entry.key]
                                                            ]),
                                                        SizedBox(
                                                          height: 10,
                                                          width: 10,
                                                        ),
                                                        true, maxDepth: 2),
                                              ),
                                            ),
                    
                                            //onTap onHover Functions
                                            // if(decorationIndex != entry.key)
                                            Padding(
                                              padding:
                                                  const EdgeInsets.all(
                                                      1.0),
                                              child: ClipRRect(
                                                borderRadius:
                                                    BorderRadius.circular(
                                                        showDecorationLayers
                                                            ? 5
                                                            : 500),
                                                child: Material(
                                                  color: defaultPalette
                                                      .transparent,
                                                  child: InkWell(
                                                      hoverColor: decorationIndex == entry.key
                                                          ? defaultPalette.transparent
                                                          : defaultPalette.primary,
                                                      highlightColor: decorationIndex ==entry.key
                                                          ? defaultPalette.transparent
                                                          : defaultPalette.primary,
                                                      splashColor: decorationIndex == entry.key
                                                          ? defaultPalette .transparent
                                                          : defaultPalette.tertiary,
                                                      onTap: () {
                                                        setState(() {
                                                          if (decorationIndex !=entry.key) {
                                                              decorationIndex =entry.key;
                                                              print(decorationIndex);
                                                              itinx = (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList[decorationIndex];
                           
                                                              var itemDecoration = sheetDecorationMap[itinx];
                                                              itemDecorationNameController .text =itemDecoration!.name;
                                                              isListDecorationLibraryToggled =false;
                                                              print(decorationIndex);
                                                              // updateListDecorationVariables(sIndex: -1);
                    
                                                              if (itemDecoration
                                                                  is SuperDecoration) {
                                                                    print(decorationIndex);
                                                                updateSheetDecorationvariables(itemDecoration);
                                                                return;
                                                              } else{
                                                                print(decorationIndex);
                                                                // _findSheetListItem();
                                                                updateSheetDecorationvariables((sheetDecorationMap[inx] as SuperDecoration));
                                                                
                                                                decorationIndex = entry.key;
                                                                }
                                                            }
                                                        });
                                                      },
                                                      onDoubleTap: () {
                                                        setState(() {
                                                          var tmpinx = (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList[entry.key];
                                                          var itemDecoration = sheetDecorationMap[tmpinx];
                                                          if (itemDecoration is SuperDecoration) {    
                                                          listDecorationNameController.text = itemDecoration.name;
                                                          isListDecorationLibraryToggled = false;
                    
                                                          updateSheetDecorationvariables(itemDecoration);
                                                          itemDecorationPath.add(itemDecoration.id);
                                                          print(itemDecorationPath);
                                                          decorationIndex = -1;
                                                          }
                    
                                                        });
                                                      },
                                                      child: SizedBox(
                                                        width: 40,
                                                        height: (((sHeight * 0.9) - 250) / (decorationIndex == entry.key ? 8 : 10.3))
                                                  .clamp(0, decorationIndex == entry.key ? 70 : 50) -
                                                            2,
                                                      )),
                                                ),
                                              ),
                                            ),
                    
                                            //Numbering on the right of the tiny layer box
                                            AnimatedPositioned(
                                              duration: Duration(
                                                  milliseconds: (500 +
                                                          (300 /
                                                                  (((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length == 1 ? 2 : (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length) -
                                                                      1)) *
                                                              entry.key)
                                                      .round()),
                                              bottom:
                                                  showDecorationLayers
                                                      ? decorationIndex ==
                                                              entry.key
                                                          ? 6
                                                          : (((sHeight * 0.9) - 250) /
                                                                      10)
                                                                  .clamp(
                                                                      0,
                                                                      50) /
                                                              2.5
                                                      : 0,
                                              right: decorationIndex ==
                                                      entry.key
                                                  ? 8
                                                  : 2,
                                              child: decorationIndex ==
                                                      entry.key
                                                  ? GestureDetector(
                                                      onTap: () {
                                                        if (decorationIndex !=
                                                            -1) {
                                                          setState(() {
                                                            if ((sheetDecorationMap[inx] as SuperDecoration)
                                                                    .itemDecorationList
                                                                    .length >
                                                                0) {
                                                              (sheetDecorationMap[inx] as SuperDecoration)
                                                                  .itemDecorationList
                                                                  .removeAt(
                                                                      decorationIndex);
                                                              decorationIndex =-1;
                                                              print(itemDecorationPath);
                                                              updateSheetDecorationvariables((sheetDecorationMap[inx] as SuperDecoration));
                                                              itemDecorationNameController.text = (sheetDecorationMap[inx] as SuperDecoration).name;
                                                            }
                    
                                                          });
                                                        }
                                                      },
                                                      child: Icon(
                                                        TablerIcons
                                                            .trash,
                                                        size: 14,
                                                        color: defaultPalette
                                                            .extras[0],
                                                      ),
                                                    )
                                                  : CountingAnimation(
                                                      value: (entry.key)
                                                          .toString(),
                                                      mainAlignment:
                                                          MainAxisAlignment
                                                              .end,
                                                      singleScollDuration:
                                                          Durations
                                                              .short1,
                                                      scrollCount: 2,
                                                      textStyle:
                                                          GoogleFonts
                                                              .bungee(
                                                        fontSize:
                                                            decorationIndex ==
                                                                    entry.key
                                                                ? 15
                                                                : 10,
                                                        color: decorationIndex ==
                                                                entry
                                                                    .key
                                                            ? defaultPalette
                                                                .primary
                                                            : defaultPalette
                                                                .extras[0],
                                                      ),
                                                    ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    SizedBox(
                                        key: ValueKey('rty'),
                                        height: 10)
                                  ],
                                ),
                              ),
                            );
                          }),
                    ),
                  ),
                ],
              )),
        ),
      ),
                    
      ];
  }
  
  Widget buildSheetDecorationLibrary(
    Widget Function(void Function(), Widget, String, EdgeInsets padding, bool showText) roundButton,
    String inx, 
    ScrollController controller,
    ScrollPhysics physics,
    double width,
    List<String> itemDecorationPath, TextEditingController itemDecorationNameController,
    double height,
    {
      bool onlySuper=false,
      bool onlyLibrary=false,
    }
    
    ){
    return Padding(
      padding: const EdgeInsets.all(4.0).copyWith(right: !onlyLibrary?2: 1),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          if(!onlyLibrary)
          ...[
            MouseRegion(
            cursor:SystemMouseCursors.click,
            child: GestureDetector(
              onTap:(){
                 var currentItemDecoration = (sheetDecorationMap[inx] as SuperDecoration); 
                  setState(() {
                    if (currentItemDecoration.itemDecorationList.length < 70) {
                      (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.add(newSuperDecoration(placeholder: false).id);
                    } else {
                      print('Guys come on, turn this into a super now');
                    }
                  });
              },
              child: Container(
                
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    
                  Icon(TablerIcons.plus, size:15),
                  SizedBox(width:5),
                  Expanded(
                    child: Text('newSuperDecoration',
                    maxLines:1,
                    overflow: TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                      color: defaultPalette.extras[0], 
                      fontWeight:FontWeight.w500,
                      letterSpacing: -0.5,
                      fontSize: 12,
                      height: 1.2,
                      )
                    ),
                  )
                  ],
                ),
              ),
            ),
          ), 
          SizedBox(height:5),],
          SizedBox(
            height: height,
            child: ScrollbarUltima(
              alwaysShowThumb: true,
              controller: controller,
              scrollbarPosition:
                  ScrollbarPosition.right,
              backgroundColor: defaultPalette.primary,
              isDraggable: true,
              maxDynamicThumbLength: 90,
              minDynamicThumbLength: 50,
              thumbBuilder:
                  (context, animation, widgetStates) {
                return Container(
                  decoration: BoxDecoration(
                      border: Border.all(
                        width: !onlyLibrary? 1: 0.2,
                      ),
                      color: !onlyLibrary?defaultPalette.primary:defaultPalette.secondary,
                      borderRadius:
                          BorderRadius.circular(2)),
                  width: 5,
                );
              },
              child: ListView.builder(
                controller: controller,
                physics: physics,
                padding: EdgeInsets.only(right:!onlyLibrary?7:8),
                itemCount: filteredDecorations.length,
                itemBuilder: (context, index) {
                  final entries = filteredDecorations.entries.toList();
                  if (index >= entries.length) return SizedBox.shrink();
                  final e = entries[index].value;

                  if (e ==null) {
                    print('Decoration is null at index $index');
                    return SizedBox.shrink();
                  }

                  if (onlySuper && e is ItemDecoration){
                    return SizedBox.shrink();
                  }
                  
                  return Container(
                    width: width,
                    margin: EdgeInsets.only(bottom: index ==filteredDecorations.length-1?35: 4),
                    padding: !onlyLibrary?EdgeInsets.all(3):null,
                    decoration:!onlyLibrary? BoxDecoration(
                      color: defaultPalette.primary,
                      border: Border.all(
                        color: defaultPalette.extras[0],
                      ),
                      borderRadius: BorderRadius.circular(5),
                    ):null,
                    child: Column(
                      children: [
                        // The preview in the cards and details in searching decoration
                        
                        MouseRegion(
                          cursor:!onlyLibrary?MouseCursor.defer: SystemMouseCursors.click,
                          child: GestureDetector(
                            onTap:!onlyLibrary?null:()=>setState(() {
                            decorationIndex = -1;
                            isListDecorationLibraryToggled = false;
                            isListDecorationPropertiesToggled = false;
                            switch (whichPropertyTabIsClicked) {
                                case 2:
                                  item.textDecoration = sheetDecorationMap[e.id] as SuperDecoration;
                                  _findItem();
                                  break;
                                case 3:
                                  sheetListItem.listDecoration = e.id;
                                  _findSheetListItem();
                                  break;
                                default:
                              }
                            }),
                            child: Container(
                              padding: EdgeInsets.all(!onlyLibrary?3:6),
                              decoration: BoxDecoration(
                                color: !onlyLibrary? defaultPalette.secondary: defaultPalette.secondary,
                                border: Border.all(
                                  color: defaultPalette.extras[0],
                                  width: !onlyLibrary?0.5:0.2
                                ),
                                borderRadius: BorderRadius.circular(!onlyLibrary?5:15),
                              ),
                              child: Row(
                                children: [
                                  Container(
                                    decoration:BoxDecoration(
                                      border:Border.all(width:0.5),
                                      borderRadius: BorderRadius.circular(!onlyLibrary?5:15),
                                      color:defaultPalette.primary,
                                    ),
                                    height: 75,
                                    width: 55,
                                    child: buildDecoratedContainer(
                                      e is! ItemDecoration ? e as SuperDecoration? : SuperDecoration(id: 'yo', itemDecorationList: [e.id]),
                                      SizedBox(),
                                      true, 
                                      maxDepth: 2,
                                    ),
                                  ),
                                  SizedBox(width: 3),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.end,
                                      children: [
                                        Text(
                                          e.name,
                                          style: GoogleFonts.lexend(
                                            color: defaultPalette.extras[0],
                                            letterSpacing: -1,
                                            fontSize: 15,
                                          ),
                                          maxLines: 2,
                                        ),
                                        Text(
                                          e.id,
                                          style: GoogleFonts.lexend(
                                            color: defaultPalette.extras[0],
                                            letterSpacing: -0.5,
                                            fontSize: 8,
                                          ),
                                          maxLines: 1,
                                          textAlign: TextAlign.end,
                                        ),
                                        SizedBox(height: 5),
                                        // The runTimeType badge for Decoration in Search
                                        runtimeTypeBadge(e,onlyLibrary:onlyLibrary)
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                        SizedBox(height: 3),

                        // The buttons in the cards and functions in searching decoration
                        if(!onlyLibrary)
                        Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            UtilityWidgets.maybeTooltip(
                              message: 'add this as a layer to the current SuperDecoration.',
                              child: roundButton(
                                () {
                                  var currentItemDecoration = (sheetDecorationMap[inx] as SuperDecoration);
              
                                  if (currentItemDecoration.itemDecorationList.length < 70) {
                                    
                                      var updatedList = List<String>.from(currentItemDecoration.itemDecorationList);
                                      updatedList.add(e.id);
              
                                      var updatedDecoration = currentItemDecoration.copyWith(
                                        itemDecorationList: updatedList,
                                      );
                                      sheetDecorationMap[inx] = updatedDecoration;
                                      updateSheetDecorationvariables(sheetDecorationMap[inx] as SuperDecoration); // Pass the original, or the updated?
                                      print('New decoration added');
                                      print(updatedDecoration.itemDecorationList);
                                    
                                  } else {
                                    print('Guys come on, turn this into a super now');
                                  }
                                },
                                Icon(TablerIcons.plus, size: 14),
                                'add',
                                 EdgeInsets.all(2),
                                 false,
                              ),
                            ),
                            UtilityWidgets.maybeTooltip(
                              message: 'delete this decoration permanently.',
                              child: roundButton(
                                () {
                                    sheetDecorationMap.remove(e.id);
                                    filteredDecorations.remove(e.id);
                                    Boxes.getDecorations().delete(e.id);
                                },
                                Icon(TablerIcons.trash, size: 14),
                                'delete',
                                EdgeInsets.all(2),
                                 false,
                              ),
                            ),
                            if (e is SuperDecoration && itemDecorationPath.length == 1) // Ensure 'itemDecorationPath' is accessible
                              UtilityWidgets.maybeTooltip(
                                message: 'switch the current SuperDecoration with this one.',
                                child: roundButton(
                                  () {
                                    var tmpinx = e.id;
                                    switch (whichPropertyTabIsClicked) {
                                      case 2:
                                        item.textDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                        updateSheetDecorationvariables(e);
                                        decorationIndex = -1;
                                        itemDecorationPath
                                          ..clear()
                                          ..add(e.id);
                                        break;
                                      case 3:
                                        sheetListItem.listDecoration = (sheetDecorationMap[tmpinx] as SuperDecoration).id;
                                        updateSheetDecorationvariables(e);
                                        decorationIndex = -1;
                                        itemDecorationPath
                                          ..clear()
                                          ..add(e.id);
                                        break;
                                      case 4:
                                        if (whichTableDecorationIsClicked == 0) {
                                          updateSheetDecorationvariables(e);
                                          decorationIndex = -1;
                                          itemDecorationPath
                                            ..clear()
                                            ..add(e.id);
              
                                          for (var i = 0; i < sheetTableItem.cellData.length; i++) {
                                            var row = sheetTableItem.cellData[i];
                                            for (var j = 0; j < row.length; j++) {
                                              var cell = row[j];
                                              if ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.columnData[j].columnDecoration) {
                                                print('cell');
                                                sheetTableItem.columnData[j].columnDecoration = sheetDecorationMap[tmpinx]!.id;
                                              }
                                              if ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.rowData[i].rowDecoration) {
                                                print('bell');
                                                sheetTableItem.rowData[i].rowDecoration = sheetDecorationMap[tmpinx]!.id;
                                              }
                                              print('sell');
                                              print((cell.sheetItem as SheetText).textDecoration.id);
                                              print(sheetTableItem.sheetTableDecoration.id);
                                              print('sell');
                                              if (cell.sheetItem is SheetText &&
                                                  ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.sheetTableDecoration.id)) {
                                                print(cell.sheetItem);
                                                print('dell');
                                                (cell.sheetItem as SheetText).textDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                              }
                                            }
                                          }
                                          sheetTableItem.sheetTableDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                        } else if (whichTableDecorationIsClicked == 1) {
                                          sheetTableItem.sheetTablebgDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                          updateSheetDecorationvariables(e);
                                          decorationIndex = -1;
                                          itemDecorationPath
                                            ..clear()
                                            ..add(e.id);
                                        } else if (whichTableDecorationIsClicked == 2) {
                                          updateSheetDecorationvariables(e);
                                          decorationIndex = -1;
                                          itemDecorationPath
                                            ..clear()
                                            ..add(e.id);
                                          for (var cell in sheetTableItem.cellData[sheetTableVariables.rowLayerIndex]) {
                                            if (cell.sheetItem is SheetText &&
                                                ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.sheetTableDecoration.id ||
                                                    (cell.sheetItem as SheetText).textDecoration.id ==
                                                        sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration)) {
                                              (cell.sheetItem as SheetText).textDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                            }
                                          }
                                          sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration = sheetDecorationMap[tmpinx]!.id;
                                        } else if (whichTableDecorationIsClicked == 3) {
                                          updateSheetDecorationvariables(e);
                                          decorationIndex = -1;
                                          itemDecorationPath
                                            ..clear()
                                            ..add(e.id);
                                          for (var row in sheetTableItem.cellData) {
                                            var cell = row[sheetTableVariables.columnLayerIndex];
                                            print(cell);
                                            if (cell.sheetItem is SheetText &&
                                                ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.sheetTableDecoration.id ||
                                                    (cell.sheetItem as SheetText).textDecoration.id ==
                                                        sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration)) {
                                              print(cell.sheetItem);
                                              (cell.sheetItem as SheetText).textDecoration = sheetDecorationMap[tmpinx] as SuperDecoration;
                                            }
                                          }
                                          sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration = sheetDecorationMap[tmpinx]!.id;
                                        }
                                        break;
                                    }
                                    itemDecorationNameController.text = e.name;
                                  },
                                  Icon(TablerIcons.replace, size: 14),
                                  'switchTo',
                                  EdgeInsets.all(2),
                                  false,
                                ),
                              ),
                            if (e is SuperDecoration)
                              UtilityWidgets.maybeTooltip(
                                message: '''add it's child layers to the current SuperDecoration.''',
                                child: roundButton(
                                  () {
                                    if ((sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.length < 70) {
                                      if ((sheetDecorationMap[inx]) is SuperDecoration) {
                                        (sheetDecorationMap[inx] as SuperDecoration).itemDecorationList.addAll(e.itemDecorationList);
                                      } else {
                                        print('Error: Decoration is not a SuperDecoration');
                                      }
                                    } else {
                                      print('Guys come on, turn this into a super now');
                                    }
                                  },
                                  Icon(TablerIcons.library_plus, size: 14),
                                  'switchTo',
                                  EdgeInsets.all(2),
                                  false,
                                ),
                              ),
                          ],
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          )
                                              
        ],
      ),
    );
                                  
  }
  
  List<Widget> buildSuperDecorationEditor(
    BuildContext context,
    SuperDecoration superDecoration,
  ){
    if(superDecoration.itemDecorationList.isEmpty){
      return [];
    }
    var index = -1;
    return superDecoration.itemDecorationList.map((e) {
      var tmpinx = e;
      var itemDecoration = sheetDecorationMap[tmpinx];
      index++;
      // print('yo: '+index.toString()+' '+ sheetDecorationVariables.length.toString());
      if (itemDecoration is ItemDecoration) {
      return 
        Column(
          children:[
            GestureDetector(
              onTap: () {
               
                setState(() {
                  var i =sheetDecorationVariables.indexWhere((el) => el.id==itemDecoration.id,);
                  //  print('LALALA: '+i.toString());
                  sheetDecorationVariables[i].isExpanded = !sheetDecorationVariables[i].isExpanded;
                });
              },
              child: Container(
                padding: const EdgeInsets.all(4.0),
                margin: const EdgeInsets.all(3.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.tertiary,
                  border: Border.all(color: defaultPalette.extras[0],),),
                child: Row( 
                  children: [
                    Container(
                      height:30,
                      width:30, 
                      alignment: Alignment(0, 0),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: defaultPalette.primary,
                        border: Border.all(color: defaultPalette.extras[0],),),
                      child: Text(
                        index.toString(),
                        style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])
                      ),              
                    ),
                    Expanded(
                      child: Text(itemDecoration.name +' ',
                      textAlign: TextAlign.end,
                      style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.primary)),
                    ),
                  ],
                ),
              ),
            ),
            if(sheetDecorationVariables[index].isExpanded)
            ...buildItemDecorationEditor(context, itemDecoration, index: index, shadowLayerIndex: sheetDecorationVariables[index].listShadowLayerSelectedIndex)
          ]);
      } else {
        return GestureDetector(
              onTap: () {
                setState(() {
                  var itemDecoration =  sheetDecorationMap[tmpinx];
                  if (itemDecoration is SuperDecoration) {    
                  listDecorationNameController.text = itemDecoration.name;
                  textDecorationNameController.text = itemDecoration.name;
                  isListDecorationLibraryToggled = false;

                  updateSheetDecorationvariables(itemDecoration);
                  if (whichPropertyTabIsClicked==3) {
                    listDecorationPath.add(itemDecoration.id);
                    print(listDecorationPath);
                  } else if (whichPropertyTabIsClicked==2) {
                    textDecorationPath.add(itemDecoration.id);
                    print(textDecorationPath);
                  }
                  decorationIndex = -1;
                  }

                });
              },
              child: Container(
                padding: const EdgeInsets.all(4.0),
                margin: const EdgeInsets.all(3.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.extras[1],
                  border: Border.all(color: defaultPalette.extras[0],),),
                child: Row( 
                  children: [
                    Container(
                      height:30,
                      width:30, 
                      alignment: Alignment(0, 0),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: defaultPalette.primary,
                        border: Border.all(color: defaultPalette.extras[0],),),
                      child: Text(
                        index.toString(),
                        style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])
                      ),              
                    ),
                    Expanded(
                      child: Text(itemDecoration!.name +' ',
                      textAlign: TextAlign.end,
                      style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])),
                    ),
                  ],
                ),
              ),
            );
      }
    },).toList().reversed.toList();
  }

  List<Widget> buildItemDecorationEditor(
    BuildContext context,
    ItemDecoration itemDecoration,
    {
      int index = -1,
      int shadowLayerIndex =-1,
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var pinned = itemDecoration.pinned;
    List<TextEditingController> listPaddingControllers = [
      TextEditingController()
        ..text = itemDecoration.padding.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.bottom
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.left
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.right
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];
    List<TextEditingController> listMarginControllers = [
      TextEditingController()
        ..text = itemDecoration.margin.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.bottom
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.left
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.right
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];

    return [
      if (pinned['padding']['top'] ||
          pinned['padding']['bottom'] ||
          pinned['padding']['left'] ||
          pinned['padding']['right'])
        Container(
          child: buildListPaddingMarginEditor(
              isMargin: false,
              itemDecoration: itemDecoration,
              listPaddingControllers: listPaddingControllers,
              marginControllers: listMarginControllers,
              pinned: pinned, index: index),
        ),
      SizedBox(
        height: 0,
      ),
      if (pinned['margin']['top'] ||
          pinned['margin']['bottom'] ||
          pinned['margin']['left'] ||
          pinned['margin']['right'])
        Container(
          child: buildListPaddingMarginEditor(
              isMargin: true,
              itemDecoration: itemDecoration,
              listPaddingControllers: listPaddingControllers,
              marginControllers: listMarginControllers,
              pinned: pinned,
              index: index
              ),
        ),
      SizedBox(
        height: 3,
      ),
      if (pinned['decoration']['color'] ||
          pinned['decoration']['border'] ||
          pinned['decoration']['borderRadius']['topLeft'] ||
          pinned['decoration']['borderRadius']['topRight'] ||
          pinned['decoration']['borderRadius']['bottomLeft'] ||
          pinned['decoration']['borderRadius']['bottomRight'] ||
          pinned['decoration']['image']['bytes'] ||
          pinned['decoration']['image']['fit'] ||
          pinned['decoration']['image']['repeat'] ||
          pinned['decoration']['image']['alignment'] ||
          pinned['decoration']['image']['scale'] ||
          pinned['decoration']['image']['opacity'] ||
          pinned['decoration']['image']['filterQuality'] ||
          pinned['decoration']['image']['invertColors'] ||
          pinned['decoration']['boxShadow'])
        buildDecorationEditor(context, itemDecoration, index: index, shadowLayerIndex: shadowLayerIndex),

      SizedBox(
        height: 3,
      ),
      if (pinned['foregroundDecoration']['color'] ||
          pinned['foregroundDecoration']['border'] ||
          pinned['foregroundDecoration']['borderRadius']['topLeft'] ||
          pinned['foregroundDecoration']['borderRadius']['topRight'] ||
          pinned['foregroundDecoration']['borderRadius']['bottomLeft'] ||
          pinned['foregroundDecoration']['borderRadius']['bottomRight'] ||
          pinned['foregroundDecoration']['image']['bytes'] ||
          pinned['foregroundDecoration']['image']['fit'] ||
          pinned['foregroundDecoration']['image']['repeat'] ||
          pinned['foregroundDecoration']['image']['alignment'] ||
          pinned['foregroundDecoration']['image']['scale'] ||
          pinned['foregroundDecoration']['image']['opacity'] ||
          pinned['foregroundDecoration']['image']['filterQuality'] ||
          pinned['foregroundDecoration']['image']['invertColors'] ||
          pinned['foregroundDecoration']['boxShadow'])
        buildDecorationEditor(context, itemDecoration, index: index, shadowLayerIndex: sheetDecorationVariables[index].listShadowLayerSelectedIndex2, isForeground: true),
      SizedBox(
        height: 3,
      ),
      if (pinned['transform']['isPinned'])
        buildTransformEditor(
          index: index,
        )
    ];
  }

  Widget buildListPaddingMarginEditor({
    required bool isMargin,
    required ItemDecoration itemDecoration,
    List<TextEditingController> listPaddingControllers = const [],
    List<TextEditingController> marginControllers = const [],
    List<TextEditingController> borderRadiusControllers = const [],
    bool isBorderRadius = false,
    bool isBorder = false,
    Map<String, dynamic> pinned = const {},
    int index = -1,
    bool isForeground = false,
  }) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    // Choose the proper controller list based on the flag.
    var isListBorderRadiusExpanded = isForeground? sheetDecorationVariables[index].isListBorderRadiusExpanded2 :sheetDecorationVariables[index].isListBorderRadiusExpanded;
    var isListMarginExpanded = sheetDecorationVariables[index].isListMarginExpanded;
    var isListPaddingExpanded = sheetDecorationVariables[index].isListPaddingExpanded;
    
    var isExpanded = isBorderRadius
        ? isListBorderRadiusExpanded
        : isMargin
            ? isListMarginExpanded
            : isListPaddingExpanded;
    final controllers = isBorderRadius
        ? borderRadiusControllers
        : isMargin
            ? marginControllers
            : listPaddingControllers;
    final focusNodes = isBorderRadius
        ? isForeground? sheetDecorationVariables[index].borderRadiusFocusNodes2: sheetDecorationVariables[index].borderRadiusFocusNodes
        : isMargin
            ? sheetDecorationVariables[index].marginFocusNodes
            : sheetDecorationVariables[index].listPaddingFocusNodes;
    String pinnedKey =
        isBorderRadius ? isForeground?'foregroundDecoration':'decoration' : (isMargin ? 'margin' : 'padding');
    String subKey = isBorderRadius ? 'borderRadius' : '';
    var tmpinx = sheetDecorationVariables[index].id;
    ItemDecoration currentItemDecoration = sheetDecorationMap[tmpinx] as ItemDecoration;
    final pinnedMap = currentItemDecoration
        .pinned[pinnedKey];
    final topIsPinned =
        isBorderRadius ? pinnedMap[subKey]['topLeft'] : pinnedMap['top'];

    final bottomIsPinned =
        isBorderRadius ? pinnedMap[subKey]['topRight'] : pinnedMap['bottom'];

    final leftIsPinned =
        isBorderRadius ? pinnedMap[subKey]['bottomLeft'] : pinnedMap['left'];

    final rightIsPinned =
        isBorderRadius ? pinnedMap[subKey]['bottomRight'] : pinnedMap['right'];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 76 : 40)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 76 : 40);



    void horizontalDragFunction (DragUpdateDetails details, {
      String s ='all',
      int side =0,
    }) {
      var multiplier =  HardwareKeyboard.instance.isControlPressed
              ? 10
              : HardwareKeyboard.instance.isShiftPressed
                  ? 0.1
                  : 1;
      setState(() {
        double currentValue = double.tryParse(controllers[side].text) ?? 0.0;
        double newValue = (currentValue +
                details.delta.dx * multiplier)
            .clamp( 0,double.infinity); // Adjust sensitivity here

        // controllers[0].text = newValue.toStringAsFixed(2);

        double parsedValue =  double.parse(newValue.toStringAsFixed(2));
        

        if (isBorderRadius) {
          if (!isForeground) {
          currentItemDecoration = currentItemDecoration.copyWith(
            decoration: currentItemDecoration.decoration.copyWith(
              borderRadius: setBorderRadius(
                s,
                parsedValue,
                itemDecoration,
                isForeground: isForeground,
              ),
            ),
          );
        } else {
          currentItemDecoration = currentItemDecoration.copyWith(
            foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
              borderRadius: setBorderRadius(
                s,
                parsedValue,
                itemDecoration,
                isForeground: isForeground,
              ),
            ),
          );
        }


          
        } else if (isMargin) {
          EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.margin.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.margin.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.margin.copyWith(left: parsedValue)
        : currentItemDecoration.margin.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  margin: inset);
        } else {
            EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.padding.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.padding.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.padding.copyWith(left: parsedValue)
        : currentItemDecoration.padding.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  padding: inset);
        }
        sheetDecorationMap[tmpinx] = currentItemDecoration;
      });
    }

    void fieldSubmitFunction (String value, {
      String s ='all',
      int side =0,
    }) {
      
      setState(() {
        double parsedValue = double.parse(value);
        

        if (isBorderRadius) {
          currentItemDecoration =
              (currentItemDecoration as ItemDecoration)
                  .copyWith(decoration: currentItemDecoration
                          .decoration
                          .copyWith(
            borderRadius: setBorderRadius(
                s, parsedValue, itemDecoration,isForeground: isForeground,),
          ));
          
        } else if (isMargin) {
          EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.margin.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.margin.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.margin.copyWith(left: parsedValue)
        : currentItemDecoration.margin.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  margin: inset);
        } else {
            EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.padding.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.padding.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.padding.copyWith(left: parsedValue)
        : currentItemDecoration.padding.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  padding: inset);
        }
        sheetDecorationMap[tmpinx] = currentItemDecoration;
      });
    }


    
    return GestureDetector(
      onTap: () {
        setState(() {
          if (isBorderRadius) {
            if (isForeground) {
              sheetDecorationVariables[index].isListBorderRadiusExpanded2 = 
                  !sheetDecorationVariables[index].isListBorderRadiusExpanded2;
            } else {
              sheetDecorationVariables[index].isListBorderRadiusExpanded = 
                  !sheetDecorationVariables[index].isListBorderRadiusExpanded;
            };

          } else if (isMargin) {
            sheetDecorationVariables[index].isListMarginExpanded = 
                  !sheetDecorationVariables[index].isListMarginExpanded;
          } else {
            sheetDecorationVariables[index].isListPaddingExpanded = 
                  !sheetDecorationVariables[index].isListPaddingExpanded;
          }
          isExpanded = isBorderRadius
              ? isForeground? sheetDecorationVariables[index].isListBorderRadiusExpanded2: sheetDecorationVariables[index].isListBorderRadiusExpanded
              : isMargin
                  ? sheetDecorationVariables[index].isListMarginExpanded
                  : sheetDecorationVariables[index].isListPaddingExpanded;
          // print(isExpanded);
        });
      },
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
        ),
        margin: EdgeInsets.all(4).copyWith(bottom: 2, left: 3, top: 2),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            //padding/margin/borderRadius isPinned
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // "Pad" field for all sides
                Expanded(
                  child: Container(
                    padding: EdgeInsets.only(left: 2),
                    decoration: BoxDecoration(
                        border: Border.all(),
                        color: defaultPalette.primary,
                        borderRadius: BorderRadius.circular(5)),
                    child: Row(
                      children: [
                        MouseRegion(
                          cursor: SystemMouseCursors.resizeLeftRight,
                          child: GestureDetector(
                            onHorizontalDragCancel: () {
                              focusNodes[0].requestFocus();
                            },
                            onHorizontalDragStart: (details) {
                              dragBackupValue =
                                  double.parse(controllers[0].text);
                            },
                            onHorizontalDragUpdate: horizontalDragFunction,
                            child: Row(
                              children: [
                                Icon(
                                    isBorderRadius
                                        ? TablerIcons.border_corners
                                        : isMargin
                                            ? TablerIcons.box_margin
                                            : TablerIcons.box_padding,
                                    size: 16,
                                    color: defaultPalette.extras[0]),
                                Text(
                                  isBorderRadius
                                      ? (sWidth * wH2DividerPosition) > 220
                                          ? ' borderRadius '
                                          : 'radius'
                                      : isMargin
                                          ? ' margin '
                                          : (sWidth * wH2DividerPosition) > 220
                                              ? ' padding '
                                              : ' pad ',
                                  style: GoogleFonts.lexend(
                                      fontSize: 15,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Expanded(
                          child: SizedBox(
                            height: 20,
                            child: TextFormField(
                              onTapOutside: (event) => focusNodes[0].unfocus(),
                              focusNode: focusNodes[0],
                              controller: controllers[0],
                              inputFormatters: [
                                NumericInputFormatter(),
                              ],
                              cursorColor: defaultPalette.tertiary,
                              selectionControls: NoMenuTextSelectionControls(),
                              textAlign: TextAlign.end,
                              decoration: InputDecoration(
                                contentPadding: const EdgeInsets.all(2),
                                labelStyle: GoogleFonts.lexend(
                                    color: defaultPalette.black),
                                fillColor: defaultPalette.transparent,
                                border: InputBorder.none,
                                enabledBorder: OutlineInputBorder(
                                    borderSide: BorderSide.none),
                                focusedBorder: OutlineInputBorder(
                                    borderSide: BorderSide.none),
                              ),
                              keyboardType: TextInputType.number,
                              style: GoogleFonts.mitr(
                                  fontSize: 15,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1),
                              onFieldSubmitted: fieldSubmitFunction,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(
                  width: 2,
                ),
                //PIN isPinned
                ClipRRect(
                  borderRadius: BorderRadius.circular(500),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      hoverColor: defaultPalette.tertiary,
                      splashColor: defaultPalette.tertiary,
                      highlightColor: defaultPalette.tertiary,
                      onTap: () {
                        setState(() {
                          // Toggle isPinned based on the condition
                          if (isBorderRadius) {
                            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                    ['borderRadius']['isPinned'] =
                                !currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                    ['borderRadius']['isPinned'];
                            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['borderRadius']['topLeft'] = false;
                            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['borderRadius']['topRight'] = false;
                            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['borderRadius']['bottomLeft'] = false;
                            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['borderRadius']['bottomRight'] = false;
                            expansionLevels[isForeground?4:7] =
                                currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                    ['borderRadius']['isPinned'];
                          } else if (isMargin) {
                            currentItemDecoration.pinned['margin']['isPinned'] =
                                !currentItemDecoration.pinned['margin']
                                    ['isPinned'];
                            if (currentItemDecoration.pinned['margin']
                                ['isPinned']) {
                              currentItemDecoration.pinned['margin']['top'] =
                                  true;
                              currentItemDecoration.pinned['margin']['bottom'] =
                                  true;
                              currentItemDecoration.pinned['margin']['left'] =
                                  true;
                              currentItemDecoration.pinned['margin']['right'] =
                                  true;
                            } else {
                              currentItemDecoration.pinned['margin']['top'] =
                                  false;
                              currentItemDecoration.pinned['margin']['bottom'] =
                                  false;
                              currentItemDecoration.pinned['margin']['left'] =
                                  false;
                              currentItemDecoration.pinned['margin']['right'] =
                                  false;
                            }
                            // expansionLevels[1]  = currentItemDecoration.pinned['margin']['isPinned'];
                          } else {
                            currentItemDecoration.pinned['padding']
                                    ['isPinned'] =
                                !currentItemDecoration.pinned['padding']
                                    ['isPinned'];
                            if (currentItemDecoration.pinned['padding']
                                ['isPinned']) {
                              currentItemDecoration.pinned['padding']['top'] =
                                  true;
                              currentItemDecoration.pinned['padding']
                                  ['bottom'] = true;
                              currentItemDecoration.pinned['padding']['left'] =
                                  true;
                              currentItemDecoration.pinned['padding']['right'] =
                                  true;
                            } else {
                              currentItemDecoration.pinned['padding']['top'] =
                                  false;
                              currentItemDecoration.pinned['padding']
                                  ['bottom'] = false;
                              currentItemDecoration.pinned['padding']['left'] =
                                  false;
                              currentItemDecoration.pinned['padding']['right'] =
                                  false;
                            }
                          }
                          sheetDecorationMap[tmpinx] = currentItemDecoration;


                        });
                      },
                      child: Icon(
                          isBorderRadius
                              ? pinned[isForeground? 'foregroundDecoration':'decoration']['borderRadius']['isPinned']
                                  ? TablerIcons.pin_filled
                                  : TablerIcons.pin
                              : isMargin
                                  ? pinned['margin']['isPinned']
                                      ? TablerIcons.pin_filled
                                      : TablerIcons.pin
                                  : pinned['padding']['isPinned']
                                      ? TablerIcons.pin_filled
                                      : TablerIcons.pin,
                          size: 16,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ],
            ),
            if (!isExpanded) ...[
              const SizedBox(height: 4),
              Container(
                padding: EdgeInsets.all(0),
                decoration: BoxDecoration(
                    border: Border.all(),
                    borderRadius: BorderRadius.circular(5)),
                child: Column(
                  children: [
                    // Top and Bottom adjustments
                    Flex(
                      direction: (sWidth * wH2DividerPosition) > 220
                          ? Axis.horizontal
                          : Axis.vertical,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        if (topIsPinned)
                          // Top
                          Container(
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    bottomIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(topLeft: Radius.circular(5), topRight: Radius.circular((sWidth * wH2DividerPosition) > 220 &&
                                                bottomIsPinned ? 0: 5))),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[1].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[1].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'topLeft', side: 1);
                                      },
                                      child: Transform.rotate(
                                          angle: isBorderRadius
                                              ? 0
                                              : isMargin
                                                  ? 0
                                                  : -pi / 2,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons.radius_top_left
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_bottom
                                                      : TablerIcons
                                                          .layout_sidebar_right_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[1].unfocus(),
                                      focusNode: focusNodes[1],
                                      controller: controllers[1],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      cursorColor: defaultPalette.tertiary,
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        // suffix: Text('top',style: GoogleFonts.mitr(
                                        //   fontSize: 10,
                                        //   color: defaultPalette.primary),)
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'topLeft', side: 1);
                                      },
                                    ),
                                  ),
                                  //PIN isPinned
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['topLeft'] =
                                                  !currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['topLeft'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                      .pinned['margin']['top'] =
                                                  !currentItemDecoration
                                                      .pinned['margin']['top'];
                                             } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['top'] =
                                                  !currentItemDecoration
                                                      .pinned['padding']['top'];
                                            }

                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned[isForeground? 'foregroundDecoration':'decoration']
                                                            ['borderRadius']
                                                        ['topLeft']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['top']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['top']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  const SizedBox(
                                    width: 2,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        
                        if (bottomIsPinned)
                          // Bottom
                          Container(
                            height: 20,
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    topIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                  topLeft: Radius.circular(topIsPinned ? 0 : 5),
                                  topRight: Radius.circular(
                                      (sWidth * wH2DividerPosition) > 220
                                          ? 5
                                          : 0),
                                )),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[2].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[2].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'topRight', side: 2);
                                      },
                                      child: Transform.rotate(
                                          angle: 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons.radius_top_right
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_top
                                                      : TablerIcons
                                                          .layout_bottombar_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  const SizedBox(width: 0),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[2].unfocus(),
                                      focusNode: focusNodes[2],
                                      controller: controllers[2],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      cursorColor: defaultPalette.tertiary,
                                      textAlign: TextAlign.start,
                                      textAlignVertical: TextAlignVertical.top,
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'topRight', side: 2);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['topRight'] =
                                                  !currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['topRight'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['bottom'] =
                                                  !currentItemDecoration
                                                          .pinned['margin']
                                                      ['bottom'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['bottom'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['bottom'];
                                             }

                                            // Update the list item with the modified currentItemDecoration
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned[isForeground? 'foregroundDecoration':'decoration']
                                                            ['borderRadius']
                                                        ['topRight']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['bottom']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']
                                                            ['bottom']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 0),
                    // Left and Right adjustments
                    Flex(
                      direction: (sWidth * wH2DividerPosition) > 220
                          ? Axis.horizontal
                          : Axis.vertical,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        if (leftIsPinned)
                          // Left
                          Container(
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    rightIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                    bottomLeft: Radius.circular(
                                        (sWidth * wH2DividerPosition) > 220
                                            ? 5
                                            : 0),
                                    bottomRight: Radius.circular(
                                        rightIsPinned ? 0 : 5))),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[3].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[3].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'bottomLeft', side: 3);
                                      },
                                      child: Transform.rotate(
                                          angle: isBorderRadius
                                              ? 0
                                              : isMargin
                                                  ? 0
                                                  : 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons
                                                      .radius_bottom_left
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_right
                                                      : TablerIcons
                                                          .layout_sidebar_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[3].unfocus(),
                                      focusNode: focusNodes[3],
                                      controller: controllers[3],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      cursorColor: defaultPalette.tertiary,
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'bottomLeft', side: 3);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['bottomLeft'] =
                                                  !currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['bottomLeft'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['left'] =
                                                  !currentItemDecoration
                                                      .pinned['margin']['left'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['left'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['left'];
                                            }
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned[isForeground? 'foregroundDecoration':'decoration']
                                                            ['borderRadius']
                                                        ['bottomLeft']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['left']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['left']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                        const SizedBox(
                          width: 0,
                          height: 0,
                        ),
                        if (rightIsPinned)
                          // RIGHT
                          Container(
                            height: 20,
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    leftIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                    bottomLeft: Radius.circular(
                                        (sWidth * wH2DividerPosition) > 220 &&
                                                leftIsPinned
                                            ? 0
                                            : 5),
                                    bottomRight: Radius.circular(5))),
                            child: SizedBox(
                              height: 18,
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[4].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[4].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'bottomRight', side: 4);
                                      },
                                      child: Transform.rotate(
                                          angle: 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons
                                                      .radius_bottom_right
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_left
                                                      : TablerIcons
                                                          .layout_sidebar_right_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  const SizedBox(width: 0),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[4].unfocus(),
                                      focusNode: focusNodes[4],
                                      controller: controllers[4],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      cursorColor: defaultPalette.tertiary,
                                      textAlign: TextAlign.start,
                                      textAlignVertical: TextAlignVertical.top,
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'bottomRight', side: 4);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['bottomRight'] =
                                                  !currentItemDecoration.pinned[
                                                              isForeground? 'foregroundDecoration':'decoration']
                                                          ['borderRadius']
                                                      ['bottomRight'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['right'] =
                                                  !currentItemDecoration
                                                          .pinned['margin']
                                                      ['right'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['right'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['right'];
                                            }
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned[isForeground? 'foregroundDecoration':'decoration']
                                                            ['borderRadius']
                                                        ['bottomRight']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['right']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['right']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 0),
                  ],
                ),
              ),
            ]
          ],
        ),
      ),
    );
  }

  BorderRadius setBorderRadius(
      String s, double value, ItemDecoration itemDecoration, {bool isForeground = false}) {
    bool isNotNull = itemDecoration.decoration.borderRadius != null;
    switch (s) {
      case 'topLeft':
        return BorderRadius.only(
          topLeft: Radius.circular(value),
          topRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'topRight':
        return BorderRadius.only(
          topLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: Radius.circular(value),
          bottomLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'bottomLeft':
        return BorderRadius.only(
          topLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: Radius.circular(value),
          bottomRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'bottomRight':
        return BorderRadius.only(
          topLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: isNotNull
              ? ((isForeground? itemDecoration.foregroundDecoration:itemDecoration.decoration).borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: Radius.circular(value),
        );
      case 'all':
        return BorderRadius.all(Radius.circular(value));

      default:
        return BorderRadius.all(Radius.circular(value));
    }
  }

  Widget buildDecorationEditor(
    BuildContext context,
    ItemDecoration? itemDecoration,
    {
      int index =-1,
      int shadowLayerIndex = -1,
      bool isForeground = false,
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var tmpinx = sheetDecorationVariables[index].id;
    ItemDecoration currentItemDecoration = itemDecoration ?? 
        sheetDecorationMap[tmpinx] as ItemDecoration;
    var decor = isForeground? currentItemDecoration.foregroundDecoration:currentItemDecoration.decoration;
    Border currentBorder =
        (decor.border ?? Border.all(color: defaultPalette.transparent)) as Border;
    final borderRadiusControllers = [
      TextEditingController()
        ..text = ((decor.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((decor.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((decor.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topRight
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((decor.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .bottomLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((decor.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .bottomRight
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];
    final listBorderControllers = [
      TextEditingController()
        ..text = (decor.border ?? Border.all())
            .top
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = (decor.border ?? Border.all())
            .top
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = (decor.border ?? Border.all())
            .bottom
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = ((decor.border ?? Border.all())
                as Border)
            .left
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = ((decor.border ?? Border.all())
                as Border)
            .right
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
    ];
    List<TextEditingController> colorHexControllers = [
      TextEditingController()
        ..text = colorToHex(decor.color ??
            defaultPalette.transparent),
      TextEditingController()
        ..text = (((decor.border ?? Border.all(color: defaultPalette.transparent))
                as Border))
            .top
            .color
            .hexAlpha
    ];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 84 : 47)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 74 : 40);
    final isSizeBigForBorderRow = (sWidth * wH2DividerPosition) > 260;
    var listBorderFocusNodes = isForeground? sheetDecorationVariables[index].listBorderFocusNodes2:sheetDecorationVariables[index].listBorderFocusNodes;
    var colorHexFocusNodes = isForeground? sheetDecorationVariables[index].colorHexFocusNodes2:sheetDecorationVariables[index].colorHexFocusNodes;
    var isListColorExpanded = isForeground? sheetDecorationVariables[index].isListColorExpanded2 :sheetDecorationVariables[index].isListColorExpanded;
    var isListBorderExpanded = isForeground? sheetDecorationVariables[index].isListBorderExpanded2 :sheetDecorationVariables[index].isListBorderExpanded;
    
    Widget borderSideSelect(int s, String side, Color color, String width) {
      return ClipRRect(
        borderRadius: BorderRadius.circular(5),
        child: Material(
          color: defaultPalette.transparent,
          child: InkWell(
            hoverColor: defaultPalette.primary,
            splashColor: defaultPalette.primary,
            highlightColor: defaultPalette.primary,
            onTap: () {
              setState(() {
                
              });
            },
            child: Container(
              width: isSizeBigForBorderRow ? widthSmall : widthBig,
              decoration: BoxDecoration(
                  border: Border.fromBorderSide(BorderSide.none),
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.transparent),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                        (listBorderFocusNodes)[s].requestFocus();
                      },
                      onHorizontalDragStart: (details) {
                        dragBackupValue =
                            double.parse(listBorderControllers[s].text);
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier =
                            HardwareKeyboard.instance.isControlPressed
                                ? 10
                                : HardwareKeyboard.instance.isShiftPressed
                                    ? 0.1
                                    : 1;
                        setState(() {
                        double currentValue =
                            double.tryParse(listBorderControllers[s].text) ?? 0.0;
                        double newValue = (currentValue + details.delta.dx * multiplier)
                            .clamp(0, double.infinity);

                        double parsedValue = double.parse(newValue.toStringAsFixed(2));

                        // Get the current border from the decoration or default to Border.all()
                        Border currentBorder = (decor.border ?? Border.all(color: defaultPalette.transparent)) as Border;

                        // Utility function to update the border side with the new width
                        BorderSide updateBorderSide(BorderSide side) {
                          return side.copyWith(width: parsedValue);
                        }

                        // Update the border based on the selected side (s)
                        Border updatedBorder;
                        if (s == 0) {
                          // Update all sides with the same value
                          updatedBorder = Border.fromBorderSide( currentBorder.top.copyWith(width: parsedValue));
                            
                        } else {
                          updatedBorder = Border(
                            top: s == 1 ? updateBorderSide(currentBorder.top) : currentBorder.top,
                            bottom: s == 2 ? updateBorderSide(currentBorder.bottom) : currentBorder.bottom,
                            left: s == 3 ? updateBorderSide(currentBorder.left) : currentBorder.left,
                            right: s == 4 ? updateBorderSide(currentBorder.right) : currentBorder.right,
                          );
                        }

                        // Check if any side has a non-zero width
                        bool hasNonZeroWidth = updatedBorder.top.width > 0 ||
                                              updatedBorder.bottom.width > 0 ||
                                              updatedBorder.left.width > 0 ||
                                              updatedBorder.right.width > 0;

                        // If any side has non-zero width, update zero-width sides to 1
                        if (hasNonZeroWidth) {
                          updatedBorder = Border(
                            top: updatedBorder.top.width == 0 ? updatedBorder.top.copyWith(width: 1) : updatedBorder.top,
                            bottom: updatedBorder.bottom.width == 0 ? updatedBorder.bottom.copyWith(width: 1) : updatedBorder.bottom,
                            left: updatedBorder.left.width == 0 ? updatedBorder.left.copyWith(width: 1) : updatedBorder.left,
                            right: updatedBorder.right.width == 0 ? updatedBorder.right.copyWith(width: 1) : updatedBorder.right,
                          );
                        }

                        // Update the item decoration with the new border
                        if (!isForeground) {
                          currentItemDecoration = currentItemDecoration.copyWith(
                            decoration: currentItemDecoration.decoration.copyWith(
                              border: updatedBorder,
                            ),
                          );
                        } else {
                          currentItemDecoration = currentItemDecoration.copyWith(
                            foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                              border: updatedBorder,
                            ),
                          );
                        }

                        // Update the decoration in the sheetDecorationList
                        sheetDecorationMap[tmpinx] = currentItemDecoration;
 
                      });

                      },
                      child: Text(
                        '  $side ',
                        style: GoogleFonts.lexend(
                            fontSize: 14,
                            letterSpacing: -1,
                            color: defaultPalette.extras[0]),
                      ),
                    ),
                  ),
                  Expanded(
                    child: SizedBox(
                      height: 20,
                      child: TextFormField(
                        onTapOutside: (event) =>
                            listBorderFocusNodes[s].unfocus(),
                        focusNode: listBorderFocusNodes[s],
                        controller: listBorderControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle:
                              GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder:
                              OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder:
                              OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            double parsedValue = double.parse(value);

                            // Get the current border from the decoration or default to Border.all()
                            Border currentBorder = ((isForeground? currentItemDecoration.foregroundDecoration: currentItemDecoration.decoration).border ?? Border.all(color: defaultPalette.transparent)) as Border;

                            // Utility function to update the border side with the new width
                            BorderSide updateBorderSide(BorderSide side) {
                              return side.copyWith(width: parsedValue);
                            }

                            // Update the border based on the selected side (s)
                            Border updatedBorder;
                            if (s == 0) {
                              // Update all sides with the same value
                              updatedBorder = Border.fromBorderSide( currentBorder.top.copyWith(width: parsedValue));
                            } else {
                              updatedBorder = Border(
                                top: s == 1 ? updateBorderSide(currentBorder.top) : currentBorder.top,
                                bottom: s == 2 ? updateBorderSide(currentBorder.bottom) : currentBorder.bottom,
                                left: s == 3 ? updateBorderSide(currentBorder.left) : currentBorder.left,
                                right: s == 4 ? updateBorderSide(currentBorder.right) : currentBorder.right,
                              );
                            }

                            // Check if any side has a non-zero width
                            bool hasNonZeroWidth = updatedBorder.top.width > 0 ||
                                                  updatedBorder.bottom.width > 0 ||
                                                  updatedBorder.left.width > 0 ||
                                                  updatedBorder.right.width > 0;

                            // If any side has non-zero width, update zero-width sides to 1
                            if (hasNonZeroWidth) {
                              updatedBorder = Border(
                                top: updatedBorder.top.width == 0 ? updatedBorder.top.copyWith(width: 1) : updatedBorder.top,
                                bottom: updatedBorder.bottom.width == 0 ? updatedBorder.bottom.copyWith(width: 1) : updatedBorder.bottom,
                                left: updatedBorder.left.width == 0 ? updatedBorder.left.copyWith(width: 1) : updatedBorder.left,
                                right: updatedBorder.right.width == 0 ? updatedBorder.right.copyWith(width: 1) : updatedBorder.right,
                              );
                            }

                            // Update the item decoration with the new border
                            if (!isForeground) {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: currentItemDecoration.decoration.copyWith(
                                border: updatedBorder,
                              ),
                              );
                            } else {
                              currentItemDecoration = currentItemDecoration.copyWith(
                              foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                border: updatedBorder,
                              ),
                            );
                            }

                            // Update the decoration in the sheetDecorationList
                            sheetDecorationMap[tmpinx] = currentItemDecoration;
 
                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            //DECORATION Title this is the editable property title
            Expanded(
              child: Container(
                padding: EdgeInsets.only(left: 2),
                margin: EdgeInsets.only(left: 3, right: 4),
                decoration: BoxDecoration(
                    // border: Border.all(),
                    // color:defaultPalette.primary,
                    borderRadius: BorderRadius.circular(5)),
                child: Row(
                  children: [
                    Icon(TablerIcons.palette,
                        size: 16, color: defaultPalette.extras[0]),
                    Expanded(
                      child: SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Text(
                          isForeground? 'foregroundDecor':' decor ',
                          style: GoogleFonts.lexend(
                              fontSize: 15,
                              letterSpacing: -1,
                              color: defaultPalette.extras[0]),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(
              width: 2,
            ),
            //DECORATION isPinned
            ClipRRect(
              borderRadius: BorderRadius.circular(500),
              child: Material(
                color: defaultPalette.transparent,
                child: InkWell(
                  hoverColor: defaultPalette.tertiary,
                  splashColor: defaultPalette.tertiary,
                  highlightColor: defaultPalette.tertiary,
                  onTap: () {
                    setState(() {
                      currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration'] = {
                        'isPinned': false,
                        'color': false,
                        'border': false,
                        'borderRadius': {
                          'isPinned': false,
                          'topLeft': false,
                          'topRight': false,
                          'bottomLeft': false,
                          'bottomRight': false,
                        },
                        'boxShadow': false,
                        'image': {
                          'isPinned': false,
                          'bytes': false,
                          'fit': false,
                          'repeat': false,
                          'alignment': false,
                          'scale': false,
                          'opacity': false,
                          'filterQuality': false,
                          'invertColors': false,
                        },
                        'backgroundBlendMode': false,
                      };

                      // Update the list item with the modified currentItemDecoration
                      currentItemDecoration = currentItemDecoration;
                    });
                  },
                  child: Icon(
                      currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['isPinned']
                          ? TablerIcons.pin_filled
                          : TablerIcons.pin,
                      size: 16,
                      color: defaultPalette.extras[0]),
                ),
              ),
            ),
            const SizedBox(
              width: 4,
            ),
          ],
        ),
        const SizedBox(
          width: 2,
          height: 2,
        ),

        ///COLOR FOR THE DECORATION SECTION
        if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['color'])
          Flex(
            direction: Axis.vertical,
            children: [
              SizedBox(width: 2, height: 2),
              //title and hex code of plain color title
              GestureDetector(
                      onTap: () {
                        setState(() {
                        if (isForeground) {
                          sheetDecorationVariables[index].isListColorExpanded2 = 
                              !sheetDecorationVariables[index].isListColorExpanded2;
                        } else {
                          sheetDecorationVariables[index].isListColorExpanded = 
                              !sheetDecorationVariables[index].isListColorExpanded;
                        }
                      });

                      },
                child: Container(
                  height: 25,
                  padding: EdgeInsets.only(left: 2),
                  margin: EdgeInsets.only(left: 3, right: 4),
                  decoration: BoxDecoration(
                      border: Border.all(),
                      color: defaultPalette.primary,
                      borderRadius: BorderRadius.circular(5)),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Icon(TablerIcons.color_swatch,
                          size: 16, color: defaultPalette.extras[0]),
                      if ((sWidth * wH2DividerPosition) > 220)
                        SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Text(
                            ' color ',
                            style: GoogleFonts.lexend(
                                fontSize: 15,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                      Expanded(
                        child: SizedBox(
                          height: 25,
                          child: TextField(
                            focusNode: colorHexFocusNodes[0],
                            controller: colorHexControllers[0],
                            onSubmitted: (value) {
                              setState(() {
                                if (!isForeground) {
                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    decoration: currentItemDecoration.decoration.copyWith(
                                      color: hexToColor(value),
                                    ),
                                  );
                                } else {
                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                      color: hexToColor(value),
                                    ),
                                  );
                                }

                              sheetDecorationMap[tmpinx] = currentItemDecoration;
                              });
                            },
                            textAlignVertical: TextAlignVertical.top,
                            textAlign: TextAlign.end,
                            cursorColor: defaultPalette.tertiary,
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.only(left: 2),
                              labelStyle:
                                  GoogleFonts.lexend(color: defaultPalette.black),
                              hoverColor: defaultPalette.transparent,
                              filled: true,
                              fillColor: defaultPalette.transparent,
                              border: InputBorder.none,
                              enabledBorder: OutlineInputBorder(
                                borderSide: BorderSide.none,
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide.none,
                                borderRadius: BorderRadius.circular(5.0),
                              ),
                            ),
                            style: GoogleFonts.lexend(
                                letterSpacing: -1,
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                                color: defaultPalette.black),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(0.0),
                        child: DecoratedBox(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.fromBorderSide(
                              BorderSide.none,
                            ),
                            color: decor.color ??
                                defaultPalette.transparent,
                          ),
                          child: SizedBox(
                            width: 15,
                            height: 15,
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 2,
                      ),
                      ClipRRect(
                        borderRadius: BorderRadius.circular(9999),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            focusColor: defaultPalette.primary,
                            hoverColor: defaultPalette.primary,
                            highlightColor: defaultPalette.primary,
                            onTap: () {
                              EyeDropper.enableEyeDropper(context, (value) {
                                setState(() {
                                if (!isForeground) {
                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    decoration: currentItemDecoration.decoration.copyWith(
                                      color: value,
                                    ),
                                  );
                                } else {
                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                      color: value,
                                    ),
                                  );
                                }

                                
                                  sheetDecorationMap[tmpinx] = currentItemDecoration;
                                
                              });
                              },);
                            },
                            child: const Icon(
                              TablerIcons.color_picker,
                              size: 19,
                            ),
                          ),
                        ),
                      ),
                      ClipRRect(
                        borderRadius: BorderRadius.circular(500),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            hoverColor: defaultPalette.tertiary,
                            splashColor: defaultPalette.tertiary,
                            highlightColor: defaultPalette.tertiary,
                            onTap: () {
                              setState(() {
                                currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                        ['color'] =
                                    !currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                        ['color'];
                
                                // Update the list item with the modified currentItemDecoration
                                currentItemDecoration = currentItemDecoration;
                              });
                            },
                            child: Icon(
                                currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                        ['color']
                                    ? TablerIcons.pin_filled
                                    : TablerIcons.pin,
                                size: 16,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 2,
                      )
                    ],
                  ),
                ),
              ),
              // List Decoration COLOR main

              if (isListColorExpanded) ...[
                //list COLOR PICKER Main
                SizedBox(
                  width: 2,
                  height: 4,
                ),

                Container(
                  width: widthBig,
                  padding: EdgeInsets.only(left: 3, right: 3),
                  decoration: BoxDecoration(
                      border: Border.all(),
                      color: defaultPalette.primary,
                      borderRadius: BorderRadius.circular(5)),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Text(
                          ' ${(ColorTools.nameThatColor(
                            decor.color ??
                                defaultPalette.transparent,
                          )).toLowerCase()}',
                          style: GoogleFonts.lexend(
                              fontSize: 14,
                              letterSpacing: -1,
                              color: defaultPalette.extras[0]),
                        ),
                      ),

                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          if ((sWidth * wH2DividerPosition) > 220)
                            Expanded(
                              child: HSVPicker(
                                color: HSVColor.fromColor(
                                  decor.color ??
                                      defaultPalette.transparent,
                                ),
                                onChanged: (value) {
                                  if (!isForeground) {
                                    currentItemDecoration = currentItemDecoration.copyWith(
                                      decoration: currentItemDecoration.decoration.copyWith(
                                        color: value.toColor().withAlpha(
                                          (currentItemDecoration.decoration.color ?? defaultPalette.transparent).alpha,
                                        ),
                                      ),
                                    );
                                  } else {
                                    currentItemDecoration = currentItemDecoration.copyWith(
                                      foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                        color: value.toColor().withAlpha(
                                          (currentItemDecoration.foregroundDecoration.color ?? defaultPalette.transparent).alpha,
                                        ),
                                      ),
                                    );
                                  }

                                           
                                  setState(() { 
                                  sheetDecorationMap[tmpinx] = currentItemDecoration;
                                  });
                                },
                              ),
                            ),
                          Expanded(
                            child: IntrinsicHeight(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                // crossAxisAlignment: CrossAxisAlignment.end,
                                children: [
                                  //list COLOR WHEEL COLOR
                                  WheelPicker(
                                    color: HSVColor.fromColor(
                                      decor.color ??
                                          defaultPalette.transparent,
                                    ),
                                    onChanged: (HSVColor value) {
                                      if (!isForeground) {
                                        currentItemDecoration = currentItemDecoration.copyWith(
                                          decoration: currentItemDecoration.decoration.copyWith(
                                            color: value.toColor().withAlpha(
                                              (currentItemDecoration.decoration.color ?? defaultPalette.transparent).alpha,
                                            ),
                                          ),
                                        );
                                      } else {
                                        currentItemDecoration = currentItemDecoration.copyWith(
                                          foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                            color: value.toColor().withAlpha(
                                              (currentItemDecoration.foregroundDecoration.color ?? defaultPalette.transparent).alpha,
                                            ),
                                          ),
                                        );
                                      }
                                      
                                      setState(() {
                                      sheetDecorationMap[tmpinx] = currentItemDecoration;
                                      });
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      //list alpha picker
                      AlphaPicker(
                        alpha: (decor.color ??
                                defaultPalette.transparent)
                            .alpha,
                        onChanged: (int value) {
                          if (!isForeground) {
                            final decor = currentItemDecoration.decoration;
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: decor.copyWith(
                                color: (decor.color ?? defaultPalette.transparent).withAlpha(value),
                              ),
                            );
                          } else {
                            final decor = currentItemDecoration.foregroundDecoration;
                            currentItemDecoration = currentItemDecoration.copyWith(
                              foregroundDecoration: decor.copyWith(
                                color: (decor.color ?? defaultPalette.transparent).withAlpha(value),
                              ),
                            );
                          }
                          
                          setState(() {
                          sheetDecorationMap[tmpinx] = currentItemDecoration;
                          });
                        },
                      ),
                    ],
                  ),
                ),
              
              ],
              SizedBox(width: 2, height: 4),
            ],
          ),

        ///BORDER COLOR AND WIDTH SECTION FOR DECORATION
        if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['border']) ...[
          //title for border
          GestureDetector(
            onTap: () {
              setState(() {
                if (isForeground) {
                  sheetDecorationVariables[index].isListBorderExpanded2 = 
                      !sheetDecorationVariables[index].isListBorderExpanded2;
                } else {
                  sheetDecorationVariables[index].isListBorderExpanded = 
                      !sheetDecorationVariables[index].isListBorderExpanded;
                }
              });

            },
            child: Container(
            height: 25,
            padding: EdgeInsets.only(left: 2),
            margin: EdgeInsets.only(left: 3, right: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Icon(TablerIcons.border_sides,
                    size: 16, color: defaultPalette.extras[0]),
                if ((sWidth * wH2DividerPosition) > 220)
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(' border ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                Expanded(
                  child: SizedBox(
                    height: 25,
                    child: TextField(
                      focusNode: colorHexFocusNodes[1],
                      controller: colorHexControllers[1],
                      onSubmitted: (value) {
                        setState(() {
                          if (!isForeground) {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: decor.copyWith(
                                border: Border.all(color: hexToColor(value)),
                              ),
                            );
                          } else {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                border: Border.all(color: hexToColor(value)),
                              ),
                            );
                          }

                          sheetDecorationMap[tmpinx] = currentItemDecoration;                   
                        });
                      },
                      textAlignVertical: TextAlignVertical.top,
                      textAlign: TextAlign.end,
                      cursorColor: defaultPalette.tertiary,
                      decoration: InputDecoration(
                        contentPadding: const EdgeInsets.only(left: 2),
                        labelStyle:
                            GoogleFonts.lexend(color: defaultPalette.black),
                        hoverColor: defaultPalette.transparent,
                        filled: true,
                        fillColor: defaultPalette.transparent,
                        border: InputBorder.none,
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide.none,
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide.none,
                          borderRadius: BorderRadius.circular(5.0),
                        ),
                      ),
                      style: GoogleFonts.lexend(
                          letterSpacing: -1,
                          fontWeight: FontWeight.w500,
                          fontSize: 14,
                          color: defaultPalette.black),
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(0.0),
                  child: DecoratedBox(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.fromBorderSide(
                        BorderSide.none,
                      ),
                      color: (decor.border ??
                              Border.all(color: defaultPalette.transparent))
                          .top
                          .color,
                    ),
                    child: SizedBox(
                      width: 15,
                      height: 15,
                    ),
                  ),
                ),
                SizedBox(
                  width: 2,
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(9999),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      focusColor: defaultPalette.primary,
                      hoverColor: defaultPalette.primary,
                      highlightColor: defaultPalette.primary,
                      onTap: () {
                        EyeDropper.enableEyeDropper(context, (value) {
                          setState(() {
                          currentItemDecoration =
                        currentItemDecoration.copyWith(
                            decoration: decor
                                .copyWith(
                                    border: Border.all(
                                        color: value?? defaultPalette.extras[0])));
                          
                          sheetDecorationMap[tmpinx] = currentItemDecoration;
                          
                        });
                        },);
                      },
                      child: const Icon(
                        TablerIcons.color_picker,
                        size: 19,
                      ),
                    ),
                  ),
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(500),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      hoverColor: defaultPalette.tertiary,
                      splashColor: defaultPalette.tertiary,
                      highlightColor: defaultPalette.tertiary,
                      onTap: () {
                        setState(() {
                          currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['border'] =
                              !currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                  ['border'];
          
                          // Update the list item with the modified currentItemDecoration
                          currentItemDecoration = currentItemDecoration;
                        });
                      },
                      child: Icon(
                          currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['border']
                              ? TablerIcons.pin_filled
                              : TablerIcons.pin,
                          size: 16,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
                SizedBox(
                  width: 2,
                )
              ],
            ),
          ),
          ),

          if (isListBorderExpanded) ...[
            SizedBox(
              width: 2,
              height: 4,
            ),
            //LINE or DASHED AND SIDES MENU
            Container(
              margin: EdgeInsets.only(
                left: 3,
                right: 3,
              ),
              padding: EdgeInsets.only(left: 4, right: 5, top: 4, bottom: 4),
              decoration: BoxDecoration(
                  border: Border.all(),
                  color: defaultPalette.primary,
                  borderRadius: BorderRadius.circular(5)),
              child: Flex(
                direction:
                    isSizeBigForBorderRow ? Axis.horizontal : Axis.vertical,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // SIDES MENU
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Container(
                        width:
                            isSizeBigForBorderRow ? widthSmall - 5 : widthBig,
                        padding: EdgeInsets.all(3),
                        decoration: BoxDecoration(
                            border: Border.all(),
                            color: defaultPalette.secondary,
                            borderRadius: BorderRadius.circular(5)),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(99999),
                                  child: Container(
                                      padding: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                          border: Border.all(
                                              color: defaultPalette.extras[0]),
                                          borderRadius:
                                              BorderRadius.circular(99999),
                                          color: defaultPalette.primary),
                                      child: Icon(
                                        TablerIcons.slash,
                                        size: 13,
                                      )),
                                ),
                                SizedBox(
                                  width: 3,
                                ),
                                Text(
                                  'line ',
                                  style: GoogleFonts.lexend(
                                      fontSize: 14,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                            // SizedBox(width: 2,height: 0,),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  ' side',
                                  style: GoogleFonts.lexend(
                                      fontSize: 12,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                                Text(
                                  'width',
                                  style: GoogleFonts.lexend(
                                      fontSize: 12,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                            //All Border Side Select
                            borderSideSelect(
                                0,
                                'all',
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .color,
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                1,
                                'top',
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .color,
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                2,
                                'bottom',
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .bottom
                                    .color,
                                (decor.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .bottom
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                3,
                                'left',
                                ((decor.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .left
                                    .color,
                                ((decor.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .left
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                4,
                                'right',
                                ((decor.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .right
                                    .color,
                                ((decor.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .right
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                          ],
                        ),
                      ),
                    ],
                  ),
                  // if(isSizeBigForBorderRow)
                  //COLOR SELECTOR SECTION For BORDER
                  SizedBox(
                    width: isSizeBigForBorderRow ? widthSmall : widthBig,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Text(
                            ' ${(ColorTools.nameThatColor(currentBorder.top.color)).toLowerCase()}',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                        //list Wheel COLOR
                        WheelPicker(
                          color: HSVColor.fromColor(
                            (decor.border ??
                                    Border.all(color: defaultPalette.transparent))
                                .top
                                .color,
                          ),
                          onChanged: (HSVColor value) {
                            Border currentBorder =
                                (decor.border ??
                                    Border.all(color: defaultPalette.transparent)) as Border;
                            final updatedBorder = Border(
                            bottom: currentBorder.bottom.copyWith(
                              color: value.toColor().withAlpha(currentBorder.bottom.color.alpha),
                            ),
                            top: currentBorder.top.copyWith(
                              color: value.toColor().withAlpha(currentBorder.top.color.alpha),
                            ),
                            left: currentBorder.left.copyWith(
                              color: value.toColor().withAlpha(currentBorder.left.color.alpha),
                            ),
                            right: currentBorder.right.copyWith(
                              color: value.toColor().withAlpha(currentBorder.right.color.alpha),
                            ),
                          );

                          if (!isForeground) {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: currentItemDecoration.decoration.copyWith(border: updatedBorder),
                            );
                          } else {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(border: updatedBorder),
                            );
                          }
        
                            setState(() {
                              sheetDecorationMap[tmpinx] = currentItemDecoration;
                            });
                          },
                        ),
                        //Alpha picker list decoration
                        AlphaPicker(
                          alpha: (decor.border ??
                                  Border.all(color: defaultPalette.transparent))
                              .top
                              .color
                              .alpha,
                          onChanged: (int value) {
                            Border currentBorder =
                                (decor.border ??
                                    Border.all(color: defaultPalette.transparent)) as Border;
                            final updatedBorder = Border(
                              bottom: currentBorder.bottom.copyWith(
                                color: currentBorder.bottom.color.withAlpha(value),
                              ),
                              top: currentBorder.top.copyWith(
                                color: currentBorder.top.color.withAlpha(value),
                              ),
                              left: currentBorder.left.copyWith(
                                color: currentBorder.left.color.withAlpha(value),
                              ),
                              right: currentBorder.right.copyWith(
                                color: currentBorder.right.color.withAlpha(value),
                              ),
                            );

                            if (!isForeground) {
                              currentItemDecoration = currentItemDecoration.copyWith(
                                decoration: currentItemDecoration.decoration.copyWith(border: updatedBorder),
                              );
                            } else {
                              currentItemDecoration = currentItemDecoration.copyWith(
                                foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(border: updatedBorder),
                              );
                            }
                                  
                            setState(() {
                              sheetDecorationMap[tmpinx] = currentItemDecoration;
                            });
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],

          SizedBox(width: 2, height: 3),
        ],

        if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['borderRadius']
            ['isPinned']) ...[
          buildListPaddingMarginEditor(
            isBorderRadius: true,
            isMargin: false,
            itemDecoration: (currentItemDecoration as ItemDecoration),
            pinned: currentItemDecoration.pinned,
            borderRadiusControllers: borderRadiusControllers,
            index: index,
            isForeground: isForeground,
          ),
          SizedBox(width: 2, height: 3),
        ],
        if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['boxShadow']) ...[
          buildShadowEditor(context, shadowLayerIndex: shadowLayerIndex, sIndex: index, isForeground: isForeground, ),
          SizedBox(width: 2, height: 2),
        ],

        if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['bytes'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['fit'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['repeat'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['alignment'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['scale'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['opacity'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                ['filterQuality'] ||
            currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']['invertColors'])
          buildDecorationImageEditor(index: index, isForeground: isForeground,),
        SizedBox(width: 2, height: 10),
      ],
    );
  }

  Widget buildShadowEditor(
    BuildContext context,
    {
      int sIndex = -1,
      int shadowLayerIndex = -1,
      bool isForeground = false,
    }
  ) {
    sIndex = sIndex==-1? decorationIndex==-1?0: decorationIndex:sIndex;
    shadowLayerIndex = shadowLayerIndex == -1
    ?  0
    : shadowLayerIndex;
    var tmpinx =sheetDecorationVariables[sIndex].id;
    ItemDecoration currentItemDecoration = 
        sheetDecorationMap[tmpinx] as ItemDecoration;
    var decor = isForeground? currentItemDecoration.foregroundDecoration:currentItemDecoration.decoration;
    List<BoxShadow> currentShadow =
        decor.boxShadow ?? [BoxShadow()];
    currentShadow = [...(currentShadow.isEmpty ? [BoxShadow()] : currentShadow)];
    List<List<TextEditingController>> listShadowControllers = [];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 84 : 50)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 68 : 32);
    final isSizeBigForRow = (sWidth * wH2DividerPosition) > 260;
    var listShadowFocusNodes = isForeground? sheetDecorationVariables[sIndex].listShadowFocusNodes2:sheetDecorationVariables[sIndex].listShadowFocusNodes;
    var isListShadowExpanded = isForeground? sheetDecorationVariables[sIndex].isListShadowExpanded2 :sheetDecorationVariables[sIndex].isListShadowExpanded;
    
    currentShadow.forEach(
      (element) {
        listShadowControllers.add([
          TextEditingController()..text = element.spreadRadius.toString(),
          TextEditingController()..text = element.blurRadius.toString(),
          TextEditingController()..text = element.offset.dx.toString(),
          TextEditingController()..text = element.offset.dy.toString(),
          TextEditingController()..text = element.color.hexAlpha,
        ]);
      },
    );
    
    List<Widget> shadowPropertyTile(
      int s,
      String name,
    ) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              listShadowFocusNodes[shadowLayerIndex][s]
                  .requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 10
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.1
                      : 1;
              setState(() {
                double currentValue = double.tryParse(
                        listShadowControllers[shadowLayerIndex][s]
                            .text) ??
                    0.0;
                double newValue = (currentValue + details.delta.dx * multiplier)
                    ;

                double parsedValue = double.parse(newValue.toStringAsFixed(2));
                currentShadow[shadowLayerIndex] =
                    currentShadow[shadowLayerIndex].copyWith(
                  spreadRadius: s == 0 ? parsedValue.clamp(0, double.infinity) : null,
                  blurRadius: s == 1 ? parsedValue.clamp(0, double.infinity) : null,
                  offset: s == 2
                      ? Offset(
                          parsedValue,
                          currentShadow[shadowLayerIndex]
                              .offset
                              .dy)
                      : s == 3
                          ? Offset(
                              currentShadow[shadowLayerIndex]
                                  .offset
                                  .dx,
                              parsedValue)
                          : null,
                );

                currentItemDecoration = ItemDecoration(
                  id: currentItemDecoration.id,
                  alignment: currentItemDecoration.alignment,
                  decoration: !isForeground
                      ? currentItemDecoration.decoration.copyWith(
                          boxShadow: [...currentShadow],
                        )
                      : currentItemDecoration.decoration,
                  foregroundDecoration: isForeground
                      ? currentItemDecoration.foregroundDecoration.copyWith(
                          boxShadow: [...currentShadow],
                        )
                      : currentItemDecoration.foregroundDecoration,
                  margin: currentItemDecoration.margin,
                  padding: currentItemDecoration.padding,
                  name: currentItemDecoration.name,
                  pinned: currentItemDecoration.pinned,
                  transform: currentItemDecoration.transform,
                );

               
               sheetDecorationMap[tmpinx] = currentItemDecoration;
              });
            },
            child: Text(
              ' $name ',
              style: GoogleFonts.lexend(
                  fontSize: 12,
                  letterSpacing: -1,
                  color: defaultPalette.extras[0]),
            ),
          ),
        ),
        SizedBox(
          height: 12,
          child: TextFormField(
            onTapOutside: (event) =>
                listShadowFocusNodes[shadowLayerIndex][s]
                    .unfocus(),
            focusNode: listShadowFocusNodes[shadowLayerIndex][s],
            controller: listShadowControllers[shadowLayerIndex]
                [s],
            inputFormatters: [
              NumericInputFormatter(),
            ],
            cursorColor: defaultPalette.tertiary,
            selectionControls: NoMenuTextSelectionControls(),
            textAlign: TextAlign.end,
            decoration: InputDecoration(
              contentPadding: const EdgeInsets.all(0),
              labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
              fillColor: defaultPalette.transparent,
              border: InputBorder.none,
              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
            ),
            keyboardType: TextInputType.number,
            style: GoogleFonts.mitr(
                fontSize: 13,
                color: defaultPalette.extras[0],
                letterSpacing: -1),
            onFieldSubmitted: (value) {
              setState(() {
                double parsedValue = double.parse(value);
                currentShadow[shadowLayerIndex] =
                    currentShadow[shadowLayerIndex].copyWith(
                  spreadRadius: s == 0 ? parsedValue : null,
                  blurRadius: s == 1 ? parsedValue : null,
                  offset: s == 2
                  ? Offset(
                    parsedValue,
                    currentShadow[shadowLayerIndex].offset.dy)
                  : s == 3
                    ? Offset(
                      currentShadow[shadowLayerIndex].offset.dx,
                      parsedValue)
                    : null,
                );

                currentItemDecoration = ItemDecoration(
                  id: currentItemDecoration.id,
                  alignment: currentItemDecoration.alignment,
                  decoration: !isForeground
                      ? currentItemDecoration.decoration.copyWith(
                          boxShadow: [...currentShadow],
                        )
                      : currentItemDecoration.decoration,
                  foregroundDecoration: isForeground
                      ? currentItemDecoration.foregroundDecoration.copyWith(
                          boxShadow: [...currentShadow],
                        )
                      : currentItemDecoration.foregroundDecoration,
                  margin: currentItemDecoration.margin,
                  padding: currentItemDecoration.padding,
                  name: currentItemDecoration.name,
                  pinned: currentItemDecoration.pinned,
                  transform: currentItemDecoration.transform,
                );

                sheetDecorationMap[tmpinx] = currentItemDecoration;      
              });
            },
          ),
        ),
        // SizedBox(width: 2,),
      ];
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        //Title for shadow
        Container(
          width: widthBig,
          margin: EdgeInsets.only(
            left: 3,
            right: 3,
          ),
          padding: EdgeInsets.only(left: 2, right: 2, top: 0, bottom: 0),
          decoration: BoxDecoration(
              border: Border.all(),
              color: defaultPalette.primary,
              borderRadius: BorderRadius.circular(5)),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(TablerIcons.shadow,
                  size: 16, color: defaultPalette.extras[0]),
              Expanded(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      if (isForeground) {
                        sheetDecorationVariables[sIndex].isListShadowExpanded2 = 
                            !sheetDecorationVariables[sIndex].isListShadowExpanded2;
                      } else {
                        sheetDecorationVariables[sIndex].isListShadowExpanded = 
                            !sheetDecorationVariables[sIndex].isListShadowExpanded;
                      }
                    });

                  },
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(
                      ' shadow ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ),
              SizedBox(
                width: 2,
              ),
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['boxShadow'] =
                            !currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']
                                ['boxShadow'];

                        // Update the list item with the modified currentItemDecoration
                        currentItemDecoration = currentItemDecoration;
                      });
                    },
                    child: Icon(
                        currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['boxShadow']
                            ? TablerIcons.pin_filled
                            : TablerIcons.pin,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            ],
          ),
        ),

        SizedBox(width: 2, height: 4),
        if (isListShadowExpanded) ...[
          Container(
            width: widthBig,
            margin: EdgeInsets.only(
              left: 3,
              right: 3,
            ),
            padding: EdgeInsets.only(left: 4, right: 4, top: 4, bottom: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Flex(
              direction: isSizeBigForRow ? Axis.horizontal : Axis.vertical,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Stack(
                  children: [
                    Container(
                      width: isSizeBigForRow ? widthSmall : widthBig,
                      height: 155,
                      padding: EdgeInsets.only(left: 1),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: defaultPalette.secondary,
                        border: Border.all(),
                        borderRadius: BorderRadius.circular(5),
                      ),
                    ),
                    Positioned(
                      left: 3,
                      top: 3,
                      child: Row(
                        children: [
                          //add new shadow layer
                          ClipRRect(
                            borderRadius: BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.transparent,
                              child: InkWell(
                                hoverColor: defaultPalette.primary,
                                splashColor: defaultPalette.primary,
                                highlightColor: defaultPalette.primary,
                                onTap: () {
                                  setState(() {
                                    currentShadow.add(BoxShadow());
                                    if (!isForeground) {
                                      currentItemDecoration = currentItemDecoration.copyWith(
                                        decoration: currentItemDecoration.decoration.copyWith(
                                          boxShadow: currentShadow,
                                        ),
                                      );
                                    } else {
                                      currentItemDecoration = currentItemDecoration.copyWith(
                                        foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                          boxShadow: currentShadow,
                                        ),
                                      );
                                    }

                                    // Update the map
                                    sheetDecorationMap[tmpinx] = currentItemDecoration;

                                    // Generate the listShadowFocusNodes correctly
                                    final newList = List.generate(
                                      currentShadow.length,
                                      (index) => List.generate(5, (_) => FocusNode()),
                                    );

                                    // Assign to the correct shadow focus node list
                                    if (!isForeground) {
                                      sheetDecorationVariables[sIndex].listShadowFocusNodes = newList;
                                    } else {
                                      sheetDecorationVariables[sIndex].listShadowFocusNodes2 = newList;
                                    }
                                        
                                    // listShadowLayerSelectedIndex = 0;
                                    setState(() {
                                      if (isForeground) {
                                        sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex2 = 0;
                                      } else {
                                        sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = 0;
                                      }
                                    });

                                  });
                                },
                                child: Container(
                                    padding: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                        border: Border.all(
                                            color: defaultPalette.extras[0]),
                                        borderRadius:
                                            BorderRadius.circular(99999),
                                        color: defaultPalette.primary),
                                    child: Icon(
                                      TablerIcons.plus,
                                      size: 15,
                                    )),
                              ),
                            ),
                          ),
                          SizedBox(
                            width: 2,
                          ),
                          ClipRRect(
                            borderRadius: BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.transparent,
                              child: Container(
                                  padding: EdgeInsets.all(2.2),
                                  decoration: BoxDecoration(
                                      border: Border.all(
                                          color: defaultPalette.extras[0]),
                                      borderRadius:
                                          BorderRadius.circular(99999),
                                      color: defaultPalette.primary),
                                  child: Icon(
                                    TablerIcons.stack,
                                    size: 15,
                                  )),
                            ),
                          ),
                          Text(
                            ' layers',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                    //Properties of SHADOW editor, textfields
                    Positioned(
                        left: 35,
                        top: 28,
                        child: Container(
                          width:
                              isSizeBigForRow ? widthSmall - 38 : widthBig - 52,
                          height: 123,
                          padding: EdgeInsets.only(
                            left: 1,
                          ),
                          alignment: Alignment.center,
                          decoration: BoxDecoration(
                            color: defaultPalette.primary,
                            border: Border.all(),
                            borderRadius: BorderRadius.circular(5),
                          ),
                          child: ScrollConfiguration(
                            behavior:
                                ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                                durationMS: 500,
                                scrollSpeed: 1,
                                builder: (context, controller, physics) {
                                  return SingleChildScrollView(
                                    controller: controller,
                                    physics: physics,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        ...shadowPropertyTile(0, 'spread'),
                                        ...shadowPropertyTile(1, 'blur'),
                                        ...shadowPropertyTile(2, 'offsetX'),
                                        ...shadowPropertyTile(3, 'offsetY'),
                                        SizedBox(height: 2),
                                        //Hex for shadow color editor
                                        Row(
                                          children: [
                                            Expanded(
                                              child: Text(
                                                ' color ',
                                                style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    letterSpacing: -1,
                                                    color: defaultPalette
                                                        .extras[0]),
                                              ),
                                            ),
                                            DecoratedBox(
                                              decoration: BoxDecoration(
                                                shape: BoxShape.circle,
                                                border: Border.fromBorderSide(
                                                  BorderSide.none,
                                                ),
                                                color: currentShadow[
                                                        shadowLayerIndex]
                                                    .color,
                                              ),
                                              child: SizedBox(
                                                width: 12,
                                                height: 12,
                                              ),
                                            ),
                                            SizedBox(width: 2)
                                          ],
                                        ),
                                        SizedBox(
                                          height: 18,
                                          child: TextField(
                                            focusNode: listShadowFocusNodes[
                                                shadowLayerIndex][4],
                                            controller: listShadowControllers[
                                                shadowLayerIndex][4],
                                            onSubmitted: (value) {
                                              setState(() {
                                                currentShadow[shadowLayerIndex] =
                                                    currentShadow[ shadowLayerIndex]
                                                        .copyWith( color: hexToColor(value));
                                                if (!isForeground) {
                                                  currentItemDecoration = currentItemDecoration.copyWith(
                                                    decoration: currentItemDecoration.decoration.copyWith(
                                                      boxShadow: [...currentShadow],
                                                    ),
                                                  );
                                                } else {
                                                  currentItemDecoration = currentItemDecoration.copyWith(
                                                    foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                                      boxShadow: [...currentShadow],
                                                    ),
                                                  );
                                                }

                                                // Now safely update the map
                                                sheetDecorationMap[tmpinx] = currentItemDecoration;
                                                                  
                                              });
                                            },
                                            // textAlignVertical: TextAlignVertical.top,
                                            textAlign: TextAlign.end,
                                            cursorColor:
                                                defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              contentPadding:
                                                  const EdgeInsets.only(
                                                      left: 2),
                                              labelStyle: GoogleFonts.lexend(
                                                  color: defaultPalette.black),
                                              hoverColor:
                                                  defaultPalette.transparent,
                                              filled: true,
                                              fillColor:
                                                  defaultPalette.transparent,
                                              border: InputBorder.none,
                                              enabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              focusedBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                borderRadius:
                                                    BorderRadius.circular(5.0),
                                              ),
                                            ),
                                            style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                }),
                          ),
                        )),
                    //THE LAYERS AND SCROLLBAR OF SHADOWLAYERS IN DECORATION EDITOR
                    Positioned(
                        top: 28,
                        left: 3,
                        child: Column(
                          children: [
                            SizedBox(
                              width: 30,
                              height: 105,
                              child: ScrollConfiguration(
                                behavior: ScrollBehavior()
                                    .copyWith(scrollbars: false),
                                child: DynMouseScroll(
                                    durationMS: 500,
                                    scrollSpeed: 1,
                                    builder: (context, controller, physics) {
                                      return ScrollbarUltima(
                                        alwaysShowThumb: true,
                                        controller: controller,
                                        scrollbarPosition:
                                            ScrollbarPosition.right,
                                        backgroundColor: defaultPalette.primary,
                                        scrollbarLength: 105,
                                        isDraggable: true,
                                        maxDynamicThumbLength: 90,
                                        thumbBuilder:
                                            (context, animation, widgetStates) {
                                          return Container(
                                            decoration: BoxDecoration(
                                                border: Border.all(),
                                                color: defaultPalette.primary,
                                                borderRadius:
                                                    BorderRadius.circular(2)),
                                            width: 5,
                                          );
                                        },
                                        child: Padding(
                                          padding:
                                              const EdgeInsets.only(left: 0.0),
                                          child: ReorderableListView(
                                            onReorder: (oldIndex, newIndex) {
                                              setState(() {
                                                print('$oldIndex → $newIndex');

                                                final shadowList = (isForeground
                                                        ? currentItemDecoration.foregroundDecoration.boxShadow
                                                        : currentItemDecoration.decoration.boxShadow)
                                                    ?.toList() ?? [];

                                                // 💥 Guard against invalid oldIndex
                                                if (oldIndex < 0 || oldIndex >= shadowList.length) {
                                                  print('Invalid oldIndex: $oldIndex');
                                                  return;
                                                }

                                                final shadow = shadowList.removeAt(oldIndex);

                                                if (newIndex <= shadowList.length) {
                                                  shadowList.insert(newIndex > oldIndex ? newIndex - 1 : newIndex, shadow);
                                                  shadowLayerIndex = newIndex > oldIndex ? newIndex - 1 : newIndex;
                                                } else {
                                                  shadowList.add(shadow);
                                                  shadowLayerIndex = shadowList.length - 1;
                                                }

                                                currentItemDecoration = currentItemDecoration.copyWith(
                                                  decoration: !isForeground
                                                      ? currentItemDecoration.decoration.copyWith(boxShadow: shadowList)
                                                      : currentItemDecoration.decoration,
                                                  foregroundDecoration: isForeground
                                                      ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: shadowList)
                                                      : currentItemDecoration.foregroundDecoration,
                                                );
                                                sheetDecorationMap[tmpinx] = currentItemDecoration;
                                              });
                                            },
                                            proxyDecorator:
                                                (child, index, animation) {
                                              return child;
                                            },
                                            buildDefaultDragHandles: false,
                                            physics: physics,
                                            scrollController: controller,
                                            children: [
                                              for (int i = 0;
                                                  i < currentShadow.length;
                                                  i++)
                                                ReorderableDragStartListener(
                                                  index: i,
                                                  key: ValueKey(i),
                                                  child: ClipRRect(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5),
                                                    child: Padding(
                                                      padding: EdgeInsets.only(
                                                          bottom: 2),
                                                      child: Material(
                                                        color: defaultPalette
                                                            .transparent,
                                                        child: InkWell(
                                                          hoverColor:
                                                              defaultPalette
                                                                  .primary,
                                                          splashColor:
                                                              defaultPalette
                                                                  .primary,
                                                          highlightColor:
                                                              defaultPalette
                                                                  .primary,
                                                          onTap: () {
                                                            setState(() {
                                                              if (isForeground) {
                                                                sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex2 =
                                                                  i;
                                                              } else {
                                                                sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex =
                                                                  i;
                                                              }
                                                            });

                                                          },
                                                          child: Container(
                                                            margin:
                                                                EdgeInsets.only(
                                                                    right: 1),
                                                            padding:
                                                                EdgeInsets.only(
                                                              left: 1,
                                                            ),
                                                            decoration:
                                                                BoxDecoration(
                                                                    border: shadowLayerIndex ==
                                                                            i
                                                                        ? Border
                                                                            .all()
                                                                        //   top: BorderSide(), bottom: BorderSide(),left: BorderSide(), right: BorderSide.none
                                                                        // )
                                                                        : null,
                                                                    color: shadowLayerIndex ==
                                                                            i
                                                                        ? defaultPalette
                                                                            .primary
                                                                        : null,
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            5)),
                                                            child: Text(
                                                              ' ${i + 1}',
                                                              style: GoogleFonts.lexend(
                                                                  fontSize: 14,
                                                                  letterSpacing:
                                                                      -1,
                                                                  color: defaultPalette
                                                                      .extras[0]),
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                            ],
                                          ),
                                        ),
                                      );
                                    }),
                              ),
                            ),
                            SizedBox(
                              height: 2,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.primary,
                                      splashColor: defaultPalette.primary,
                                      highlightColor: defaultPalette.primary,
                                      onTap: () {
                                        setState(() {
                                          if (currentShadow.length>1) {
                                            currentShadow.removeAt(
                                                shadowLayerIndex);
                                            currentItemDecoration = ItemDecoration(
                                            id: currentItemDecoration.id,
                                            alignment: currentItemDecoration.alignment,
                                            decoration: !isForeground
                                                ? currentItemDecoration.decoration.copyWith(boxShadow: [...currentShadow])
                                                : currentItemDecoration.decoration,
                                            foregroundDecoration: isForeground
                                                ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: [...currentShadow])
                                                : currentItemDecoration.foregroundDecoration,
                                            margin: currentItemDecoration.margin,
                                            padding: currentItemDecoration.padding,
                                            name: currentItemDecoration.name,
                                            pinned: currentItemDecoration.pinned,
                                            transform: currentItemDecoration.transform,
                                          );

                                          sheetDecorationMap[tmpinx] = currentItemDecoration;
     
                                          
                                          setState(() {
                                            if (isForeground) {
                                              sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex2 = (shadowLayerIndex -
                                                              1)
                                                          .clamp(0,
                                                              double.infinity)
                                                      as int; 
                                            } else {
                                              sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = (shadowLayerIndex -
                                                              1)
                                                          .clamp(0,
                                                              double.infinity)
                                                      as int; 
                                            }
                                          });
             
                                          }
                                          //  shadowLayerIndex = currentShadow.length-1;
                                        });
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              color:
                                                  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.trash,
                                            size: 14,
                                          )),
                                    ),
                                  ),
                                ),
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.primary,
                                      splashColor: defaultPalette.primary,
                                      highlightColor: defaultPalette.primary,
                                      onTap: () {
                                        setState(() {
                                          currentShadow.insert(
                                              shadowLayerIndex,
                                              currentShadow[
                                                  shadowLayerIndex]);
                                          currentItemDecoration = ItemDecoration(
                                            id: currentItemDecoration.id,
                                            alignment: currentItemDecoration.alignment,
                                            decoration: !isForeground
                                                ? currentItemDecoration.decoration.copyWith(boxShadow: [...currentShadow])
                                                : currentItemDecoration.decoration,
                                            foregroundDecoration: isForeground
                                                ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: [...currentShadow])
                                                : currentItemDecoration.foregroundDecoration,
                                            margin: currentItemDecoration.margin,
                                            padding: currentItemDecoration.padding,
                                            name: currentItemDecoration.name,
                                            pinned: currentItemDecoration.pinned,
                                            transform: currentItemDecoration.transform,
                                          );

                                          sheetDecorationMap[tmpinx] = currentItemDecoration;

                                          if (isForeground) {
                                            sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex2 = shadowLayerIndex + 1;
                                          } else {
                                            sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = shadowLayerIndex + 1;
                                          }
            
                                          //  shadowLayerIndex = currentShadow.length-1;
                                        });
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              color:
                                                  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.copy,
                                            size: 14,
                                          )),
                                    ),
                                  ),
                                ),
                              ],
                            )
                          ],
                        )),
                  ],
                ),
                //Wheel picker for SHADOW COLOR
                SizedBox(
                  width: isSizeBigForRow ? widthSmall - 10 : widthBig,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: SingleChildScrollView(
                              scrollDirection: Axis.horizontal,
                              child: Text(
                                ' ${(ColorTools.nameThatColor(currentShadow[shadowLayerIndex].color)).toLowerCase()}',
                                style: GoogleFonts.lexend(
                                    fontSize: 14,
                                    letterSpacing: -1,
                                    color: defaultPalette.extras[0]),
                              ),
                            ),
                          ),
                          ClipRRect(
                        borderRadius: BorderRadius.circular(9999),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            focusColor: defaultPalette.primary,
                            hoverColor: defaultPalette.primary,
                            highlightColor: defaultPalette.primary,
                            onTap: () {
                              EyeDropper.enableEyeDropper(context, (value) {
                                setState(() {
                                  currentShadow[
                                      shadowLayerIndex] = currentShadow[
                                          shadowLayerIndex]
                                      .copyWith(
                                          color: value);
                                  currentItemDecoration = ItemDecoration(
                                  id: currentItemDecoration.id,
                                  alignment: currentItemDecoration.alignment,
                                  decoration: !isForeground
                                      ? currentItemDecoration.decoration.copyWith(boxShadow: [...currentShadow])
                                      : currentItemDecoration.decoration,
                                  foregroundDecoration: isForeground
                                      ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: [...currentShadow])
                                      : currentItemDecoration.foregroundDecoration,
                                  margin: currentItemDecoration.margin,
                                  padding: currentItemDecoration.padding,
                                  name: currentItemDecoration.name,
                                  pinned: currentItemDecoration.pinned,
                                  transform: currentItemDecoration.transform,
                                );

                                sheetDecorationMap[tmpinx] = currentItemDecoration;
                                              
                          });
                              },);
                            },
                            child: const Icon(
                              TablerIcons.color_picker,
                              size: 19,
                            ),
                          ),
                        ),
                      ),
                        ],
                      ),
                      //list Wheel COLOR
                      WheelPicker(
                        color: HSVColor.fromColor(
                          currentShadow[shadowLayerIndex].color,
                        ),
                        onChanged: (HSVColor value) {
                          setState(() {
                            currentShadow[
                                shadowLayerIndex] = currentShadow[
                                    shadowLayerIndex]
                                .copyWith(
                                    color: value.toColor().withAlpha(
                                        currentShadow[
                                                shadowLayerIndex]
                                            .color
                                            .alpha));
                            currentItemDecoration = ItemDecoration(
                              id: currentItemDecoration.id,
                              alignment: currentItemDecoration.alignment,
                              decoration: !isForeground
                                  ? currentItemDecoration.decoration.copyWith(boxShadow: [...currentShadow])
                                  : currentItemDecoration.decoration,
                              foregroundDecoration: isForeground
                                  ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: [...currentShadow])
                                  : currentItemDecoration.foregroundDecoration,
                              margin: currentItemDecoration.margin,
                              padding: currentItemDecoration.padding,
                              name: currentItemDecoration.name,
                              pinned: currentItemDecoration.pinned,
                              transform: currentItemDecoration.transform,
                            );

                            sheetDecorationMap[tmpinx] = currentItemDecoration;
                                              
                          });
                          
                        },
                      ),
                      //Alpha picker list decoration
                      AlphaPicker(
                        alpha: currentShadow[shadowLayerIndex]
                            .color
                            .alpha,
                        onChanged: (int value) {
                          setState(() {
                            currentShadow[shadowLayerIndex] =
                                currentShadow[shadowLayerIndex]
                                    .copyWith(
                                        color: currentShadow[
                                                shadowLayerIndex]
                                            .color
                                            .withAlpha(value));
                            currentItemDecoration = ItemDecoration(
                              id: currentItemDecoration.id,
                              alignment: currentItemDecoration.alignment,
                              decoration: !isForeground
                                  ? currentItemDecoration.decoration.copyWith(boxShadow: [...currentShadow])
                                  : currentItemDecoration.decoration,
                              foregroundDecoration: isForeground
                                  ? currentItemDecoration.foregroundDecoration.copyWith(boxShadow: [...currentShadow])
                                  : currentItemDecoration.foregroundDecoration,
                              margin: currentItemDecoration.margin,
                              padding: currentItemDecoration.padding,
                              name: currentItemDecoration.name,
                              pinned: currentItemDecoration.pinned,
                              transform: currentItemDecoration.transform,
                            );

                            sheetDecorationMap[tmpinx] = currentItemDecoration;
                                            
                          });
                          
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ]
      ],
    );
  }

  Widget buildDecorationImageEditor(
    {
      int index = -1,
      bool isForeground= false,
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var tmpinx = sheetDecorationVariables[index].id;
    ItemDecoration currentItemDecoration = 
        sheetDecorationMap[tmpinx] as ItemDecoration;
    var decor = isForeground? currentItemDecoration.foregroundDecoration:currentItemDecoration.decoration;
    final currentDecorationImage = decor.image;
    
    // final widthSmall =  ((sWidth * wH2DividerPosition)-(showDecorationLayers? 84:48))/2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 74 : 40);
    // final isSizeBigForBorderRow = (sWidth * wH2DividerPosition)>260;
    List<TextEditingController> listImageAlignControllers = [];
    List<TextEditingController> listImagePropertyControllers = [];
    if (currentDecorationImage != null) {
      listImageAlignControllers = [
        TextEditingController()
          ..text = (currentDecorationImage.alignment as Alignment)
              .x
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
        TextEditingController()
          ..text = (currentDecorationImage.alignment as Alignment)
              .y
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
      ];
      listImagePropertyControllers = [
        TextEditingController()
          ..text = (currentDecorationImage.scale)
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
        TextEditingController()
          ..text = (currentDecorationImage.opacity)
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
      ];
    }
    var listImageAlignFocusNodes = isForeground? sheetDecorationVariables[index].listImageAlignFocusNodes2:sheetDecorationVariables[index].listImageAlignFocusNodes;
    var listImagePropertyFocusNodes = isForeground? sheetDecorationVariables[index].listImagePropertyFocusNodes2:sheetDecorationVariables[index].listImagePropertyFocusNodes;
    var isListDecorationImageExpanded = isForeground? sheetDecorationVariables[index].isListDecorationImageExpanded2:sheetDecorationVariables[index].isListDecorationImageExpanded;
    
    Widget roundButton(
      void Function() onTap,
      Widget icon, {
      double borderRadius = 9999,
      bool isSelected = false,
      EdgeInsets padding = const EdgeInsets.all(3),
    }) {
      return ClipRRect(
        borderRadius: BorderRadius.circular(borderRadius),
        child: Material(
          color: isSelected ? defaultPalette.primary : defaultPalette.secondary,
          child: InkWell(
            hoverColor: defaultPalette.primary,
            splashColor: defaultPalette.primary,
            highlightColor: defaultPalette.primary,
            onTap: () {
              setState(() {
                onTap();
              });
            },
            child: Container(
                padding: padding,
                decoration: BoxDecoration(
                  border: isSelected
                      ? Border.all(color: defaultPalette.extras[0])
                      : Border.fromBorderSide(BorderSide.none),
                  borderRadius: BorderRadius.circular(borderRadius),
                  // color: defaultPalette.primary
                ),
                child: icon),
          ),
        ),
      );
    }

    Widget titleTile(
      String name,
      IconData icon, {
      double fontSize = 13,
    }) {
      return Row(children: [
        Icon(icon, size: 15),
        Expanded(
          child: Text(
            name,
            maxLines: 1,
            style: GoogleFonts.lexend(
                fontSize: fontSize,
                letterSpacing: -1,
                fontWeight: FontWeight.w500),
          ),
        )
      ]);
    }

    Widget toggleSelectionRow(
      List<Widget> icons,
      List<dynamic> values,
    ) {
      List<bool> selected = [];

      for (var v = 0; v < values.length; v++) {
        if (currentDecorationImage != null) {
          if (values[v] is BoxFit) {
            if (currentDecorationImage.fit == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is FilterQuality) {
            if (currentDecorationImage.filterQuality == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is double) {
            if (values[v] ==
                    (currentDecorationImage.alignment as Alignment).x &&
                values[v] < 0) {
              selected.add(true);
            } else if (values[v] == 0 &&
                values[v] ==
                    (currentDecorationImage.alignment as Alignment).x) {
              selected.add(true);
            } else if (values[v] ==
                    (currentDecorationImage.alignment as Alignment).x &&
                values[v] > 0) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is Alignment) {
            if (values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y &&
                values[v].y < 0) {
              selected.add(true);
            } else if (values[v].y == 0 &&
                values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y) {
              selected.add(true);
            } else if (values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y &&
                values[v].y > 0) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else {
            if (currentDecorationImage.repeat == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          }
        }
      }

      Function() switchFunction(dynamic value) {
        if (value is BoxFit) {
          return () {
            if (currentDecorationImage != null) {
              final updatedImage = DecorationImage(
                image: MemoryImage((currentDecorationImage.image as MemoryImage).bytes),
                fit: value,
                repeat: currentDecorationImage.repeat,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              );

              currentItemDecoration = currentItemDecoration.copyWith(
                decoration: isForeground
                    ? currentItemDecoration.decoration
                    : currentItemDecoration.decoration.copyWith(image: updatedImage),
                foregroundDecoration: isForeground
                    ? currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage)
                    : currentItemDecoration.foregroundDecoration,
              );

              sheetDecorationMap[tmpinx] = currentItemDecoration;
            }
          };
        } else if (value is FilterQuality) {
          return () {
            if (currentDecorationImage != null) {
              final updatedImage = DecorationImage(
                image: MemoryImage((currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: value,
                invertColors: currentDecorationImage.invertColors,
              );

              currentItemDecoration = currentItemDecoration.copyWith(
                decoration: isForeground
                    ? currentItemDecoration.decoration
                    : currentItemDecoration.decoration.copyWith(image: updatedImage),
                foregroundDecoration: isForeground
                    ? currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage)
                    : currentItemDecoration.foregroundDecoration,
              );

              sheetDecorationMap[tmpinx] = currentItemDecoration;
            }
          };
        } else if (value is double) {
          return () {
            if (currentDecorationImage != null) {
              final newAlignment = Alignment(
                value.clamp(-1.0, 1.0),
                (currentDecorationImage.alignment as Alignment).y,
              );

              final updatedImage = DecorationImage(
                image: MemoryImage((currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: newAlignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              );

              currentItemDecoration = currentItemDecoration.copyWith(
                decoration: isForeground
                    ? currentItemDecoration.decoration
                    : currentItemDecoration.decoration.copyWith(image: updatedImage),
                foregroundDecoration: isForeground
                    ? currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage)
                    : currentItemDecoration.foregroundDecoration,
              );

              sheetDecorationMap[tmpinx] = currentItemDecoration;
            }
          };
        } else if (value is Alignment) {
          return () {
            if (currentDecorationImage != null) {
              final newAlignment = Alignment(
                (currentDecorationImage.alignment as Alignment).x,
                value.y,
              );

              final updatedImage = DecorationImage(
                image: MemoryImage((currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: newAlignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              );

              currentItemDecoration = currentItemDecoration.copyWith(
                decoration: isForeground
                    ? currentItemDecoration.decoration
                    : currentItemDecoration.decoration.copyWith(image: updatedImage),
                foregroundDecoration: isForeground
                    ? currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage)
                    : currentItemDecoration.foregroundDecoration,
              );

              sheetDecorationMap[tmpinx] = currentItemDecoration;
            }
          };
        } else {
          // assuming 'value' here is ImageRepeat
          return () {
            if (currentDecorationImage != null) {
              final updatedImage = DecorationImage(
                image: MemoryImage((currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: value,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              );

              currentItemDecoration = currentItemDecoration.copyWith(
                decoration: isForeground
                    ? currentItemDecoration.decoration
                    : currentItemDecoration.decoration.copyWith(image: updatedImage),
                foregroundDecoration: isForeground
                    ? currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage)
                    : currentItemDecoration.foregroundDecoration,
              );

              sheetDecorationMap[tmpinx] = currentItemDecoration;
            }
          };
        }

      }

      return Container(
        padding: EdgeInsets.all(2),
        decoration: BoxDecoration(
            color: defaultPalette.secondary,
            border: Border.all(),
            borderRadius: BorderRadius.circular(5)),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            for (int i = 0; i < icons.length; i++) ...[
              Expanded(
                  child: roundButton(switchFunction(values[i]), icons[i],
                      isSelected: selected[i], borderRadius: 5)),
              if (i != icons.length - 1)
                SizedBox(
                  width: 2,
                )
            ]
          ],
        ),
      );
    }

    List<Widget> imageAlignPropertyTile(
      int s,
    ) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              listImageAlignFocusNodes[s].requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 0.5
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.01
                      : 0.1;
              setState(() {
                double currentValue =
                    double.tryParse(listImageAlignControllers[s].text) ?? 0.0;
                double newValue =
                    (currentValue + details.delta.dx * multiplier);

                double parsedValue = double.parse(newValue.toStringAsFixed(4));
                Alignment newAlignment = s == 0
                    ? Alignment(parsedValue,
                        (currentDecorationImage!.alignment as Alignment).y)
                    : Alignment(
                        (currentDecorationImage!.alignment as Alignment).x,
                        parsedValue,
                      );

                if (currentDecorationImage != null) {
                  final updatedImage = DecorationImage(
                    image: MemoryImage(
                        (currentDecorationImage.image as MemoryImage).bytes),
                    fit: currentDecorationImage.fit,
                    repeat: currentDecorationImage.repeat,
                    alignment: newAlignment,
                    scale: currentDecorationImage.scale,
                    opacity: currentDecorationImage.opacity,
                    filterQuality: currentDecorationImage.filterQuality,
                    invertColors: currentDecorationImage.invertColors,
                  );

                  if (!isForeground) {
                    currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration.copyWith(
                        image: updatedImage,
                      ),
                    );
                  } else {
                    currentItemDecoration = currentItemDecoration.copyWith(
                      foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                        image: updatedImage,
                      ),
                    );
                  }
                }

                // This part is unnecessary unless it's meant to trigger a rebuild
                // currentItemDecoration = currentItemDecoration.copyWith(
                //     decoration: currentItemDecoration.decoration);

                sheetDecorationMap[tmpinx] = currentItemDecoration;

              });
            },
            child: Icon(
              s == 0
                  ? TablerIcons.arrows_horizontal
                  : TablerIcons.arrows_vertical,
              size: 16,
            ),
          ),
        ),
        Expanded(
          flex: 10,
          child: SizedBox(
            height: 12,
            child: TextFormField(
              onTapOutside: (event) => listImageAlignFocusNodes[s].unfocus(),
              focusNode: listImageAlignFocusNodes[s],
              controller: listImageAlignControllers[s],
              inputFormatters: [
                NumericInputFormatter(allowNegative: true),
              ],
              cursorColor: defaultPalette.tertiary,
              selectionControls: NoMenuTextSelectionControls(),
              textAlign: TextAlign.end,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.all(0),
                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                fillColor: defaultPalette.transparent,
                border: InputBorder.none,
                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
              ),
              keyboardType: TextInputType.number,
              style: GoogleFonts.mitr(
                  fontSize: 13,
                  color: defaultPalette.extras[0],
                  letterSpacing: -1),
              onFieldSubmitted: (value) {
                setState(() {
                  double parsedValue = double.parse(value);

                  Alignment newAlignment = s == 0
                      ? Alignment(parsedValue.clamp(-1, 1),
                          (currentDecorationImage!.alignment as Alignment).y)
                      : Alignment(
                          (currentDecorationImage!.alignment as Alignment).x,
                          parsedValue.clamp(-1, 1),
                        );

                  if (currentDecorationImage != null) {
                    final updatedImage = DecorationImage(
                      image: MemoryImage(
                        (currentDecorationImage.image as MemoryImage).bytes,
                      ),
                      fit: currentDecorationImage.fit,
                      repeat: currentDecorationImage.repeat,
                      alignment: newAlignment,
                      scale: currentDecorationImage.scale,
                      opacity: currentDecorationImage.opacity,
                      filterQuality: currentDecorationImage.filterQuality,
                      invertColors: currentDecorationImage.invertColors,
                    );

                    if (!isForeground) {
                      currentItemDecoration = currentItemDecoration.copyWith(
                        decoration: currentItemDecoration.decoration.copyWith(
                          image: updatedImage,
                        ),
                      );
                    } else {
                      currentItemDecoration = currentItemDecoration.copyWith(
                        foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                          image: updatedImage,
                        ),
                      );
                    }
                  }

                  // This redundant reassignment can be omitted unless needed for a specific effect.
                  // Keeping only if you're relying on triggering a state propagation or rebuild.
                  currentItemDecoration = currentItemDecoration.copyWith(
                    decoration: currentItemDecoration.decoration,
                  );

                  sheetDecorationMap[tmpinx] = currentItemDecoration;
                });
              },
            ),
          ),
        ),
        SizedBox(
          width: 2,
        ),
        Expanded(
          flex: 25,
          child: SizedBox(
            height: 30,
            child: toggleSelectionRow(
                s == 0
                    ? [
                        Icon(TablerIcons.layout_align_left, size: 16),
                        Icon(TablerIcons.layout_align_center, size: 16),
                        Icon(TablerIcons.layout_align_right, size: 16),
                      ]
                    : [
                        Icon(TablerIcons.layout_align_top, size: 16),
                        Icon(TablerIcons.layout_align_middle, size: 16),
                        Icon(TablerIcons.layout_align_bottom, size: 16),
                      ],
                s == 0
                    ? [-1.0, 0.0, 1.0]
                    : [
                        Alignment(0, -1),
                        Alignment(0, 0),
                        Alignment(0, 1),
                      ]),
          ),
        )
      ];
    }

    List<Widget> imagePropertyTile(int s) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              listImagePropertyFocusNodes[s].requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 0.5
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.01
                      : 0.1;
              setState(() {
                double currentValue =
                    double.tryParse(listImagePropertyControllers[s].text) ??
                        0.0;
                double newValue = (currentValue + details.delta.dx * multiplier)
                    .clamp(-1, double.infinity);

                double parsedValue = double.parse(newValue.toStringAsFixed(4));

                if (currentDecorationImage != null) {
                  final updatedImage = DecorationImage(
                    image: MemoryImage(
                      (currentDecorationImage.image as MemoryImage).bytes,
                    ),
                    fit: currentDecorationImage.fit,
                    repeat: currentDecorationImage.repeat,
                    alignment: currentDecorationImage.alignment,
                    scale: s == 0 ? parsedValue : currentDecorationImage.scale,
                    opacity: s == 1
                        ? parsedValue.clamp(0, 1)
                        : currentDecorationImage.opacity,
                    filterQuality: currentDecorationImage.filterQuality,
                    invertColors: currentDecorationImage.invertColors,
                  );

                  if (!isForeground) {
                    currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration.copyWith(
                        image: updatedImage,
                      ),
                    );
                  } else {
                    currentItemDecoration = currentItemDecoration.copyWith(
                      foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                        image: updatedImage,
                      ),
                    );
                  }
                }

                // Optional: can remove this if it’s not doing anything meaningful.
                currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration,
                );

                sheetDecorationMap[tmpinx] = currentItemDecoration;

              });
            },
            child: Row(
              children: [
                Icon(
                  s == 0 ? TablerIcons.scale : TablerIcons.square_toggle,
                  size: 16,
                ),
                Text(
                  s == 0 ? ' scale ' : ' opacity ',
                  style: GoogleFonts.lexend(
                      fontSize: 14,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0]),
                ),
              ],
            ),
          ),
        ),
        Expanded(
          flex: 10,
          child: SizedBox(
            height: 12,
            child: TextFormField(
              onTapOutside: (event) => listImagePropertyFocusNodes[s].unfocus(),
              focusNode: listImagePropertyFocusNodes[s],
              controller: listImagePropertyControllers[s],
              inputFormatters: [
                NumericInputFormatter(allowNegative: true),
              ],
              cursorColor: defaultPalette.tertiary,
              selectionControls: NoMenuTextSelectionControls(),
              textAlign: TextAlign.end,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.all(0),
                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                fillColor: defaultPalette.transparent,
                border: InputBorder.none,
                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
              ),
              keyboardType: TextInputType.number,
              style: GoogleFonts.mitr(
                  fontSize: 13,
                  color: defaultPalette.extras[0],
                  letterSpacing: -1),
              onFieldSubmitted: (value) {
                setState(() {
                  double parsedValue = double.parse(value);

                  if (currentDecorationImage != null) {
                    final updatedImage = DecorationImage(
                      image: MemoryImage(
                        (currentDecorationImage.image as MemoryImage).bytes,
                      ),
                      fit: currentDecorationImage.fit,
                      repeat: currentDecorationImage.repeat,
                      alignment: currentDecorationImage.alignment,
                      scale: s == 0 ? parsedValue : currentDecorationImage.scale,
                      opacity: s == 1
                          ? parsedValue.clamp(0, 1)
                          : currentDecorationImage.opacity,
                      filterQuality: currentDecorationImage.filterQuality,
                      invertColors: currentDecorationImage.invertColors,
                    );

                    if (!isForeground) {
                      currentItemDecoration = currentItemDecoration.copyWith(
                        decoration: currentItemDecoration.decoration.copyWith(
                          image: updatedImage,
                        ),
                      );
                    } else {
                      currentItemDecoration = currentItemDecoration.copyWith(
                        foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                          image: updatedImage,
                        ),
                      );
                    }
                  }

                  // Optional: can remove this if it’s not doing anything meaningful.
                  currentItemDecoration = currentItemDecoration.copyWith(
                    decoration: currentItemDecoration.decoration,
                  );

                  sheetDecorationMap[tmpinx] = currentItemDecoration;

                });
              },
            ),
          ),
        ),
        SizedBox(
          width: 2,
        ),
      ];
    }

    return Column(
      children: [
        //Title for Decoration Image Editor
        Container(
          width: widthBig,
          margin: EdgeInsets.only(
            left: 3,
            right: 3,
          ),
          padding: EdgeInsets.only(left: 2, right: 2, top: 0, bottom: 0),
          decoration: BoxDecoration(
              border: Border.all(),
              color: defaultPalette.primary,
              borderRadius: BorderRadius.circular(5)),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(TablerIcons.photo,
                  size: 16, color: defaultPalette.extras[0]),
              Expanded(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      if (isForeground) {
                        sheetDecorationVariables[index].isListDecorationImageExpanded2 = 
                            !sheetDecorationVariables[index].isListDecorationImageExpanded2;
                      } else {
                        sheetDecorationVariables[index].isListDecorationImageExpanded = 
                            !sheetDecorationVariables[index].isListDecorationImageExpanded;
                      }
                    });

                  },
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(
                      ' image ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ),
              SizedBox(
                width: 2,
              ),
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        var pinKey = isForeground? 'foregroundDecoration':'decoration';
                        currentItemDecoration.pinned[pinKey]['image']
                                ['isPinned'] =
                            !currentItemDecoration.pinned[pinKey]['image']
                                ['isPinned'];
                        currentItemDecoration.pinned[pinKey]['image']['bytes'] = !currentItemDecoration.pinned[pinKey]['image']['bytes']; 
                        currentItemDecoration.pinned[pinKey]['image']['fit'] = !currentItemDecoration.pinned[pinKey]['image']['fit']; 
                        currentItemDecoration.pinned[pinKey]['image']['repeat'] = !currentItemDecoration.pinned[pinKey]['image']['repeat']; 
                        currentItemDecoration.pinned[pinKey]['image']['alignment'] = !currentItemDecoration.pinned[pinKey]['image']['alignment']; 
                        currentItemDecoration.pinned[pinKey]['image']['scale'] = !currentItemDecoration.pinned[pinKey]['image']['scale']; 
                        currentItemDecoration.pinned[pinKey]['image']['opacity'] = !currentItemDecoration.pinned[pinKey]['image']['opacity']; 
                        currentItemDecoration.pinned[pinKey]['image']['filterQuality'] = !currentItemDecoration.pinned[pinKey]['image']['filterQuality']; 
                        currentItemDecoration.pinned[pinKey]['image']['invertColors'] = !currentItemDecoration.pinned[pinKey]['image']['invertColors'];

                        // Update the list item with the modified currentItemDecoration
                        currentItemDecoration = currentItemDecoration;
                        sheetDecorationMap[tmpinx] = currentItemDecoration;
                      });
                    },
                    child: Icon(
                        currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                                ['isPinned']
                            ? TablerIcons.pin_filled
                            : TablerIcons.pin,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            ],
          ),
        ),
        SizedBox(width: 2, height: 4),
        if (isListDecorationImageExpanded) ...[
          Container(
            width: widthBig,
            margin: EdgeInsets.only(
              left: 3,
              right: 3,
            ),
            padding: EdgeInsets.only(left: 4, right: 4, top: 4, bottom: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Column(
              children: [
                GestureDetector(
                  onTap: () async {
                    if (currentDecorationImage == null) {
                      FilePickerResult? result =
                        await FilePicker.platform.pickFiles(
                            type: FileType.custom,
                            allowedExtensions: [
                              'jpg',
                              'png',
                            ],
                            withData: true);
                              
                      if (result != null) {
                        setState(() {
                          final newImage = DecorationImage(
                            image: MemoryImage(result.files[0].bytes!),
                            fit: currentDecorationImage != null
                                ? currentDecorationImage.fit
                                : BoxFit.fitWidth,
                          );

                          if (!isForeground) {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: currentItemDecoration.decoration.copyWith(
                                image: newImage,
                              ),
                            );
                          } else {
                            currentItemDecoration = currentItemDecoration.copyWith(
                              foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                image: newImage,
                              ),
                            );
                          }

                          sheetDecorationMap[tmpinx] = currentItemDecoration;
                                        
                        });
                      }
                    }
                  },
                  child: Container(
                    decoration: BoxDecoration(
                        color: defaultPalette.secondary,
                        border: Border.all(),
                        borderRadius: BorderRadius.circular(5)),
                    padding: EdgeInsets.all(2),
                    child: Column(
                      children: [
                        Container(
                          width: sWidth,
                          height: 50,
                          decoration: BoxDecoration(
                              image: currentDecorationImage ?? null,
                              color: defaultPalette.secondary,
                              borderRadius: BorderRadius.circular(5)),
                          child: currentDecorationImage != null
                              ? null
                              : Icon(
                                  TablerIcons.photo_plus,
                                  size: 16,
                                ),
                        ),
                        if (currentDecorationImage != null)
                          Padding(
                            padding: const EdgeInsets.only(top: 2.0),
                            child: Row(
                              // mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                roundButton(() async {
                                  FilePickerResult? result =
                                      await FilePicker.platform.pickFiles(
                                          type: FileType.custom,
                                          allowedExtensions: [
                                            'jpg',
                                            'png',
                                          ],
                                          withData: true);
                                  if (result != null) {
                                    setState(() {
                                      final newImage = DecorationImage(
                                        image: MemoryImage(result.files[0].bytes!),
                                        fit: currentDecorationImage != null
                                            ? currentDecorationImage.fit
                                            : BoxFit.fitWidth,
                                      );

                                      if (!isForeground) {
                                        currentItemDecoration = currentItemDecoration.copyWith(
                                          decoration: currentItemDecoration.decoration.copyWith(
                                            image: newImage,
                                          ),
                                        );
                                      } else {
                                        currentItemDecoration = currentItemDecoration.copyWith(
                                          foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(
                                            image: newImage,
                                          ),
                                        );
                                      }

                                      sheetDecorationMap[tmpinx] = currentItemDecoration;
                                                
                                    });
                                  }
                                }, Icon(TablerIcons.photo_plus, size: 15),
                                    isSelected: true),
                                SizedBox(width: 2),
                                roundButton(() {
                                  final currentDecor = isForeground
                                      ? currentItemDecoration.foregroundDecoration
                                      : currentItemDecoration.decoration;

                                  final clearedImageDecoration = BoxDecoration(
                                    image: null, // clearing image
                                    border: currentDecor.border,
                                    borderRadius: currentDecor.borderRadius,
                                    boxShadow: currentDecor.boxShadow,
                                    color: currentDecor.color,
                                    gradient: currentDecor.gradient,
                                    backgroundBlendMode: currentDecor.backgroundBlendMode,
                                  );

                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    decoration: !isForeground ? clearedImageDecoration : currentItemDecoration.decoration,
                                    foregroundDecoration: isForeground ? clearedImageDecoration : currentItemDecoration.foregroundDecoration,
                                  );

                                  sheetDecorationMap[tmpinx] = currentItemDecoration;
                                                  
                                }, Icon(TablerIcons.trash, size: 15),
                                    isSelected: true),
                              ],
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                SizedBox(height: 4),
                if (currentDecorationImage != null) ...[
                  ////The setup for BoxFit
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['fit']) ...[
                    titleTile(' ${currentDecorationImage.fit!.name}',
                        TablerIcons.artboard),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.arrow_autofit_content,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrow_autofit_height,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrow_autofit_width,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrows_maximize,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.input_x,
                        size: 20,
                      ),
                    ], [
                      BoxFit.contain,
                      BoxFit.fitHeight,
                      BoxFit.fitWidth,
                      BoxFit.fill,
                      BoxFit.none
                    ]),
                    SizedBox(height: 2),
                  ],

                  ////The setup for Repeating Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['repeat']) ...[
                    titleTile(' ${currentDecorationImage.repeat.name}',
                        TablerIcons.layout_grid),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.layout_grid,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.columns_3,
                        size: 18,
                      ),
                      Transform.rotate(
                          angle: pi / 2,
                          child: Icon(
                            TablerIcons.columns_3,
                            size: 18,
                          )),
                      Icon(
                        TablerIcons.input_x,
                        size: 18,
                      ),
                    ], [
                      ImageRepeat.repeat,
                      ImageRepeat.repeatX,
                      ImageRepeat.repeatY,
                      ImageRepeat.noRepeat,
                    ]),
                    SizedBox(height: 3),
                  ],

                  ///The setup for Aligning Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['alignment']) ...[
                    titleTile(
                        ' ${currentDecorationImage.alignment.toString()}'
                            .replaceAll(RegExp(r'\)'), '')
                            .replaceAll(RegExp(r'Alignment.'), ''),
                        TablerIcons.align_box_left_stretch,
                        fontSize: 13),
                    SizedBox(height: 2),
                    Row(
                      children: [
                        ...imageAlignPropertyTile(1),
                      ],
                    ),
                    SizedBox(height: 3),
                    Row(
                      children: [...imageAlignPropertyTile(0)],
                    ),
                  ],
                  ////The setup for Scale Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['scale']) ...[
                    SizedBox(height: 4),
                    Row(
                      children: [...imagePropertyTile(0)],
                    ),
                  ],
                  ////The setup for Opacity of Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['opacity']) ...[
                    SizedBox(height: 3),
                    Row(
                      children: [...imagePropertyTile(1)],
                    ),
                    SizedBox(height: 4),
                  ],
                  ////The setup for Quality of Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['filterQuality']) ...[
                    titleTile(' ${currentDecorationImage.filterQuality.name}',
                        TablerIcons.michelin_star),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.antenna_bars_2,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_3,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_4,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_5,
                        size: 18,
                      ),
                    ], [
                      FilterQuality.none,
                      FilterQuality.low,
                      FilterQuality.medium,
                      FilterQuality.high,
                    ]),
                  ],
                  ////The setup for Inversion of Image
                  if (currentItemDecoration.pinned[isForeground? 'foregroundDecoration':'decoration']['image']
                      ['invertColors']) ...[
                    SizedBox(height: 4),
                    titleTile(' invert', TablerIcons.brightness_2),
                    SizedBox(height: 1),
                    AnimatedToggleSwitch<bool>.dual(
                      current: currentDecorationImage.invertColors,
                      first: false,
                      second: true,
                      onChanged: (value) {
                        setState(() {
                          final updatedImage = DecorationImage(
                          image: MemoryImage(
                              (currentDecorationImage.image as MemoryImage).bytes),
                          fit: currentDecorationImage.fit,
                          repeat: currentDecorationImage.repeat,
                          alignment: currentDecorationImage.alignment,
                          scale: currentDecorationImage.scale,
                          opacity: currentDecorationImage.opacity,
                          filterQuality: currentDecorationImage.filterQuality,
                          invertColors: value,
                        );

                        if (!isForeground) {
                          currentItemDecoration = currentItemDecoration.copyWith(
                            decoration: currentItemDecoration.decoration.copyWith(image: updatedImage),
                          );
                        } else {
                          currentItemDecoration = currentItemDecoration.copyWith(
                            foregroundDecoration: currentItemDecoration.foregroundDecoration.copyWith(image: updatedImage),
                          );
                        }

                        // Optional redundancy for triggering listeners or layout rebuild
                        currentItemDecoration = currentItemDecoration.copyWith(
                          decoration: currentItemDecoration.decoration,
                        );

                        sheetDecorationMap[tmpinx] = currentItemDecoration;
                          
                        });
                      },
                      animationCurve: Curves.easeInOutExpo,
                      animationDuration: Durations.medium4,
                      borderWidth:
                          2, // backgroundColor is set independently of the current selection
                      styleBuilder: (value) => ToggleStyle(
                          borderRadius: BorderRadius.circular(10),
                          indicatorBorderRadius: BorderRadius.circular(15),
                          borderColor: defaultPalette.secondary,
                          backgroundColor: defaultPalette.secondary,
                          indicatorBorder:
                              Border.all(color: defaultPalette.extras[0]),
                          indicatorColor: defaultPalette
                              .primary), // indicatorColor changes and animates its value with the selection
                      iconBuilder: (value) {
                        return Icon(
                            value == false
                                ? TablerIcons.blob
                                : TablerIcons.blob_filled,
                            size: 12,
                            color: defaultPalette.extras[0]);
                      },
                      textBuilder: (value) {
                        return Text(
                          value == false ? 'unInverted' : 'inverted',
                          style: GoogleFonts.lexend(
                              letterSpacing: -1, fontSize: 14),
                        );
                      },
                      height: 25,
                      spacing: (widthBig) - 100,
                    ),
                  ],
                ],
              ],
            ),
          ),
        ]
      ],
    );
  }
 
  Widget buildTransformEditor(
    {
      int index = -1,
    }
  ){
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var tmpinx = sheetDecorationVariables[index].id;
    ItemDecoration currentItemDecoration = 
        sheetDecorationMap[tmpinx] as ItemDecoration;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 74 : 40);
    var isListTransformExpanded = sheetDecorationVariables[index].isListTransformExpanded;
    var listTransformFocusNodes = sheetDecorationVariables[index].listTransformFocusNodes;
    var m = currentItemDecoration.transform?.storage ?? [
      1.0, 0.0, 0.0, 0.0,  
      0.0, 1.0, 0.0, 0.0,  
      0.0, 0.0, 1.0, 0.0,  
      0.0, 0.0, 0.0, 1.0   
    ];
    double tx = m[12];
    double ty = m[13];
    // Step 2: Extract scale (before affecting it by rotation or skew)
    double scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
    double scaleY = sqrt(m[4] * m[4] + m[5] * m[5]);
    double scaleZ = sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);

    // Normalize just the Z-rotation part
    double r00 = m[0] / scaleX; // cosθ
    double r01 = m[1] / scaleX; // sinθ

    // Extract rotationZ in radians
    double rotZ = atan2(r01, r00);

    // Step 5: Estimate skew separately (best-effort basis)
    const double radToDeg = 180 / 3.1415926535897932;
    List<TextEditingController> listTransformControllers =[
      TextEditingController()..text = num.parse(tx.toStringAsFixed(3)).toString(),
      TextEditingController()..text = num.parse(ty.toStringAsFixed(3)).toString(),
      // TextEditingController()..text = num.parse(tz.toStringAsFixed(3)).toString(),
      // TextEditingController()..text = num.parse((rotX * radToDeg).toStringAsFixed(2)).toString(),
      // TextEditingController()..text = num.parse((rotY * radToDeg).toStringAsFixed(2)).toString(),
      TextEditingController()..text = num.parse((rotZ * radToDeg).toStringAsFixed(2)).toString(),
      TextEditingController()..text = num.parse(scaleX.toStringAsFixed(3)).toString(),
      TextEditingController()..text = num.parse(scaleY.toStringAsFixed(3)).toString(),
      TextEditingController()..text = num.parse(scaleZ.toStringAsFixed(3)).toString(),
      // TextEditingController()..text = num.parse(skewX.toStringAsFixed(3)).toString(),
      // TextEditingController()..text = num.parse(skewY.toStringAsFixed(3)).toString(),
    ];

    IconData _getTransformIcon(int s) {
      switch (s) {
        case 0: 
          return TablerIcons.arrows_move_horizontal;
        case 1:
          return TablerIcons.arrows_move_vertical;
        case 2:
          return TablerIcons.rotate_dot;
        case 3:
          return TablerIcons.switch_horizontal;
        case 4:
          return TablerIcons.switch_vertical;
        case 5:
        default:
          return TablerIcons.question_mark;
      }
    }

    String _getTransformLabel(int s) {
      const labels = [
        "translateX",
        "translateY",
        "rotateZ",
        "scaleX",
        "scaleY",
      ];
      return labels[s];
    }
    
    void updateCurrentTransformFromControllers() {
      final tx = double.tryParse(listTransformControllers[0].text) ?? 0.0;
      final ty = double.tryParse(listTransformControllers[1].text) ?? 0.0;
      // final tz = double.tryParse(listTransformControllers[2].text) ?? 0.0;

      final rz = (double.tryParse(listTransformControllers[2].text) ?? 0.0) * (pi / 180);


      final sx = double.tryParse(listTransformControllers[3].text) ?? 1.0;
      final sy = double.tryParse(listTransformControllers[4].text) ?? 1.0;
      // final sz = double.tryParse(listTransformControllers[5].text) ?? 1.0;

      // final skx = double.tryParse(listTransformControllers[6].text) ?? 0.0;
      // final sky = double.tryParse(listTransformControllers[7].text) ?? 0.0;

      Matrix4 transform = Matrix4.identity()
        ..translate(tx, ty, 0)
        ..rotateZ(rz)
        ..scale(sx, sy, 1);

      currentItemDecoration = currentItemDecoration.copyWith(transform: transform);
      sheetDecorationMap[tmpinx] = currentItemDecoration;
    }


    List<Widget> transformPropertyTile(int s) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              listTransformFocusNodes[s].requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 0.5
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.001
                      : 0.1;

              setState(() {
                double currentValue =
                    double.tryParse(listTransformControllers[s].text) ?? 0.0;
                double newValue =
                    (currentValue + details.delta.dx * multiplier).clamp(-999.0, 999.0);

                double parsedValue = double.parse(newValue.toStringAsFixed(4));
                listTransformControllers[s].text = parsedValue.toString();

                // Update transform based on all 11 controllers
                updateCurrentTransformFromControllers();
              });
            },
            child: Row(
              children: [
                Icon(
                  _getTransformIcon(s),
                  size: 16,
                ),
                SizedBox(width: 2),
                Text(
                  _getTransformLabel(s),
                  style: GoogleFonts.lexend(
                      fontSize: 14,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0]),
                ),
              ],
            ),
          ),
        ),
        Expanded(
          flex: 10,
          child: SizedBox(
            height: 12,
            child: TextFormField(
              onTapOutside: (event) => listTransformFocusNodes[s].unfocus(),
              focusNode: listTransformFocusNodes[s],
              controller: listTransformControllers[s],
              inputFormatters: [
                NumericInputFormatter(allowNegative: true),
              ],
              cursorColor: defaultPalette.tertiary,
              selectionControls: NoMenuTextSelectionControls(),
              textAlign: TextAlign.end,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.all(0),
                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                fillColor: defaultPalette.transparent,
                border: InputBorder.none,
                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
              ),
              keyboardType: TextInputType.number,
              style: GoogleFonts.mitr(
                  fontSize: 13,
                  color: defaultPalette.extras[0],
                  letterSpacing: -1),
              onFieldSubmitted: (value) {
                setState(() {
                  listTransformControllers[s].text = double.parse(value).toString();
                  updateCurrentTransformFromControllers();
                });
              },
            ),
          ),
        ),
        SizedBox(width: 2),
      ];
    }


    return Column(
      children: [
        //Title for Decoration Image Editor
        Container(
          width: widthBig,
          margin: EdgeInsets.only(
            left: 3,
            right: 3,
          ),
          padding: EdgeInsets.only(left: 2, right: 2, top: 0, bottom: 0),
          decoration: BoxDecoration(
              border: Border.all(),
              color: defaultPalette.primary,
              borderRadius: BorderRadius.circular(5)),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(TablerIcons.transform_point,
                  size: 16, color: defaultPalette.extras[0]),
              Expanded(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      sheetDecorationVariables[index].isListTransformExpanded = 
                          !sheetDecorationVariables[index].isListTransformExpanded;
                      
                    });

                  },
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(
                      ' transform ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ),
              SizedBox(
                width: 2,
              ),
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        currentItemDecoration =currentItemDecoration.copyWith(
                          transform: Matrix4.fromList(List<double>.from([
                            1.0, 0.0, 0.0, 0.0,  
                            0.0, 1.0, 0.0, 0.0,  
                            0.0, 0.0, 1.0, 0.0,  
                            0.0, 0.0, 0.0, 1.0   
                          ]))
                        );
                        // Update the list item with the modified currentItemDecoration
                        sheetDecorationMap[tmpinx] = currentItemDecoration;
                      });
                    },
                    child: Icon(
                         TablerIcons.refresh,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        currentItemDecoration.pinned['transform']
                                ['isPinned'] =
                            !currentItemDecoration.pinned['transform']
                                ['isPinned'];
                        // Update the list item with the modified currentItemDecoration
                        currentItemDecoration = currentItemDecoration;
                        sheetDecorationMap[tmpinx] = currentItemDecoration;
                      });
                    },
                    child: Icon(
                        currentItemDecoration.pinned['transform']['isPinned']
                            ? TablerIcons.pin_filled
                            : TablerIcons.pin,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            
            ],
          ),
        ),
        SizedBox(width: 2, height: 4),

        if (isListTransformExpanded)...[
          Column(
            children: [
              Container(
                width: widthBig,
                margin: EdgeInsets.only(
                  left: 3,
                  right: 3,
                ),
                padding: EdgeInsets.only(left: 2, right: 2, top: 2, bottom: 2),
                decoration: BoxDecoration(
                    border: Border.all(),
                    color: defaultPalette.primary,
                    borderRadius: BorderRadius.circular(5)),
                child: Column(
                  children: [
                    for(int s =0; s<5;s++)
                    Row(
                      children: transformPropertyTile(s),
                    ),
                  ],
                ),
              )
            ],
          ),
          SizedBox(width: 2, height: 8),
        ],
      ],
    );
  }

  Widget runtimeTypeBadge(SheetDecoration s, {bool onlyLibrary= true}){
    return Container(
      decoration: BoxDecoration(
        color: !onlyLibrary? defaultPalette.secondary: defaultPalette.primary,
        border: Border.all(width: 0.6),
        borderRadius: BorderRadius.circular(5),
      ),
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(width: 3),
            DecoratedBox(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(9999),
                color: (s is ItemDecoration) ? defaultPalette.tertiary : defaultPalette.extras[2],
              ),
              child: SizedBox(
                height: 10,
                width: 10,
              ),
            ),
            SizedBox(width: 3),
            Text(
              s.runtimeType.toString(),
              style: GoogleFonts.lexend(
                color: defaultPalette.extras[0],
                letterSpacing: -1,
                fontSize: 10,
              ),
              maxLines: 1,
            ),
            SizedBox(width: 3),
          ],
        ),
      ),
    );
                                      
  }
  
  SheetTable buildDefaultTable({
    required String tableId,
    required String parentId,
    required SuperDecoration decoration,
    required IndexPath indexPath,
    int rows = 5,
    int cols = 8,
  }) {
    // 1) prepare the row and column “skeletons”
    final rowData = List.generate(rows, (r) {
      return SheetTableRow(
        id:             'RW-${Uuid().v4()}',
        parentId:       tableId,
        size:           30,
        rowDecoration:  decoration.id,
        indexPath:      IndexPath(parent: indexPath, index: r),
        rowInputBlocks: <InputBlock>[],
      );
    });
    final columnData = List.generate(cols, (c) {
      return SheetTableColumn(
        id:               'CL-${Uuid().v4()}',
        parentId:         tableId,
        size:             80,
        columnDecoration: decoration.id,
        indexPath:        IndexPath(parent: indexPath, index: c),
        columnInputBlocks:<InputBlock>[],
      );
    });

    // 2) build cells, hooking each InputBlock into its row & column
    final cellData = List.generate(rows, (r) {
      return List.generate(cols, (c) {
        final cellIndexPath = IndexPath(parent: indexPath, index: r);
        final textIndexPath = IndexPath(parent: cellIndexPath, index: c);
        final newId         = 'TX-${Uuid().v4()}';

        // create & register the block
        final inputBlock = InputBlock(
          id:         newId,
          indexPath:  textIndexPath,
          blockIndex: [-2],
        );
        var sheetTableCell = SheetTableCell(
          id:        '${numberToColumnLabel(c+1)}${r+1}',
          parentId:  parentId,
          sheetItem: addTextField(
            id:                         newId,
            parentId:                   parentId,
            docString:                  [], // start empty
            findItem:                   _findItem,
            textFieldTapDown:           textFieldTapDown,
            getReplaceTextFunctionForType:
                                        getReplaceTextFunctionForType,
            textDecoration:             decoration,
            hide:                       false,
            name:                       '${numberToColumnLabel(c+1)}${r+1}',
            indexPath:                  textIndexPath,
            inputBlocks:               [ inputBlock ],
            locked:                     false,
          ),
          rowSpan:   1,
          colSpan:   1,
          indexPath: cellIndexPath,
        );
        var ib = inputBlock.copyWith( function: InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name)
                                      );
        rowData[r].rowInputBlocks.add(ib);
        columnData[c].columnInputBlocks.add(ib);

        // finally, the cell
        return sheetTableCell;
      });
    });

    // 3) return your fully‑wired up table
    return SheetTable(
      id:                    tableId,
      parentId:              parentId,
      cellData:              cellData,
      rowData:               rowData,
      columnData:            columnData,
      pinnedRows:            1,
      pinnedColumns:         1,
      sheetTableDecoration:  decoration,
      sheetTablebgDecoration:newSuperDecoration(placeholder: false),
      indexPath:             indexPath,
    );
  }

  List<List<SheetTableCell>> defaultSheetTableCellData(
    String parentId,
    SuperDecoration sheetTableDecoration,
    IndexPath tableIndexPath,
    List<SheetTableRow> rowData,
    List<SheetTableColumn> columnData,
  ) {
    const rows = 5;
    const cols = 8;

    // Prepare a parallel structure to hold each row's InputBlocks
    final rowInputLists = List.generate(rows, (_) => <InputBlock>[]);
    // Prepare a parallel structure to hold each column's InputBlocks
    final colInputLists = List.generate(cols, (_) => <InputBlock>[]);

    final cells = List.generate(rows, (r) {
      final rowIndexPath = IndexPath(parent: tableIndexPath, index: r);
      return List.generate(cols, (c) {
        final newId = 'TX-${Uuid().v4()}';
        final cellIndexPath = IndexPath(parent: rowIndexPath, index: c);

        // 1) Make exactly one InputBlock per cell
        final ib = InputBlock(
          indexPath: cellIndexPath,
          blockIndex: [-2],
          id: newId,
        );
        var sheetTableCell = SheetTableCell(
          id: '${numberToColumnLabel(c + 1)}${r + 1}',
          parentId: parentId,
          data: 'Cell ${String.fromCharCode(65 + c)}${r + 1}',
          sheetItem: addTextField(
            id: newId,
            parentId: parentId,
            docString: [],
            findItem: _findItem,
            textFieldTapDown: textFieldTapDown,
            getReplaceTextFunctionForType: getReplaceTextFunctionForType,
            textDecoration: sheetTableDecoration,
            hide: false,
            name: '${numberToColumnLabel(c + 1)}${r + 1}',
            indexPath: cellIndexPath,
            inputBlocks: [ib],
            locked: false,
          ),
          rowSpan: 1,
          colSpan: 1,
          indexPath: rowIndexPath,
        );
       var ibl = ib.copyWith(function: InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name)
                                      );                             
        // 2) Link it into that row’s list
        rowInputLists[r].add(ibl);
        // 3) Link it into that column’s list
        colInputLists[c].add(ibl);

        // Build the actual SheetTableCell
        return sheetTableCell;
      });
    });

    // Now inject those input‑blocks lists back into your rowData & columnData
    for (var r = 0; r < rows; r++) {
      rowData[r].rowInputBlocks = rowInputLists[r];
    }
    for (var c = 0; c < cols; c++) {
      columnData[c].columnInputBlocks = colInputLists[c];
    }

    return cells;
  }

  List<SheetTableColumn> defaultSheetTableColumnData(
    String parentId,
    String columnDecoration,
    IndexPath tableIndexPath,
    int rowCount,
  ) {
    // Similar idea: we’ll fill in the columnInputBlocks later
    return List.generate(8, (c) {
      return SheetTableColumn(
        id: 'CL-${Uuid().v4()}',
        parentId: parentId,
        size: 80,
        columnDecoration: columnDecoration,
        indexPath: IndexPath(parent: tableIndexPath, index: c),
        columnInputBlocks: <InputBlock>[], // to be populated by the cells generator
      );
    });
  }

  List<SheetTableRow> defaultSheetTableRowData(
    String parentId,
    String rowDecoration,
    IndexPath tableIndexPath,
    int colCount,
  ) {
    // Similar: rowInputBlocks to be populated later
    return List.generate(5, (r) {
      return SheetTableRow(
        id: 'RW-${Uuid().v4()}',
        parentId: parentId,
        size: 30,
        rowDecoration: rowDecoration,
        indexPath: IndexPath(parent: tableIndexPath, index: r),
        rowInputBlocks: <InputBlock>[], // will be filled
      );
    });
  }

  // 1) Top‐level entry point
SheetTable buildInvoiceTable({
  required SheetType type,
  required String tableId,
  required String parentId,
  required SuperDecoration decoration,
  required IndexPath indexPath,
}) {
  // a) headers & counts
  final headers = _getInvoiceHeaders(type);
  final rowCount = 2;
  final colCount = headers.length;

  // b) skeleton rows & columns
  final rowData = List.generate(rowCount, (r) {
    return SheetTableRow(
      id:             'RW-${Uuid().v4()}',
      parentId:       tableId,
      size:           r == 0 ? 30 : 35,
      rowDecoration:  decoration.id,
      indexPath:      IndexPath(parent: indexPath, index: r),
      rowInputBlocks: <InputBlock>[],
    );
  });

  final columnData = List.generate(colCount, (c) {
    final isHidden = c >= colCount - 3;
    return SheetTableColumn(
      id:               'CL-${Uuid().v4()}',
      parentId:         tableId,
      size:             100,
      columnDecoration: decoration.id,
      indexPath:        IndexPath(parent: indexPath, index: c),
      hide:             isHidden,
      columnInputBlocks:<InputBlock>[],
    );
  });

  // c) cells + hook up input-blocks
  final cellData = _generateInvoiceCellData(
    parentId:          tableId,
    decoration:        decoration,
    tableIndexPath:    indexPath,
    headers:           headers,
    rowData:           rowData,
    columnData:        columnData,
  );

  // d) assemble
  return SheetTable(
    id:                    tableId,
    parentId:              parentId,
    name:                  'itemSheet',
    cellData:              cellData,
    rowData:               rowData,
    columnData:            columnData,
    pinnedRows:            1,
    pinnedColumns:         1,
    sheetTableDecoration:  decoration,
    sheetTablebgDecoration:newSuperDecoration(placeholder: false),
    indexPath:             indexPath,
  );
}

// 2) headers chooser
List<String> _getInvoiceHeaders(SheetType type) {
  const hidden = ['Cost Price','Profit','Profit %'];
  switch (type) {
    case SheetType.taxInvoice:    return [ 'Item Description','HSN Code','Quantity','Unit','Rate','Discount','Taxable Value','CGST %','CGST Amt','SGST %','SGST Amt','Total', ...hidden ];
    case SheetType.billOfSupply:  return [ 'Item Description','HSN/SAC Code','Quantity','Unit','Rate','Discount','Total', ...hidden ];
    case SheetType.creditNote:
    case SheetType.debitNote:     return [ 'Item Description','Original Invoice No','Original Date','HSN/SAC','Qty','Rate','Taxable Value','CGST','SGST','IGST','Total Difference', ...hidden ];
    case SheetType.proformaInvoice: return [ 'Item Description','Quantity','Unit','Rate','Amount','Remarks', ...hidden ];
    default:                       return [ 'Item','Qty','Rate','Total', ...hidden ];
  }
}

// 3) cell generator (hooks blocks into rowData/columnData)
List<List<SheetTableCell>> _generateInvoiceCellData({
  required String                      parentId,
  required SuperDecoration             decoration,
  required IndexPath                   tableIndexPath,
  required List<String>                headers,
  required List<SheetTableRow>         rowData,
  required List<SheetTableColumn>      columnData,
}) {
  final rows = rowData.length;
  final cols = headers.length;

  // temporary block‐lists
  final rowInputLists = List.generate(rows, (_) => <InputBlock>[]);
  final colInputLists = List.generate(cols, (_) => <InputBlock>[]);

  final cells = List.generate(rows, (r) {
    final rowIP = IndexPath(parent: tableIndexPath, index: r);
    return List.generate(cols, (c) {
      final isHeader = r == 0;
      final cellIP = IndexPath(parent: rowIP, index: c);
      final newId  = 'TX-${Uuid().v4()}';

      // single block per cell
      final ib = InputBlock(
        id:         newId,
        indexPath:  cellIP,
        blockIndex: [-2],
      );
      

      // prepare initial delta
      final docDelta = Delta()..insert(isHeader ? '${headers[c]}\n' : '\n');
      final sheetText = addTextField(
        id:                         newId,
        parentId:                   parentId,
        docString:                  docDelta.toJson(),
        findItem:                   _findItem,
        textFieldTapDown:           textFieldTapDown,
        getReplaceTextFunctionForType: getReplaceTextFunctionForType,
        textDecoration:             decoration,
        hide:                       false,
        name:                       '${numberToColumnLabel(c+1)}${r+1}',
        indexPath:                  cellIP,
        inputBlocks:               [ ib ],
        locked:                     isHeader,
      );
      var sheetTableCell = SheetTableCell(
        id:        '${numberToColumnLabel(c+1)}${r+1}',
        parentId:  parentId,
        sheetItem: sheetText,
        rowSpan:   1,
        colSpan:   1,
        indexPath: rowIP,
      );
      var ibl = ib.copyWith(
                                        function: InputBlockFunction(inputBlocks: (sheetTableCell.sheetItem as SheetText).inputBlocks, label: (sheetTableCell.sheetItem as SheetText).name)
                                      );  
      rowInputLists[r].add(ibl);
      colInputLists[c].add(ibl);
      return sheetTableCell;
    });
  });

  // inject back into your rowData & columnData
  for (var r = 0; r < rows; r++) {
    rowData[r].rowInputBlocks = rowInputLists[r];
  }
  for (var c = 0; c < cols; c++) {
    columnData[c].columnInputBlocks = colInputLists[c];
  }

  return cells;
}

  List<SheetTableColumn> generateInvoiceColumns(
    String parentId,
    IndexPath indexPath,
    List<String> headers,
    String columnDecoration,
  ) {
    return List.generate(headers.length, (i) {
      final isHiddenProfitColumn = i >= headers.length - 3; // Last 3 are hidden
      return SheetTableColumn(
        id: 'CL-${const Uuid().v4()}',
        parentId: parentId,
        size: 100,
        columnDecoration: columnDecoration,
        indexPath: IndexPath(parent: indexPath, index: i),
        hide: isHiddenProfitColumn, 
        columnInputBlocks: []
      );
    });
  }


  void applySpans(SheetTable sheetTable) {
      final rows = sheetTable.cellData.length;
      final cols = sheetTable.columnData.length;
      for (int r = 0; r < rows; r++) {
        for (int c = 0; c < sheetTable.cellData[r].length; c++) {
          sheetTable.cellData[r][c].isVisible = true;
        }
      }
      print('running apply spans');
      for (int row = 0; row < rows; row++) {
        for (int col = 0; col < cols; col++) {
          final cell = sheetTable.cellData[row][col];
          if (!cell.isVisible) continue;

          for (int dr = 0; dr < cell.rowSpan; dr++) {
            for (int dc = 0; dc < cell.colSpan; dc++) {
              final r = row + dr;
              final c = col + dc;

              if (r == row && c == col) continue;
              if (r < rows && c < sheetTable.cellData[r].length) {
                sheetTable.cellData[r][c].isVisible = false;
              }
            }
          }
        }
      }
    }

  void reassignCellIds(SheetTable sheetTable) {
    for (int row = 0; row < sheetTable.cellData.length; row++) {
      for (int col = 0; col < sheetTable.cellData[row].length; col++) {
        final cell = sheetTable.cellData[row][col];
        final newId = '${numberToColumnLabel(col + 1)}${row + 1}';

        cell.id = newId;

        if (cell.sheetItem is SheetText) {
          (cell.sheetItem as SheetText).name = newId;
        }
      }
    }
  }
                            
}

  TextStyle customStyleBuilder(attribute) {
    if (attribute.key == 'letterSpacing') {
      String? letterSpacing = attribute.value as String?;
      return TextStyle(
        letterSpacing: double.parse(letterSpacing ?? '0'),
      );
    }
    // Handle word spacing (custom attribute example)
    if (attribute.key == 'wordSpacing') {
      String? wordSpacing = attribute.value as String?;
      return TextStyle(
        wordSpacing: double.parse(wordSpacing ?? '0'),
      );
    }
    // Handle line height (custom attribute example)
    if (attribute.key == 'lineHeight') {
      String? lineHeight = attribute.value as String?;
      return TextStyle(
        height: double.parse(lineHeight ?? '1'),
      );
    }

    // Return default TextStyle if attribute not handled
    return const TextStyle();
  }

  (int row, int col) parseCellId(String id) {
    final match = RegExp(r'^([A-Z]+)(\d+)$').firstMatch(id);
    if (match == null) throw FormatException("Invalid cell id format: $id");
    final col = columnLabelToNumber(match.group(1)!);
    final row = int.parse(match.group(2)!) - 1;
    return (row, col);
  }
  
  String numberToColumnLabel(int number) {
    String result = '';
    while (number > 0) {
      number--; // Excel columns are 1-indexed, so adjust
      result = String.fromCharCode((number % 26) + 65) + result;
      number ~/= 26;
    }
    return result;
  }

  int columnLabelToNumber(String columnLabel) {
    int result = 0;
    for (int i = 0; i < columnLabel.length; i++) {
      result *= 26;
      result += columnLabel.codeUnitAt(i) - 'A'.codeUnitAt(0) + 1;
    }
    return result - 1; // 0-indexed
  }

      
class WordSpacingAttribute extends Attribute<String?> {
  static const _key = 'wordSpacing';
  const WordSpacingAttribute(String? value)
      : super('wordSpacing', AttributeScope.inline, value);
}

class LineHeightAttribute extends Attribute<String?> {
  static const _key = 'lineHeight';
  const LineHeightAttribute(String? value)
      : super('lineHeight', AttributeScope.inline, value);
}

class LetterSpacingAttribute extends Attribute<String?> {
  static const _key = 'letterSpacing';
  const LetterSpacingAttribute(String? value)
      : super('letterSpacing', AttributeScope.inline, value);
}

class StrokeAttribute extends Attribute<String> {
  StrokeAttribute(String colorHex, double strokeWidth)
      : super('stroke', AttributeScope.inline, '$colorHex,$strokeWidth');
}

class NoMenuTextSelectionControls extends MaterialTextSelectionControls {
  @override
  Widget buildToolbar(
    BuildContext context,
    Rect globalEditableRegion,
    double textLineHeight,
    Offset position,
    List<TextSelectionPoint> endpoints,
    TextSelectionDelegate delegate,
    ValueListenable<ClipboardStatus>? clipboardStatus,
    Offset? lastSecondaryTapDownPosition,
  ) {
    // Return null or an empty container to disable the right-click context menu
    return Container();
  }
}

class SheetTableUIWidgetLayoutDelegate extends MultiChildLayoutDelegate {
  final List<List<SheetTableCell>> cells;
  final List<SheetTableColumn> columnData;
  final List<SheetTableRow> rowData;

  SheetTableUIWidgetLayoutDelegate({
    required this.cells,
    required this.columnData,
    required this.rowData,
  });

  @override
void performLayout(Size size) {
  for (var rowList in cells) {
    for (var cell in rowList) {
      if (!cell.isVisible) continue;

      final (row, col) = parseCellId(cell.id);

      final layoutId = cell.id;

      if (hasChild(layoutId)) {
        double top = 0.0;
        for (int i = 0; i < row; i++) {
          top += rowData[i].size + 2 * 1;
        }

        double left = 0.0;
        for (int i = 0; i < col; i++) {
          left += columnData[i].size + 14 + 2 * 1;
        }

        final double width = columnData
          .skip(col)
          .take(cell.colSpan)
          .fold(0.0, (a, b) => a + b.size)
          + (14 + 2 * 1) * cell.colSpan;

        final double height = rowData
          .skip(row)
          .take(cell.rowSpan)
          .fold(0.0, (a, b) => a + b.size)
          + (2 * 1) * cell.rowSpan;


        layoutChild(
          layoutId,
          BoxConstraints.tight(Size(width, height)),
        );

        positionChild(layoutId, Offset(left, top));
      }
    }
  }
}


  @override
  bool shouldRelayout(covariant SheetTableUIWidgetLayoutDelegate oldDelegate) => true;
}

class SheetTableWidgetLayoutDelegate extends MultiChildLayoutDelegate {
  final List<List<SheetTableCell>> cells;
  final List<SheetTableColumn> columnData;
  final List<SheetTableRow> rowData;

  SheetTableWidgetLayoutDelegate({
    required this.cells,
    required this.columnData,
    required this.rowData,
  });

  @override
  void performLayout(Size size) {
    for (var rowList in cells) {
      for (var cell in rowList) {
        if (!cell.isVisible) continue;

        final (row, col) = parseCellId(cell.id);
        final layoutId = cell.id;

        if (hasChild(layoutId)) {
          // Calculate top offset
          double top = 0.0;
          for (int i = 0; i < row; i++) {
            if (!rowData[i].hide) top += rowData[i].size;
          }

          double left = 0.0;
          for (int i = 0; i < col; i++) {
            if (!columnData[i].hide) left += columnData[i].size;
          }

          final double width = columnData
            .asMap()
            .entries
            .where((entry) =>
                entry.key >= col && entry.key < col + cell.colSpan && !entry.value.hide)
            .fold(0.0, (sum, entry) => sum + entry.value.size);

          final double height = rowData
            .asMap()
            .entries
            .where((entry) =>
                entry.key >= row && entry.key < row + cell.rowSpan && !entry.value.hide)
            .fold(0.0, (sum, entry) => sum + entry.value.size);


          layoutChild(
            layoutId,
            BoxConstraints.tight(Size(width, height)),
          );

          positionChild(layoutId, Offset(left, top));
        }
      }
    }
  }

  @override
  bool shouldRelayout(covariant SheetTableWidgetLayoutDelegate oldDelegate) => true;
}

class SheetDecorationVariables {
  String id ='';
  bool isExpanded = true;
  bool isListMarginExpanded = false;
  bool isListPaddingExpanded = false;
  bool isListTransformExpanded = false;

  bool isListBorderRadiusExpanded = false;
  bool isListBorderExpanded = true;
  bool isListColorExpanded = true;
  bool isListShadowExpanded = true;
  bool isListDecorationImageExpanded = true;
  List<FocusNode> marginFocusNodes = [];
  List<FocusNode> listPaddingFocusNodes = [];
  List<FocusNode> listTransformFocusNodes = [];
  List<FocusNode> colorHexFocusNodes = [ ];
  List<FocusNode> borderFocusNodes = [];
  List<FocusNode> borderRadiusFocusNodes = [];
  List<FocusNode> listBorderFocusNodes = [];
  List<List<FocusNode>> listShadowFocusNodes = [];
  List<FocusNode> listImageAlignFocusNodes = [FocusNode(), FocusNode()];
  List<FocusNode> listImagePropertyFocusNodes = [FocusNode(), FocusNode()];
  int listShadowLayerSelectedIndex =0;
  bool isListBorderRadiusExpanded2 = false;
  bool isListBorderExpanded2 = true;
  bool isListColorExpanded2 = true;
  bool isListShadowExpanded2 = true;
  bool isListDecorationImageExpanded2 = true;
  List<FocusNode> colorHexFocusNodes2 = [ ];
  List<FocusNode> borderFocusNodes2 = [];
  List<FocusNode> borderRadiusFocusNodes2 = [];
  List<FocusNode> listBorderFocusNodes2 = [];
  List<List<FocusNode>> listShadowFocusNodes2 = [];
  List<FocusNode> listImageAlignFocusNodes2 = [FocusNode(), FocusNode()];
  List<FocusNode> listImagePropertyFocusNodes2 = [FocusNode(), FocusNode()];
  int listShadowLayerSelectedIndex2 =0;
  SheetDecorationVariables({
    this.id ='',
    this.isExpanded = false,
    this.isListMarginExpanded = false,
    this.isListPaddingExpanded = false,
    this.marginFocusNodes = const [],
    this.listPaddingFocusNodes = const [],
    this.isListBorderRadiusExpanded = false,
    this.isListBorderExpanded = false,
    this.isListColorExpanded = false,
    this.isListShadowExpanded = false,
    this.isListDecorationImageExpanded = false,
    this.colorHexFocusNodes = const [],
    this.borderFocusNodes = const [],
    this.borderRadiusFocusNodes = const [],
    this.listBorderFocusNodes = const [],
    this.listShadowFocusNodes = const [],
    this.listImageAlignFocusNodes = const [],
    this.listImagePropertyFocusNodes = const [],
    this.listShadowLayerSelectedIndex = 0,
    this.isListBorderRadiusExpanded2 = false,
    this.isListBorderExpanded2 = false,
    this.isListColorExpanded2 = false,
    this.isListShadowExpanded2 = false,
    this.isListDecorationImageExpanded2 = false,
    this.colorHexFocusNodes2 = const [],
    this.borderFocusNodes2 = const [],
    this.borderRadiusFocusNodes2 = const [],
    this.listBorderFocusNodes2 = const [],
    this.listShadowFocusNodes2 = const [],
    this.listImageAlignFocusNodes2 = const [],
    this.listImagePropertyFocusNodes2 = const [],
    this.listTransformFocusNodes = const [],
    this.listShadowLayerSelectedIndex2 = 0
  });
  
}

class SheetTableVariables {
  String id ='';
  int rowLayerIndex = 0;
  int columnLayerIndex =0;
  
  SheetTableVariables({
    this.id ='',
    this.rowLayerIndex =0,
    this.columnLayerIndex =0,
  });
}

extension Matrix4SkewExtension on Matrix4 {
  /// Applies a skew/shear to the matrix.
  /// [skewX] and [skewY] are in radians.
  Matrix4 skew(double skewX, double skewY) {
    // Create a skew matrix
    final skewMatrix = Matrix4(
      1, math.tan(skewY), 0, 0,
      math.tan(skewX), 1, 0, 0,
      0, 0, 1, 0,
      0, 0, 0, 1,
    );

    // Multiply this matrix by the skew matrix and return it
    return this..multiply(skewMatrix);
  }
}

class MeasureSize extends StatefulWidget {
  final Widget child;
  final void Function(Size size) onChange;

  const MeasureSize({required this.onChange, required this.child, super.key});

  @override
  State<MeasureSize> createState() => _MeasureSizeState();
}

class _MeasureSizeState extends State<MeasureSize> {
  final _key = GlobalKey();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback(_reportSize);
  }

  @override
  void didUpdateWidget(covariant MeasureSize oldWidget) {
    super.didUpdateWidget(oldWidget);
    WidgetsBinding.instance.addPostFrameCallback(_reportSize);
  }

  void _reportSize(Duration _) {
    final context = _key.currentContext;
    if (context == null) return;
    final box = context.findRenderObject();
    if (box is RenderBox && box.hasSize) {
      widget.onChange(box.size);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(key: _key, child: widget.child);
  }
}
