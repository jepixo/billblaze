// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:ui' as ui;
import 'dart:math';
import 'package:animate_do/animate_do.dart';
import 'package:animated_toggle_switch/animated_toggle_switch.dart';
import 'package:appinio_swiper/appinio_swiper.dart';
import 'package:billblaze/components/widgets/eye_dropper.dart';
import 'package:billblaze/components/widgets/minimap_scrollbar_widget.dart';
import 'package:billblaze/home.dart';
import 'package:billblaze/components/pickers/hsv_picker.dart';
import 'package:billblaze/components/pickers/wheel_picker.dart';
import 'package:billblaze/components/widgets/alpha_picker.dart';
import 'package:billblaze/models/index_path.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_decoration.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_cell.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_column.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_table_lib/sheet_table_row.dart';
import 'package:cool_background_animation/cool_background_animation.dart';
import 'package:cool_background_animation/custom_model/bubble_model.dart';
import 'package:cool_background_animation/custom_model/rainbow_config.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter_quill/extensions.dart';
import 'package:flutter_syntax_view/flutter_syntax_view.dart';
import 'package:http/http.dart' as http;
import 'package:billblaze/models/layout_model.dart';
import 'package:billblaze/providers/box_provider.dart';
import 'package:bitsdojo_window/bitsdojo_window.dart';
import 'package:custom_border/border.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mobkit_dashed_border/mobkit_dashed_border.dart';
import 'package:number_counting_animation/number_counting_animation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_context_menu/flutter_context_menu.dart';
import 'package:billblaze/components/flutter_balloon_slider.dart';
import 'package:billblaze/components/zoomable.dart' as zz;
import 'package:billblaze/components/tab_container/tab_controller.dart';
import 'package:billblaze/components/text_toolbar/list_item_model.dart';
import 'package:billblaze/components/text_toolbar/playable_toolbar_flutter.dart';
import 'package:billblaze/util/HexColorInputFormatter.dart';
import 'package:flutter/rendering.dart';
import "package:billblaze/components/color_picker.dart"
    show ColorPicker, ColorTools, FlexPickerNoNullColorExtensions, Picker, PickerOrientation;
// import 'package:flex_color_picker/flex_color_picker.dart' as fl;
import 'package:animated_custom_dropdown/custom_dropdown.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:billblaze/colors.dart';
// import 'package:printing/printing.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_item.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_list.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_text.dart';
import 'package:billblaze/models/document_properties_model.dart';
import 'package:billblaze/util/numeric_input_filter.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_quill/flutter_quill.dart';
// show
//     QuillEditor,
//     QuillController,
//     Attribute,
//     Document,
//     QuillEditorConfigurations;
import 'package:flutter_quill/quill_delta.dart';
import 'package:flutter_tabler_icons/flutter_tabler_icons.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:iconsax_plus/iconsax_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:pie_menu/pie_menu.dart';
import 'package:scrollbar_ultima/scrollbar_ultima.dart';
import 'package:smooth_scroll_multiplatform/smooth_scroll_multiplatform.dart';
import 'package:two_dimensional_scrollables/two_dimensional_scrollables.dart' show FixedTableSpanExtent, TableSpan, TableVicinity, TableView, TableViewCell;
import 'dart:math' as math;

import 'package:uuid/uuid.dart';

import '../components/checkable_treeview/treeview.dart';
import '../components/elevated_button.dart';

class PanelIndex {
  String id;
  String parentId = '';
  IndexPath itemIndexPath;
  IndexPath? parentIndexPath;
  PanelIndex({required this.id, this.parentId = '', required this.itemIndexPath, required this.parentIndexPath});

  PanelIndex copyWith({
    String? id,
    String? parentId,
    IndexPath? itemIndexPath,
    IndexPath? parentIndexPath,
  }) {
    return PanelIndex(
        id: id ?? this.id,
        parentId: parentId ?? this.parentId,
        itemIndexPath: itemIndexPath ?? this.itemIndexPath,
        parentIndexPath: parentIndexPath ?? this.parentIndexPath,
        );
  }

  @override
  String toString() => 'PanelIndex(id: $id, parentId: $parentId)';

}

class SelectedIndex {
  // int pageIndex;
  String id;
  List<int> selectedIndexes;
  SelectedIndex({
    // required this.pageIndex,
    required this.id,
    required this.selectedIndexes,
  });
  SelectedIndex copyWith({
    String? id,
    List<int>? selectedIndexes,
  }) {
    return SelectedIndex(
      id: id ?? this.id,
      selectedIndexes: selectedIndexes ?? this.selectedIndexes,
    );
  }
}




final propertyCardIndexProvider = StateProvider<int>((ref) {
  return 0;
});

//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//
//
class LayoutDesigner3 extends ConsumerStatefulWidget {
  final int? id;
  final int? index;
  const LayoutDesigner3({
    Key? key,
    this.id = null,
    this.index = -1,
  }) : super(key: key);

  @override
  ConsumerState<LayoutDesigner3> createState() => _LayoutDesigner3State();
}

class _LayoutDesigner3State extends ConsumerState<LayoutDesigner3>
    with TickerProviderStateMixin {
  final _googleFontsApiKey = 'AIzaSyBSG_5VsGG03fTeSihFNxYSCVN3m6Ltb0c';
  bool isLoading = true;
  String selectedFontCategory = 'san-serif';
  late String initialLayoutName;
  List<String> fonts2 = [
    'Billabong',
    'AlexBrush',
    'Allura',
    'Arizonia',
    'ChunkFive',
    'GrandHotel',
    'GreatVibes',
    'Lobster',
    'OpenSans',
    'OstrichSans',
    'Oswald',
    'Pacifico',
    'Quicksand',
    'Roboto',
    'SEASRN',
    'Windsong',
  ];
  final List<String> fonts = GoogleFonts.asMap()
      .keys
      .toList()
      .where((font) => !font.startsWith('Noto'))
      .toList();
  List<String> listDecorationPath =[];
  List<String> textDecorationPath=[];
  List<String> tableDecorationPath =[];
  List<String> tablebgDecorationPath = [];
  List<String> rowDecorationPath = [];
  List<String> columnDecorationPath = [];
  Map<String, List<String>> categorizedFonts = {};    
  double hDividerPosition = 0.5;
  double wH1DividerPosition = 0.2;
  double wH2DividerPosition = 0.23;
  double wVDividerPosition = 0.5;
  double _cardPosition = 0;
  double textFieldHeight = 40;
  double pdfPreviewPaddingScaleFactor = 1;
  double get sWidth => MediaQuery.of(context).size.width;
  double get sHeight => MediaQuery.of(context).size.height;
  DateTime dateTimeNow = DateTime.now();
  List<SelectedIndex> selectedIndex = [];
  PanelIndex panelIndex = PanelIndex(id: '', parentId: '', itemIndexPath: IndexPath(index: -1), parentIndexPath: IndexPath(index: -1),);
  List<SheetList?> sheetListClipboard =[null,null];
  PageController pageViewIndicatorController = PageController();
  PageController textStyleTabControler = PageController();
  late TabController fontsTabContainerController;
  AppinioSwiperController propertyCardsController = AppinioSwiperController();
  AppinioSwiperController textPropertyCardsController = AppinioSwiperController();
  AppinioSwiperController listPropertyCardsController = AppinioSwiperController();
  AppinioSwiperController tablePropertyCardsController = AppinioSwiperController();    
  PieMenuController opsAddPieController = PieMenuController();
  PieMenuController opsMovePieController = PieMenuController();
  PieMenuController opsCopyPieController = PieMenuController();
  PieMenuController opsFormatPieController = PieMenuController();
  List<SheetList> spreadSheetList = [];
  List<DocumentProperties> documentPropertiesList = [];
  List<SheetDecoration> sheetDecorationList = [];
  FocusNode marginAllFocus = FocusNode();
  FocusNode marginTopFocus = FocusNode();
  FocusNode marginBottomFocus = FocusNode();
  FocusNode marginLeftFocus = FocusNode();
  FocusNode marginRightFocus = FocusNode();
  final FocusNode layoutNamefocusNode = FocusNode();
  final FocusNode decorationNameFocusNode = FocusNode();
  final FocusNode textDecorationNameFocusNode = FocusNode();
  List<FocusNode> fontFocusNodes = List.generate(7, (e)=>FocusNode());
  zz.TransformationController transformationcontroller = zz.TransformationController();
  late TabController tabcunt;
  
  List<Color> paletteColors = [
    Colors.black,
    Colors.white,
    Color(int.parse('0xffEA2027')),
    Color(int.parse('0xff006264')),
    Color(int.parse('0xff1B1464')),
    Color(int.parse('0xff5758BB')),
    Color(int.parse('0xff6F1E51')),
    Color(int.parse('0xffB53471')),
    Color(int.parse('0xffEE5A24')),
    Color(int.parse('0xff009432')),
    Color(int.parse('0xff0652DD')),
    Color(int.parse('0xff9980FA')),
    Color(int.parse('0xff833471')),
    Color(int.parse('0xff112CBC4')),
    Color(int.parse('0xffFDA7DF')),
    Color(int.parse('0xffED4C67')),
    Color(int.parse('0xffF79F1F')),
    Color(int.parse('0xffA3CB38')),
    Color(int.parse('0xff1289A7')),
    Color(int.parse('0xffD980FA'))
  ];
  List<bool> isTapped = [false, true, false, false, false];
  List<GlobalKey> globalKeys = [];
  List<Uint8List> _images = [];
  var filteredFonts = [];
  var filteredDecorations =[];
  late LayoutModel? lm;
  GlobalKey spreadSheetKey = GlobalKey();
  Color dialogSelectColor = Color(0xFF000000);
  List<SheetDecorationVariables> sheetDecorationVariables = [];
  Timer? _timer;
  TextEditingController layoutName = TextEditingController();
  TextEditingController listDecorationNameController = TextEditingController();
  TextEditingController textDecorationNameController = TextEditingController();
  TextEditingController tableDecorationNameController = TextEditingController();
  TextEditingController tablebgDecorationNameController = TextEditingController();
  TextEditingController rowDecorationNameController = TextEditingController();
  TextEditingController columnDecorationNameController = TextEditingController();
  TextEditingController decorationSearchController = TextEditingController();
  int key = 0;
  int keyIndex = 0;
  int pageCount = 0;
  int currentPageIndex = 0;
  int decorationIndex = -1;
  int whichPropertyTabIsClicked = 1;
  int whichTextPropertyTabIsClicked = 0;
  int whichListPropertyTabIsClicked = 0;
  int whichTablePropertyTabIsClicked = 0;
  int whichTableDecorationIsClicked = 0;
  SheetTableVariables sheetTableVariables = SheetTableVariables();
  Uint8List? cachedImageData;
  bool nameExists = false;
  bool hasRenderedOnce = false;
  bool addToTheLeft = false;
  bool addToTheRight = false;
  bool isListMarginExpanded = false;
  bool isListPaddingExpanded = false;
  bool isListBorderRadiusExpanded = false;
  bool isListBorderExpanded = true;
  bool isListColorExpanded = true;
  bool isListShadowExpanded = true;
  bool isListDecorationImageExpanded = true;
  bool isListDecorationPropertiesToggled = false;
  bool isListDecorationLibraryToggled = false;
  bool showDecorationLayers = true;
  bool isTableDecorationModeDropped = false;
  List<bool> expansionLevels = [true] + List.filled(10, false).sublist(0, 9);
  SheetText item = SheetText(
    hide:true,
    name: 'yo',
    id: 'yo',
    parentId: 'yo', 
    textDecoration: SuperDecoration(id: 'yo'),
    indexPath: IndexPath(index:-1)
    );
  SheetList sheetListItem = SheetList(id: 'yo',parentId: 'yo', listDecoration: SuperDecoration(id: 'yo'), sheetList: [],indexPath: IndexPath(index:-1));
  late SheetTable sheetTableItem;
  var dragBackupValue;
  OverlayEntry? _overlay;
  //
  //
  //
  //
@override
  void initState() {
    super.initState();
    // 1️⃣ Ensure loader paints before heavy work
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initialize();
    });
    
  }

  Future<void> _initialize() async {
    if (!mounted) return;
    setState(() => isLoading = true);

    // ─── 2) Extract tiny JSON maps tagged with type ────────────────────────
    final rawList = Boxes
        .getDecorations()
        .values
        .map((box) {
          // print(box.id);
          if (box is ItemDecorationBox) {
            return {'type': 'ItemDecoration', 'value': box.itemDecoration};
          } else {
            // SuperDecorationBox extends SheetDecoration, but carries only List<String>
            return {
              'type': 'SuperDecoration',
              'value': (box as SuperDecorationBox).toSuperDecoration().toJson(),
            };
          }
        })
        .toList();

    // ─── 3) Offload decoding entirely into an isolate ───────────────────────
    final List<SheetDecoration> decoded =
        await compute(decodeItemDecorationList, rawList);

    // ─── 4) Back on main isolate: assign your lists ─────────────────────────
    sheetDecorationList = decoded
    ..sort((a, b) {
      int indexA = int.parse(a.id.split('/').last);
      int indexB = int.parse(b.id.split('/').last);
      return indexA.compareTo(indexB);
    });
    filteredDecorations = sheetDecorationList;

    // ─── 5) Your original Hive & layout logic ──────────────────────────────
    final box = Boxes.getLayouts();
    key = widget.id ?? -1;
    keyIndex = widget.index ?? -1;

    if (key == -1) {
      final name = Boxes.getLayoutName();
      layoutName.text = name;
      initialLayoutName = name;
      lm = LayoutModel(
        createdAt: DateTime.now(),
        modifiedAt: DateTime.now(),
        name: name,
        docPropsList: [],
        spreadSheetList: [],
        id: const Uuid().v4(),
      );
      key = Random().nextInt(100000);
      keyIndex = box.length;
      box.put(key, lm!);
      lm!.save();
    } else {
      lm = box.get(key);
      spreadSheetList = boxToSpreadSheet(lm?.spreadSheetList);
      documentPropertiesList = boxToDocProp(lm?.docPropsList);
      layoutName.text = lm!.name;
      initialLayoutName = lm!.name;
      // sheetListItem = spreadSheetList[currentPageIndex];
    }

    if (documentPropertiesList.isEmpty) {
      _addPdfPage();
      // sheetListItem = spreadSheetList[currentPageIndex];
    }

    // ─── 6) Controllers & listeners ────────────────────────────────────────
    tabcunt = TabController(length: 2, vsync: this);
    globalKeys = List.generate(10000, (_) => GlobalKey());
    fetchFonts();
    // _findItem();
    // _unfocusAll();
    // _findSheetListItem();
    
    fontsTabContainerController = TabController(length: 6, vsync: this)
      ..animateTo(1)
      ..addListener(_onFontsTabChanged);
    // ─── 7) Done ────────────────────────────────────────────────────────────
    if (!mounted) return;
    setState(() {
      // panelIndex.parentId = spreadSheetList[currentPageIndex].id;
      // sheetListItem = spreadSheetList[currentPageIndex];
    });
    setState(() => isLoading = false);
    _renderPagePreviewOnProperties();
  }

  // ─── Tab change handlers ─────────────────────────────────────────────────
  void _onFontsTabChanged() {
    if (!mounted) return;
    final idx = fontsTabContainerController.index;
    setState(() {
      if (whichPropertyTabIsClicked == 2) {
        selectedFontCategory = idx == 0
            ? 'search'
            : categorizedFonts.keys.elementAt(idx - 1);
      }
    });
  }

  // _____ Initialization Done _______________________________________________
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    setState(() {
      var x = 80 / sHeight;
      wH1DividerPosition = wH1DividerPosition.clamp(50/sWidth,1);
      wVDividerPosition = wVDividerPosition.clamp(x, 1);
      wH2DividerPosition = wH2DividerPosition.clamp((170/sWidth), 0.48);
      
      // if (!hasRenderedOnce) {
        // Capture the image the first time the widget is inserted into the tree
        if (!isLoading) {
          _renderPagePreviewOnProperties();
        }
      // }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    pageViewIndicatorController.dispose();
    textStyleTabControler.dispose();
    propertyCardsController.dispose();
    listPropertyCardsController.dispose();
    textPropertyCardsController.dispose();
    transformationcontroller.dispose();
    opsFormatPieController.dispose();
    opsMovePieController.dispose();
    opsAddPieController.dispose();
    opsCopyPieController.dispose();
    layoutName.dispose();
    listDecorationNameController.dispose();
    decorationSearchController.dispose();
    listPropertyCardsController.dispose();
    // listDirectionPieController.dispose();
    // listMainAxisAlignmentPieController.dispose();
    // listCrossAxisAlignmentDirectionPieController.dispose();
    // propertyTabController.dispose();
    super.dispose();
  }

  List<DocumentProperties> boxToDocProp(docproplist) {
    List<DocumentProperties> listbox = [];

    for (DocumentPropertiesBox doc in docproplist) {
      // print('doc num: ${doc.pageNumberController}');
      listbox.add(doc.toDocumentProperties());
      setState(() {
        pageCount++;
      });
    }
    return listbox;
  }

  List<DocumentPropertiesBox> docPropToBox(docproplist) {
    List<DocumentPropertiesBox> listbox = [];
    for (DocumentProperties doc in docproplist) {
      listbox.add(doc.toDocPropBox());
    }
    return listbox;
  }

  List<SheetListBox> spreadSheetToBox(spreadSheetList) {
    List<SheetListBox> listbox = [];
    for (SheetList sheetlist in spreadSheetList) {
      SheetListBox sheetListBox = sheetlist.toSheetListBox();
      sheetListBox.sheetList = [];
      // print('B PARENT: '+ sheetListBox.parentId );
      for (var i = 0; i < sheetlist.length; i++) {
        if (sheetlist[i] is SheetText) {
          sheetListBox.sheetList.add((sheetlist[i] as SheetText)
              .toTEItemBox((sheetlist[i] as SheetText)));
        } else if (sheetlist[i] is SheetList) {
          sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
        } else if (sheetlist[i] is SheetTable) {
          sheetListBox.sheetList.add((sheetlist[i] as SheetTable).toSheetTableBox());
        }
      }
      listbox.add(sheetListBox);
    }
    return listbox;
  }

  SheetListBox sheetListtoBox(SheetList sheetlist) {
    
    SheetListBox sheetListBox = sheetlist.toSheetListBox();
    sheetListBox.sheetList = [];
    for (var i = 0; i < sheetlist.length; i++) {
      if (sheetlist[i] is SheetText) {
        sheetListBox.sheetList.add((sheetlist[i] as SheetText)
            .toTEItemBox((sheetlist[i] as SheetText)));
      } else if (sheetlist[i] is SheetList) {
        sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
      } else if (sheetlist[i] is SheetTable) {
        sheetListBox.sheetList.add((sheetlist[i] as SheetTable).toSheetTableBox());
      }
    }
    return sheetListBox;
  }

  List<SheetList> boxToSpreadSheet(spreadsheetlist) {
    List<SheetList> listbox = [];
    for (SheetListBox e in spreadsheetlist) {
      SheetList sheetList = e.toSheetList(_findItem,textFieldTapDown);
      sheetList.sheetList = [];
      for (var item in e.sheetList) {
        if (item is SheetTextBox) {
          SheetText tEItem = _addTextField(
              shouldReturn: true,
              docString: item.textEditorController,
              id: item.id,
              parentId: item.parentId,
              name: item.name,
              hide: item.hide,
              textDecoration: item.textDecoration.toSuperDecoration(),
              indexPath: item.indexPath,
              );
          tEItem = tEItem.copyWith(
              id: item.id,
              parentId: item.parentId,
              textDecoration: item.textDecoration.toSuperDecoration());
          

          sheetList.sheetList.add(tEItem);
        } else if (item is SheetListBox) {
          sheetList.sheetList.add(boxToSheetList(item));
        } else if (item is SheetTableBox) {
          sheetList.sheetList.add((item).toSheetTable(_findItem,textFieldTapDown));
        }
      }

      listbox.add(sheetList);
    }

    return listbox;
  }

  SheetList boxToSheetList(SheetListBox sheetListBox,) {
        // print('B PARENT: '+ sheetListBox.parentId );
    SheetList sheetList = sheetListBox.toSheetList(_findItem,textFieldTapDown);
    sheetList.sheetList = [];
    for (var item in sheetListBox.sheetList) {
      if (item is SheetTextBox) {
        // print('TextEditor Id: ' + item.id);
        // print(item.linkedTextEditors);
        SheetText tEItem = _addTextField(
            shouldReturn: true,
            docString: item.textEditorController,
            id: item.id,
            parentId: item.parentId,
            name: item.name,
            hide: item.hide,
            textDecoration: item.textDecoration.toSuperDecoration(),
            indexPath: item.indexPath
            );
        tEItem = tEItem.copyWith(
            id: item.id,
            parentId: item.parentId,
            textDecoration: item.textDecoration.toSuperDecoration());
        
        sheetList.sheetList.add(tEItem);
      } else if (item is SheetListBox) {
        sheetList.sheetList.add(boxToSheetList(item));
      } else if (item is SheetTableBox) {
        sheetList.sheetList.add((item).toSheetTable(_findItem,textFieldTapDown));
      }
    }
    return sheetList;
  }

  SheetText _addTextField({
    String id = '',
    String parentId = '',
    bool shouldReturn = false,
    bool hide = false,
    String name = 'unlabeled',
    List<Map<String, dynamic>>?
        docString, // Use List<Map<String, dynamic>> directly
    required SuperDecoration textDecoration,
    required IndexPath indexPath,
    bool isCell = false
  }) {
    Delta delta;
    // print('DocString: $docString');
    if (!id.startsWith("TX") && id != '') {
      id='TX-$id';
    }

    try {
      if (docString != null && docString.isNotEmpty) {
        // Convert List<Map<String, dynamic>> to Delta
        delta = Delta.fromJson(docString);
        // Check if delta is empty or not
        if (delta.isEmpty) {
          delta = Delta(); // Fallback to an empty Delta
        }
      } else {
        delta =
            Delta(); // Default to an empty Delta if docString is null or empty
      }
      // print('Decoded Delta: $delta');
    } catch (e) {
      // Handle error if any occurs
      print('Error converting to Delta: $e');
      delta = Delta(); // Default to an empty Delta in case of error
    }

    // Initialize QuillController with the appropriate Document
    QuillController textController;
    if (delta.isEmpty) {
      textController = QuillController(
        document: Document(), // Use an empty document if delta is empty
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
          _findItem();
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
          _findItem();
        },
        onSelectionCompleted: () {
          setState(() {});
          _findItem();
        },
      );
    } else {
      textController = QuillController(
        document: Document.fromDelta(delta), // Use delta to create the document
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
          _findItem();
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
          _findItem();
        },
        onSelectionCompleted: () {
          setState(() {});
          _findItem();
        },
      );
    }

    String newId = id.isEmpty ?'TX-${Uuid().v4()}' : id;
    var textEditorConfigurations = QuillEditorConfigurations(
      enableScribble: true,
      enableSelectionToolbar: true,
      autoFocus: true,
      onTapOutside: (event, focusNode) {
        //     if (!focusNode.hasFocus) {
        //   focusNode.requestFocus();
        // }
      },
      // textSelectionControls: NoMenuTextSelectionControls(),
      contextMenuBuilder: (context, rawEditorState) {
        return Container();
      },
      // padding: EdgeInsets.all(2),
      controller: textController,
      placeholder: isCell? null: 'Enter Text',
      customStyles: DefaultStyles(
        placeHolder: DefaultTextBlockStyle(
          GoogleFonts.lexend(
            color: defaultPalette.extras[0].withOpacity(0.4),
            letterSpacing: -1,
            fontSize:16,
          ),
          VerticalSpacing(0, 0),
          VerticalSpacing(0, 0), null
          )
      ),
      
      // maxHeight: 50,
      customStyleBuilder: (attribute) {
        return customStyleBuilder(attribute); // Default style
      },
      builder: (context, rawEditor) {
        return textEditorBuilder(rawEditor, newId, isCell: isCell);
      },
      onTapDown: (details, p1) {
        return textFieldTapDown(details, newId, indexPath);
      },
    );
    
    if (!shouldReturn) {
      setState(() {
        spreadSheetList[currentPageIndex].add(SheetText(
            name:name,
            hide:hide,
            textEditorController: textController,
            textEditorConfigurations: textEditorConfigurations,
            id: newId,
            parentId: spreadSheetList[currentPageIndex].id,
            indexPath: indexPath,
            textDecoration: textDecoration));

        var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
        lm[keyIndex].spreadSheetList[currentPageIndex].sheetList.add(
            SheetTextBox(
                name:name,
                hide:hide,
                textEditorController:
                    textController.document.toDelta().toJson(),
                id: newId,
                indexPath: indexPath,
                parentId: spreadSheetList[currentPageIndex].id,
                textDecoration: textDecoration.toSuperDecorationBox()));
        lm[keyIndex].save();
        saveDecorations(sheetDecorationList);
      });
    }

    return SheetText(
      name:name,
      hide:hide,
      textEditorController: textController,
      textEditorConfigurations: textEditorConfigurations,
      id: newId,
      parentId:
          parentId.isNotEmpty ? parentId : spreadSheetList[currentPageIndex].id,
      indexPath: indexPath,
      textDecoration: textDecoration, // Use parentId if not empty
    );
  }

  SheetTable? _sheetTableIterator(String id, SheetList sheetList) {
    
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetTable;
      }
      if (sheetList[i] is SheetList) {
        if (_sheetTableIterator(id, sheetList[i] as SheetList) != null) {
          return _sheetTableIterator(id, sheetList[i] as SheetList)!;
        }
      }
      if (sheetList[i] is SheetTable) {
        if (_tableIterator(id, sheetList[i] as SheetTable) != null) {
          return _tableIterator(id, sheetList[i] as SheetTable)!;
        }
      }
    }
    return null;
  }

  SheetTable? _tableIterator(String id, SheetTable sheetTable) {
    if (sheetTable.id == id) {
      return sheetTable;
    }
    for (var i = 0; i < sheetTable.rowData.length; i++) {
      for (var v = 0; v < sheetTable.columnData.length; v++){
        // print('Length: ${sheetTable.cellData[i].length}');
        // print('id for search: $id');
        // print('item id in iterator: ${sheetTable.cellData[i][v].sheetItem.id}');
        // print('item in iterator: ${sheetTable.cellData[i][v].sheetItem}');

        if (sheetTable.cellData[i][v].sheetItem is SheetList) {
          // print('Descending into nested SheetList with id: ${e.id}');
          
            SheetTable? itemItered = _sheetTableIterator(id, sheetTable.cellData[i][v].sheetItem as SheetList);
            if (itemItered!=null && itemItered.id == id) {
              return itemItered;
            }
          
        }

        else if(sheetTable.cellData[i][v].sheetItem is SheetTable) {
          SheetTable? itemItered = _tableIterator(id, sheetTable.cellData[i][v].sheetItem as SheetTable);
          if (itemItered!=null &&itemItered.id == id) {
            return itemItered;
            // return itemItered;
          }
        }
      } 
    }
    return null;
  }

  SheetList _sheetListIterator(String id, SheetList sheetList) {
    // print('Length: ${sheetList.length}');
    print('id for search: $id');

    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        if (_listIterator(id, sheetList[i] as SheetList) != null) {
          return _listIterator(id, sheetList[i] as SheetList)!;
        }
      }
    }
    throw Exception('SheetList with id $id not found');
  }

  SheetList? _listIterator(String id, SheetList sheetList) {
    // print('Length: ${sheetList.length}');
    print('id for search: $id');
    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        try {
          return _listIterator(id, sheetList[i] as SheetList);
        } catch (e) {
          // Continue searching in the remaining items
        }
      }
    }
    return null;
  }

  SheetItem _sheetItemIterator(String id, SheetList sheetList, {bool shouldReturn = false}) {
    // print('Length: ${sheetList.length}');
    print('id for search: $id');

    for (var i = 0; i < sheetList.length; i++) {
      // print('item id in iterator: ${sheetList[i].id}');
      // print('item in iterator: ${sheetList[i]}');

      if (sheetList[i] is SheetText && sheetList[i].id == id) {
        // print('Found SheetText with matching id: ${sheetList[i].id}');
        return sheetList[i];
      }

      else if (sheetList[i] is SheetList) {
        // print('Descending into nested SheetList with id: ${sheetList[i].id}');
          var itemItered = _sheetItemIterator(id, sheetList[i] as SheetList, shouldReturn: true);
          if (itemItered.id == id) {
            return itemItered;
          }
      }

      else if(sheetList[i] is SheetTable) {
        // print('Descending into nested SheetTable with id: ${sheetList[i].id}');
        var itemItered = _sheetTableItemIterator(id, sheetList[i] as SheetTable);
        if (itemItered.id == id) {
          return itemItered;
        }
      }

      // print('ItemIterationParent: $i');
    }

    // Throw if the item was not found after iterating through the entire list
    if (!shouldReturn) {
      throw Exception('SheetItem with id $id not found');
    } else {
      return SheetItem(id: 'yo', parentId: '', indexPath: IndexPath(index:-1));
    }
  }

  SheetItem _sheetTableItemIterator(String id, SheetTable sheetTable) {
    SheetItem requiredItem = SheetText(
      name:'unlabeled',
      hide:true,
      id: 'yo', parentId: '', textDecoration: SuperDecoration(id: ''),indexPath: IndexPath(index:-1));
    for (var i = 0; i < sheetTable.rowData.length; i++) {
      for (var v = 0; v < sheetTable.columnData.length; v++){
        // print('Length: ${sheetTable.cellData[i].length}');
        print('id for search: $id');
        // print('item id in iterator: ${sheetTable.cellData[i][v].sheetItem.id}');
        // print('item in iterator: ${sheetTable.cellData[i][v].sheetItem}');

        if (sheetTable.cellData[i][v].sheetItem is SheetText && sheetTable.cellData[i][v].sheetItem.id == id) {
          // print('Found SheetText with matching id: ${sheetTable.cellData[i][v].sheetItem.id}');
          return sheetTable.cellData[i][v].sheetItem;
          // return e;
        }

        else if (sheetTable.cellData[i][v].sheetItem is SheetList) {
          // print('Descending into nested SheetList with id: ${e.id}');
          
            SheetItem itemItered = _sheetItemIterator(id, sheetTable.cellData[i][v].sheetItem as SheetList, shouldReturn: true);
            if (itemItered.id == id) {
              return itemItered;
            }
          
        }

        else if(sheetTable.cellData[i][v].sheetItem is SheetTable) {
          SheetItem itemItered = _sheetTableItemIterator(id, sheetTable.cellData[i][v].sheetItem as SheetTable);
          if (itemItered.id == id) {
            return itemItered;
            // return itemItered;
          }
        }
      } 
    }

    return requiredItem;
  }

  List<SheetDecoration> decorationListIterator(List<String> itemDecorationList){
    List<SheetDecoration> list =[];
    for (var i = 0; i < itemDecorationList.length; i++) {
      var tmpinx = int.tryParse(itemDecorationList[i].substring(itemDecorationList[i].indexOf('/') + 1))??-155;
      list.add(sheetDecorationList[tmpinx]);
    }
    return list;
  }

  void _deselectTextField() {
    // setState(() {
    //   if (selectedIndex != []) {
    //     selectedIndex[currentPageIndex] = 9999999;
    //   }
    // });
  }

  void _confirmDeleteLayout({bool deletePage = false}) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Delete'),
        content: const Text('This will delete the current page. Are you sure?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _deselectTextField();

                if (deletePage) {
                  if (pageCount == 1) {
                    spreadSheetList[currentPageIndex].sheetList = [];
                    panelIndex = PanelIndex(
                        id: panelIndex.id,
                        parentId: panelIndex.parentId,
                        itemIndexPath: panelIndex.itemIndexPath,
                        parentIndexPath: panelIndex.parentIndexPath,
                        );
                    return;
                  }

                  // Decrement page count and remove the current page
                  pageCount--;
                  documentPropertiesList.removeAt(currentPageIndex);
                  spreadSheetList.removeAt(currentPageIndex);

                  // Update currentPageIndex safely
                  currentPageIndex =
                      currentPageIndex > 0 ? currentPageIndex - 1 : 0;
                  propertyCardsController.setCardIndex(currentPageIndex);
                  propertyCardsController.animateTo(Offset(1, 1),
                      duration: Durations.short1, curve: Curves.linear);

                  // Update panelIndex for the new current page
                  panelIndex = PanelIndex(
                    id: spreadSheetList[currentPageIndex].id,
                    // runTimeType: spreadSheetList[currentPageIndex].runtimeType,
                    parentId: spreadSheetList[currentPageIndex].parentId,
                    itemIndexPath: spreadSheetList[currentPageIndex].indexPath,
                    parentIndexPath: spreadSheetList[currentPageIndex].indexPath.parent,
                  );

                  // Reassign pageNumberController for the new sequence
                  for (int i = 0; i < documentPropertiesList.length; i++) {
                    documentPropertiesList[i].pageNumberController.text =
                        (i + 1).toString();
                  }

                  return;
                }

                // Clear the sheet list for the current page
                spreadSheetList[currentPageIndex].sheetList = [];
                panelIndex = PanelIndex(
                    id: panelIndex.id,
                    itemIndexPath: panelIndex.itemIndexPath,
                    parentIndexPath: panelIndex.parentIndexPath,
                    parentId: panelIndex.parentId);
              });

              Navigator.of(context).pop();
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );
  }

  void _removeTextField() {
    setState(() {
      // spreadSheetList[currentPageIndex].removeAt(panelIndex.panelIndex);
      panelIndex = PanelIndex(id: '', parentId: '', itemIndexPath: IndexPath(index: -1), parentIndexPath: IndexPath(index: -1),);
    });
  }

  pw.Widget convertDeltaToPdfWidget(Delta delta) {
    print('________convertDELTA STARTED LD_________');
    PdfColor pdfColorFromHex(String hexColor) {
      final buffer = StringBuffer();
      if (hexColor.length == 6 || hexColor.length == 7) buffer.write('ff');
      buffer.write(hexColor.replaceFirst('#', ''));
      final color = int.parse(buffer.toString(), radix: 16);
      return PdfColor.fromInt(color);
    }

    pw.TextAlign? getAlign() {
      if (delta.toList()[0].attributes?.containsKey('align') ?? true) {
        switch (delta.toList()[0].attributes?['align']) {
          case 'center':
            return pw.TextAlign.center;
          // break;
          case 'right':
            return pw.TextAlign.right;
          // break;
          case 'justify':
            return pw.TextAlign.justify;
          // break;
          case 'left':
            return pw.TextAlign.left;
        }
      }
      print('returning lol');
      return null;
    }

    final List<pw.Widget> textWidgets = [];
    // pw.Widget checkbox = pw.Container();
    pw.TextAlign? textAlign = getAlign();
    pw.TextDirection textDirection = pw.TextDirection.ltr;
    // pw.Widget lastWidget = pw.Container();
    for (var op in delta.toList()) {
      if (op.value is String) {
        var text = op.value.toString();
        Map<String, dynamic>? attributes = op.attributes;
        // pw.EdgeInsets? padding;
        pw.TextStyle textStyle = const pw.TextStyle();
        PdfColor? backgroundColor;
        if (attributes != null) {
          if (attributes.containsKey('bold')) {
            print('bold');
            textStyle = textStyle.copyWith(fontWeight: pw.FontWeight.bold);
          }
          if (attributes.containsKey('italic')) {
            textStyle = textStyle.copyWith(fontStyle: pw.FontStyle.italic);
          }
          if (attributes.containsKey('underline')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.underline);
          }
          if (attributes.containsKey('strike')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.lineThrough);
          }

          if (attributes.containsKey('color')) {
            textStyle =
                textStyle.copyWith(color: pdfColorFromHex(attributes['color']));
          }
          if (attributes.containsKey('background')) {
            backgroundColor = pdfColorFromHex(attributes['background']);
            textStyle = textStyle.copyWith(
                background: pw.BoxDecoration(color: backgroundColor));
          }
          if (attributes.containsKey('size')) {
            double fontSize = double.parse(attributes['size'].toString());
            textStyle = textStyle.copyWith(fontSize: fontSize);
          }
          if (attributes.containsKey('header')) {
            int level = attributes['header'];
            switch (level) {
              case 1:
                textStyle = textStyle.copyWith(
                    fontSize: 24, fontWeight: pw.FontWeight.bold);
                break;
              case 2:
                textStyle = textStyle.copyWith(
                    fontSize: 20, fontWeight: pw.FontWeight.bold);
                break;
              case 3:
                textStyle = textStyle.copyWith(
                    fontSize: 18, fontWeight: pw.FontWeight.bold);
                break;
              default:
                textStyle = textStyle.copyWith(
                    fontSize: 16, fontWeight: pw.FontWeight.bold);
            }
          }
          if (attributes.containsKey('indent')) {}

          if (attributes.containsKey('direction')) {
            print('direction yes');
            print(attributes['direction']);
            if (attributes['direction'] == 'rtl') {
              print('direction yes');
              textDirection = pw.TextDirection.rtl;
            } else {
              textDirection = pw.TextDirection.ltr;
            }
          }

          if (attributes.containsKey('link')) {
            continue;
          }
        }
        int currentIndex = delta.toList().indexOf(op);
        Operation? newOP;
        for (int j = currentIndex + 1; j < delta.toList().length; j++) {
          var nextOp = delta.toList()[j];
          if (nextOp.value is String &&
              (nextOp.value as String).startsWith('\n')) {
            newOP = nextOp;
            break;
          }
        }

        if (newOP != null &&
            (newOP.attributes?.containsKey('align') ?? false)) {
          switch (newOP.attributes?['align']) {
            case 'center':
              textAlign = pw.TextAlign.center;
              break;
            case 'right':
              textAlign = pw.TextAlign.right;
              break;
            case 'justify':
              textAlign = pw.TextAlign.justify;
              break;
            default:
              textAlign = pw.TextAlign.left;
          }
        } else if (newOP == null) {
          textAlign = pw.TextAlign.left;
        }
        // Check if text starts with '\n'
        bool startsWithNewLine = text.startsWith('\n');
        //
        if (delta.toList().indexOf(op) == 0) {
          startsWithNewLine = true;
        }
        if (startsWithNewLine) {
          print(
              '$startsWithNewLine texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          textWidgets.add(pw.Container(
              width: double.infinity,
              alignment: textAlign == pw.TextAlign.left
                  ? pw.Alignment.topLeft
                  : textAlign == pw.TextAlign.right
                      ? pw.Alignment.topRight
                      : pw.Alignment.center,
              child: pw.RichText(
                text: pw.TextSpan(children: [
                  pw.TextSpan(
                    text: text.substring(0,
                        text[text.length - 1] == '\n' ? text.length - 1 : null),
                    style: textStyle,
                  )
                ]),
                textAlign: textAlign,
                textDirection: textDirection,
              )));
        } else {
          print(
              'texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          (((textWidgets[textWidgets.length - 1] as pw.Container).child
                      as pw.RichText)
                  .text as pw.TextSpan)
              .children
              ?.add(pw.TextSpan(
                  text: text.substring(0,
                      text[text.length - 1] == '\n' ? text.length - 1 : null),
                  style: textStyle));
        }
      }
    }

    print('________END convertDELTA LD_________');
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start, // Adjust as necessary
      children: textWidgets,
    );
  }

  SuperDecoration newSuperDecoration() {
    var newDecoId = 'dSPR-${Uuid().v4()}/${sheetDecorationList.length}';
    print(newDecoId);
    sheetDecorationList.add(SuperDecoration(id: newDecoId));
    return SuperDecoration(id: newDecoId);
  }

  Widget _generateWidWin(
    sWidth,
    sHeight,
  ) {
    
    var doc = documentPropertiesList;
    var sheetList = spreadSheetList;
    return SingleChildScrollView(
      child: Column(
        children: [
          for (int i = 0; i < pageCount; i++)
            Padding(
              padding:
                  const EdgeInsets.symmetric(vertical: 30.0, horizontal: 10),
              child: GestureDetector(
                onTap: () async {
                  setState(() {
                    if (currentPageIndex != i ) {
                      currentPageIndex = i;
                      _renderPagePreviewOnProperties();
                      
                      whichPropertyTabIsClicked = 1;
                      
                      
                      _findItem();
                      panelIndex.id ='';
                      panelIndex.parentId='';
                      // panelIndex.runTimeType = null;
                      whichPropertyTabIsClicked = 1;
                      Future.delayed(Durations.short1).then(
                        (value) {
                          // print("YUHUUUUUUUU");
                          propertyCardsController.setCardIndex(currentPageIndex);
                          propertyCardsController.animateTo(Offset(1, 1),
                          duration: Durations.short1, curve: Curves.linear);
                        },
                      );
                    } else {
                      if (currentPageIndex != i && whichPropertyTabIsClicked !=1) {
                        propertyCardsController.swipeDefault();
                      } else if (whichPropertyTabIsClicked !=1){
                        setState(() {
                          whichPropertyTabIsClicked = 1;
                        });
                      }
                      
                    }
                  whichPropertyTabIsClicked = 1;
                  propertyCardsController.animateTo(Offset(1, 1),
                          duration: Durations.short1, curve: Curves.linear);
                  });
                  await _unfocusAll();
                },
                child: Container(
                  decoration: BoxDecoration(
                    border: currentPageIndex == i
                        ? DashedBorder.fromBorderSide(
                          side: BorderSide(color: defaultPalette.tertiary.withOpacity(0.8),
                            strokeAlign: BorderSide.strokeAlignOutside,
                            width: 6), dashLength:40, spaceLength:20
                            )
                        : null,
                  ),
                  child: RepaintBoundary(
                    key: globalKeys[i],
                    child: Container(
                      width: _getPageWidth(doc[i].pageFormatController,
                          doc[i].orientationController),
                      height: _getPageHeight(doc[i].pageFormatController,
                          doc[i].orientationController),
                      decoration: BoxDecoration(
                          //
                          color: doc[i].pageColor,
                          boxShadow: [
                            // BoxShadow(
                            //   blurRadius: 5,
                          ]),
                      padding: EdgeInsets.only(
                        top: double.parse(doc[i].marginTopController.text),
                        bottom:
                            double.parse(doc[i].marginBottomController.text),
                        left: double.parse(doc[i].marginLeftController.text),
                        right: double.parse(doc[i].marginRightController.text),
                      ),
                      child: _buildSheetListWidget(
                        sheetList[i],
                        sWidth * (wH1DividerPosition),
                      ),
                    ),
                  ),
                ),
              ),
            )
        ],
      ),
    );
  }

  bool _getIsToggled(Map<String, Attribute> attrs, Attribute attribute) {
    if (attribute.key == Attribute.list.key ||
        attribute.key == Attribute.header.key ||
        attribute.key == Attribute.script.key ||
        attribute.key == Attribute.align.key) {
      final currentAttribute = attrs[attribute.key];
      if (currentAttribute == null) {
        // print('returning false');
        return false;
      }
      // print('returning ${currentAttribute.value == attribute.value}');
      return currentAttribute.value == attribute.value;
    }
    // print('returning ${attrs.containsKey(attribute.key)}');
    return attrs.containsKey(attribute.key);
  }

  Widget _buildSheetListWidget(SheetList sheetList, double width,
      {double? docWidth = null,}) {
        // print(sheetList.mainAxisSize.name);
    // SuperDecoration decor = sheetDecorationList.firstWhere((element) => element.id == sheetList.listDecoration.id,) as SuperDecoration;
    return GestureDetector(
      onDoubleTap:(){
        panelIndex.parentId = sheetList.id;
        panelIndex.parentIndexPath = sheetList.indexPath;
        _findSheetListItem();
      },
      child: buildDecoratedContainer(
          sheetDecorationList[ int.tryParse(sheetList.listDecoration.id.substring(sheetList.listDecoration.id.indexOf('/') + 1))??0] as SuperDecoration,
          IntrinsicHeight(
            child: sheetList.direction == Axis.vertical
                //For Columns in the pdf side of things
                ? IntrinsicWidth(
                    child: Flex(
                      direction: Axis.vertical,
                      mainAxisAlignment: sheetList.mainAxisAlignment,
                      crossAxisAlignment: sheetList.crossAxisAlignment,
                      mainAxisSize: sheetList.mainAxisSize, 
                      children:
                          List.generate(sheetList.sheetList.length, (index) {
                        final sheetTextItem = sheetList.sheetList[index];
      
                        if (sheetTextItem is SheetText && !sheetTextItem.hide) {
                          // print('in buildSheetListWidget item is: $item');
                          var tmpinx = int.tryParse(sheetTextItem.textDecoration.id.substring(sheetTextItem.textDecoration.id.indexOf('/') + 1))??-155;
        
                          SuperDecoration textDecor = sheetDecorationList[tmpinx] as SuperDecoration;
    
                          Alignment containerAlignment = Alignment.topLeft;
      
                          // Get alignment based on current attributes
                          final currentAttributes = sheetTextItem.textEditorController
                              .getSelectionStyle()
                              .attributes;
                          // print(sheetTextItem.id+' and '+sheetTextItem.textDecoration.id);
                          // print(sheetTextItem.id+' and '+sheetTextItem.textDecoration.itemDecorationList.toString());
                          // Determine alignment from `attributes`
                          if (_getIsToggled(
                              currentAttributes, Attribute.centerAlignment)) {
                            containerAlignment = Alignment.center;
                          } else if (_getIsToggled(
                              currentAttributes, Attribute.rightAlignment)) {
                            containerAlignment = Alignment.topRight;
                          } else if (_getIsToggled(
                              currentAttributes, Attribute.justifyAlignment)) {
                            containerAlignment = Alignment
                                .topLeft; // Adjust if you have other logic
                          } else if (_getIsToggled(
                              currentAttributes, Attribute.leftAlignment)) {
                            containerAlignment = Alignment.topLeft;
                          }
                          // print('in buildSheetListWidget item is: $item');
                          return IgnorePointer(
                            key: ValueKey(sheetTextItem),
                            child: Container(
                              // width: docWidth,
                              alignment: containerAlignment,
                              child: 
                              buildDecoratedContainer(
                                textDecor,
                                QuillEditor(
                                  key: ValueKey(sheetTextItem.id),
                                  configurations: QuillEditorConfigurations(
                                    scrollable: false,
                                    showCursor: false,
                                    enableInteractiveSelection: false,
                                    enableSelectionToolbar: false,
                                    requestKeyboardFocusOnCheckListChanged: false,
                                    customStyleBuilder: (attribute) {
                                      return customStyleBuilder(attribute);
                                    },
                                    disableClipboard: true,
                                    controller: QuillController(
                                      document:
                                          sheetTextItem.textEditorController.document,
                                      selection:
                                          sheetTextItem.textEditorController.selection,
                                      readOnly: true,
                                      onSelectionChanged: (textSelection) {
                                        setState(() {});
                                      },
                                      onReplaceText: (index, len, data) {
                                        setState(() {});
                                        return false;
                                      },
                                      onSelectionCompleted: () {
                                        setState(() {});
                                      },
                                      onDelete: (cursorPosition, forward) {
                                        setState(() {});
                                      },
                                    ),
                                  ),
                                  focusNode: FocusNode(),
                                  scrollController: ScrollController(),
                                ),
                                 false,
                              
                              ),
                            ),
                          );
                        } else if (sheetTextItem is SheetList) {
                          // print('in buildSheetListWidget sheetTextItem is: $sheetTextItem');
                          return _buildSheetListWidget(sheetTextItem, width);
                        } else if (sheetTextItem is SheetTable) {
                          return _buildSheetTableWidget(sheetTextItem,);
                        }

                        return const SizedBox();
                      }),
                    ),
                  )
                //For Rows in the pdf side of things
                : SizedBox(
                    width: docWidth,
                    child: Row(
                      // direction: Axis.horizontal,
                      mainAxisAlignment: sheetList.mainAxisAlignment,
                      crossAxisAlignment: sheetList.crossAxisAlignment,
                      mainAxisSize: sheetList.mainAxisSize,
                      children:
                          List.generate(sheetList.sheetList.length, (index) {
                        final item = sheetList.sheetList[index];
      
                        if (item is SheetText && !item.hide) {
                          // print('in buildSheetListWidget item is: $item');
                          var tmpinx = int.tryParse(item.textDecoration.id.substring(item.textDecoration.id.indexOf('/') + 1))??-171;
        
                          SuperDecoration textDecor = sheetDecorationList[tmpinx] as SuperDecoration;
    
                          return IgnorePointer(
                            key: ValueKey(item),
                            child: buildDecoratedContainer(
                              textDecor,
                              SizedBox(
                                width: docWidth,
                                child: IntrinsicWidth(
                                  child: QuillEditor(
                                    key: ValueKey(item.id),
                                    configurations: QuillEditorConfigurations(
                                      scrollable: false,
                                      showCursor: false,
                                      enableInteractiveSelection: false,
                                      enableSelectionToolbar: false,
                                      requestKeyboardFocusOnCheckListChanged:
                                          false,
                                      customStyleBuilder: (attribute) {
                                        return customStyleBuilder(attribute);
                                      },
                                      disableClipboard: true,
                                      controller: QuillController(
                                        document:
                                            item.textEditorController.document,
                                        selection:
                                            item.textEditorController.selection,
                                        readOnly: true,
                                        onSelectionChanged: (textSelection) {
                                          setState(() {});
                                        },
                                        onReplaceText: (index, len, data) {
                                          setState(() {});
                                          return false;
                                        },
                                        onSelectionCompleted: () {
                                          setState(() {});
                                        },
                                        onDelete: (cursorPosition, forward) {
                                          setState(() {});
                                        },
                                      ),
                                    ),
                                    focusNode: FocusNode(),
                                    scrollController: ScrollController(),
                                  ),
                                ),
                              ), false
                            ),
                          );
                        } else if (item is SheetList) {
                          // print('in buildSheetListWidget item is: $item');
                          return _buildSheetListWidget(item, width);
                        }
                        return const SizedBox();
                      }),
                    ),
                  ),
          ),
          false),
    );
  }

  Widget _buildSheetTableWidget(SheetTable sheetTable){
  var tblbginx = int.tryParse(sheetTable.sheetTablebgDecoration.id.substring(sheetTable.sheetTablebgDecoration.id.indexOf('/') + 1))??-69;
  var tableHeight = 0.0;
  var tableWidth = 0.0;
  sheetTable.rowData.forEach((element) => tableHeight += element.size,);
  sheetTable.columnData.forEach((element) => tableWidth += element.size,);
  return buildDecoratedContainer(
    sheetDecorationList[tblbginx] as SuperDecoration,
    SizedBox(
      width: tableWidth,
      height:tableHeight,
      child: TableView.builder(
        rowCount:(sheetTable).rowData.length,
        columnCount: (sheetTable).columnData.length,
        // pinnedRowCount: (sheetTable).pinnedRows,
        columnBuilder: (int i) {
          
          return TableSpan(
            extent: FixedTableSpanExtent((sheetTable).columnData[i].size),
            // padding: SpanPadding.all(3)
            );
        },
        rowBuilder: (int i) {
          
          return TableSpan(
            extent: FixedTableSpanExtent((sheetTable).rowData[i].size),
            );
        }, 
        cellBuilder: (BuildContext context, TableVicinity vicinity) {
          
          
          
          var rowIndex =  vicinity.row;
          var columnIndex = vicinity.column;                      
          return TableViewCell(
            columnMergeSpan: (sheetTable).cellData[rowIndex][columnIndex].colSpan,
            columnMergeStart: vicinity.column,
            rowMergeSpan: (sheetTable).cellData[rowIndex][columnIndex].rowSpan,
            rowMergeStart: vicinity.row,
            child: () {
              if (sheetTable.cellData[rowIndex][columnIndex].sheetItem is SheetText){
                return _buildSheetTableTextWidget(
                  sheetTable.cellData[rowIndex][columnIndex].sheetItem as SheetText,
                  disable:true
                  );
              }
              return SizedBox();
            }(),
          );
        }),
          ), false
  );
                    
}

  Widget _buildSheetTableTextWidget(SheetText sheetText, {bool disable = true}) {
    var tmpinx = int.tryParse(sheetText.textDecoration.id.substring(sheetText.textDecoration.id.indexOf('/') + 1))??-111;
        
    SuperDecoration decor = sheetDecorationList[tmpinx] as SuperDecoration;
    
    return ClipRRect(
      borderRadius:BorderRadius.circular(0),
      child: buildDecoratedContainer(
        decor,
        !sheetText.hide?
        QuillEditor(
          key: ValueKey(sheetText.id),
          configurations: QuillEditorConfigurations(
            scrollable: false,
            showCursor: false,
            enableInteractiveSelection: false,
            enableSelectionToolbar: false,
            requestKeyboardFocusOnCheckListChanged: false,
            customStyleBuilder: (attribute) {
              return customStyleBuilder(attribute);
            },
            disableClipboard: true,
            controller: QuillController(
              document:
                  sheetText.textEditorController.document,
              selection:
                  sheetText.textEditorController.selection,
              readOnly: true,
              onSelectionChanged: (textSelection) {
                setState(() {});
              },
              onReplaceText: (index, len, data) {
                setState(() {});
                return false;
              },
              onSelectionCompleted: () {
                setState(() {});
              },
              onDelete: (cursorPosition, forward) {
                setState(() {});
              },
            ),
          ),
          focusNode: FocusNode(),
          scrollController: ScrollController(),
        ) : SizedBox(), 
        false
      ),
    );
                                       
  }

  double _getPageWidth(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      case PdfPageFormat.a4:
        width = 793.7007874;
        height = 1122.519685;
        break;
      case PdfPageFormat.a3:
        width = 1122.519685;
        height = 1587.4015748;
        break;
      case PdfPageFormat.a5:
        width = 559.37007874;
        height = 793.7007874;
        break;
      case PdfPageFormat.a6:
        width = 396.8503937;
        height = 559.37007874;
        break;
      case PdfPageFormat.letter:
        width = 816;
        height = 1056;
        break;
      case PdfPageFormat.legal:
        width = 816;
        height = 1344;
        break;
      default:
        width = 1240; // 2480 / 2
        height = 1754; // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? height : width;
  }

  double _getPageHeight(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      case PdfPageFormat.a4:
        width = 793.7007874;
        height = 1122.519685;
        break;
      case PdfPageFormat.a3:
        width = 1122.519685;
        height = 1587.4015748;
        break;
      case PdfPageFormat.a5:
        width = 559.37007874;
        height = 793.7007874;
        break;
      case PdfPageFormat.a6:
        width = 396.8503937;
        height = 559.37007874;
        break;
      case PdfPageFormat.letter:
        width = 816;
        height = 1056;
        break;
      case PdfPageFormat.legal:
        width = 816;
        height = 1344;
        break;
      default:
        width = 1240; // 2480 / 2
        height = 1754; // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? width : height;
  }

  void _addPdfPage() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    var id = 'LI-${ const Uuid().v4()}';

    SuperDecoration newDecoration = newSuperDecoration();
    print('pageCount in addpage: $pageCount');
    DocumentProperties newdoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );
    setState(() {
      documentPropertiesList.add(newdoc);
    });
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].save();
    SheetList newsheetlist = SheetList(
        id: id,
        parentId: parentId,
        sheetList: [],
        listDecoration: newDecoration,
        indexPath: IndexPath(index: spreadSheetList.length)
        );

    setState(() {
      spreadSheetList.add(newsheetlist);
    });
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex]
        .save(); // Boxes.getLayouts().update(LayoutModel(docPropsList: newdoc, spreadSheetList: newsheetlist.toSheetListBox(), id: id));
    Boxes.saveSuperDecoration(newDecoration.toSuperDecorationBox());
    setState(() {
      selectedIndex.add(SelectedIndex(id: id, selectedIndexes: []));
    });
  }

  void _addPdfPageAtIndex(int index) {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    var id = 'LI-${ const Uuid().v4()}';
    var newDecoration = newSuperDecoration();
    
    print('pageCount in addPage: $pageCount');

    // Create a new DocumentProperties instance
    DocumentProperties newDoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );

    // Add the new DocumentProperties at the specified index
    setState(() {
      documentPropertiesList.insert(index, newDoc);

      // Update the pageNumberController for the entire list to match the new sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }
    });

    print('Updated documentPropertiesList: $documentPropertiesList');

    // Update the LayoutModel and save the new list
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].save();
    print('in addPage after adding to box: ${lm[keyIndex].docPropsList}');

    // Create a new SheetList instance
    SheetList newSheetList = SheetList(
        id: id,
        parentId: parentId,
        sheetList: [],
        listDecoration: newDecoration,
        indexPath: IndexPath(index:-1)
        );

    // Add the new SheetList at the specified index
    setState(() {
      spreadSheetList.insert(index, newSheetList);
      _reassignSpreadSheetIndexPath(spreadSheetList);
    });

    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();

    // Update the selectedIndex list at the specified index
    setState(() {
      // print('pageCount in addPage after: $pageCount');
      selectedIndex.insert(index, SelectedIndex(id: id, selectedIndexes: []));
      // print('id: $id');
      // print(selectedIndex);
      panelIndex.id='';
      panelIndex.parentId='';
    });
  }

  void _movePage(int currentIndex, int targetIndex) {
    setState(() {
      if (currentIndex < 0 ||
          currentIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex >= documentPropertiesList.length ||
          currentIndex == targetIndex) {
        return;
      }

      final movedDocument = documentPropertiesList.removeAt(currentIndex);
      documentPropertiesList.insert(targetIndex, movedDocument);

      final movedSheet = spreadSheetList.removeAt(currentIndex);
      spreadSheetList.insert(targetIndex, movedSheet);

      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      currentPageIndex = targetIndex;
      panelIndex.id='';
      panelIndex.parentId='';
      _reassignSpreadSheetIndexPath(spreadSheetList);

    });
  }

  void _duplicatePage(int sourceIndex, int targetIndex) {
    setState(() {
      if (sourceIndex < 0 ||
          sourceIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex > documentPropertiesList.length) {
        return; // Invalid operation
      }

      // Duplicate documentProperties
      DocumentProperties duplicatedDocument = DocumentProperties(
        pageNumberController: TextEditingController(
            text: (targetIndex + 1).toString()), // Set initial number
        marginAllController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginAllController.text),
        marginLeftController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginLeftController.text),
        marginRightController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginRightController.text),
        marginBottomController: TextEditingController(
            text: documentPropertiesList[sourceIndex]
                .marginBottomController
                .text),
        marginTopController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginTopController.text),
        orientationController:
            documentPropertiesList[sourceIndex].orientationController,
        pageFormatController:
            documentPropertiesList[sourceIndex].pageFormatController,
      );

      // Insert the duplicated document at the target index
      documentPropertiesList.insert(targetIndex, duplicatedDocument);

      // Duplicate spreadSheet data
      SheetList duplicatedSheetList = SheetList(
          id:'LI-${ const Uuid()
                                .v4()}', // Assign a new unique ID
          parentId: spreadSheetList[sourceIndex].parentId,
          sheetList: List.from(spreadSheetList[sourceIndex].sheetList),
          listDecoration: SuperDecoration.fromJson(
              spreadSheetList[sourceIndex].listDecoration.toJson()),
          indexPath: spreadSheetList[sourceIndex].indexPath
              );

      // Insert the duplicated sheet at the target index
      spreadSheetList.insert(targetIndex, duplicatedSheetList);

      // Increment page count
      pageCount++;

      // Reassign pageNumberController.text to reflect the updated sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      // Update currentPageIndex to the new duplicate's location
      currentPageIndex = targetIndex;

      // Update panelIndex for the newly duplicated page
      
      panelIndex.id='';
      panelIndex.parentId='';
      _reassignSpreadSheetIndexPath(spreadSheetList);
    });
  }

  void _reassignSpreadSheetIndexPath(List<SheetList> spreadSheetList) {

    for (int i = 0; i < spreadSheetList.length; i++) {
      setState(() {
        spreadSheetList[i].indexPath.index =i;
      });
    }
    
  }

  void _reassignSheetListIndexPath(SheetList sheetList){
    
    for (var i = 0; i < sheetList.length; i++) {
      setState(() {
        sheetList[i].indexPath.index = i;
      });
    }
  }
  // void animateToPage(int page) {
  //   var duration = const Duration(milliseconds: 300);
  //   var curve = Curves.easeIn;
  //   pageViewIndicatorController.animateToPage(page,
  //       duration: duration, curve: curve);
  // }

  Future<void> _capturePng() async {
    setState(() {
      _images = [];
    });
    try {
      for (var v = 0; v < globalKeys.length; v++) {
        print(globalKeys[v].toString());
        RenderRepaintBoundary? boundary = globalKeys[v]
            .currentContext
            ?.findRenderObject() as RenderRepaintBoundary?;
        if (boundary == null) {
          print("Boundary is null");
          return;
        }
        ui.Image image = await boundary.toImage(pixelRatio: 7.0);
        ByteData? byteData =
            await image.toByteData(format: ui.ImageByteFormat.png);
        if (byteData == null) {
          print("ByteData is null");
          return;
        }
        Uint8List pngBytes = byteData.buffer.asUint8List();
        // _images.clear();
        setState(() {
          _images.add(pngBytes);
        });
        print('image added');
      }
      // WidgetsBinding.instance.addPostFrameCallback((_) async {

      // });
      // _genPdf();
    } catch (e) {
      print(e);
    }
  }

  Future<Uint8List?> captureImageAsPng(int index) async {
    try {
      RenderRepaintBoundary? boundary = globalKeys[index]
          .currentContext
          ?.findRenderObject() as RenderRepaintBoundary?;

      if (boundary == null) {
        print("Boundary is null");
        return null;
      }

      ui.Image image = await boundary.toImage(pixelRatio: 1.0);
      ByteData? byteData =
          await image.toByteData(format: ui.ImageByteFormat.png);

      if (byteData == null) {
        print("ByteData is null");
        return null;
      }

      Uint8List pngBytes = byteData.buffer.asUint8List();
      return pngBytes;
    } catch (e) {
      print("Error capturing image: $e");
      return null;
    }
  }

  Future<void> _renderPagePreviewOnProperties() async {
    try {
      await WidgetsBinding.instance.endOfFrame;
      await Future.delayed(Duration(milliseconds: 16));
      Uint8List? newImage = await captureImageAsPng(currentPageIndex);
      if (newImage != null) {
        setState(() {
          cachedImageData = newImage;
          hasRenderedOnce = true; // Mark as rendered
        });
      }
    } catch (e) {
      debugPrint("Error capturing image: $e");
    }
  }

  Future<void> _genPdf() async {
    final pdf = pw.Document();
    print(_images.length);
    for (var img in _images) {
      final image = pw.MemoryImage(img);
      print(img.length);
      print(documentPropertiesList[_images.indexOf(img)].orientationController);
      pdf.addPage(
        pw.Page(
          margin: const pw.EdgeInsets.all(0),
          orientation: documentPropertiesList[_images.indexOf(img)]
              .orientationController,
          pageFormat:
              documentPropertiesList[_images.indexOf(img)].pageFormatController,
          build: (pw.Context context) {
            return pw.Center(
              child: pw.Image(image),
            );
          },
        ),
      );
    }

    final output = await getApplicationDocumentsDirectory();
    final file = File("${output.path}\\example.pdf");
    await file.writeAsBytes(await pdf.save());
    // await Printing.sharePdf(bytes: await pdf.save());
    print("PDF saved to: ${file.path}");
  }

  void updateBox() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();
  }

  void _checkLayoutName() {
    var layouts =
        Boxes.getLayouts().values.map((layout) => layout.name).toList();
    setState(() {
      nameExists = layouts.contains(layoutName.text);
    });
  }

  void _onFieldFocusChange(bool hasFocus) {
    if (!hasFocus && nameExists) {
      layoutName.text = initialLayoutName;
      setState(() {
        nameExists = false;
      });
    } else {
      Boxes.getLayouts().values.toList()[keyIndex].name = layoutName.text;
      Boxes.getLayouts().values.toList()[keyIndex].save();
    }
  }

  Future<void> fetchFonts() async {
    final url = Uri.parse(
      "https://www.googleapis.com/webfonts/v1/webfonts?key=$_googleFontsApiKey",
    );
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final fonts = data['items'];

      // Classify fonts into categories
      final Map<String, List<String>> tempCategories = {};
      for (var font in fonts) {
        final String category = font['category'];
        final String fontName = font['family'];

        if (!tempCategories.containsKey(category)) {
          tempCategories[category] = [];
        }
        tempCategories[category]!.add(fontName);
      }

      setState(() {
        categorizedFonts = tempCategories;
        // print(categorizedFonts);
      });
    } else {
      print('Failed to fetch fonts: ${response.statusCode}');
    }
  }

  void _findItem() {
    print('findItem called');
    try {
      item = getItemAtPath(panelIndex.itemIndexPath) as SheetText;
          // _sheetItemIterator(panelIndex.id, spreadSheetList[currentPageIndex])
          //     as SheetText;
      setState(() {
      var tmpinx = int.tryParse(item.textDecoration.id.substring(item.textDecoration.id.indexOf('/') + 1))??-111;
      textDecorationNameController.text = item.textDecoration.name;
      decorationIndex = -1;
      updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
      
      textDecorationPath =[item.textDecoration.id];
    });
    } on Exception catch (e) {
      setState(() {
      item = SheetText(id: '', parentId: '', textDecoration: SuperDecoration(id:'yo'),name:'unlabeled',
            hide:true,indexPath: IndexPath(index:-1));
      panelIndex.id = '';
    });
    }
    
  }

  void _findSheetListItem() {
    try {
      if (panelIndex.parentId.startsWith('LI')) {
        // sheetListItem = _sheetListIterator(
        //     panelIndex.parentId, spreadSheetList[currentPageIndex]);
        sheetListItem = getItemAtPath(panelIndex.parentIndexPath!) as SheetList;
            // print('sheetDecorationVariables hello.');
            // print(sheetListItem.parentId);
      setState(() {
        var tmpinx = int.tryParse(sheetListItem.listDecoration.id.substring(sheetListItem.listDecoration.id.indexOf('/') + 1))??-111;
        listDecorationNameController.text = sheetListItem.listDecoration.name;
        decorationIndex = -1;
        updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
        // print('sheetDecorationVariables initiated.');
        // print(sheetListItem.listDecoration.id);
        // print(sheetListItem.listDecoration.itemDecorationList);
        // print(sheetDecorationVariables);
        // print(sheetDecorationVariables[0].isExpanded);
        listDecorationPath = [sheetListItem.listDecoration.id];
      });    
      } else {
        
      }
    } on Exception catch (e) {
      sheetListItem = spreadSheetList[currentPageIndex];
    }
    
  }

  void _findSheetTableItem(SheetTable? sheetTable,{
    bool updateVariables = true
  }){
    _findItem();
    setState(() {
        if (sheetTable == null) {
          try {
            sheetTable =  getItemAtPath(panelIndex.parentIndexPath!) as SheetTable;
            // _sheetTableIterator(panelIndex.parentId, spreadSheetList[currentPageIndex])!;
          } on Exception catch (e) {
            print('sheettable not found');
            return;
          }
        }
        var tmpinx = int.tryParse(sheetTable!.sheetTableDecoration.id.substring(sheetTable!.sheetTableDecoration.id.indexOf('/') + 1))??-42;
        var tmpbginx = int.tryParse(sheetTable!.sheetTablebgDecoration.id.substring(sheetTable!.sheetTablebgDecoration.id.indexOf('/') + 1))??-42;
        var rwinx = int.tryParse(sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.substring(sheetTable!.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.indexOf('/') + 1))??-42;
        var clinx = int.tryParse(sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.substring(sheetTable!.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.indexOf('/') + 1))??-42;
        sheetTableItem = sheetTable!;
        panelIndex.parentId = sheetTable!.id;
        panelIndex.parentIndexPath = sheetTable!.indexPath;
        whichPropertyTabIsClicked = 4;
        decorationIndex=-1;
        if(updateVariables) updateSheetTableVariables(sheetTable!);
        tableDecorationNameController.text = sheetDecorationList[tmpinx].name;
        tableDecorationPath..clear()..add(sheetTable!.sheetTableDecoration.id);
        tablebgDecorationNameController.text = sheetDecorationList[tmpbginx].name;
        tablebgDecorationPath..clear()..add(sheetDecorationList[tmpbginx].id);
        rowDecorationNameController.text = sheetDecorationList[rwinx].name; 
        rowDecorationPath..clear()..add(sheetDecorationList[rwinx].id); 
        columnDecorationNameController.text = sheetDecorationList[clinx].name;   
        columnDecorationPath..clear()..add(sheetDecorationList[clinx].id);
        
         switch (whichTableDecorationIsClicked) {
          case 0:
            updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
            break;
          case 1:
            updateSheetDecorationvariables(sheetDecorationList[tmpbginx] as SuperDecoration);
            break;
          case 2:
            updateSheetDecorationvariables(sheetDecorationList[rwinx] as SuperDecoration);
            break;
          case 3:
            updateSheetDecorationvariables(sheetDecorationList[clinx] as SuperDecoration);
            break;
          default:
        }
        // print('sheetDecorationVariables initiated.');
        // print(sheetTableItem.sheetTableDecoration.id);
        // print(' '+ sheetDecorationVariables.length.toString());
        
        if (item.parentId == sheetTableItem.id) {
          var (row, col) = parseCellId(item.name);
          // print(row);
          // print(col);
          sheetTableVariables.rowLayerIndex = row;
          sheetTableVariables.columnLayerIndex = col;
        }
        
      });
  }

  void updateSheetDecorationvariables(SuperDecoration superDecoration){
    setState((){
      
      sheetDecorationVariables = superDecoration.itemDecorationList.map((ex) {
        var tmpinx = int.tryParse(ex.substring(ex.indexOf('/') + 1))??-42;
        return SheetDecorationVariables(
          id:ex,
          isExpanded: true,
          marginFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listPaddingFocusNodes : List.generate( 5,(index) => FocusNode(),),
          colorHexFocusNodes : List.generate( 2,(index) => FocusNode(),),
          borderFocusNodes : List.generate( 3,(index) => FocusNode(),),
          borderRadiusFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listBorderFocusNodes : List.generate( 5,(index) => FocusNode(),),
          listShadowFocusNodes :sheetDecorationList[tmpinx].id =='yo'
          ?[ List.generate( 5,(index) => FocusNode(),)]
          : List.generate(sheetDecorationList[tmpinx] is ItemDecoration
            ? (sheetDecorationList[tmpinx] as ItemDecoration).decoration.boxShadow?.length??1
            : 1,
          (i) {
            return List.generate( 5,(index) => FocusNode(),);
          },
        ),
        listImageAlignFocusNodes : [FocusNode(), FocusNode()],
        listImagePropertyFocusNodes : [FocusNode(), FocusNode()],
        listShadowLayerSelectedIndex : 0,
        );
      },).toList();
    
    });
  }
  
  void updateSheetTableVariables(SheetTable sheetTable){
    sheetTableVariables = SheetTableVariables();
  }

  Future<void> _unfocusAll() {
    item.focusNode.unfocus();
    item.textEditorController.editorFocusNode?.unfocus();
    return Future.delayed(Durations.medium1).then(
      (value) {
        item.focusNode.unfocus();
        item.textEditorController.editorFocusNode?.unfocus();
        if (FocusScope.of(context).hasFocus) {
          FocusScope.of(context).unfocus();
        }
      },
    );
  }

  Widget textEditorBuilder(Widget rawEditor, String newId, {
    bool isCell = false
  }){
    return Container(
      padding: const EdgeInsets.only(left: 8),
      decoration: BoxDecoration(
          // border: Border.all(color: defaultPalette.extras[0]),
          color: !isCell? defaultPalette.secondary:defaultPalette.primary,
          borderRadius: BorderRadius.circular(6)),
      child: rawEditor,
    );
  }

  void _showOverlayAt(Offset globalPosition, String s, String p) {
    // remove existing
    _overlay?.remove();

    // create new
    _overlay = OverlayEntry(builder: (context) {
      return Positioned(
        left: globalPosition.dx,
        top: globalPosition.dy,
        child: Material(
          color: Colors.transparent,
          child: Container(
            width: 50,
            height: 35,
            alignment:Alignment(0,0),
            decoration: BoxDecoration(
              color: defaultPalette.primary,
              border:Border.all(color:defaultPalette.extras[0]),
              borderRadius:BorderRadius.circular(10)
              ),
            child:Text(p+': '+s, style: GoogleFonts.lexend(letterSpacing:-1, fontSize:12, color:defaultPalette.extras[0]))
            
          ),
        ),
      );
    });

    // insert into Overlay
    Overlay.of(context)!.insert(_overlay!);
  }

  void _hideOverlay() {
    _overlay?.remove();
    _overlay = null;
  }

  SheetItem getItemAtPath(IndexPath indexPath) {
    List<int> path = indexPath.toList();
    SheetItem? current;
    // print(indexPath.toString());
    notfound(){
      print('not found');
      return SheetItem(id: 'yo', parentId: '', indexPath: IndexPath(index: -1));
    }
    int i = 0;
    while (i < path.length) {
      int index = path[i];

      if (i == 0) {
        if (index < 0 || index >= spreadSheetList.length) return notfound();
        current = spreadSheetList[index];
        i++;
      } else if (current is SheetList) {
        if (index < 0 || index >= current.sheetList.length) return notfound();
        current = current.sheetList[index];
        i++;
      } else if (current is SheetTable) {
        if (i + 1 >= path.length) {
          // If there's only one more index, we are selecting the whole table itself
          return current;
        }

        int row = path[i];
        int column = path[i + 1];

        if (row < 0 || row >= current.cellData.length) return notfound();
        if (column < 0 || column >= current.cellData[row].length) return notfound();

        current = current.cellData[row][column].sheetItem;
        i += 2;
      } else {
        return current ?? notfound(); // Hit a leaf like SheetText or similar
      }
    }

    return current ?? notfound();
  }


  ////BUUILDDDDDDDD
  ///BUILDDDDD
  ///BUILDDDDDDD
  @override
  Widget build(BuildContext context) {
    // print('________BUILD LAYOUT STARTED LD_________');
    double sHeight = MediaQuery.of(context).size.height;
    double sWidth = MediaQuery.of(context).size.width;
    Duration sideBarPosDuration = const Duration(milliseconds: 300);
    Duration defaultDuration = const Duration(milliseconds: 300);
    double titleFontSize = sHeight / 11;
    // print('Height of SpreadSheet in build: '+ (sHeight-40).toString());
    if (isLoading) {
      return Container(
        alignment:Alignment(0,0),
        child: Text('Loading', style: GoogleFonts.lexend(letterSpacing:-1, fontSize:40),));
    }
    if (true) {
      //Desktop WEB
      return Scaffold(
          resizeToAvoidBottomInset: false,
          body: SafeArea(
            child: EyeDropper(
              child: Container(
                color: defaultPalette.white,
                child: Stack(
                  children: [
                    Container(
                      height: sHeight,
                      width: sWidth,
                      color: Colors.transparent,
                    ),
                    Positioned(
                      // duration: Duration(milliseconds: 300),
                      width: sWidth,
                      height: sHeight,
                      child: Stack(
                        children: [
                          // Graph //Desktop Behind the emulating preview
                          IgnorePointer(
                            ignoring: true,
                            child: AnimatedContainer(
                              duration: Durations.extralong1,
                              height: sHeight,
                              width: sWidth,
                              alignment: Alignment.centerRight,
                              decoration: BoxDecoration(
                                color: Colors.grey.withOpacity(0.2),
                              ),
                              padding: const EdgeInsets.only(
                                top: 0,
                              ),
                              //layGraph
                              child: Opacity(
                                opacity: 0.35,
                                child: LineChart(LineChartData(
                                    lineBarsData: [LineChartBarData()],
                                    titlesData: const FlTitlesData(show: false),
                                    gridData: FlGridData(
                                        show: true,
                                        getDrawingVerticalLine: (value) => FlLine(
                                            color: defaultPalette.extras[0]
                                                .withOpacity(0.5),
                                            dashArray: [5, 5],
                                            strokeWidth: 1),
                                        getDrawingHorizontalLine: (value) => FlLine(
                                            color: defaultPalette.extras[0]
                                                .withOpacity(0.5),
                                            dashArray: [5, 5],
                                            strokeWidth: 1),
                                        horizontalInterval: 10,
                                        verticalInterval: 30),
                                    borderData: FlBorderData(show: false),
                                    minY: 0,
                                    maxY: 50,
                                    maxX: dateTimeNow.millisecondsSinceEpoch
                                                .ceilToDouble() /
                                            500 +
                                        250,
                                    minX: dateTimeNow.millisecondsSinceEpoch
                                            .ceilToDouble() /
                                        500)),
                              ),
                            ),
                          ),
                          //sidebar tools and pdf preview //Desktop WEB
                          Positioned(
                            top: Platform.isWindows ? 0 : 30,
                            width: sWidth,
                            height: sHeight,
                            child: Row(
                              children: [
                                ///////Side TOOL BAR
                                Container(
                                  height: sHeight,
                                  width: Platform.isWindows ? 45 : 30,
                                  color: defaultPalette.white,
                                  ///////Side TOOL BAR
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    children: [
                                      ///Resize handle
                                      Container(
                                        padding: const EdgeInsets.all(5),
                                        decoration: BoxDecoration(
                                            borderRadius:
                                                BorderRadius.circular(8),
                                            color: defaultPalette.black
                                                .withOpacity(0)),
                                        child: Icon(
                                          TablerIcons.grip_horizontal,
                                          color:
                                              defaultPalette.white.withOpacity(0),
                                          size: 20,
                                        ),
                                      ),
              
                                      ///clearLayout Button
                                      IconButton(
                                          onPressed: () {
                                            
                                          },
                                          icon: Transform.rotate(
                                            angle: math.pi / 4,
                                            child: Icon(
                                              IconsaxPlusLinear.add,
                                              size:
                                                  Platform.isWindows ? null : 20,
                                              color: defaultPalette.black,
                                            ),
                                          )),
                                      //ADD TEXT
                                      IconButton(
                                          onPressed: () {
                                            print(
                                                '________addText pressed LD_________');
                                            // print(
                                            //     'panelId from addtextfield: ${panelIndex.id}');
                                            _addTextField(
                                              textDecoration: newSuperDecoration(),
                                              indexPath: IndexPath(
                                                parent: spreadSheetList[currentPageIndex].indexPath,
                                                index: spreadSheetList[currentPageIndex].length)
                                              );
                                          },
                                          icon: Icon(
                                            CupertinoIcons.plus_bubble,
                                            size: Platform.isWindows ? null : 15,
                                            color: defaultPalette.black,
                                          )),
                                      //Add Image
                                      IconButton(
                                          onPressed: () async {
                                            await _capturePng().then((onValue) {
                                              _genPdf();
                                            });
                                          },
                                          icon: Icon(
                                            IconsaxPlusLinear.gallery_add,
                                            size: Platform.isWindows ? null : 15,
                                            color: defaultPalette.black,
                                          )),
                                      //Add table
                                      IconButton(
                                          onPressed: () {
                                            setState(() {
                                              String newId = 'TB-${ const Uuid().v4()}';
                                              var newDecoration = newSuperDecoration();
                                              var newIndexPath = IndexPath(
                                                    parent: spreadSheetList[currentPageIndex].indexPath,
                                                    index: spreadSheetList[currentPageIndex].length);
                                              spreadSheetList[currentPageIndex].add(
                                                SheetTable(
                                                  id: newId, 
                                                  parentId: spreadSheetList[currentPageIndex].id,
                                                  cellData: defaultSheetTableCellData(newId, newDecoration,newIndexPath),
                                                  columnData: defaultSheetTableColumnData(newId, newDecoration.id,newIndexPath),
                                                  rowData: defaultSheetTableRowData(newId, newDecoration.id,newIndexPath),
                                                  pinnedColumns: 1,
                                                  pinnedRows: 1,
                                                  sheetTableDecoration: newDecoration,
                                                  indexPath: newIndexPath
                                                  )
                                              );
                                            });
                                          },
                                          icon: Icon(
                                            CupertinoIcons.table,
                                            size: Platform.isWindows ? null : 15,
                                            color: defaultPalette.black,
                                          )),
                                      //Duplpicate
                                      IconButton(
                                          onPressed: (){},
                                          icon: Icon(
                                            CupertinoIcons.plus_square_on_square,
                                            size: Platform.isWindows ? null : 15,
                                            color: defaultPalette.black,
                                          )),
                                      IconButton(
                                          onPressed: () => _removeTextField(),
                                          icon: Icon(
                                            Icons.delete,
                                            size: Platform.isWindows ? null : 15,
                                            color: defaultPalette.black,
                                          )),
                                    ],
                                  ),
                                ),
                                //emulating the pdf preview //Desktop WEB
                                Expanded(
                                  flex: (20000).round(),
                                  child: Container(
                                    height: sHeight,
                                    child: zz.Zoom(
                                      centerOnScale: false,
                                      initTotalZoomOut: true,
                                      maxScale: 5,
                                      zoomSensibility: 2,
                                      // key: ValueKey(currentPageIndex),
                                      backgroundColor: defaultPalette.transparent,
                                      canvasColor: defaultPalette.transparent,
                                      transformationController:
                                          transformationcontroller,
                                      opacityScrollBars: 0,
                                      onScaleUpdate: (p0, p1) {
                                        setState(() {
                                          pdfPreviewPaddingScaleFactor = p1;
                                          // print(pdfPreviewPaddingScaleFactor);
                                        });
                                      },
                                      initScale: 0.01,
                                      child: Transform.scale(
                                        scale: 0.8,
                                        // scale: 1,
                                        alignment: Alignment.topLeft,
                                        child: Container(
                                          padding: EdgeInsets.only(
                                              bottom: 500,
                                              top: 50 *
                                                  (1 /
                                                      pdfPreviewPaddingScaleFactor),
                                              left: 40,
                                              right: 5000),
                                          decoration: BoxDecoration(
                                              color: defaultPalette.transparent),
                                          // alignment: Alignment.center,
                                          child: _generateWidWin(
                                              sWidth, sHeight * 0.9),
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          // coloredcontainer fill on right side of the screen
                          Positioned(
                            left: sWidth / 2,
                            top: 0,
                            child: Container(
                              width: sWidth / 2,
                              height: sHeight,
                              color: defaultPalette.tertiary,
                              child: IgnorePointer(
                                ignoring: true,
                                child: AnimatedContainer(
                                  duration: Durations.extralong1,
                                  height: sHeight,
                                  width: sWidth,
                                  alignment: Alignment.centerRight,
                                  decoration: BoxDecoration(),
                                  //layGraph
                                  child: Opacity(
                                    opacity: 0.35,
                                    child: LineChart(LineChartData(
                                        lineBarsData: [LineChartBarData()],
                                        titlesData:
                                            const FlTitlesData(show: false),
                                        gridData: FlGridData(
                                            getDrawingVerticalLine: (value) => FlLine(
                                                color: defaultPalette.primary
                                                    .withOpacity(0.8),
                                                dashArray: [5, 5],
                                                strokeWidth: 1),
                                            getDrawingHorizontalLine: (value) =>
                                                FlLine(
                                                    color: defaultPalette.primary
                                                        .withOpacity(0.8),
                                                    dashArray: [5, 5],
                                                    strokeWidth: 1),
                                            show: true,
                                            horizontalInterval: 5,
                                            verticalInterval: 30),
                                        borderData: FlBorderData(show: false),
                                        minY: 0,
                                        maxY: 50,
                                        maxX: dateTimeNow.millisecondsSinceEpoch
                                                    .ceilToDouble() /
                                                500 +
                                            250,
                                        minX: dateTimeNow.millisecondsSinceEpoch
                                                .ceilToDouble() /
                                            500)),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          //
                          //
                          //
                          //
                          //
                          //Spread SHEET Layout //Desktop WEB
                          Positioned(
                            left: (sWidth * wH1DividerPosition),
                            width: sWidth *
                                (1 - wH1DividerPosition - wH2DividerPosition),
                            // flex: ((1 - wH1DividerPosition - wH2DividerPosition) *
                            //         10000)
                            //     .round(),
                            top:  35,
                            height: sHeight - 40,
                            child: GestureDetector(
                              onTap: () {
                                _unfocusAll();
                                setState(() {
                                  // panelIndex.runTimeType = null;
                                  panelIndex.parentId = '';
                                  panelIndex.parentIndexPath = null;
                                  panelIndex.id = '';
                                  if (whichPropertyTabIsClicked !=1) {
                                  whichPropertyTabIsClicked = 1;
                                  Future.delayed(Durations.short1).then(
                                    (value) {
                                      print("YUHUUUUUUUU");
                                      whichPropertyTabIsClicked = 1;
                                      propertyCardsController.swipeDefault();
                                    },
                                  );
                                }
                                });
                              },
                              onSecondaryTap: () {
                                print("YUHUUUUUUUU");
                              },
                              child: CustomBorder(
                                color: defaultPalette.extras[0],
                                radius: Radius.circular(20),
                                strokeWidth: 2,
                                dashPattern: [30, 10],
                                strokeCap: StrokeCap.butt,
                                animateBorder: true,
                                dashRadius: Radius.circular(50),
                                animateDuration: Duration(milliseconds: 5500),
                                child: Container(
                                  decoration: BoxDecoration(
                                    color: defaultPalette.extras[0],
                                    borderRadius: BorderRadius.circular(20),
                                    // border: Border.all(color: defaultPalette.tertiary,strokeAlign: BorderSide.strokeAlignOutside,width: 4)
                                  ),
                                  padding: EdgeInsets.symmetric(
                                      vertical:3, horizontal: 2).copyWith(right: 0),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(15),
                                    child: Stack(
                                      children: [
                                        // Graph //Desktop WEB
                                        IgnorePointer(
                                          ignoring: true,
                                          child: AnimatedContainer(
                                            duration: Durations.extralong1,
                                            height: sHeight,
                                            width: sWidth,
                                            alignment: Alignment.centerRight,
              
                                            padding: const EdgeInsets.only(
                                              top: 0,
                                            ),
                                            //layGraph
                                            child: Opacity(
                                              opacity: 0.35,
                                              child: LineChart(LineChartData(
                                                  lineBarsData: [
                                                    LineChartBarData()
                                                  ],
                                                  titlesData: const FlTitlesData(
                                                      show: false),
                                                  gridData: FlGridData(
                                                      getDrawingVerticalLine: (value) => FlLine(
                                                          color: defaultPalette
                                                              .primary
                                                              .withOpacity(0.2),
                                                          dashArray: [5, 5]),
                                                      getDrawingHorizontalLine:
                                                          (value) => FlLine(
                                                              color: defaultPalette
                                                                  .primary
                                                                  .withOpacity(0.2),
                                                              dashArray: [5, 5]),
                                                      show: true,
                                                      horizontalInterval: 10,
                                                      verticalInterval: 30),
                                                  borderData: FlBorderData(show: false),
                                                  minY: 0,
                                                  maxY: 50,
                                                  maxX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500 + 250,
                                                  minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                            ),
                                          ),
                                        ),
                                        //Main SpreadSheet //Desktop WEB
                                        _buildListWidget(spreadSheetList[currentPageIndex])
                                        
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          //
                          //
                          //////////PROPERTIES SECTION
                          Positioned(
                            width: sWidth * (wH2DividerPosition),
                            top: Platform.isAndroid ? 35 : 0,
                            height: Platform.isAndroid
                                ? sHeight * 0.85
                                : sHeight * 0.9,
                            left: sWidth * (1 - wH2DividerPosition),
                            child: Stack(
                              children: [
                                //animatedborders Properties page, text, list tab animatedborders on the top right
                                Container(
                                  height: (50),
                                  margin:
                                      EdgeInsets.only(top: 29, left: 0, right: 6),
                                  padding: EdgeInsets.only(bottom: 0),
                                  decoration: BoxDecoration(
                                    color: defaultPalette.transparent,
                                    borderRadius: BorderRadius.circular(25),
                                  ),
                                  child: Row(
                                    children: [
                                      Expanded(
                                          flex: 1,
                                          child: Padding(
                                            padding:
                                                EdgeInsets.only(left: 9, top: 10),
                                            child: CustomBorder(
                                              color: whichPropertyTabIsClicked ==
                                                      1
                                                  ? defaultPalette.primary
                                                  : defaultPalette.transparent,
                                              animateDuration:
                                                  const Duration(seconds: 1),
                                              animateBorder: true,
                                              radius: const Radius.circular(10),
                                              dashPattern: const [15, 10],
                                              strokeWidth: 4,
                                              child: SizedBox(
                                                height: 45,
                                                width: _getPropertiesButtonWidth(
                                                    'page'),
                                              ),
                                            ),
                                          )),
                                      //text field properties button border
                                      if (panelIndex.id != '')
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 4, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 2
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(8),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 5,
                                                child: SizedBox(
                                                  height: 43,
                                                  width: (2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5),
                                                ),
                                              ),
                                            )),
                                      //sheet list properties button border
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("LI"))
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 5, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 3
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(6),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 5,
                                                child: SizedBox(
                                                  height: 45,
                                                  width: 2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5,
                                                ),
                                              ),
                                            )),
                                      //sheet table properties button border
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("TB"))
                                        Expanded(
                                            flex: 2,
                                            child: Padding(
                                              padding: EdgeInsets.only(
                                                  left: 5, top: 8),
                                              child: CustomBorder(
                                                color:
                                                    whichPropertyTabIsClicked == 4
                                                        ? defaultPalette.primary
                                                        : defaultPalette
                                                            .transparent,
                                                radius: const Radius.circular(6),
                                                dashPattern: const [5, 1],
                                                strokeWidth: 4,
                                                child: SizedBox(
                                                  height: 45,
                                                  width: 2 *
                                                      (sWidth *
                                                          (wH2DividerPosition)) /
                                                      5,
                                                ),
                                              ),
                                            )),
                                    
                                    ],
                                  ),
                                ),
                                //buttons Properties page, text, list tab browser buttons on the top right
                                Container(
                                  height: (50),
                                  margin:
                                      EdgeInsets.only(top: 29, left: 0, right: 6),
                                  padding: EdgeInsets.only(bottom: 0),
                                  decoration: BoxDecoration(
                                    color: defaultPalette.transparent,
                                    borderRadius: BorderRadius.circular(25),
                                  ),
                                  child: Row(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      //page properties button button
                                      Expanded(
                                        flex: 1,
                                        child: ElevatedLayerButton(
                                          // isTapped: false,t
                                          onClick: () {
                                            setState(() {
                                              whichPropertyTabIsClicked = 1;
                                              Future.delayed(Durations.short1).then(
                                                (value) {
                                                  print("YUHUUUUUUUU");
                                                  whichPropertyTabIsClicked = 1;
                                                  propertyCardsController.swipeDefault();
                                                },
                                              );       
                                            });
                                          },
                                          buttonHeight: 50,
                                          buttonWidth:
                                              _getPropertiesButtonWidth('page'),
                                          borderRadius: BorderRadius.circular(8),
                                          animationDuration:
                                              const Duration(milliseconds: 100),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.script,
                                            size: 20,
                                            // color: Colors.blue,
                                          ),
                                          subfac: 10,
                                          baseDecoration: BoxDecoration(
                                            color: defaultPalette.extras[0],
                                            border: Border.all(),
                                          ),
                                        ),
                                      ),
                                      //text field properties button button
                                      if (panelIndex.id != '' && item.id != '')
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //The green panel
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 10, left: 4),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.tertiary,
                                                  borderRadius:
                                                      BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //text tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:
                                                        defaultPalette.transparent,
                                                    borderRadius:
                                                        BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      //button that switched the tab to text formatting
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 0;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.typeface,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                          ),
                                                        ),
                                                      ),
                                                      //button that switched the tab to text font
                                                      Positioned(
                                                        bottom:0, 
                                                        right:(_getPropertiesButtonWidth('text-field')/3) -2 ,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 1;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'text-field')/3)-2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.currency_florin,
                                                            size: 13,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                                      //button that switched the tab to text SuperDecoration
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              var tmpinx = int.tryParse(textDecorationPath.last.substring(textDecorationPath.last.indexOf('/') + 1))??-33;
                                                      
                                                              whichPropertyTabIsClicked = 2;
                                                              whichTextPropertyTabIsClicked = 2;
                                                              Future.delayed(Duration.zero).then((value) => textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked),);
                                                              _findItem();  
                                                              decorationIndex = -1;
                                                              isListDecorationLibraryToggled = false;
                                                              isListDecorationPropertiesToggled = false;
                                                              showDecorationLayers = false;
                                                              updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                              textDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                      
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'text-field')/3)-2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                    ],
                                                  )
                                                ),
                                              ),
                                              // the property tab switch main button
                                              Positioned(
                                                top: -2,
                                                right: 0,
                                                child: ElevatedLayerButton(
                                                  // isTapped: false,0
                                                  onClick: () {
                                                    setState(() {
                                                      var tmpinx = int.tryParse(textDecorationPath.last.substring(textDecorationPath.last.indexOf('/') + 1))??-33;
                                                       
                                                        
                                                      whichPropertyTabIsClicked = 2;
                                                      // propertyTabController.jumpToPage(1);
                                                      textPropertyCardsController
                                                          .animateTo(Offset(1, 1),
                                                              duration:
                                                                  Duration.zero,
                                                              curve: Curves.linear);
                                                     _findItem(); 
                                                     decorationIndex = -1;
                                                      isListDecorationLibraryToggled = false;
                                                      isListDecorationPropertiesToggled = false;
                                                      updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                      textDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                      
              
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth: _getPropertiesButtonWidth('text-field') + 2,
                                                  borderRadius:
                                                      BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.start,
                                                    children: [
                                                      const Icon(
                                                        TablerIcons
                                                            .text_recognition,
                                                        size: 15,
                                                        // color: Colors.blue,
                                                      ),
                                                      Text(
                                                        'text',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette
                                                                .black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth: 3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    // border: Border.all(),
                                                  ),
                                                ),
                                              )
                                            ],
                                          ),
                                        ),
                                      //sheetlist properties button button on top the whole thing
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("LI"))
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //Yellow Panel behind
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 9, left: 5),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.extras[1],
                                                  borderRadius: BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //list tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:defaultPalette.transparent,
                                                    borderRadius:BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                            if (whichPropertyTabIsClicked != 3) {
                                                                whichPropertyTabIsClicked = 3;
                                                                _findSheetListItem();
                                                              }
                                                              if (whichPropertyTabIsClicked == 3 && whichListPropertyTabIsClicked !=0) {
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(0),);
                                                                  
                                                                  whichListPropertyTabIsClicked =0;
                                                                } else {
                                                                  print('heryaa');
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.swipeDefault(),);
                                                                  
                                                                }
                                                                
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/2)-5,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.list_tree,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 3) {
                                                                var tmpinx = int.tryParse(listDecorationPath.last.substring(listDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 3;
                                                                _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                                listDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                              
                                                              }
                                                              if (whichPropertyTabIsClicked == 3 && whichListPropertyTabIsClicked !=1) {
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(1),);
                                                                  
                                                                  whichListPropertyTabIsClicked =1;
                                                                } else {
                                                                  // print('heryaa');
                                                                  Future.delayed(Durations.short4).then((value) => listPropertyCardsController.setCardIndex(1),);
                                                                  
                                                                }
                                                              // listPropertyCardsController.swipeDefault();
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'sheet-list')/2) -5,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                            
                                                          ),
                                                        ),
                                                      ),
                                              
                                                    ],
                                                  )
                                                ),
                                              ),
              
                                              //the propety tab switch main button to list properties
                                              Positioned(
                                                top:-2,
                                                right:0,
                                                child: ElevatedLayerButton(
                                                  onClick: () {
                                                    setState(() {
                                                      if (whichPropertyTabIsClicked != 3) {
                                                        var tmpinx = int.tryParse(listDecorationPath.last.substring(listDecorationPath.last.indexOf('/') + 1))??-33;
                                                        whichPropertyTabIsClicked = 3;
                                                        _findSheetListItem();
                                                        decorationIndex = -1;
                                                        isListDecorationLibraryToggled = false;
                                                        isListDecorationPropertiesToggled = false;
                                                        showDecorationLayers = false;
                                                        updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                        listDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                      
                                                      }
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth:
                                                      _getPropertiesButtonWidth(
                                                          'sheet-list'),
                                                  borderRadius:BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.start,
                                                    children: [
                                                      const Icon(
                                                        TablerIcons
                                                            .brackets_contain,
                                                        size: 15,
                                                      ),
                                                      Text(
                                                        'List',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette
                                                                .black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth: 3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    
                                                  ),
                                                ),
                                              
                                              ),
                                            ],
                                          ),
                                        ),
                                      //sheettable properties button button on top of the whole thing
                                      if (panelIndex.parentId != '' && panelIndex.parentId.startsWith("TB"))
                                        Expanded(
                                          flex: 2,
                                          child: Stack(
                                            children: [
                                              //Amethyst Panel behind
                                              Container(
                                                margin: EdgeInsets.only(
                                                    top: 9, left: 5),
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.extras[3],
                                                  borderRadius:
                                                      BorderRadius.circular(10).copyWith(bottomLeft: Radius.circular(8), bottomRight:Radius.circular(8)),
                                                  border: Border.all(),
                                                ),
                                              ),
                                              //table tabs buttons
                                              Positioned.fill(
                                                child: Container(
                                                  margin: const EdgeInsets.only(
                                                    top: 22,
                                                    left: 4,
                                                    bottom: 3
                                                  ),
                                                  decoration: BoxDecoration(
                                                    color:
                                                        defaultPalette.transparent,
                                                    borderRadius:
                                                        BorderRadius.circular(2),
                                                    // border: Border.all(),
                                                  ),
                                                  child: Stack(
                                                    children: [
                                                      //table property tab
                                                      Positioned(
                                                        bottom:0, left:0,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 4) {
                                                                var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 4;
                                                                // _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                // showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                                tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                            
                                                              }
                                                              if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=0) {
                                                                  Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(0),);
                                                                  
                                                                whichTablePropertyTabIsClicked =0;
                                                              } else {
                                                                print('heryaa');
                                                                Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(0),);
                                                                
                                                              }
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.table_options,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                                      //cell property tab
                                                      Positioned(
                                                        bottom:0,
                                                        right:(_getPropertiesButtonWidth('text-field')/3) -2 ,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                              if (whichPropertyTabIsClicked != 4) {
                                                                var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                                whichPropertyTabIsClicked = 4;
                                                                // _findSheetListItem();
                                                                decorationIndex = -1;
                                                                isListDecorationLibraryToggled = false;
                                                                isListDecorationPropertiesToggled = false;
                                                                // showDecorationLayers = false;
                                                                updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                                tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                            
                                                              }
                                                              if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=1) {
                                                                  Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(1),);
                                                                  
                                                                whichTablePropertyTabIsClicked =1;
                                                              } else {
                                                                print('heryaa');
                                                                Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(1),);
                                                                
                                                              }
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth: (_getPropertiesButtonWidth(
                                                                  'sheet-list')/3)-2,
                                                          borderRadius:
                                                              BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                              milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            Icons.dataset_outlined,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth:1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                                      //table decoration
                                                      Positioned(
                                                        bottom:0, right:3,
                                                        child: ElevatedLayerButton(
                                                          onClick: () {
                                                            setState(() {
                                                            var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                            if (whichPropertyTabIsClicked != 4) {
                                                              whichPropertyTabIsClicked = 4;
                                                              // _findSheetListItem();
                                                              decorationIndex = -1;
                                                              isListDecorationLibraryToggled = false;
                                                              isListDecorationPropertiesToggled = false;
                                                              // showDecorationLayers = false;
                                                              updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                              tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                          
                                                            }
                                                            if (whichPropertyTabIsClicked == 4 && whichTablePropertyTabIsClicked !=2) {
                                                              Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(2),);
                                                              
                                                              whichTablePropertyTabIsClicked =2;
                                                            } else {
                                                              print('heryaa');
                                                              Future.delayed(Durations.short4).then((value) => tablePropertyCardsController.setCardIndex(2),);
                                                              
                                                            }
                                                            decorationIndex = -1;
                                                            isListDecorationLibraryToggled = false;
                                                            isListDecorationPropertiesToggled = false;
                                                            // switch (whichTableDecorationIsClicked) {
                                                            //   case 0:
                                                            //     updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                            //     tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;  
                                                                
                                                            //     break;
                                                            //   default:
                                                            // }
                                                            _findSheetTableItem(sheetTableItem, updateVariables: false);
                                                            });
                                                          },
                                                          buttonHeight: 21,
                                                          buttonWidth:( _getPropertiesButtonWidth(
                                                            'sheet-list')/3) -2,
                                                          borderRadius: BorderRadius.circular(5),
                                                          animationDuration: const Duration(
                                                          milliseconds: 100),
                                                          animationCurve: Curves.ease,
                                                          topDecoration: BoxDecoration(
                                                            color: defaultPalette.primary,
                                                            border: Border.all(),
                                                          ),
                                                          topLayerChild: const Icon(
                                                            TablerIcons.sparkles,
                                                            size: 12,
                                                          ),
                                                          subfac: 5,
                                                          depth: 1.5,
                                                          baseDecoration: BoxDecoration(
                                                            color: defaultPalette.extras[0],
                                                           
                                                          ),
                                                        ),
                                                      ),
                                             
                                                    ],
                                                  )
                                                ),
                                              ),
                                      
                                              //the propety tab switch main button to table properties
                                              Positioned(
                                                top:-2,
                                                right:0,
                                                child: ElevatedLayerButton(
                                                  // isTapped: false,
                                                  // toggleOnTap: true,
                                                  onClick: () {
                                                    setState(() {
                                                      if (whichPropertyTabIsClicked != 4) {
                                                        var tmpinx = int.tryParse(tableDecorationPath.last.substring(tableDecorationPath.last.indexOf('/') + 1))??-33;
                                                        whichPropertyTabIsClicked = 4;
                                                        // _findSheetListItem();
                                                        decorationIndex = -1;
                                                        isListDecorationLibraryToggled = false;
                                                        isListDecorationPropertiesToggled = false;
                                                        // showDecorationLayers = false;
                                                        updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                        tableDecorationNameController.text = (sheetDecorationList[tmpinx] as SuperDecoration).name;
                                                            
                                                      }
                                                    });
                                                  },
                                                  buttonHeight: 30,
                                                  buttonWidth:
                                                      _getPropertiesButtonWidth(
                                                          'sheet-list'),
                                                  borderRadius:BorderRadius.circular(5).copyWith(bottomLeft: Radius.circular(10), bottomRight:Radius.circular(10)),
                                                  animationDuration: const Duration(
                                                      milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceAround,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.center,
                                                    children: [
                                                      const Icon(
                                                        Icons.table_chart_outlined,
                                                        size: 14,
                                                      ),
                                                      Text(
                                                        'Table',
                                                        style: GoogleFonts.bungee(
                                                            color: defaultPalette.black,
                                                            fontSize: 12),
                                                      )
                                                    ],
                                                  ),
                                                  subfac: 10,
                                                  depth:3,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[0],
                                                    // border: Border.all(),
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      
                                    ],
                                  ),
                                ),
                                //Content inside properties CARDS Main Parent
                                Container(
                                  padding: EdgeInsets.only(top: 73),
                                  child: FadeInLeft(child: _getProperTiesCards()),
                                ),
                                
                                //the place to render the preview for decoration before displaying
                                // Positioned(
                                //   left: -1000, // Move off-screen
                                //   top: -1000,
                                //   height: sHeight/5,
                                //   width: sHeight/5,
                                //   child: RepaintBoundary(
                                //     key: previewBoxKey,
                                //     child:  buildDecoratedContainer(sheetListItem.listDecoration, SizedBox(width:30,height:30), true),
                                //   ),
                                // ),
                              ],
                            ),
                          ),
                          //
                          //
                          //
                          //RESIZE HANDLE VERTICAL 2
                          Positioned(
                              top: Platform.isAndroid ? 35 : 0,
                              left: sWidth * (1 - wH2DividerPosition) - 3,
                              child: MouseRegion(
                                cursor: SystemMouseCursors.resizeColumn,
                                child: GestureDetector(
                                  onPanUpdate: (details) {
                                    double newPosition = ((0.9 -
                                                wH2DividerPosition -
                                                wH1DividerPosition) +
                                            details.delta.dx /
                                                context.size!.width)
                                        .clamp(0.1, 0.6);

                                    setState(() {
                                      wH2DividerPosition =
                                          (newPosition - .9 + wH1DividerPosition)
                                              .abs()
                                              .clamp((170/sWidth), 0.48);
                                    });
                                  },
                                  child: Container(
                                    color: defaultPalette.transparent,
                                    height: sHeight,
                                    width: 8,
                                  ),
                                ),
                              )),
                          //RESIZE HANDLE VERTICAL 1
                          Positioned(
                              top: Platform.isAndroid ? 35 : 0,
                              left: (sWidth * wH1DividerPosition) - 5,
                              child: MouseRegion(
                                cursor: SystemMouseCursors.resizeColumn,
                                
                                child: GestureDetector(
                                  onPanUpdate: (details) {
                                    double newPosition = (wH1DividerPosition +
                                            details.delta.dx /
                                                context.size!.width)
                                        .clamp((50/sWidth), 0.4);
                                    setState(() {
                                      wH1DividerPosition = newPosition;
                                    });
                                  },
                                  child: Container(
                                    color: Colors.transparent,
                                    height: sHeight,
                                    width: 10,
                                  ),
                                ),
                              )),
                          //
                        ],
                      ),
                    ),
                    // Windows top bar
                    if (Platform.isWindows)
                      GestureDetector(
                        behavior: HitTestBehavior.translucent,
                        onPanStart: (details) {
                          appWindow.startDragging();
                        },
                        onDoubleTap: () {
                          appWindow.maximizeOrRestore();
                        },
                        child: Container(
                          color: Colors.transparent,
                          height: 40,
                          child: Consumer(builder: (context, ref, c) {
                            return Stack(
                              children: [
                                AnimatedPositioned(
                                  right: 0,
                                  top: -2,
                                  duration: Durations.short4,
                                  child: SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: AnimatedContainer(
                                      duration: Durations.short4,
                                      padding: const EdgeInsets.only(
                                          right: 8, bottom: 4),
                                      margin: const EdgeInsets.only(top: 0),
                                      decoration: const BoxDecoration(
                                          color: Colors.transparent,
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(12),
                                            bottomLeft: Radius.circular(12),
                                          )),
                                      child: Row(
                                        children: [
                                          //minimize button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Duration.zero)
                                                  .then((y) {
                                                appWindow.minimize();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 10),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.rectangle,
                                              size: 15,
                                              // color: Colors.blue,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                          //
                                          //maximize button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Durations.short1)
                                                  .then((y) {
                                                appWindow.maximizeOrRestore();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 1),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.triangle,
                                              size: 14,
                                              // color: Colors.amber,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                          //close button
                                          ElevatedLayerButton(
                                            // isTapped: false,
                                            // toggleOnTap: true,
                                            depth: 2,
                                            onClick: () {
                                              Future.delayed(Duration.zero)
                                                  .then((y) {
                                                appWindow.close();
                                              });
                                            },
                                            buttonHeight: 30,
                                            buttonWidth: 30,
                                            borderRadius:
                                                BorderRadius.circular(5),
                                            animationDuration:
                                                const Duration(milliseconds: 1),
                                            animationCurve: Curves.ease,
                                            topDecoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(),
                                            ),
                                            topLayerChild: const Icon(
                                              TablerIcons.circle,
                                              size: 15,
                                              // color: Colors.red,
                                            ),
                                            baseDecoration: BoxDecoration(
                                              color: Colors.green,
                                              border: Border.all(),
                                            ),
                                          ),
                                        ],
                                      ),
                                      //
                                    ),
                                  ),
                                ),
                              ],
                            );
                          }),
                        ),
                      ),
              
                    //
                    //BILLBLAZE MAIN TITLE //Desktop WEB
                    AnimatedPositioned(
                      duration: defaultDuration,
                      top: Platform.isAndroid ? 30 : 5,
                      left: Platform.isAndroid ? 45 : 60,
                      child: AnimatedTextKit(
                        // key: ValueKey(appinioLoop),
                        animatedTexts: [
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.abrilFatface(
                                  fontSize: Platform.isAndroid
                                      ? titleFontSize / 3.5
                                      : 15,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.zcoolKuaiLe(
                                  fontSize: Platform.isAndroid
                                      ? titleFontSize / 3.5
                                      : 15,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.splash(
                                  fontSize: Platform.isAndroid
                                      ? titleFontSize / 3.5
                                      : 15,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze",
                              textStyle: GoogleFonts.libreBarcode39ExtendedText(
                                  fontSize: Platform.isAndroid
                                      ? titleFontSize / 3.5
                                      : 15,
                                  letterSpacing: 0,
                                  height: 1),
                              speed: const Duration(milliseconds: 100)),
                          TypewriterAnimatedText("Bill\nBlaze.",
                              textStyle: GoogleFonts.redactedScript(
                                  fontSize: Platform.isAndroid
                                      ? titleFontSize / 3.5
                                      : 15,
                                  color: const Color(0xFF000000).withOpacity(0.8),
                                  height: 0.9),
                              speed: const Duration(milliseconds: 100)),
                        ],
                        // totalRepeatCount: 1,
                        repeatForever: true,
                        pause: const Duration(milliseconds: 30000),
                        displayFullTextOnTap: true,
                        stopPauseOnTap: true,
                      ),
                    ),
                    //
                    //SIDE BAR BUTTON //Desktop WEB
                    AnimatedPositioned(
                      duration: sideBarPosDuration,
                      top: (sHeight / 20) - (sHeight / 18),
                      left: -10,
                      child: ElevatedLayerButton(
                        // isTapped: false,
                        // toggleOnTap: true,
                        onClick: () {
                          saveLayout();
                          ref
                              .read(propertyCardIndexProvider.notifier)
                              .update((s) => s = 0);
                          Navigator.pop(context);
                        },
                        buttonHeight: Platform.isWindows ? 60 : 50,
                        buttonWidth: Platform.isWindows ? 60 : 50,
                        borderRadius: BorderRadius.circular(100),
                        animationDuration: const Duration(milliseconds: 100),
                        animationCurve: Curves.ease,
                        topDecoration: BoxDecoration(
                          color: Colors.white,
                          border: Border.all(),
                        ),
                        topLayerChild: Icon(
                          IconsaxPlusLinear.element_3,
                          size: Platform.isWindows ? 20 : 15,
                        ),
                        baseDecoration: BoxDecoration(
                          color: Colors.green,
                          border: Border.all(),
                        ),
                      ),
                    ),
                    //
                    //Layout Name Rename
                    Positioned(
                      top: 0,
                      height: Platform.isAndroid ? 30 : 35,
                      width: sWidth / 7,
                      left: Platform.isAndroid ? sWidth / 2.5 : sWidth / 2,
                      // width: (sWidth * wH2DividerPosition - 10) * 0.3,
                      child: IntrinsicWidth(
                        child: Focus(
                          onFocusChange: _onFieldFocusChange,
                          child: TextFormField(
                            focusNode: layoutNamefocusNode,
                            cursorColor: defaultPalette.primary,
                            controller: layoutName,
              
                            textAlignVertical: TextAlignVertical.top,
                            textAlign: TextAlign.center,
                            decoration: InputDecoration(
                              contentPadding:
                                  const EdgeInsets.symmetric(horizontal: 5),
                              filled: true,
                              fillColor: defaultPalette.transparent,
                              border: OutlineInputBorder(
                                // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                borderRadius: BorderRadius.circular(
                                    5), // Replace with your desired radius
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    width: 0, color: defaultPalette.transparent),
                                borderRadius:
                                    BorderRadius.circular(5), // Same as border
                              ),
                              disabledBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    width: 1.2,
                                    color: defaultPalette.transparent),
                                borderRadius:
                                    BorderRadius.circular(6), // Same as border
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                  width: 3,
                                  color: nameExists
                                      ? layoutName.text == initialLayoutName
                                          ? defaultPalette.extras[1]
                                          : Colors.red
                                      : defaultPalette.transparent,
                                ),
                                borderRadius:
                                    BorderRadius.circular(5), // Same as border
                              ),
                            ),
                            // keyboardType: TextInputType.number,
                            style: GoogleFonts.bungee(
                                color: defaultPalette.black, fontSize: 12),
                            onChanged: (value) {
                              _checkLayoutName();
                            },
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ));
    } 
    //
  }

  String getPageFormatString(PdfPageFormat format) {
    if (format == PdfPageFormat.a4) return 'A4';
    if (format == PdfPageFormat.a3) return 'A3';
    if (format == PdfPageFormat.letter) return 'Lt';
    if (format == PdfPageFormat.legal) return 'Lg';
    if (format == PdfPageFormat.roll57) return 'Roll 57';
    if (format == PdfPageFormat.roll80) return 'Roll 80';
    if (format == PdfPageFormat.a5) return 'A5';
    if (format == PdfPageFormat.a6) return 'A6';
    if (format == PdfPageFormat.standard) return 'Standard';
    return 'Unknown';
  }

  PdfPageFormat getPageFormatFromString(String format) {
    switch (format) {
      case 'A4':
        return PdfPageFormat.a4;
      case 'A3':
        return PdfPageFormat.a3;
      case 'A5':
        return PdfPageFormat.a5;
      case 'A6':
        return PdfPageFormat.a6;
      case 'Letter':
        return PdfPageFormat.letter;
      case 'Legal':
        return PdfPageFormat.legal;
      case 'Standard':
        return PdfPageFormat.standard;
      case 'Roll 57':
        return PdfPageFormat.roll57;
      case 'Roll 80':
        return PdfPageFormat.roll80;
      default:
        return PdfPageFormat.a4;
    }
  }

  Widget _buildListWidget(SheetList sheetList) {
    print('rebuilding listWidget');
    
    child(controller, physics) => ReorderableListView.builder(
    shrinkWrap: true,
    buildDefaultDragHandles: false,
    scrollDirection: sheetList.direction,
    scrollController:sheetList.id == spreadSheetList[currentPageIndex].id?null: controller,
    physics:sheetList.id == spreadSheetList[currentPageIndex].id?null: physics,
    itemCount: sheetList.length,
    onReorder: (oldIndex, newIndex) {
      setState(() {
        if (newIndex > oldIndex) {
          newIndex -= 1;
        }
        final item = sheetList.removeAt(oldIndex);
        // buildlistw
        sheetList.insert(newIndex, item);
        _reassignSheetListIndexPath(sheetList);
      });
    },
    proxyDecorator: (child, index, animation) {
      return Container(child: child); },
      itemBuilder: (context, index) {
      // print('hello hello sprdListBuilding: ${sheetList[index]}');
      if (sheetList[index] is SheetText) {
        var sheetText = sheetList[index] as SheetText;
        return ReorderableDragStartListener(
          index: index,
          key: ValueKey(sheetText.id),
          child: IntrinsicWidth(
            child: IntrinsicHeight(
              child: Stack(
                children: [
                  GestureDetector(
                        onTap: () {
                          FocusScope.of(context).unfocus();
                          
                          setState(() {
                            panelIndex.id = sheetText.id;
                            panelIndex.itemIndexPath = sheetText.indexPath;
                            panelIndex.parentId = sheetList.id;
                            panelIndex.parentIndexPath = sheetList.indexPath;
                            
                            whichPropertyTabIsClicked = 2;
                          
                            item = sheetText;
                            _findItem();
                          });
                          
                          print('clicked');
                          print(sheetListItem.id);
                          
                          print(panelIndex);
                        },
                        onSecondaryLongPressDown: (d) {
                          onRightClick(sheetText, d, index,sheetList);
                        },
                        child: Padding(
                          padding: const EdgeInsets.only(
                              // bottom: 2,
                              left: 2,
                              top: 4,
                              right: 2),
                          child: buildSheetTextWidget(sheetList[index] as SheetText)),
                      ),
                    ],
                  ),
                ),
              ),
            );
        // buildlistw
      } else if (sheetList[index] is SheetList) {
        return ReorderableDragStartListener(
          index: index,
          key: ValueKey(sheetList[index].id),
          child: Container(
              margin: EdgeInsets.only(top: 4),
              width:sheetList.id == spreadSheetList[currentPageIndex].id?
              sWidth
              : findSheetListBuildWidth(
                          sheetList[index] as SheetList) <=
                      50
                  ? 50
                  : findSheetListBuildWidth(
                      sheetList[index] as SheetList),
              child: _buildListWidget(
                  sheetList[index] as SheetList)),
        );
      }
        else if(sheetList[index] is SheetTable){
        return ReorderableDragStartListener(
          key: ValueKey(sheetList[index].id),
          index: index,
          child: buildSheetTableWidget(sheetList[index] as SheetTable)
          );
      }
      return Container(
        key: ValueKey(const Uuid().v4()),
        color: Colors.amberAccent,
        height: 12,
        // buildlistw
      );
      },
      
      );
  
    return Stack(
      children: [
        GestureDetector(
          behavior: HitTestBehavior.translucent,
          onTap: () {
            setState(() {
              panelIndex.parentIndexPath = sheetList.indexPath;
              panelIndex.parentId = sheetList.id;
              _findSheetListItem();
              whichPropertyTabIsClicked = 3;
              Future.delayed(Durations.short1).then(
                (value) async {
                  print("YUHUUUUUUUU");
                  listPropertyCardsController.setCardIndex(whichListPropertyTabIsClicked);
                  await listPropertyCardsController.animateTo(Offset(1, 1),
                  duration: Durations.short1, curve: Curves.linear);
                  // listPropertyTabContainerController.animateTo(whichListPropertyTabIsClicked);
                  // listPropertyCardsController.swipeDefault();
                  // listPropertyCardsController.swipeDefault();
                },
              );
             
            });
          },
          child: ScrollConfiguration(
            behavior: ScrollBehavior().copyWith(scrollbars: false),
            child: Padding(
                padding: spreadSheetList[currentPageIndex].id == sheetList.id
                ? EdgeInsets.all(0)
                : const EdgeInsets.only(
              left: 4,
              right: 3
            ),
              child: CustomBorder(
                color: panelIndex.parentId == sheetList.id
                ? spreadSheetList[currentPageIndex].id == sheetList.id
                  ? defaultPalette.transparent
                  : defaultPalette.extras[1]
                : defaultPalette.transparent,
                radius: Radius.circular(15),
                strokeWidth: panelIndex.parentId == sheetList.id ? 1.5 : 0,
                dashPattern: [10, 5],
                strokeCap: StrokeCap.square,
                animateBorder: true,
                animateDuration: Duration(seconds: 5),
                child: Container(
              width:sheetList.id == spreadSheetList[currentPageIndex].id
              ?sWidth
              : findSheetListBuildWidth(sheetList) <= 50
                ? 50
                : findSheetListBuildWidth(sheetList),
              height:sheetList.id == spreadSheetList[currentPageIndex].id
              ? sHeight
              : findSheetListBuildHeight(sheetList) <= 50
                ? 50
                : findSheetListBuildHeight(sheetList),
              padding: const EdgeInsets.only(top: 0, left: 1, right: 1),
                                
              // buildlistw
              decoration: BoxDecoration(
                border: Border.all(
                    width: panelIndex.parentId == sheetList.id ? 1.5 : 1.2,
                    color: panelIndex.parentId == sheetList.id
                        ?  spreadSheetList[currentPageIndex].id == sheetList.id
                          ? defaultPalette.transparent
                          :defaultPalette.extras[1]
                        : spreadSheetList[currentPageIndex].id == sheetList.id
                  ? defaultPalette.transparent
                  :Color(0xFFFFFFFF)),
                color: defaultPalette.transparent,
                borderRadius: BorderRadius.circular(15),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(15),
                child: DynMouseScroll(
                durationMS: 500,
                scrollSpeed: 1,
                builder: (context, controller, physics) {
                  return ScrollbarUltima(
                    alwaysShowThumb: true,
                    controller: controller,
                    scrollbarPosition: sheetList.direction == Axis.vertical?
                      ScrollbarPosition.right : ScrollbarPosition.bottom,
                    backgroundColor: defaultPalette.primary,
                    isDraggable: true,
                    maxDynamicThumbLength: 80,
                    thumbBuilder:
                        (context, animation, widgetStates) {
                      return Container(
                        margin: EdgeInsets.symmetric(
                          vertical:5,
                          horizontal: sheetList.direction == Axis.vertical? 0:5
                          ),
                        decoration: BoxDecoration(
                          border: Border.all(),
                          color: defaultPalette.primary,
                          borderRadius:
                              BorderRadius.circular(99999)),
                        width:sheetList.id == spreadSheetList[currentPageIndex].id
                        ? 3
                        : sheetList.direction == Axis.vertical? 4:60,
                        height:sheetList.direction == Axis.vertical? 60:5,
                      );
                    },
                    child: Padding(
                      padding: EdgeInsets.only(right:sheetList.direction == Axis.vertical?
                        sheetList.id == spreadSheetList[currentPageIndex].id
                        ?3 : 3.5
                        :0),
                      child: spreadSheetList[currentPageIndex].id == sheetList.id
                      ? MinimapScrollbarWidget(
                        controller: controller,
                        physics: physics,
                        scaleFactor: 0.08,
                        miniSize: 30,
                        imageUpdateInterval: 5000000,
                        child: SizedBox(
                          width:sheetList.id == spreadSheetList[currentPageIndex].id
                          ?sWidth
                          : findSheetListBuildWidth(sheetList) <= 50
                            ? 50
                            : findSheetListBuildWidth(sheetList),
                          child: sheetList.isEmpty? SizedBox(height:50, width:100): child(controller,physics))) : child(controller,physics)
                      ),
                      );
                      }
                    ),
                  ),
                ),
              ),
            
            ),
          ),
        ),
        if (panelIndex.parentId == sheetList.id &&  spreadSheetList[currentPageIndex].id != sheetList.id)
        Positioned(
            top: 0,
            child: SlideInLeft(
              duration: Durations.short2,
              child: GestureDetector(
                behavior: HitTestBehavior.deferToChild,
                onTapDown: (d) {
                  setState(() {
                    panelIndex.parentId = sheetList.id;
                    // panelIndex.runTimeType = sheetList.runtimeType;
                  });
                  
                  List<ContextMenuEntry> buildSheetListContextMenuEntries(
                      SheetList sheetList) {
                    var entries = <ContextMenuEntry>[
                      MenuHeader(text: 'SheetList Menu')
                    ];

                    // Cut SheetList

                    entries.add(MenuItem(
                      label: 'Cut',
                      icon: TablerIcons.cut,
                      onSelected: () {
                        setState(() {
                          print(sheetListClipboard );
                          sheetListClipboard[0] = null;
                          sheetListClipboard[1] = (_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]));
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).sheetList.removeWhere((element) => element==sheetListItem,);
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));
                          print(sheetListClipboard );
                          print(sheetListClipboard[1]?.id );
                        });
                        // });
                        // saveLayout();
                      },
                    ));

                    // Copy
                    entries.add(MenuItem(
                      label: 'Copy',
                      icon: TablerIcons.copy,
                      onSelected: () {
                        print(sheetListClipboard );
                        setState(() {
                          sheetListClipboard[0]=(_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]));
                          sheetListClipboard[1] = null;
                        });
                        print(sheetListClipboard );
                      },
                    ));

                    // Paste
                    entries.add(MenuItem(
                      label: 'Paste',
                      icon: TablerIcons.clipboard,
                      onSelected: () {

                        List<SheetItem> deepCopySheetList(
                          List<SheetItem> sheetList, {
                          required String parentIdOverride, // 👈 added param
                          required IndexPath indexPath,
                          Set<String>? visited,
                          int depth = 0,
                          int maxDepth = 50,
                        }) {
                          visited ??= <String>{};

                          return sheetList.asMap().entries.map((e) {
                            var childIndexPath = IndexPath(
                              parent: indexPath,
                              index: e.key,
                              );
                            if (depth > maxDepth) {
                              throw Exception("Too deeply nested structure");
                            }

                            if (visited!.contains(e.value.id)) {
                              throw Exception("Recursive structure detected: ${e.value.id}");
                            }

                            visited.add(e.value.id);

                            if (e.value is SheetText) {
                             

                              return _addTextField(
                                docString: (e.value as SheetText).textEditorConfigurations.controller.document.toDelta().toJson(),
                                id: 'TX-${ const Uuid().v4()}',
                                parentId: parentIdOverride,
                                shouldReturn: true,
                                textDecoration: (e.value as SheetText).textDecoration,
                                indexPath: childIndexPath
                                );
                            } else if (e.value is SheetList) {
                              final newId = 'LI-${ const Uuid().v4()}';
                              return SheetList(
                                id: newId,
                                parentId: parentIdOverride, // 👈 Apply to this nested list
                                direction: (e.value as SheetList).direction,
                                crossAxisAlignment: (e.value as SheetList).crossAxisAlignment,
                                mainAxisAlignment: (e.value as SheetList).mainAxisAlignment,
                                mainAxisSize: (e.value as SheetList).mainAxisSize,
                                size: (e.value as SheetList).size,
                                listDecoration: SuperDecoration.fromJson((e.value as SheetList).listDecoration.toJson()),
                                sheetList: deepCopySheetList(
                                  (e.value as SheetList).sheetList,
                                  parentIdOverride: newId, // 👈 Recursive update to children
                                  visited: {...visited},
                                  depth: depth + 1,
                                  indexPath: childIndexPath,
                                ),
                                indexPath: childIndexPath,
                              );
                            }

                            throw Exception("Unknown or Unaccounted SheetItem type in paste: ${e.value.runtimeType}");
                          }).toList();
                        }


                        final isNotCopied = sheetListClipboard[0] == null;
                        final originalItem = isNotCopied
                            ? sheetListClipboard[1]!
                            : sheetListClipboard[0]!;
                        final newId = isNotCopied ? originalItem.id : 'LI-${ Uuid().v4()}';
                        var newIndexPath = IndexPath(
                          parent:_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]).indexPath,
                          index: 0);

                        final newSheetList = deepCopySheetList(
                          originalItem.sheetList,
                          parentIdOverride: newId, // 👈 Pass new parentId to apply to all children
                          indexPath: newIndexPath
                        );

                        

                        final newItem = originalItem.copyWith(
                          id: newId,
                          parentId: sheetListItem.id,
                          sheetList: newSheetList,
                          indexPath: newIndexPath
                        );


                        setState(() {
                          _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex])
                              .insert(0, newItem);
                        });
                        _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]));
                        saveLayout();
                        sheetListClipboard[1] = null;


                      },
                    ));

                    entries.add(const MenuDivider());

                    entries.addAll([
                      const MenuHeader(text: 'ops'),
                    //ADD ITEMS
                    MenuItem.submenu(
                        label: 'Add',
                        icon: TablerIcons.new_section,
                        items: [
                MenuItem.submenu(
                    label: 'Text',
                    icon: TablerIcons.text_recognition,
                    items: [
                      //add text before the selected one
                      MenuItem(
                        label: 'Before',
                        icon: TablerIcons
                            .row_insert_top,
                        onSelected: () {
                          setState(() {
                          var newItem = _addTextField( 
                            shouldReturn:  true,
                            textDecoration:  newSuperDecoration(),
                            indexPath: IndexPath(
                              parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                              index: 0)
                            );
                    
                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList)
                            , newItem);
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                          });
                        },
                      ),
                      //add text after the selected one
                      MenuItem(
                        label: 'After',
                        icon: TablerIcons
                            .row_insert_bottom,
                        onSelected: () {
                          setState(() {
                          var newItem = _addTextField( 
                            shouldReturn:  true,
                            textDecoration:  newSuperDecoration(),
                            indexPath: IndexPath(
                              parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                              index: 0)
                            );
                    
                          var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                          if (index<_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).length) {
                            
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                                index+1,
                                newItem);
                          } else {
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).add(
                                newItem);
                          }
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                          });
                          
                        },
                      ),
                      //add text inside the selected one
                      MenuItem.submenu(
                        label: 'Inside',
                        icon: TablerIcons.code_plus,
                        items:[
                        MenuItem(
                          label: 'At first',
                          icon: TablerIcons.row_insert_top,
                          onSelected: () {
                            setState(() {
                            var newItem = _addTextField( 
                              shouldReturn:  true,
                              textDecoration: newSuperDecoration(),
                              indexPath: IndexPath(
                              parent:sheetList.indexPath,
                              index: 0)
                              );
                     
                            var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                            if (index<sheetList.length) {
                              
                              sheetList.insert( 0, newItem);
                            } else {
                              sheetList.add(
                                  newItem);
                            }
                            _reassignSheetListIndexPath(sheetList);  
                            
                            });
                          },
                        ),
                        //add a new row with a new textfield inside at the current index
                        MenuItem(
                          label: 'At Last',
                          icon: TablerIcons
                              .row_insert_bottom,
                          onSelected: () {
                            setState(() {
                              var newItem = _addTextField( 
                                shouldReturn:  true,
                                textDecoration:  newSuperDecoration(),
                                indexPath: IndexPath(
                                parent:sheetList.indexPath,
                                index: sheetList.length)
                                  );
                     
                              
                                sheetList.add(
                                    newItem);
                              
                            });
                          },
                        ),
                    
                        ]
                      ),
                    
                    ]),
                MenuItem.submenu(
                    label: 'List',
                    icon: TablerIcons
                        .brackets_contain_start,
                    items: [
                      //add list before the selected one
                      MenuItem(
                        label: 'Before',
                        icon: TablerIcons
                            .row_insert_top,
                        onSelected: () {
                          setState(() {
                            var newId ='LI-${ const Uuid().v4()}';

                          _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList)
                            , SheetList(
                          direction:
                            Axis.horizontal,
                          id: newId,
                          parentId: sheetList.id,
                          listDecoration: newSuperDecoration(),
                          sheetList: [
                          ],
                          indexPath: IndexPath(
                            parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                            index: 0)
                          ));
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                          
                          });
                        },
                      ),
                      //add list after the selected one
                      MenuItem(
                        label: 'After',
                        icon: TablerIcons
                            .row_insert_bottom,
                        onSelected: () {
                          setState(() {
                           var newId ='LI-${ const Uuid().v4()}';
                          var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                          if (index<_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).length) {
                            
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).insert(
                                index+1,
                                SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration:  newSuperDecoration(),
                            sheetList: [],
                          indexPath: IndexPath(
                            parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                            index: 0)
                          ));
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                          
                          } else {
                            _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).add(
                                SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration:  newSuperDecoration(),
                            sheetList: [],
                          indexPath: IndexPath(
                            parent:_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexPath,
                            index: 0)
                          ));
                          _reassignSheetListIndexPath(_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]));  
                          
                          }
                          });
                          
                        },
                      ),
                      //add list inside the selected one
                      MenuItem.submenu(
                        label: 'Inside',
                        icon: TablerIcons.code_plus,
                        items:[
                        MenuItem(
                          label: 'At first',
                          icon: TablerIcons.row_insert_top,
                          onSelected: () {
                            setState(() {
                            var newId ='LI-${ const Uuid().v4()}';
                            var index =_sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                            if (index<sheetList.length) {
                              
                              sheetList.insert( 0, SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration: newSuperDecoration(),
                            sheetList: [],
                            indexPath: IndexPath(
                              parent:sheetList.indexPath,
                              index: 0)
                            ));
                            } else {
                              sheetList.add(
                                  SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration: newSuperDecoration(),
                            sheetList: [],
                            indexPath: IndexPath(
                              parent: sheetList.indexPath,
                              index: sheetList.length)
                            ));
                            }
                              _reassignSheetListIndexPath(sheetList);
                            });
                          },
                        ),
                        //add a new row with a new textfield inside at the current index
                        MenuItem(
                          label: 'At Last',
                          icon: TablerIcons
                              .row_insert_bottom,
                          onSelected: () {
                            setState(() {
                              var newId ='LI-${ const Uuid().v4()}';
                              
                                sheetList.add(
                                    SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration: newSuperDecoration(),
                            sheetList: [],
                            indexPath: IndexPath(
                              parent: sheetList.indexPath,
                              index: sheetList.length)
                            ));
                              
                            });
                          },
                        ),
                    
                        ]
                      ),
                    
                           
                      ])    
                    ]),
                    //Wrap ITEMS
                    MenuItem.submenu(
                    label: 'Wrap',
                    icon: TablerIcons.brackets_contain,
                    items: [
                      //In a row
                    MenuItem(
                      label: 'In a Row',
                      icon: TablerIcons.layout_rows ,
                      onSelected: () {
                        setState(() {
                          var parentId = sheetListItem.parentId;
                          var index =_sheetListIterator(parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                             print(parentId);
                            var item =_sheetListIterator(parentId, spreadSheetList[currentPageIndex]).removeAt(index);
                             print(item.parentId);
                            var newId = 'LI-${ const Uuid().v4()}';     
                            item.parentId = newId;    
                            print(parentId);
                            _sheetListIterator(parentId, spreadSheetList[currentPageIndex]).insert(
                            index,
                            SheetList(
                            direction:
                              Axis.horizontal,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration: newSuperDecoration(),
                            sheetList: [
                              (item as SheetList).copyWith(
                                parentId: newId,
                                indexPath: IndexPath(parent: item.indexPath,index:0)
                              )
                            ],
                            indexPath: item.indexPath
                            ));

                            panelIndex.id = item.id;
                            panelIndex.parentId = item.parentId;
                            panelIndex.parentIndexPath = item.indexPath.parent;
                            panelIndex.itemIndexPath = item.indexPath;
                            _findSheetListItem();
                            print('Updated index of text editor: $index');
                          
                        });
                      },
                    ),
                      //In a column
                    MenuItem(
                      label: 'In a Column',
                      icon: TablerIcons
                          .layout_columns,
                      onSelected: () {
                        setState(() {
                          var parentId = sheetListItem.parentId;
                          var index =_sheetListIterator(parentId, spreadSheetList[currentPageIndex]).indexOf(sheetList);              
                             print(parentId);
                            var item =_sheetListIterator(parentId, spreadSheetList[currentPageIndex]).removeAt(index);
                             print(item.parentId);
                            var newId = 'LI-${ const Uuid()
                                .v4()}';              
                            item.parentId = newId;  
                            print(parentId);
                            _sheetListIterator(parentId, spreadSheetList[currentPageIndex]).insert(
                            index,
                            SheetList(
                            direction:
                              Axis.vertical,
                            id: newId,
                            parentId: sheetList.id,
                            listDecoration: newSuperDecoration(),
                            sheetList: [
                              (item as SheetList).copyWith(
                                parentId: newId,
                                indexPath: IndexPath(parent: item.indexPath,index:0)
                              )
                            ],
                            indexPath: item.indexPath
                            ));

                            panelIndex.id = item.id;
                            panelIndex.parentId = item.parentId;
                            panelIndex.parentIndexPath = item.indexPath.parent;
                            panelIndex.itemIndexPath = item.indexPath;
                            _findSheetListItem();
                            print('Updated index of text editor: $index');
                          
                        });
                      },
                    ),
                        
                  ]),
    
                      //Clear Field
                      MenuItem(
                        label: 'Empty The List',
                        icon: TablerIcons.square_rounded_x,
                        onSelected: () async {
                          await showAdaptiveDialog(
                            context: context,
                            builder: (context) {
                              return AlertDialog(
                                title: Text(
                                    'Do you really really want to Empty the List?'),
                                content: Text(
                                    'This will clear all the text fields from current SheetList. Are you sure?'),
                                actions: [
                                  TextButton(
                                      onPressed: () {
                                        setState(() {
                                          var temp = _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]);
                                          
                                          (temp as SheetList).sheetList.clear();

                                          _sheetListIterator(sheetListItem.id, spreadSheetList[currentPageIndex]).sheetList = temp.sheetList;
                                          saveLayout(); // Save changes after clearing
                                        });
                                        Navigator.pop(
                                            context); // Close the current context
                                      },
                                      child: Text('Yes')),
                                  TextButton(
                                      onPressed: () {
                                        Navigator.pop(context);
                                      },
                                      child: Text('No')),
                                ],
                              );
                            },
                          );
                        },
                      ),
                      //Delete
                      MenuItem(
                        label: 'Delete',
                        icon: TablerIcons.trash,
                        onSelected: () async {
                          await showAdaptiveDialog(
                            context: context,
                            builder: (context) {
                              return AlertDialog(
                                title: const Text('Confirm Delete'),
                                content: const Text(
                                    'This will DELETE the current List with its contents. Are you sure?'),
                                actions: [
                                  TextButton(
                                      onPressed: () {
                                        setState(() {
                                          // sheetList.removeAt(index);
                                          panelIndex.id = '';
                                          // panelIndex.runTimeType = null;
                                        });
                                        _sheetListIterator(sheetListItem.parentId, spreadSheetList[currentPageIndex]).sheetList
                                          .removeWhere((element) => element.id == sheetListItem.id,);
                                        
                                        // });
                                        saveLayout();
                                        Navigator.pop(context);
                                      },
                                      child: const Text('Yes')),
                                  TextButton(
                                      onPressed: () {
                                        Navigator.pop(context);
                                      },
                                      child: const Text('No')),
                                ],
                              );
                            },
                          );
                        },
                      )
                    ]);

                    return entries;
                  }

                  final entries = buildSheetListContextMenuEntries(sheetList);
                  var menu = ContextMenu(
                      entries: entries,
                      boxDecoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                              color: defaultPalette.black.withOpacity(0.3),
                              blurRadius: 2,
                              // spreadRadius: 10
                            )
                          ],
                          color: defaultPalette.primary,
                          borderRadius: BorderRadius.circular(10)),
                      position:
                          Offset(d.globalPosition.dx, d.globalPosition.dy));
                  menu.show(context);
                },
                child: Container(
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                      border: Border.all(
                          width: 2,
                          color: panelIndex.parentId == sheetList.id
                              ? defaultPalette.extras[1]
                              : ui.Color(0xFFFFFFFF)),
                      color: defaultPalette.quaternary,
                      shape: BoxShape.circle),
                  width: 15,
                  height: 15,
                ),
              ),
            ),
          ), // Expandable menus and other widgets can stay the same
      ],
    );
  }

  Widget buildSheetTextWidget(SheetText sheetText) {
  return Container(
    padding: const EdgeInsets.only(
        top: 4,
        bottom: 4,
        left: 0,
        right: 4),
    decoration: BoxDecoration(
      color: defaultPalette.primary,
      border: Border.all(
        strokeAlign:
            BorderSide.strokeAlignInside,
        width: panelIndex.id ==
                sheetText.id
            ? 2
            : 1.2,

        color: panelIndex.id ==
                sheetText.id
            ? defaultPalette.tertiary
            : defaultPalette.black,
      ),
      borderRadius:
          BorderRadius.circular(10),
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.center,
      mainAxisSize: MainAxisSize.min,
      children: [
        if(sheetText.name != 'unlabeled')
        ...[Text(
          sheetText.name,
          style: GoogleFonts.lexend(
            letterSpacing: -1,
            height:0.9,
            fontWeight: FontWeight.w500,
            fontSize: 12,
            color: defaultPalette.black),
        ),
        SizedBox(height:2),],
        Row(
          children: [
            Container(
              child: const Icon(
                TablerIcons.cursor_text,
                size: 15,
              ),
            ),
            Expanded(
              child: QuillEditor(
                configurations: sheetText
                    .textEditorConfigurations,
                focusNode:
                    sheetText.focusNode,
                scrollController:
                    ScrollController(),
              ),
            ),
            if(sheetText.hide)
            ...[
            SizedBox(width:2),
            ClipRRect(
              borderRadius: BorderRadius.circular(9999),
              child: Material(
                color: defaultPalette.transparent,
                child: InkWell(
                  focusColor: defaultPalette.primary,
                  hoverColor: defaultPalette.primary,
                  highlightColor: defaultPalette.primary,
                  onTap: () {
                    setState(() {
                      sheetText.hide = !sheetText.hide;
                    });
                  },
                  child: const Icon(
                    TablerIcons.eye_closed,
                    size: 15,
                  ),
                ),
              ),
            ),]
          ],
        ),
      ],
    ),
  );
                                        
  }

  List<ContextMenuEntry> buildContextMenuEntries( QuillController textEditorController, int index, SheetText sheetText,SheetList sheetList) {
  var entries = <ContextMenuEntry>[];

  bool hasSelection = textEditorController
        .selection.start !=
    textEditorController.selection.end;

  // Cut
  if (hasSelection) {
  entries.add(MenuItem(
    label: 'Cut',
    icon: TablerIcons.cut,
    onSelected: () {
      var selectedText =
          textEditorController.document
              .getPlainText(
        textEditorController
            .selection.start,
        textEditorController
            .selection.end,
      );
      Clipboard.setData(ClipboardData(
          text: selectedText));
      textEditorController.replaceText(
        textEditorController
            .selection.start,
        textEditorController
                .selection.end -
            textEditorController
                .selection.start,
        '',
        null,
      );
    },
  ));
  }

  // Copy
  if (hasSelection) {
  entries.add(MenuItem(
    label: 'Copy',
    icon: TablerIcons.copy,
    onSelected: () {
      var selectedText =
          textEditorController.document
              .getPlainText(
        textEditorController
            .selection.start,
        textEditorController
            .selection.end,
      );
      Clipboard.setData(ClipboardData(
          text: selectedText));
    },
  ));
  }

  // Paste
  entries.add(MenuItem(
  label: 'Paste',
  icon: TablerIcons.clipboard,
  onSelected: () async {
    var data = await Clipboard.getData(
        'text/plain');
    if (data != null) {
      int baseOffset =
          textEditorController
              .selection.baseOffset;
      if (textEditorController
          .selection.isCollapsed) {
        textEditorController
            .replaceText(
          baseOffset,
          0, // No text to replace
          data.text!,
          null,
        );
      } else {
        textEditorController
            .replaceText(
          baseOffset,
          textEditorController.selection
                  .extentOffset -
              baseOffset,
          data.text!,
          null,
        );
      }
    }
  },
  ));

  // Select All
  entries.add(MenuItem(
  label: 'Select All',
  icon: TablerIcons.select_all,
  onSelected: () {
    textEditorController
        .updateSelection(
            TextSelection(
              baseOffset: 0,
              extentOffset:
                  textEditorController
                      .document.length,
            ),
            ChangeSource.local);
  },
  ));

  entries.add(const MenuDivider());

  // Undo
  if (textEditorController.hasUndo) {
  entries.add(MenuItem(
    label: 'Undo',
    icon: TablerIcons.corner_up_left,
    onSelected: () {
      textEditorController.undo();
    },
  ));
  } else {
  entries.add(const MenuItem(
    label: 'Undo',
    icon: TablerIcons.corner_up_left,
    onSelected: null,
  ));
  }

  // Redo
  if (textEditorController.hasRedo) {
  entries.add(MenuItem(
    label: 'Redo',
    icon: TablerIcons.corner_down_right,
    onSelected: () {
      textEditorController.redo();
    },
  ));
  } else {
  entries.add(const MenuItem(
    label: 'Redo',
    icon: TablerIcons.corner_down_right,
    onSelected: null,
  ));
  }
  entries.addAll([
  const MenuHeader(text: 'ops'),
  //ADD ITEMS
  MenuItem.submenu(
      label: 'Add',
      icon: TablerIcons.new_section,
      items: [
        MenuItem.submenu(
            label: 'Text',
            icon: TablerIcons
                .text_recognition,
            items: [
              //add text before the selected one
              MenuItem(
                label: 'Before',
                icon: TablerIcons
                    .row_insert_top,
                onSelected: () {
                  setState(() {
                  var newItem = _addTextField( 
                    shouldReturn:  true,
                    textDecoration: newSuperDecoration(),
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );
                  sheetList.insert( index, newItem);
                  _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
              //add text after the selected one
              MenuItem(
                label: 'After',
                icon: TablerIcons
                    .row_insert_bottom,
                onSelected: () {
                  setState(() {
                  var newItem = _addTextField( 
                    shouldReturn:  true,
                    textDecoration: newSuperDecoration(),
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );
                  
                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                        index+1,
                        newItem);
                  } else {
                    sheetList.add(
                        newItem);
                  }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              //add a new row with a new textfield inside at the current index
              MenuItem(
                label: 'In a New List',
                icon: TablerIcons
                    .code_plus,
                onSelected: () {
                  setState(() {
                    var newId ='LI-${ const Uuid().v4()}';
                    var newList = SheetList(
                    direction: Axis.vertical,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration(),
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );
                    var newItem = _addTextField( 
                      shouldReturn:  true,
                      textDecoration: newSuperDecoration(),
                      indexPath: IndexPath(
                      parent: newList.indexPath,
                      index: newList.length),
                      );
                    newList.sheetList.add(newItem);
                    
                    sheetList.insert(
                    index,
                    newList
                    );
                    print('plused');
                    print(sheetList.id);
                    _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
            ]),
        MenuItem.submenu(
            label: 'List',
            icon: TablerIcons
                .brackets_contain_start,
            items: [
              //add row before the selected one
              MenuItem(
                label: 'Row Before',
                icon: TablerIcons
                    .row_insert_top,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  sheetList.insert(
                  index,
                  SheetList(
                  direction:
                    Axis.horizontal,
                  id: newId,
                  parentId: sheetList.id,
                  listDecoration: newSuperDecoration(),
                  sheetList: [
                  ],
                  indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  ));
                  _reassignSheetListIndexPath(sheetList);
                  });
                },
              ),
              //add row after the selected one
              MenuItem(
                label: 'Row After',
                icon: TablerIcons
                    .row_insert_bottom,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  

                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                    index+1,
                    SheetList(
                    direction:
                      Axis.horizontal,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration(),
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  )); 
                  } else {
                    sheetList.add(
                      SheetList(
                      direction:
                        Axis.vertical,
                      id: newId,
                      parentId: sheetList.id,
                      listDecoration: newSuperDecoration(),
                      sheetList: [
                      ],
                      indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                      ));
                      }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              
              //add column before the selected one
              MenuItem(
                label: 'Column Before',
                icon: TablerIcons
                    .row_insert_top,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid()
                            .v4()}';
                  sheetList.insert(
                  index,
                  SheetList(
                  direction:
                    Axis.vertical,
                  id: newId,
                  parentId: sheetList.id,
                  listDecoration:  newSuperDecoration(),
                  sheetList: [
                  ],
                  indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                  ));
                  _reassignSheetListIndexPath(sheetList);

                  });
                },
              ),
              //add column after the selected one
              MenuItem(
                label: 'Column After',
                icon: TablerIcons
                    .row_insert_bottom,
                onSelected: () {
                  setState(() {
                  var newId ='LI-${ const Uuid().v4()}';
                  

                  if (index<sheetList.length) {
                    
                    sheetList.insert(
                    index+1,
                    SheetList(
                    direction:
                      Axis.vertical,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration(),
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    ));    
                  } else {
                    sheetList.add(
                      SheetList(
                      direction:
                        Axis.vertical,
                      id: newId,
                      parentId: sheetList.id,
                      listDecoration: newSuperDecoration(),
                      sheetList: [
                      ],indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                      ));
                      }
                  _reassignSheetListIndexPath(sheetList);  
                  });
                },
              ),
              
            ])    
      ]),
  //Wrap ITEMS
  MenuItem.submenu(
      label: 'Wrap',
      icon: TablerIcons.brackets_contain,
      items: [
        MenuItem(
          label: 'In a Row',
          icon: TablerIcons.layout_rows ,
          onSelected: () {
            setState(() {
              
                var oldItem = sheetList.removeAt(index);
                var newId = 'LI-${ const Uuid().v4()}';        
                var newList = SheetList(
                    direction: Axis.horizontal,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration(),
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );                  
                oldItem.parentId = newId;     
                oldItem.indexPath = IndexPath(
                  parent: newList.indexPath,
                  index: newList.length);
                newList.sheetList.add(oldItem);
                //inserting
                sheetList.insert(
                index,
                newList,
                );

                panelIndex.id = item.id;
                panelIndex.parentId = item.parentId;
                panelIndex.parentIndexPath = item.indexPath.parent;
                panelIndex.itemIndexPath = item.indexPath;
                print('Updated index of text editor: $index');
                _reassignSheetListIndexPath(sheetList);
            });
          },
        ),
        MenuItem(
          label: 'In a Column',
          icon: TablerIcons
              .layout_columns,
          onSelected: () {
            setState(() {
              
                var oldItem = sheetList.removeAt(index);
                var newId = 'LI-${ const Uuid().v4()}';        
                var newList = SheetList(
                    direction: Axis.vertical,
                    id: newId,
                    parentId: sheetList.id,
                    listDecoration: newSuperDecoration(),
                    sheetList: [],
                    indexPath: IndexPath(
                      parent: sheetList.indexPath,
                      index: sheetList.length),
                    );                  
                oldItem.parentId = newId;     
                oldItem.indexPath = IndexPath(
                  parent: newList.indexPath,
                  index: newList.length);
                newList.sheetList.add(oldItem);
                //inserting
                sheetList.insert(
                index,
                newList,
                );

                panelIndex.id = item.id;
                panelIndex.parentId = item.parentId;
                panelIndex.parentIndexPath = item.indexPath.parent;
                panelIndex.itemIndexPath = item.indexPath;
                _findSheetListItem();
                print(
                    'Updated index of text editor: $index');
                _reassignSheetListIndexPath(sheetList);     
              
            });
          },
        ),
            
      ]),
  //Clear Field
  MenuItem(
    label: 'Clear',
    icon: TablerIcons.square_rounded_x,
    onSelected: () async {
      await showAdaptiveDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title:
                Text('Confirm Clear'),
            content: Text(
                'This will clear the text from current Text Field. Are you sure?'),
            actions: [
              TextButton(
                  onPressed: () {
                    setState(() {
                      sheetText
                              .textEditorController
                              .document =
                          Document();
                    });
                    Navigator.pop(
                        context);
                  },
                  child: Text('Yes')),
              TextButton(
                  onPressed: () {
                    Navigator.pop(
                        context);
                  },
                  child: Text('No')),
            ],
          );
        },
      );
    },
  ),
  //Delete
  MenuItem(
    label: 'Delete',
    icon: TablerIcons.trash,
    onSelected: () async {
      await showAdaptiveDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text(
                'Confirm Delete'),
            content: const Text(
                'This will DELETE the current Text Field with its contents. Are you sure?'),
            actions: [
              TextButton(
                  onPressed: () {
                    setState(() {
                      sheetList
                          .removeAt(
                              index);
                      panelIndex.id =
                          '';
                      _reassignSheetListIndexPath(sheetList);    
                    });
                    Navigator.pop(
                        context);
                  },
                  child: const Text(
                      'Yes')),
              TextButton(
                  onPressed: () {
                    Navigator.pop(
                        context);
                  },
                  child:
                      const Text('No')),
            ],
          );
        },
      );
    },
  )
  ]);

  return entries;
  }

  void onRightClick(SheetText sheetText, LongPressDownDetails d, int index, SheetList sheetList) {
    setState(() {
  panelIndex.id = sheetText.id;
  panelIndex.parentId = sheetText.parentId;
  panelIndex.parentIndexPath = sheetText.indexPath.parent;
  panelIndex.itemIndexPath = sheetText.indexPath;
  });
  print('secondaryyyTapppppp');
  
  final entries = buildContextMenuEntries(
  sheetText.textEditorController, index, sheetText, sheetList);
  ContextMenu(
      entries: entries,
      boxDecoration: BoxDecoration(
          boxShadow: [
            BoxShadow(
              color: defaultPalette
                  .black
                  .withOpacity(0.3),
              blurRadius: 2,
            )
          ],
          color: defaultPalette.primary,
          borderRadius:
              BorderRadius.circular(
                  10)),
      position: Offset(
          d.globalPosition.dx,
          d.globalPosition.dy))
  .show(context);
  }

  Widget buildSheetTableWidget(SheetTable sheetTable){
    var tableHeight = 0.0;
    var tableWidth = 0.0;
    sheetTable.rowData.forEach((element) => tableHeight += element.size,);
    sheetTable.columnData.forEach((element) => tableWidth += element.size+16,);
    Widget alphabetHeader(String s, int ind){
      return MouseRegion(
      cursor: SystemMouseCursors.resizeColumn,
      child: GestureDetector(
        onHorizontalDragUpdate: (details) {
          // Accumulate deltas without setState
          // print(details.delta.dx);
          _showOverlayAt(details.globalPosition + Offset(5,0), 
          sheetTable.columnData[ind - 1].size.toStringAsFixed(0), numberToColumnLabel(ind ));
           final col = ind  - 1;
          setState(() {
            sheetTable.columnData[col].size = (sheetTable.columnData[col].size + details.delta.dx)
            .clamp(sheetTable.columnData[col].minSize, sheetTable.columnData[col].maxSize);
          });
          // print(sheetTable.columnData[col].size);
        },
        onHorizontalDragEnd: (_) {
         
          _hideOverlay();
        },
        child: Container(
          width: sheetTable.columnData[ind-1].size+14,
          height: 18,
          margin: const EdgeInsets.only(bottom:3, left:1,right:1),
          alignment: Alignment(0, 0),
          decoration: BoxDecoration(
            color: defaultPalette.primary,
            border: Border(
              top: BorderSide.none,
              left: BorderSide.none,
              bottom: BorderSide.none,
              right: BorderSide(color: defaultPalette.extras[0].withOpacity(0.2))
              ),
              // borderRadius: BorderRadius.circular(0).copyWith(topRight: Radius.circular(vicinity.column == (sheetTable as SheetTable).columnData.length-1?12:0))
          ),
          child: Text('${s}',
          style: GoogleFonts.lexend(
            letterSpacing: -1,
            fontSize: 12
          ),
          ),
        )));
      }

    Widget numberSideHeader(int ind){
      return Padding(
        padding: const EdgeInsets.only(right:2.0),
        child: MouseRegion(
            cursor: SystemMouseCursors.resizeRow,
            child: GestureDetector(
              onVerticalDragStart: (c) {
                
              },
              onVerticalDragUpdate: (details) {
                // Accumulate deltas without setState
                // _showOverlayAt(details.globalPosition + Offset(5,0), 
                // sheetTable.rowData[ind - 1].size.toStringAsFixed(0),  ind.toString());
                final row = ind - 1;
                 _showOverlayAt(details.globalPosition + Offset(5,0), 
                  sheetTable.rowData[ind - 1].size.toStringAsFixed(0), ind.toString() );
                setState(() {
                  sheetTable.rowData[row].size = (sheetTable.rowData[row].size + details.delta.dy)
                  .clamp(sheetTable.rowData[row].minSize, sheetTable.rowData[row].maxSize);
                });
              },
              onVerticalDragEnd: (_) {
                
                _hideOverlay();
              },
              child: Container(
              height:  sheetTable.rowData[ind - 1].size,
              width:15,
              margin: const EdgeInsets.symmetric(vertical: 1),
              alignment: Alignment(0, 0),
              decoration: BoxDecoration(
                color: defaultPalette.primary,
                border: Border(
                  top: BorderSide.none,
                  left: BorderSide.none,
                  bottom: BorderSide(color: defaultPalette.extras[0].withOpacity(0.4)),
                  right: BorderSide.none),
              ),
              child: Text('${ind}',
              style: GoogleFonts.lexend(
                letterSpacing: -1,
                fontSize: 13
              ),
              ),
            ),
          ),
        ),
      );
    }

      //return to builTableWidget
      return GestureDetector(
        onTap: () {
        _findSheetTableItem(sheetTable);
        },
        child: Container(
          margin: const EdgeInsets.all(4).copyWith(right:4),
          height:tableHeight+18+30,
          width:tableWidth,
          decoration:BoxDecoration(
            color:defaultPalette.primary,
            borderRadius: BorderRadius.circular(10),
            border: Border.fromBorderSide(
                panelIndex.parentId == sheetTable.id ?
                BorderSide(
                strokeAlign:
                    BorderSide.strokeAlignOutside,
                width: 2,
                color:defaultPalette.extras[3],): BorderSide.none
              ),
            ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Stack(
              children: [
                // the grey bg for table cells
                Container(
                  margin: EdgeInsets.only(top:19, left:15, bottom: 5,right: 6),
                  decoration: BoxDecoration(
                  color:defaultPalette.secondary,
                  borderRadius: BorderRadius.circular(3)
                ),
                ),
                // the Table
                Row(
                  children: [
                    // 1,2,3,4 numbers side
                    Column(
                      children:[ 
                        Container(
                          height:22.5,
                          alignment: Alignment(0, 0),
                          decoration: BoxDecoration(
                            color: defaultPalette.primary,
                            border: Border(
                              top: BorderSide.none,
                              left: BorderSide.none,
                              bottom: BorderSide(color: defaultPalette.extras[0].withOpacity(0.4)),
                              right: BorderSide.none),
                          ),
                        ),
                        ...sheetTable.rowData.asMap().entries.map((rowEntry){
                        return numberSideHeader(rowEntry.key+1);
                      }).toList()
                      ],
                    ),
                    // ABCD and Cells
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(right: 8),
                        child: ScrollConfiguration(
                          behavior: ScrollBehavior()
                              .copyWith(scrollbars: false),
                          child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return ScrollbarUltima(
                                  alwaysShowThumb: true,
                                  controller: controller,
                                  scrollbarPosition:
                                      ScrollbarPosition.bottom,
                                  backgroundColor: defaultPalette.primary,
                                  isDraggable: true,
                                  maxDynamicThumbLength: 90,
                                  thumbBuilder:
                                      (context, animation, widgetStates) {
                                    return Container(
                                      margin: EdgeInsets.only(bottom: 7.5),
                                      decoration: BoxDecoration(
                                          // border: Border.all(
                                          //   color:defaultPalette.extras[0].withOpacity(0.4)
                                          // ),
                                          color: defaultPalette.primary,
                                          borderRadius:
                                              BorderRadius.circular(2)),
                                      height: 6,
                                    );
                                  },
                                  child: SingleChildScrollView(
                                  padding: EdgeInsets.only(bottom: 4),
                                  controller: controller,
                                  physics: physics,
                                  scrollDirection:Axis.horizontal,
                                  child: SizedBox(
                                    width: tableWidth+1,
                                    child: Column(
                                      children:[
                                        //A B C D Headers
                                        Row(
                                        children: [
                                          SizedBox(width:1),
                                          ...sheetTable.columnData.asMap().entries.map((colEntry){
                                          return alphabetHeader(numberToColumnLabel(colEntry.key+1), colEntry.key+1);
                                        }).toList()],
                                        ),
                                        Expanded(
                                          child: CustomMultiChildLayout(
                                            delegate: SheetLayoutDelegate(
                                              cells: sheetTable.cellData,
                                              columnData: sheetTable.columnData,
                                              rowData: sheetTable.rowData,
                                            ),
                                            children:[
                                            for (var rowEntry in sheetTable.cellData)
                                              for (var cell in rowEntry)
                                                if (cell.isVisible)
                                                  LayoutId(
                                                    id: cell.id, // like "A1", "B3"
                                                    child: GestureDetector(
                                                      onTap: () {
                                                        var (row, col) = parseCellId(cell.id);
                                                        setState(() {
                                                          item = cell.sheetItem as SheetText;
                                                          panelIndex.id = cell.sheetItem.id;
                                                          panelIndex.parentId = cell.sheetItem.parentId;
                                                          panelIndex.parentIndexPath = sheetTable.indexPath;
                                                          panelIndex.itemIndexPath = cell.sheetItem.indexPath;
                                                          sheetTableItem = sheetTable;
                                                          _findSheetTableItem(sheetTable);
                                                          sheetTableVariables.rowLayerIndex = row;
                                                          sheetTableVariables.columnLayerIndex = col;
                                                          whichTablePropertyTabIsClicked = 1;
                                                        });
                                                      },
                                                      child: Container(
                                                        decoration: BoxDecoration(
                                                          color: defaultPalette.primary,
                                                          borderRadius: BorderRadius.circular(2),
                                                        ),
                                                        margin: const EdgeInsets.all(1),
                                                        child: buildSheetTableTextWidget(cell.sheetItem as SheetText),
                                                      ),
                                                    ),
                                                  )
                                          ],
                                          ),
                                        ),

                                        
                                      ]
                                      
                                    ),
                                  )
                                ),
                              );
                            }
                          ),
                        ),
                      ),
                    )
                  
                  ],
                ),
              
              ],
            ),
          ),
        ),
      );
  }

  Widget buildSheetTableTextWidget(SheetText sheetText) {
    return Container(
    decoration: BoxDecoration(
      color: defaultPalette.primary,
      border: Border.fromBorderSide(
            panelIndex.id ==
                    sheetText.id
                ?
            BorderSide(
            strokeAlign:
                BorderSide.strokeAlignInside,
            width:  2,
            color:defaultPalette.tertiary,): BorderSide.none,),
      borderRadius:
          BorderRadius.circular(0),
    ),
    child: Row(
      children: [
        const Icon(
          TablerIcons.cursor_text,
          size: 14,
        ),
        Expanded(
          child: QuillEditor(
            configurations: sheetText
                .textEditorConfigurations,
            focusNode:
                sheetText.focusNode,
            scrollController:
                ScrollController(),
          ),
        ),
      ],
    ),
  );
                                       
  }

  double findSheetListBuildHeight(SheetList sheetList) {
    double calculateItemHeight(dynamic item) {
      double calculatedHeight = 0;

      // Handling SheetText
      if (item is SheetText) {
        String content = item.textEditorController.document.toPlainText();
        double maxFontSize = getMaxFontSize(item.textEditorController);

        if (content.trim().isEmpty) {
          calculatedHeight = 58; // Default height for empty text content
        } else {
          int newlineCount = '\n'.allMatches(content).length;
          calculatedHeight = (newlineCount.toDouble() * (maxFontSize * 1.2)) +
              (maxFontSize * 1.5); // Adjusted height based on font size
        }
      }
      // Handling nested SheetLists
      else if (item is SheetList) {
        calculatedHeight = findSheetListBuildHeight(item);
      }

      else if (item is SheetTable) {
        var tableHeight = 0.0;
        item.rowData.forEach((element) => tableHeight += element.size,);
        calculatedHeight = tableHeight
      +18 //height of A B C row
      +20;
      }


      return calculatedHeight;
    }

    double height = 0;

    // If direction is vertical, accumulate heights
    if (sheetList.direction == Axis.vertical) {
      for (int i = 0; i < sheetList.length; i++) {
        height += calculateItemHeight(sheetList[i]);
      }
    }
    // If direction is horizontal, return the max height
    else {
      for (int i = 0; i < sheetList.length; i++) {
        double itemHeight = calculateItemHeight(sheetList[i]);
        if (itemHeight > height) {
          height = itemHeight;
        }
      }
    }

    return height + 25;
  }

  double findSheetListBuildWidth(SheetList sheetList) {
    double width = 0;

    Map<String, double> charWidthMap = {
      '.': 5.0,
      ',': 5.0,
      ';': 5.0,
      ':': 5.0,
      '!': 5.0,
      '?': 7.0,
      'a': 11,
      'b': 8.5,
      'c': 7.5,
      'd': 8.5,
      'e': 8.0,
      'f': 11,
      'g': 9,
      'h': 8.5,
      'i': 7.0,
      'j': 11,
      'k': 9,
      'l': 7.5,
      'm': 11.0,
      'n': 11,
      'o': 11,
      'p': 8.5,
      'q': 8.5,
      'r': 8.5,
      's': 8.0,
      't': 11,
      'u': 8.5,
      'v': 8.5,
      'w': 15.0,
      'x': 9.0,
      'y': 9.0,
      'z': 8.0,
      ' ': 9.0,
      '@': 12.0,
      '#': 10.0,
      '\$': 10.0,

    };

    const double fallbackWidth = 11.0;

    double calculateLineWidth(String line, double fontSize) {
      return line.runes.fold(0.0, (sum, ch) {
        String char = String.fromCharCode(ch);
        return sum + ((charWidthMap[char] ?? fallbackWidth) * (fontSize / 14));
      });
    }

    if (sheetList.direction == Axis.horizontal) {
      for (int i = 0; i < sheetList.length; i++) {
        if (sheetList[i] is SheetText) {
          SheetText textEditor = sheetList[i] as SheetText;
          double maxFontSize = getMaxFontSize(textEditor.textEditorController);

          String content =
              textEditor.textEditorController.document.toPlainText();
          if (content.trim().isEmpty) {
            width += 180;
          } else {
            double maxLineWidth = content
                .split('\n')
                .map((line) => calculateLineWidth(line, maxFontSize))
                .reduce((a, b) => a > b ? a : b);
            width += maxLineWidth + 20;
          }
        } else if (sheetList[i] is SheetList) {
          SheetList nestedSheetList = sheetList[i] as SheetList;
          double nestedWidth = findSheetListBuildWidth(nestedSheetList);
          width += nestedWidth + 20;
        } else if (sheetList[i] is SheetTable) {
          var tableHeight = 0.0;
          var tableWidth = 0.0;
          (sheetList[i] as SheetTable).rowData.forEach((element) => tableHeight += element.size,);
          (sheetList[i] as SheetTable).columnData.forEach((element) => tableWidth += element.size,);
          width += tableWidth;
        }
      }
    } else {
      for (int i = 0; i < sheetList.length; i++) {
        if (sheetList[i] is SheetText) {
          SheetText textEditor = sheetList[i] as SheetText;
          double maxFontSize = getMaxFontSize(textEditor.textEditorController);

          String content =
              textEditor.textEditorController.document.toPlainText();
          if (content.trim().isEmpty) {
            width = width > 180 ? width : 180;
          } else {
            double maxLineWidth = content
                    .split('\n')
                    .map((line) => calculateLineWidth(line, maxFontSize))
                    .reduce((a, b) => a > b ? a : b) +
                30;
            width = width > maxLineWidth + 60 ? width : maxLineWidth + 60;
          }
        } else if (sheetList[i] is SheetList) {
          SheetList nestedSheetList = sheetList[i] as SheetList;
          double nestedWidth = findSheetListBuildWidth(nestedSheetList);
          width = width > nestedWidth + 20 ? width : nestedWidth + 20;
        }
      }
    }

    return width + 20;
  }

  /// Function to extract the maximum font size from a text editor's document
  double getMaxFontSize(QuillController controller) {
    double maxFontSize = 20.0; // Default font size

    // Iterate through each operation in the document's delta
    for (var operation in controller.document.toDelta().operations) {
      if (operation.attributes != null &&
          operation.attributes!.containsKey('size')) {
        final String fontSizeString = operation.attributes?['size'];
        final double fontSize = double.tryParse(fontSizeString) ?? 20.0;
        if (fontSize > maxFontSize) {
          maxFontSize = fontSize;
        }
      }
    }

    return maxFontSize;
  }

  void saveLayout() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();
    saveDecorations(sheetDecorationList);
  }

  void saveDecorations(List<SheetDecoration> sheetDecorationList) {
    final decorationBox = Boxes.getDecorations();

    for (var decoration in sheetDecorationList) {
      if (decoration is SuperDecoration) {
        decorationBox.put(decoration.id, decoration.toSuperDecorationBox());
        // print('Saved SuperDecoration with ID: ${decoration.id}');
      } else {
        decorationBox.put(decoration.id, (decoration as ItemDecoration).toItemDecorationBox());
        // print('Saved ItemDecoration with ID: ${decoration.id}');
      }
    }
  }

  bool textFieldTapDown(TapDownDetails details, String newId, IndexPath indexPath) {
    
    setState(() {
      var textItem = getItemAtPath(indexPath) as SheetText;
      panelIndex.id = textItem.id;
      panelIndex.parentId = textItem.parentId;
      panelIndex.parentIndexPath = textItem.indexPath.parent;
      panelIndex.itemIndexPath = textItem.indexPath;
      if (panelIndex.parentId.startsWith("LI")) {
        _findSheetListItem();
      }
      if (panelIndex.parentId.startsWith("TB")) {
        _findSheetTableItem(null);
      }
      var tmpinx = int.tryParse(textItem.textDecoration.id.substring(textItem.textDecoration.id.indexOf('/') + 1))??-155;
      // print((sheetDecorationList[tmpinx] as SuperDecoration).itemDecorationList);
      decorationIndex =-1;
      updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
      // print(sheetDecorationVariables.length);
      whichPropertyTabIsClicked = 2;
      // propertyTabController.jumpToPage(1);
    });

    // print('clicked');
    // print(panelIndex);
    // print(panelIndex.parentId);
    return false;
  }

  double _getPropertiesButtonWidth(String s) {
    var widthWeHave = (sWidth * (wH2DividerPosition));
    switch (s) {
      case 'page':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave - 4;
          }
          return widthWeHave * (1 / 3);
        }
        return widthWeHave * (1 / 5);
        break;
      case 'text-field':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3);
        }
        return widthWeHave * (2 / 5) + 2;
      case 'sheet-list':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3) + 2;
        }
        return widthWeHave * (2 / 5) + 3;

      default:
    }
    return 1 / 5;
  }

  PieAction getPieAction(String s) {
    return PieAction(
      tooltip: Text(s),
      onSelect: () {
        setState(() {
          documentPropertiesList[currentPageIndex].pageFormatController =
              getPageFormatFromString(s);
        });
        Future.delayed(Durations.short2).then((o) {
          _renderPagePreviewOnProperties();
        });
      },
      child: Text(
        getPageFormatString(getPageFormatFromString(s)),
        style: GoogleFonts.bungee(color: defaultPalette.primary),
      ),
    );
  }

  PieAction getPieActionForAddMove(String s, bool m) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              m ? 'A Page To The' : 'Move Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          m
              ? s == 'LEFT'
                  ? _addPdfPageAtIndex(
                      currentPageIndex,
                    )
                  : _addPdfPageAtIndex(
                      currentPageIndex+1,
                    )
              : s == 'LEFT'
                  ? _movePage(currentPageIndex, currentPageIndex - 1)
                  : _movePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              m ? 'Add' : 'Move',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              m
                  ? s == 'LEFT'
                      ? 'Before'
                      : 'After'
                  : s == 'LEFT'
                      ? 'Above'
                      : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }

  PieAction getPieActionForDuplicate(String s) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              'Duplicate Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          s == 'LEFT'
              ? _duplicatePage(currentPageIndex, currentPageIndex)
              : _duplicatePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Copy',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              s == 'LEFT' ? 'Above' : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }

  PieAction getPieActionForListAxis(int s, {bool cross = false}) {
    return PieAction(
        tooltip: Text(
          !cross
              ? MainAxisAlignment.values[s].name
              : CrossAxisAlignment.values[s].name,
          style: GoogleFonts.bungee(
            fontSize: 10,
          ),
        ), // Icon inside TextButton

        child: Text(
          !cross
              ? MainAxisAlignment.values[s].name
              : CrossAxisAlignment.values[s].name,
          style:
              GoogleFonts.bungee(fontSize: 10, color: defaultPalette.primary),
        ),
        onSelect: () {
          setState(() {
            if (!cross) {
              sheetListItem.mainAxisAlignment = MainAxisAlignment.values[s];
              print('Axis change clicked to: ${MainAxisAlignment.values[s]}');
            } else {
              sheetListItem.crossAxisAlignment = CrossAxisAlignment.values[s];
            }
          });
        });
  }

  MaterialAccentColor createSwatch(Color color, int numberOfShades) {
    final Map<int, Color> swatch = <int, Color>{};

    // Convert the input color to HSL for manipulation
    final HSLColor baseHsl = HSLColor.fromColor(color);

    // Define the minimum and maximum lightness values for better variety
    final double minLightness = 0.0; // Start darker than the color
    final double maxLightness = 1.0; // Lightness up to the very lightest shade

    // Calculate the step difference for both darker and lighter shades
    final double lightnessStep =
        (maxLightness - minLightness) / (numberOfShades - 1);

    // Create a range of shades dynamically, starting darker to the color and going lighter
    for (int i = 0; i < numberOfShades; i++) {
      final double adjustedLightness = minLightness + (i * lightnessStep);

      // Check for a unique key and lightness
      final colorShade = HSLColor.fromAHSL(
              baseHsl.alpha, baseHsl.hue, baseHsl.saturation, adjustedLightness)
          .toColor();

      // To prevent duplicate colors, we check if this exact color already exists
      if (!swatch.containsValue(colorShade)) {
        swatch[100 * (i + 1)] = colorShade;
      }
    }

    // Ensure the base color is always in the center at key 500
    swatch[500] = color;

    return MaterialAccentColor(color.value, swatch);
  }

  _getProperTiesCards() {
    switch (whichPropertyTabIsClicked) {
      case 2:
        // The actual cards for text properties font, format and color
        return FadeInUp(
          onFinish: (direction) {
            setState(() {
              textPropertyCardsController
                  .setCardIndex(whichTextPropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
              backgroundCardCount: 1,
              backgroundCardOffset: Offset(4, 4),
              duration: Duration(milliseconds: 150),
              backgroundCardScale: 1,
              loop: true,
              cardCount: 3,
              allowUnSwipe: true,
              allowUnlimitedUnSwipe: true,
              initialIndex: whichTextPropertyTabIsClicked,
              controller: textPropertyCardsController,
              onCardPositionChanged: (position) {
                setState(() {
                  _cardPosition =
                      position.offset.dx.abs() + position.offset.dy.abs();
                  // print(_cardPosition);
                });
              },
              onSwipeEnd: (a, b, direction) {
                // print(direction.toString());
                setState(() {
                  // if (_cardPosition > 50) {
                  //   currentPageIndex = (currentPageIndex + 1) % pageCount;
                  //   _renderPagePreviewOnProperties();
                  // }
                  whichTextPropertyTabIsClicked = b;
                  _cardPosition = 0;
                });
              },
              onSwipeCancelled: (activity) {
                setState(() {
                  // currentPageIndex =
                  //     (currentPageIndex - 1) % pageCount;
                });
              },
              cardBuilder: (BuildContext context, int index) {
                int currentCardIndex = whichTextPropertyTabIsClicked;

                List<TextEditingController> fontTextControllers = [
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes['size']?.value.toString().replaceAll(RegExp(r'.0$'), '') ?? '0')}',
                  TextEditingController()
                      ..text =
                          '${(item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value.toString().replaceAll(RegExp(r'.0$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value.toString().replaceAll(RegExp(r'.0$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${(item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value.toString().replaceAll(RegExp(r'.0$'), '') ?? '0')}',
                  TextEditingController()
                  ..text =
                      '${item.name}',
                
                 ];
                
                bool getIsToggled( Map<String, Attribute> attrs, Attribute attribute) {
                  if (attribute.key == Attribute.list.key ||
                      attribute.key == Attribute.header.key ||
                      attribute.key == Attribute.script.key ||
                      attribute.key == Attribute.align.key) {
                    final currentAttribute = attrs[attribute.key];
                    if (currentAttribute == null) {
                      // print('returning false');
                      return false;
                    }
                    // print(
                    // 'returning ${currentAttribute.value == attribute.value}');
                    return currentAttribute.value == attribute.value;
                  }
                  // print('returning ${attrs.containsKey(attribute.key)}');
                  return attrs.containsKey(attribute.key);
                }

                Widget buildElevatedLayerButton( { 
                  double buttonHeight = 30,double buttonWidth = 50,
                  Duration animationDuration = Durations.short2,
                  Curve animationCurve = Curves.ease,
                  required void Function() onClick,
                  BoxDecoration? baseDecoration,
                  BoxDecoration? topDecoration,
                  required Widget topLayerChild,
                  BorderRadius? borderRadius,
                  bool toggleOnTap = false,
                  bool isTapped = false,
                  double subfac = 5,
                  double elevation = 3}) {
                  borderRadius= borderRadius ?? BorderRadius.circular(10);
                  topDecoration = topDecoration ?? BoxDecoration(
                    color: defaultPalette.primary,
                    border: Border.all(
                        width:1.3, color:defaultPalette.extras[0]
                    ),
                  );
                  baseDecoration = baseDecoration ?? BoxDecoration(
                    color: Colors.green,
                    border: Border.all(width:1.3, color:defaultPalette.extras[0]),
                  );
                  var down = isTapped;
                  void _handleTapDown(TapDownDetails details) {
                    onClick();

                    setState(() {
                      down = true;
                      print(down);
                    });
                  }

                  void _handleTapUp(TapUpDetails details) {
                    if (!toggleOnTap && down) {
                      setState(() {
                        down = !down;
                      });
                    }
                  }

                  void _handleTapCancel() {}

                  return GestureDetector(
                    onTap: () {},
                    onTapDown: _handleTapDown,
                    onTapUp: _handleTapUp,
                    onTapCancel: _handleTapCancel,
                    child: SizedBox(
                      height: buttonHeight,
                      width: buttonWidth,
                      child: Stack(
                        alignment: Alignment.bottomRight,
                        children: [
                          Positioned(
                            bottom: 0,
                            right: 0,
                            child: Container(
                              width: buttonWidth - subfac,
                              height: buttonHeight - subfac,
                              decoration: baseDecoration!.copyWith(
                                borderRadius: borderRadius,
                              ),
                            ),
                          ),
                          AnimatedPositioned(
                            duration: animationDuration,
                            curve: animationCurve,
                            bottom: !down ? elevation : 0,
                            right: !down ? elevation : 0,
                            child: Container(
                              width: buttonWidth - subfac,
                              height: buttonHeight - subfac,
                              alignment: Alignment.center,
                              decoration: topDecoration!.copyWith(
                                borderRadius: borderRadius,
                              ),
                              child: topLayerChild,
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                }

                Widget titleTile(String name, IconData icon, {double fontSize = 18,}) {
                  return Row(children: [
                    Icon(icon, size: 20),
                    Expanded(
                      child: Text(
                        name,
                        maxLines: 1,
                        style: GoogleFonts.lexend(
                            fontSize: fontSize,
                            letterSpacing: -1,
                            fontWeight: FontWeight.w500),
                      ),
                    )
                  ]);
                }

                List<Widget> fontPropertyTile(int s) {
                return [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                         fontFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? 10
                            : HardwareKeyboard.instance.isShiftPressed
                                ? 0.1
                                : 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(fontTextControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                                s==0
                                ? 0
                                : double.negativeInfinity
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(4));
                          switch (s) {
                            case 0:
                               item.textEditorController
                                .formatSelection(
                              Attribute.clone(
                                  Attribute.size,
                                  parsedValue.toString()),
                              );
                              break;
                            case 1:
                              item.textEditorController
                                  .formatSelection(
                                LetterSpacingAttribute(
                                    (parsedValue).toString()),
                              );
                              break;
                            case 2:
                              item.textEditorController
                                  .formatSelection(
                                WordSpacingAttribute(
                                    (parsedValue).toString()),
                              );
                              break;
                            case 3:
                              item.textEditorController
                                  .formatSelection(
                                LineHeightAttribute(
                                    (parsedValue).toString()),
                              );
                              break;    
                            default:
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            s == 0 
                            ? TablerIcons.text_size 
                            : s==1
                            ? TablerIcons.letter_spacing
                            : s==2
                            ? TablerIcons.spacing_horizontal
                            : TablerIcons.spacing_vertical,
                            size: 16,
                          ),
                          Text(
                            s == 0 
                            ? ' size ' 
                            : s==1
                            ? ' letter '
                            : s==2
                            ? ' word '
                            : ' line ',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        onTapOutside: (event) => fontFocusNodes[s].unfocus(),
                        focusNode: fontFocusNodes[s],
                        controller: fontTextControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            
                          switch (s) {
                            case 0:
                               item.textEditorController
                                .formatSelection(
                              Attribute.clone(
                                  Attribute.size,
                                  value.toString()),
                              );
                              break;
                            case 1:
                              item.textEditorController
                                  .formatSelection(
                                LetterSpacingAttribute(
                                    (value).toString()),
                              );
                              break;
                            case 2:
                              item.textEditorController
                                  .formatSelection(
                                WordSpacingAttribute(
                                    (value).toString()),
                              );
                              break;
                            case 3:
                              item.textEditorController
                                  .formatSelection(
                                LineHeightAttribute(
                                    (value).toString()),
                              );
                              break;    
                            default:
                          }
                            

                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ];
                }


                var width = (sWidth * wH2DividerPosition - 30);
                TextEditingController hexController = TextEditingController()..text =
                      '${item.textEditorController.getSelectionStyle().attributes['color']?.value ?? '#00000000'}';
                
                int crossAxisCount = 4;
                var iconWidth = (width / crossAxisCount)-4.6;
                var fCrossAxisCount = width < 200
                    ? 1
                    : width > 300
                      ? width > 420
                        ? 4
                        : 3
                      : 2;
                Color fontHex =hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value ?? defaultPalette.extras[0].hex);
                return Stack(
                  children: [
                    //The main bgCOLOR OF THE CARD
                    Positioned.fill(
                      child: AnimatedContainer(
                        duration: Durations.short3,
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color:index==2? defaultPalette.primary: defaultPalette.secondary,
                          border: Border.all(width: 2),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                    //OPACITY OF BGCOLOR OF THE CARD
                    Positioned.fill(
                      child: AnimatedOpacity(
                        opacity: currentCardIndex == index
                            ? 0
                            // : index >= (currentCardIndex + 2) % 10
                            //     ? 1
                            : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                        duration: Duration(milliseconds: 300),
                        child: AnimatedContainer(
                          duration: Duration(milliseconds: 300),
                          margin:
                              EdgeInsets.all(10).copyWith(left: 5, right: 10),
                          alignment: Alignment.center,
                          decoration: BoxDecoration(
                            color: index == (currentCardIndex + 1) % 10
                                ? defaultPalette.extras[0]
                                : index == (currentCardIndex + 2) % 10
                                    ? defaultPalette.extras[0]
                                    : defaultPalette.extras[0],
                            border: Border.all(width: 2),
                            borderRadius: BorderRadius.circular(25),
                          ),
                        ),
                      ),
                    ),
                     
                    if (index == 0) ...[
                      //GRAPH BEHIND FORMAT CARD
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(25),
                          child: Opacity(
                            opacity: 0.35,
                            child: LineChart(LineChartData(
                              lineBarsData: [LineChartBarData()],
                              titlesData: const FlTitlesData(show: false),
                              gridData: FlGridData(
                                getDrawingVerticalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0]
                                      .withOpacity(0.8),
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                getDrawingHorizontalLine: (value) => FlLine(
                                  color: defaultPalette.extras[0]
                                      .withOpacity(0.8),
                                  dashArray: [5, 5],
                                  strokeWidth: 1),
                                show: true,
                                horizontalInterval: 4,
                                verticalInterval: 40),
                              borderData: FlBorderData(show: false),
                              minY: 0,
                              maxY: 50,
                              maxX: dateTimeNow.millisecondsSinceEpoch
                                          .ceilToDouble() /
                                      500 +
                                  250,
                              minX: dateTimeNow.millisecondsSinceEpoch
                                      .ceilToDouble() /
                                  500)),
                          ),
                        ),
                      ),
                      //FORMATTING and font size space ALL THAT //Desktop WEB
                      Positioned(
                        child: Container(
                          height: sHeight * 0.9,
                          decoration: BoxDecoration(
                          ),
                          margin: EdgeInsets.only(
                              top: 15,
                              bottom: index == whichTextPropertyTabIsClicked? 15: 18,
                              left: 10,
                              right: 13),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(20),
                            child: ScrollConfiguration(
                              behavior: ScrollBehavior().copyWith(scrollbars: false),
                              child: DynMouseScroll(
                                durationMS: 500,
                                scrollSpeed: 1,
                                builder: (context, controller, physics) {
                                  return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                  crossAxisAlignment:CrossAxisAlignment.start,
                                  children: [
                                  //Id and Selected TEXT
                                  Container(
                                  margin: EdgeInsets.only(top:2, left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child: Column(
                                    children: [
                                  titleTile('textProperties', TablerIcons.cursor_text),  
                                  const SizedBox(
                                        height:3
                                      ),
                                  Row(
                                    children: [
                                      const SizedBox(
                                        width:4
                                      ),
                                      Expanded(
                                        child: Text('id: ${item.id}',
                                          textAlign: TextAlign.start,
                                          maxLines:1,
                                          style: TextStyle(
                                            height: 1,
                                            fontFamily: GoogleFonts.lexend().fontFamily,
                                            letterSpacing:-0.5,
                                            overflow: TextOverflow.ellipsis,
                                            fontWeight: FontWeight.w400,        
                                            color: defaultPalette.extras[0],
                                            fontSize: 8)),
                                      ),
                                    ],
                                  ),  
                                  const SizedBox(
                                        height:4
                                      ),
                                  //Selected Text
                                  Container(
                                    width: width,
                                    padding: EdgeInsets.all(4).copyWith(left:8),
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                      color: defaultPalette.secondary,
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all(
                                        width: 2,
                                        color: defaultPalette.extras[0])
                                    ),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        Text(item.textEditorController.getPlainText(),
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                            fontFamily: GoogleFonts.leagueSpartan().fontFamily,
                                            letterSpacing:-0.5,
                                            fontWeight: FontWeight.w800,        
                                            color: defaultPalette.extras[0],
                                            fontSize: 15)),
                                          ],
                                        ),
                                      ),
                                  //'label'
                                  Row(
                                    children: [
                                      Expanded(child: titleTile('label', TablerIcons.signature, fontSize:15)),
                                      Expanded(
                                        child: SizedBox(
                                          height: 20,
                                          child: TextField(
                                            focusNode: fontFocusNodes[6],
                                            controller: fontTextControllers[4],
                                            enabled: !item.parentId.startsWith('TB'),
                                            onSubmitted: (value) {
                                              setState(() {
                                                item.name = value;
                                              });
                                            },
                                            textAlignVertical: TextAlignVertical.top,
                                            textAlign: TextAlign.end,
                                            cursorColor: defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              contentPadding: const EdgeInsets.only(left: 2),
                                              labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                              hoverColor: defaultPalette.transparent,
                                              filled: true,
                                              fillColor: defaultPalette.transparent,
                                              border: InputBorder.none,
                                              enabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              disabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              focusedBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                borderRadius: BorderRadius.circular(12),
                                              ),
                                            ),
                                            style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                          ),
                                        ),
                                      ),
                                      const SizedBox(width:2)  
                                    ],
                                  ), 
                                  
                                  const SizedBox(
                                        height:4
                                      ),
                                  //'hide'
                                  Container(
                                    margin: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10), 
                                    color:defaultPalette.secondary,
                                    border: Border.all(
                                      width:0.2
                                    ),),
                                    child: AnimatedToggleSwitch<bool>.dual(
                                      current: item.hide,
                                      first: false,
                                      second: true,
                                      onChanged: (value) {
                                        setState(() {
                                          item.hide = value;    
                                        });
                                      },
                                      animationCurve: Curves.easeInOutExpo,
                                      animationDuration: Durations.medium4,
                                      borderWidth:
                                          2, // backgroundColor is set independently of the current selection
                                      styleBuilder: (value) => ToggleStyle(
                                          borderRadius: BorderRadius.circular(10),
                                          indicatorBorderRadius: BorderRadius.circular(15),
                                          borderColor: defaultPalette.secondary,
                                          backgroundColor: defaultPalette.secondary,
                                          indicatorBorder:
                                              Border.all(
                                                width: 1.2,
                                                color: defaultPalette.extras[0]),
                                          indicatorColor: defaultPalette
                                              .primary), // indicatorColor changes and animates its value with the selection
                                      iconBuilder: (value) {
                                        return Icon(
                                            value == false
                                                ? Icons.remove_red_eye_outlined
                                                : TablerIcons.eye_closed,
                                            size: 18,
                                            color: defaultPalette.extras[0]);
                                      },
                                      textBuilder: (value) {
                                        return Text(
                                          value == false ? 'visible' : 'hidden',
                                          style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                        );
                                      },
                                      height: 23,
                                      spacing: (width) - 100,
                                    ),
                                  ),
                                  
                                  ],
                                  ),
                                  ),
                                  const SizedBox(
                                      height:5
                                    ),
                                  
                                  //Formating buttons 
                                  Container(
                                  margin: EdgeInsets.only(top:2, left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child: Column(
                                    children: [
                                  //FORMAT Title
                                  Container(
                                        width: width,
                                        padding: EdgeInsets.all(6).copyWith(left:8),
                                        margin: EdgeInsets.all(2),
                                        decoration: BoxDecoration(
                                          color: defaultPalette.secondary,
                                          borderRadius: BorderRadius.circular(15),
                                          border: Border.all(
                                            width: 2,
                                            color: defaultPalette.extras[0])
                                        ),
                                        child: Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            Text('FOR \nMAT ',
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                    height: 1,
                                                    fontFamily:
                                                        GoogleFonts.lexend()
                                                            .fontFamily,
                                                    letterSpacing:-1,
                                                    fontWeight: FontWeight.w800,        
                                                    color: defaultPalette
                                                        .extras[0],
                                                    fontSize: 10)),
                                            Text('BO \nLD ',
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                    height: 1,
                                                    fontFamily:
                                                        GoogleFonts.bungee()
                                                            .fontFamily,
                                                    color: defaultPalette
                                                        .extras[0],
                                                    fontSize: 10)),
                                            Text('ITA \nLIC ',
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                    height: 1,
                                                    fontStyle: FontStyle.italic,
                                                    fontFamily:
                                                        GoogleFonts.lexend()
                                                            .fontFamily,
                                                    color: defaultPalette
                                                        .extras[0],
                                                    fontSize: 10)), 
                                            Text('UNDER \nLINE ',
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                    height: 1,
                                                    decoration: TextDecoration.underline,
                                                    letterSpacing:-1,
                                                    fontFamily:
                                                        GoogleFonts.lexend()
                                                            .fontFamily,
                                                    fontWeight: FontWeight.w900,         
                                                    color: defaultPalette
                                                        .extras[0],
                                                    fontSize: 10)),                       
                                          ],
                                        ),
                                      ),
                                  SizedBox(
                                    height:8
                                  ),
                                  //BOLD ITALICS UNDERLINE STRIKE
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                    //Bold
                                    buildElevatedLayerButton(
                                        buttonHeight:40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.bold),
                                        onClick: () {
                                          final currentValue = item
                                              .textEditorController
                                              .getSelectionStyle()
                                              .attributes
                                              .containsKey(
                                                  Attribute.bold
                                                      .key);
                                          item.textEditorController
                                              .formatSelection(
                                            currentValue
                                                ? Attribute.clone(
                                                    Attribute
                                                        .bold,
                                                    null)
                                                : Attribute
                                                    .bold,
                                          );
                                        },
                                        topLayerChild: const Icon(
                                          TablerIcons.bold,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),
                                    //Italics
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.italic),
                                      onClick: () {
                                        final currentValue = item
                                            .textEditorController
                                            .getSelectionStyle()
                                            .attributes
                                            .containsKey(
                                                Attribute
                                                    .italic
                                                    .key);
                                        item.textEditorController
                                            .formatSelection(
                                          currentValue
                                              ? Attribute.clone(
                                                  Attribute
                                                      .italic,
                                                  null)
                                              : Attribute
                                                  .italic,
                                        );
                                      },
                                      topLayerChild: const Icon(
                                        TablerIcons.italic,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //Underline
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                                item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes,
                                                Attribute
                                                    .underline),
                                      onClick:  () {
                                              final currentValue = item
                                                  .textEditorController
                                                  .getSelectionStyle()
                                                  .attributes
                                                  .containsKey(
                                                      Attribute
                                                          .underline
                                                          .key);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .underline,
                                                        null)
                                                    : Attribute
                                                        .underline,
                                              );
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.underline,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //StrikeThrough
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.strikeThrough),
                                      onClick: () {
                                              final currentValue = item
                                                  .textEditorController
                                                  .getSelectionStyle()
                                                  .attributes
                                                  .containsKey(Attribute
                                                      .strikeThrough
                                                      .key);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .strikeThrough,
                                                        null)
                                                    : Attribute
                                                        .strikeThrough,
                                              );
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.strikethrough,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    SizedBox(width:2)
                                    ],
                                  ),
                                  //ALIGN LEFT RIGHT CENTER JUSTIFY
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                    //LeftAlignment
                                    buildElevatedLayerButton(
                                        buttonHeight:40,
                                        buttonWidth: iconWidth,
                                        toggleOnTap: true,
                                        isTapped: getIsToggled(
                                            item.textEditorController
                                                .getSelectionStyle()
                                                .attributes,
                                            Attribute.leftAlignment),
                                        onClick:  () {
                                              var currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .leftAlignment);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .leftAlignment,
                                                        null)
                                                    : Attribute
                                                        .leftAlignment,
                                              );
                                              final uncurrentValue = item
                                                  .textEditorController
                                                  .getSelectionStyle()
                                                  .attributes
                                                  .containsKey(Attribute
                                                      .rightAlignment
                                                      .key);
                                              if (uncurrentValue &&
                                                  currentValue) {
                                                item.textEditorController
                                                    .formatSelection(
                                                  Attribute.clone(
                                                      Attribute
                                                          .leftAlignment,
                                                      null),
                                                );
                                                currentValue = getIsToggled(
                                                    item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes,
                                                    Attribute
                                                        .leftAlignment);
                                              }
                                              print(
                                                  '$uncurrentValue && $currentValue');
                                              if (uncurrentValue &&
                                                  !currentValue) {
                                                print('un');
                                                print(
                                                    uncurrentValue);
                                                item.textEditorController
                                                    .formatSelection(
                                                        Attribute.clone(
                                                            Attribute
                                                                .rightAlignment,
                                                            null));
                                                item.textEditorController
                                                    .formatSelection(
                                                  Attribute
                                                      .leftAlignment,
                                                );
                                                setState(() {
                                                  currentValue = getIsToggled(
                                                      item.textEditorController
                                                          .getSelectionStyle()
                                                          .attributes,
                                                      Attribute
                                                          .leftAlignment);
                                                });
                                                print('cu');
                                                print(currentValue);
                                                return;
                                              }
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .leftAlignment,
                                                        null)
                                                    : Attribute
                                                        .leftAlignment,
                                              );
                                            },
                                        topLayerChild: const Icon(
                                          TablerIcons.align_left,
                                          color: Colors.black,
                                          size: 20,
                                        ),
                                      ),
                                    //CenterAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                                item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes,
                                                Attribute.centerAlignment),
                                      onClick: () {
                                              var currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .centerAlignment);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .centerAlignment,
                                                        null)
                                                    : Attribute
                                                        .centerAlignment,
                                              );
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_center,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //RightAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.rightAlignment),
                                      onClick:  () {
                                              var currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .rightAlignment);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .rightAlignment,
                                                        null)
                                                    : Attribute
                                                        .rightAlignment,
                                              );
                                              final uncurrentValue = item
                                                  .textEditorController
                                                  .getSelectionStyle()
                                                  .attributes
                                                  .containsKey(Attribute
                                                      .leftAlignment
                                                      .key);
                                              if (uncurrentValue &&
                                                  currentValue) {
                                                item.textEditorController
                                                    .formatSelection(
                                                  Attribute.clone(
                                                      Attribute
                                                          .rightAlignment,
                                                      null),
                                                );
                                                currentValue = getIsToggled(
                                                    item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes,
                                                    Attribute
                                                        .rightAlignment);
                                              }
                                              print(
                                                  '$uncurrentValue && $currentValue');
                                              if (uncurrentValue &&
                                                  !currentValue) {
                                                print('un');
                                                print(
                                                    uncurrentValue);
                                                item.textEditorController
                                                    .formatSelection(
                                                        Attribute.clone(
                                                            Attribute
                                                                .leftAlignment,
                                                            null));
                                                item.textEditorController
                                                    .formatSelection(
                                                  Attribute
                                                      .rightAlignment,
                                                );
                                                setState(() {
                                                  currentValue = getIsToggled(
                                                      item.textEditorController
                                                          .getSelectionStyle()
                                                          .attributes,
                                                      Attribute
                                                          .rightAlignment);
                                                });
                                                print('cu');
                                                print(currentValue);
                                                return;
                                              }
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .rightAlignment,
                                                        null)
                                                    : Attribute
                                                        .rightAlignment,
                                              );
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_right,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    //justifyAlignment
                                    buildElevatedLayerButton(
                                      buttonHeight:40,
                                      buttonWidth: iconWidth,
                                      toggleOnTap: true,
                                      isTapped: getIsToggled(
                                          item.textEditorController
                                              .getSelectionStyle()
                                              .attributes,
                                          Attribute.justifyAlignment),
                                      onClick: () {
                                              var currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .justifyAlignment);
                                              item.textEditorController
                                                  .formatSelection(
                                                currentValue
                                                    ? Attribute.clone(
                                                        Attribute
                                                            .justifyAlignment,
                                                        null)
                                                    : Attribute
                                                        .justifyAlignment,
                                              );
                                            },
                                      topLayerChild: const Icon(
                                        TablerIcons.align_justified,
                                        color: Colors.black,
                                        size: 20,
                                      ),
                                    ),
                                    SizedBox(width:2)
                                    ],
                                  ),
                                  //SUB AND SUPERSCRIPT
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                      children: [
                                        //SUBSCRIPT
                                        buildElevatedLayerButton(
                                          buttonHeight: 40,
                                          buttonWidth:
                                              iconWidth * 2,
                                          toggleOnTap: true,
                                          isTapped: getIsToggled(
                                              item.textEditorController
                                                  .getSelectionStyle()
                                                  .attributes,
                                              Attribute.subscript),
                                          onClick: () {
                                            var currentValue =
                                                getIsToggled(
                                                    item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes,
                                                    Attribute
                                                        .subscript);
                                            item.textEditorController
                                                .formatSelection(
                                              currentValue
                                                  ? Attribute.clone(
                                                      Attribute
                                                          .subscript,
                                                      null)
                                                  : Attribute
                                                      .subscript,
                                            );
                                            final uncurrentValue = item
                                                .textEditorController
                                                .getSelectionStyle()
                                                .attributes
                                                .containsKey(
                                                    Attribute
                                                        .superscript
                                                        .key);
                                            if (uncurrentValue &&
                                                currentValue) {
                                              item.textEditorController
                                                  .formatSelection(
                                                Attribute.clone(
                                                    Attribute
                                                        .subscript,
                                                    null),
                                              );
                                              currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .subscript);
                                            }
                                            print(
                                                '$uncurrentValue && $currentValue');
                                            if (uncurrentValue &&
                                                !currentValue) {
                                              print('un');
                                              print(uncurrentValue);
                                              item.textEditorController
                                                  .formatSelection(
                                                      Attribute.clone(
                                                          Attribute
                                                              .superscript,
                                                          null));
                                              item.textEditorController
                                                  .formatSelection(
                                                Attribute.subscript,
                                              );
                                              setState(() {
                                                currentValue = getIsToggled(
                                                    item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes,
                                                    Attribute
                                                        .subscript);
                                              });
                                              print('cu');
                                              print(currentValue);
                                              return;
                                            }
                                            item.textEditorController
                                                .formatSelection(
                                              currentValue
                                                  ? Attribute.clone(
                                                      Attribute
                                                          .subscript,
                                                      null)
                                                  : Attribute
                                                      .subscript,
                                            );
                                          },
                                          topLayerChild: Icon(
                                            TablerIcons.subscript,
                                            color: Colors.black,
                                            size: 20,
                                          ),
                                        ),
                                        //SUPERSCIPT
                                        buildElevatedLayerButton(
                                          buttonHeight:40,
                                          buttonWidth:
                                              iconWidth * 2,
                                          toggleOnTap: true,
                                          isTapped: getIsToggled(
                                              item.textEditorController
                                                  .getSelectionStyle()
                                                  .attributes,
                                              Attribute
                                                  .superscript),
                                          onClick: () {
                                            var currentValue = getIsToggled(
                                                item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes,
                                                Attribute
                                                    .superscript);
                                            item.textEditorController
                                                .formatSelection(
                                              currentValue
                                                  ? Attribute.clone(
                                                      Attribute
                                                          .superscript,
                                                      null)
                                                  : Attribute
                                                      .superscript,
                                            );
                                            final uncurrentValue = item
                                                .textEditorController
                                                .getSelectionStyle()
                                                .attributes
                                                .containsKey(
                                                    Attribute
                                                        .subscript
                                                        .key);
                                            if (uncurrentValue &&
                                                currentValue) {
                                              item.textEditorController
                                                  .formatSelection(
                                                Attribute.clone(
                                                    Attribute
                                                        .superscript,
                                                    null),
                                              );
                                              currentValue = getIsToggled(
                                                  item.textEditorController
                                                      .getSelectionStyle()
                                                      .attributes,
                                                  Attribute
                                                      .superscript);
                                            }
                                            print(
                                                '$uncurrentValue && $currentValue');
                                            if (uncurrentValue &&
                                                !currentValue) {
                                              print('un');
                                              print(uncurrentValue);
                                              item.textEditorController
                                                  .formatSelection(
                                                      Attribute.clone(
                                                          Attribute
                                                              .subscript,
                                                          null));
                                              item.textEditorController
                                                  .formatSelection(
                                                Attribute
                                                    .superscript,
                                              );
                                              setState(() {
                                                currentValue = getIsToggled(
                                                    item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes,
                                                    Attribute
                                                        .superscript);
                                              });
                                              print('cu');
                                              print(currentValue);
                                              return;
                                            }
                                            item.textEditorController
                                                .formatSelection(
                                              currentValue
                                                  ? Attribute.clone(
                                                      Attribute
                                                          .superscript,
                                                      null)
                                                  : Attribute
                                                      .superscript,
                                            );
                                          },
                                          
                                          topLayerChild: Icon(
                                            TablerIcons.superscript,
                                            color: Colors.black,
                                            size: 20,
                                          ),
                                        ),
                                        SizedBox(width:2)
                                      ],
                                    ),
                                  SizedBox(
                                    height:5
                                  ),
                                  ],
                                  ),
                                  ),
                                  
                                  const SizedBox(
                                      height:5
                                    ),
                                  //SIZE AND SPACINGS  of FONT
                                  Container(
                                  margin: EdgeInsets.only(left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  // SIZE AND SPACINGS of FONT
                                  child:  Column(
                                    children: [
                                      Container(
                                      width: width,
                                      padding: EdgeInsets.all(6).copyWith(left:8),
                                      margin: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15),
                                        border: Border.all(
                                          width: 2,
                                          color: defaultPalette.extras[0])
                                      ),
                                      child: Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text('FO \nNT ',
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                            height: 1,
                                            fontFamily:
                                                GoogleFonts.quintessential()
                                                    .fontFamily,
                                            // letterSpacing:-1,
                                            fontWeight: FontWeight.w900,        
                                            color: defaultPalette
                                                .extras[0],
                                          fontSize: 10)),
                                          Text('കുടും \nബം ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 0.6,
                                                  fontFamily: GoogleFonts.chilanka().fontFamily,
                                                  color: defaultPalette.extras[0],
                                                  fontSize: 15)),
                                          Text('書体 \n活字体 ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 1,
                                                  letterSpacing: -0.2,
                                                  fontFamily:
                                                      GoogleFonts.zenAntiqueSoft()
                                                          .fontFamily,
                                                  color: defaultPalette
                                                      .extras[0],
                                                  fontSize: 10)),  
                                          Text('𐤫𐤲𐤦𐤳 \n𐤨𐤯𐤦𐤫 ',
                                              textAlign: TextAlign.start,
                                              style: TextStyle(
                                                  height: 1,
                                                  letterSpacing:-1,
                                                  fontFamily:
                                                      GoogleFonts.notoSansLydian()
                                                          .fontFamily,
                                                  fontWeight: FontWeight.w900,         
                                                  color: defaultPalette
                                                      .extras[0],
                                                  fontSize: 10)),                       
                                                  ],
                                                ),
                                    ),
                                    titleTile('font', TablerIcons.currency_florin),
                                    Row(
                                      children: [
                                        Expanded(
                                          child: GestureDetector(
                                            onTap: () {
                                              setState(() {
                                              // whichTextPropertyTabIsClicked = 1;
                                              // textPropertyCardsController.setCardIndex(whichTextPropertyTabIsClicked);
                                              controller.animateTo( 700, duration: Durations.extralong1, curve: Curves.easeInCirc);
                                            });
                                            },
                                            child: Container(
                                              alignment:Alignment(0,0),
                                              padding:EdgeInsets.all(2),
                                              decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(10), 
                                              color:defaultPalette.secondary,
                                              border: Border.all(
                                                width:0.2
                                              )
                                              ),
                                              child: Text((item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes[Attribute.font.key]
                                                    ?.value
                                                    ?.replaceAll( RegExp(r'_regular'), '') ?? 'mixFonts'),
                                                  style: TextStyle(
                                                    fontSize: 12,
                                                  fontFamily: (item.textEditorController
                                                    .getSelectionStyle()
                                                    .attributes[
                                                        Attribute.font.key]
                                                  ?.value )
                                                  ),        
                                                          ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                    Row(children:fontPropertyTile(0)),
                                    Row(children:fontPropertyTile(1)),
                                    Row(children:fontPropertyTile(2)),
                                    Row(children:fontPropertyTile(3)),
                                    ],
                                    ),
                                    ),
                                  
                                  const SizedBox(
                                      height:5
                                    ),
                                  
                                  //Color of FONT
                                  Container(
                                  margin: EdgeInsets.only(left:2, right:2),
                                  padding: EdgeInsets.all(5),
                                  decoration: BoxDecoration(
                                  color:defaultPalette.primary,
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(color: defaultPalette.extras[0], width: 2)
                                  ),
                                  child:  Column(
                                  children: [
                                    Container(
                                      width: width,
                                      height: 35,
                                      margin: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                      color: defaultPalette.secondary,
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all(
                                        width: 2,
                                        color: defaultPalette.extras[0])
                                    ),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(14),
                                      child:const Stack(
                                        children: [
                                          MultipleBalloons(
                                            minSize: 5,
                                            maxSize: 35,
                                            maxSpeed: 1.5,
                                            maxSwayAmount: 30,
                                            minSwayAmount: 10,
                                          
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  titleTile(' color', TablerIcons.color_swatch),
                                  //the HEX TEXT FIELD
                                  Container(
                                    height: 25,
                                    padding: EdgeInsets.only(left: 2),
                                    margin: EdgeInsets.only(left: 3, right: 4),
                                    decoration: BoxDecoration(
                                        border: Border.all(width:0.3),
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15)),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.center,
                                      children: [
                                        Expanded(
                                          child: SizedBox(
                                            height: 25,
                                            child: TextField(
                                              focusNode: fontFocusNodes[5],
                                              controller: hexController,
                                              onSubmitted: (value) {
                                                setState(() {
                                                  item.textEditorController
                                                .formatSelection(
                                                  ColorAttribute(
                                                  value),
                                                  );
                                                  hexController.text =
                                                      '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                
                                                });
                                              },
                                              inputFormatters: [
                                                HexColorInputFormatter()
                                              ],
                                              textAlignVertical: TextAlignVertical.top,
                                              textAlign: TextAlign.center,
                                              cursorColor: defaultPalette.tertiary,
                                              decoration: InputDecoration(
                                                contentPadding: const EdgeInsets.only(left: 2),
                                                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                                hoverColor: defaultPalette.transparent,
                                                filled: true,
                                                fillColor: defaultPalette.transparent,
                                                border: InputBorder.none,
                                                enabledBorder: OutlineInputBorder(
                                                  borderSide: BorderSide.none,
                                                ),
                                                focusedBorder: OutlineInputBorder(
                                                  borderSide: BorderSide.none,
                                                  borderRadius: BorderRadius.circular(12),
                                                ),
                                              ),
                                              style: GoogleFonts.lexend(
                                                  letterSpacing: -1,
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 14,
                                                  color: defaultPalette.black),
                                            ),
                                          ),
                                        ),
                                        DecoratedBox(
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            border:const Border.fromBorderSide(
                                              BorderSide.none,
                                            ),
                                            color: hexToColor(item.textEditorController
                                              .getSelectionStyle()
                                              .attributes['color']
                                              ?.value),
                                          ),
                                          child:const SizedBox(
                                            width: 15,
                                            height: 15,
                                          ),
                                        ),
                                        const SizedBox(width:2) ,
                                        ClipRRect(
                                          borderRadius: BorderRadius.circular(9999),
                                          child: Material(
                                            color: defaultPalette.transparent,
                                            child: InkWell(
                                              focusColor: defaultPalette.primary,
                                              hoverColor: defaultPalette.primary,
                                              highlightColor: defaultPalette.primary,
                                              onTap: () {
                                                EyeDropper.enableEyeDropper(context, (p0) {
                                                  Color color = (p0?? hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value) );
                                                  setState(() {
                                                  item.textEditorController
                                                      .formatSelection(
                                                    ColorAttribute(
                                                        '#${colorToHex(color)}'),
                                                  );
                                                  hexController.text =
                                                      '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                
                                                });
                                                },);
                                              },
                                              child: const Icon(
                                                TablerIcons.color_picker,
                                                size: 19,
                                              ),
                                            ),
                                          ),
                                        ),
                                        const SizedBox(width:2)    
                                  ],
                                  ),
                                  ),
                                  const SizedBox(
                                      height:4
                                    ),
                                  //name that color Font Hex
                                  SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: Text(
                                      ' ${(ColorTools.nameThatColor(
                                        fontHex,
                                      )).toLowerCase()}',
                                      textAlign: TextAlign.start,
                                      style: GoogleFonts.lexend(
                                          fontSize: 14,
                                          letterSpacing: -1,
                                          color: defaultPalette.extras[0]),
                                    ),
                                  ),
                                  //wheel and HSv picker for Font Hex
                                  Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    if ((sWidth * wH2DividerPosition) > 220)
                                    Expanded(
                                      child: HSVPicker(
                                        color: HSVColor.fromColor(
                                          fontHex,
                                        ),
                                        onChanged: (value) {
                                          setState(() {
                                            item.textEditorController
                                                .formatSelection(
                                              ColorAttribute(
                                                  '#${colorToHex(value.toColor())}'),
                                            );
                                            hexController.text =
                                                '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                          
                                          });
                                          },
                                      ),
                                    ),
                                    Expanded(
                                      child: IntrinsicHeight(
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          // crossAxisAlignment: CrossAxisAlignment.end,
                                          children: [
                                            //list COLOR WHEEL COLOR
                                            WheelPicker(
                                              color: HSVColor.fromColor(
                                                fontHex,
                                              ),
                                              onChanged: (HSVColor value) {
                                                setState(() {
                                                    item.textEditorController
                                                        .formatSelection(
                                                      ColorAttribute(
                                                          '#${colorToHex(value.toColor())}'),
                                                    );
                                                    hexController.text =
                                              '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                            });
                                                  },
                                                ),
                                              ],
                                            ),
                                          ),
                                          ),
                                        ],
                                      ),
                                  //list alpha picker
                                  AlphaPicker(
                                    alpha: (fontHex)
                                        .alpha,
                                    onChanged: (int value) {
                                      setState(() {
                                        item.textEditorController
                                            .formatSelection(
                                          ColorAttribute(
                                              '#${colorToHex(fontHex.withAlpha(value))}'),
                                        );
                                        hexController.text =
                                            '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                      });
                                    },
                                  ),
                                                                        
                                                  
                                                                        
                                  ],
                                  ),
                                  ),
                                  
                                  const SizedBox(
                                      height:5
                                  ),
                                  //FONT LIBRARY CARD
                                  Stack(
                                    children: [
                                      //tab system of fonts
                                      Container(
                                        height: 350,
                                        width: width + 3,
                                        decoration: BoxDecoration(
                                          color:defaultPalette.primary,
                                          borderRadius: BorderRadius.circular(20),
                                          border: Border.all(width:2, color: defaultPalette.extras[0])
                                        ),
                                        margin: const EdgeInsets.only( left: 2, bottom: 0, right: 0),
                                        padding:EdgeInsets.all(5).copyWith(top: 75),    
                                        child: ClipRRect(
                                          borderRadius: const BorderRadius.only(
                                              topLeft: Radius.circular(20),
                                              topRight: Radius.circular(20),
                                              bottomLeft: Radius.circular(20),
                                              bottomRight: Radius.circular(20)),
                                          child: TabContainer(
                                            tabs: [
                                              Icon(
                                                TablerIcons.search,
                                                size: selectedFontCategory == 'search'
                                                    ? 0
                                                    : 15,
                                                color: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circle,
                                                size: 12,
                                                color:fontsTabContainerController.index ==1?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circles,
                                                size: 12,
                                                color:fontsTabContainerController.index ==2?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.circle_dashed,
                                                size: 12,
                                                color:fontsTabContainerController.index ==3?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.oval_vertical,
                                                size: 12,
                                                color:fontsTabContainerController.index ==4?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                              Icon(
                                                TablerIcons.grain,
                                                size: 12,
                                                color:fontsTabContainerController.index ==5?  defaultPalette.primary: defaultPalette.extras[0],
                                              ),
                                            ],
                                            tabEdge: TabEdge.left,
                                            controller: fontsTabContainerController,
                                            borderRadius: BorderRadius.only(
                                              topLeft: Radius.circular(10),
                                              topRight: Radius.circular(22),
                                              bottomLeft: Radius.circular(22),
                                              bottomRight: Radius.circular(22)),
                                            tabExtent: 20,
                                            tabsStart: 0,
                                            tabsEnd: 1,
                                            colors: [
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                              defaultPalette.extras[0],
                                            ],
                                            duration: Durations.short4,
                                            selectedTextStyle: GoogleFonts.abrilFatface(
                                              fontSize: 14,
                                              color: defaultPalette.extras[0],
                                            ),
                                            unselectedTextStyle: GoogleFonts.abrilFatface(
                                              fontSize: 12,
                                              color: defaultPalette.primary,
                                            ),
                                            children: [
                                              //SEARCH RESULT TAB
                                              Container(
                                                decoration: BoxDecoration(
                                                  color: defaultPalette.secondary,
                                                  borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(10),
                                                      bottomLeft: Radius.circular(22),
                                                      bottomRight: Radius.circular(22)),
                                                ),
                                                margin: const EdgeInsets.only(
                                                    top: 55,
                                                    left: 3,
                                                    right: 3,
                                                    bottom: 3),
                                                child: ClipRRect(
                                                  borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(10),
                                                      bottomLeft: Radius.circular(22),
                                                      bottomRight: Radius.circular(22)),
                                                  child: GridView.builder(
                                                    gridDelegate:
                                                        SliverGridDelegateWithFixedCrossAxisCount(
                                                      crossAxisCount: fCrossAxisCount,
                                                      childAspectRatio: 2.8,
                                                      crossAxisSpacing: 5,
                                                      mainAxisSpacing: 0,
                                                    ),
                                                    itemCount: filteredFonts.length,
                                                    itemBuilder: (context, index) {
                                                      final fontName =
                                                          filteredFonts[index];
                                      
                                                      return Padding(
                                                        padding: const EdgeInsets.only(top:6, left:4, right:4, bottom: 0),
                                                        child: TextButton(
                                                          style: TextButton.styleFrom(
                                                          backgroundColor: item
                                                              .textEditorController
                                                              .getSelectionStyle()
                                                              .attributes[
                                                                  Attribute
                                                                      .font
                                                                      .key]
                                                              ?.value ==
                                                          GoogleFonts.getFont(
                                                                  fontName)
                                                              .fontFamily
                                                      ? defaultPalette
                                                          .tertiary
                                                      : defaultPalette
                                                          .primary,
                                                  foregroundColor:
                                                      defaultPalette
                                                          .extras[0],
                                                  minimumSize: Size(75, 75),
                                                  shape: RoundedRectangleBorder(
                                                    side: BorderSide(width: 0.4),
                                                              borderRadius: BorderRadius.circular(5)
                                                      ),
                                                    ),
                                                    onPressed: () {
                                                      item.textEditorController.formatSelection(
                                                      Attribute.fromKeyValue(
                                                        Attribute.font.key,
                                                        GoogleFonts.getFont( fontName).fontFamily == 'Clear'
                                                            ? null
                                                            : GoogleFonts.getFont( fontName).fontFamily,
                                                        ),
                                                      );
                                                      setState(() {});
                                                    },
                                                    child: Text(
                                                      fontName,
                                                      textAlign: TextAlign.center,
                                                      style: GoogleFonts.getFont(
                                                          fontName,
                                                          fontSize: 14),
                                                      maxLines: 1,
                                                    )),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                              //OTHER FONT CATEGORIES TABS
                                              ...categorizedFonts.keys.map((category) {
                                                final fontsInCategory =
                                                    categorizedFonts[category]!
                                                        .where((font) =>
                                                            GoogleFonts.asMap()
                                                                .containsKey(font))
                                                        .toList();
                                      
                                                if (fontsInCategory.isEmpty) {
                                                  return Center(
                                                    child: Text(
                                                      'No fonts available in this category.',
                                                      style: TextStyle(
                                                          color: Colors.grey,
                                                          fontSize: 16),
                                                    ),
                                                  );
                                                }
                                                final fontName = fontsInCategory[index];
                                                return Container(
                                                  decoration: BoxDecoration(
                                                    color: defaultPalette.secondary,
                                                    border: Border.all(),
                                                    borderRadius: const BorderRadius.only(
                                                      topLeft: Radius.circular(10),
                                                      topRight: Radius.circular(20),
                                                      bottomLeft: Radius.circular(10),
                                                      bottomRight: Radius.circular(20)),
                                                  ),
                                                  margin: const EdgeInsets.only(
                                                      top: 3,
                                                      left: 3,
                                                      right: 3,
                                                      bottom: 32),
                                                  child: ClipRRect(
                                                    borderRadius: const BorderRadius.only(
                                                        topLeft: Radius.circular(10),
                                                        topRight: Radius.circular(20),
                                                        bottomLeft: Radius.circular(10),
                                                        bottomRight: Radius.circular(20)),
                                                    child: DynMouseScroll(
                                                        durationMS: 500,
                                                        scrollSpeed: 1,
                                                        builder: (context, controller, physics) {
                                                          return ScrollbarUltima(
                                                            alwaysShowThumb: true,
                                                            controller: controller,
                                                            scrollbarPosition:
                                                                ScrollbarPosition.right,
                                                            backgroundColor: defaultPalette.primary,
                                                            isDraggable: true,
                                                            maxDynamicThumbLength: 300,
                                                            minDynamicThumbLength: 80,
                                                            thumbBuilder:
                                                                (context, animation, widgetStates) {
                                                              return Container(
                                                                margin: EdgeInsets.symmetric(vertical: 12),
                                                                decoration: BoxDecoration(
                                                                    border: Border.all(),
                                                                    color: defaultPalette.primary,
                                                                    borderRadius:
                                                                        BorderRadius.circular(2)),
                                                                width: 6,
                                                              );
                                                            },
                                                            child: GridView.builder(
                                                              gridDelegate:
                                                                  SliverGridDelegateWithFixedCrossAxisCount(
                                                                crossAxisCount:
                                                                    fCrossAxisCount,
                                                                childAspectRatio: 2.5,
                                                                crossAxisSpacing: 0,
                                                                mainAxisSpacing: 0,
                                                              ),
                                                              itemCount:
                                                                  fontsInCategory.length,
                                                              controller: controller,
                                                              physics: physics,
                                                              itemBuilder:
                                                                  (context, index) {
                                                                final fontName =
                                                                    fontsInCategory[index];
                                                                                                  
                                                                return Container(
                                                                  padding: const EdgeInsets.only(
                                                                        top:6, left:4, right:4,
                                                                          bottom: 0),
                                                                  child: TextButton(
                                                                    style: TextButton.styleFrom(
                                                                      backgroundColor: item
                                                                          .textEditorController
                                                                          .getSelectionStyle()
                                                                          .attributes[Attribute.font.key]
                                                                          ?.value == GoogleFonts.getFont(fontName).fontFamily
                                                                          ? defaultPalette.tertiary
                                                                          : defaultPalette.primary,
                                                                      foregroundColor: defaultPalette.extras[0],
                                                                      minimumSize:Size(75, 80),
                                                                      shape:
                                                                          RoundedRectangleBorder(
                                                                            side: BorderSide(width: 0.4),
                                                                            borderRadius: BorderRadius.circular(5)
                                                                          ),
                                                                    ),
                                                                    onPressed: () {
                                                                      item.textEditorController
                                                                          .formatSelection(
                                                                        Attribute
                                                                            .fromKeyValue(
                                                                          Attribute
                                                                              .font.key,
                                                                          GoogleFonts.getFont(fontName)
                                                                                      .fontFamily ==
                                                                                  'Clear'
                                                                              ? null
                                                                              : GoogleFonts.getFont(
                                                                                      fontName)
                                                                                  .fontFamily,
                                                                        ),
                                                                      );
                                                                      setState(() {});
                                                                    },
                                                                    child: Text(
                                                                      fontName,
                                                                      textAlign: TextAlign
                                                                          .center,
                                                                      style: GoogleFonts.getFont(
                                                                          color: defaultPalette
                                                                              .extras[0],
                                                                          fontName,
                                                                          fontSize: 14),
                                                                      maxLines: 1,
                                                                    )),
                                                              
                                                                );
                                                              },
                                                            ),
                                                          );
                                                        }),
                                                  ),
                                                );
                                              }).toList()
                                            ],
                                          ),
                                        ),
                                      ),
                                      
                                      //FONT TITLE TEXT
                                      Container(
                                        width: width,
                                        height: 75,
                                        margin: EdgeInsets.only(top:12),
                                        decoration: BoxDecoration(
                                        ),
                                        child:Stack(
                                          children: [
                                            Positioned(
                                              top: 0,
                                              left: 17,
                                              width: width,
                                              child: Text('font',
                                                  textAlign: TextAlign.start,
                                                  style: GoogleFonts.raleway(
                                                    letterSpacing:-0.3,
                                                    height: 1,
                                                    fontWeight: FontWeight.w800,
                                                    foreground: Paint()
                                                    ..style=PaintingStyle.stroke
                                                    ..strokeWidth=0
                                                    ,
                                                    fontSize: 25)
                                                    )),
                                            Positioned(
                                              top: 2,
                                              left: 60,
                                              child: Text('Library',
                                                  textAlign: TextAlign.start,
                                                  style: GoogleFonts.mrDafoe(
                                                    height: 1,
                                                    letterSpacing:-0.5,
                                                    color: defaultPalette.extras[0],
                                                    fontWeight: FontWeight.w500,
                                                    fontSize: 22)
                                                    )),
                                            Row(
                                            children: [
                                              Expanded(
                                                child: Container(
                                                  width:width,
                                                  height:25,
                                                  alignment:Alignment(0,0),
                                                  margin: EdgeInsets.all(12).copyWith(top: 32,right: 5),
                                                  decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10), 
                                                  color:defaultPalette.secondary,
                                                  border: Border.all(
                                                    width:0.2
                                                  )
                                                  ),
                                                  child: Text((item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes[Attribute.font.key]
                                                        ?.value
                                                        ?.replaceAll( RegExp(r'_regular'), '') ?? 'mixFonts'),
                                                      style: TextStyle(
                                                        fontSize: 12,
                                                      fontFamily: (item.textEditorController
                                                        .getSelectionStyle()
                                                        .attributes[
                                                            Attribute.font.key]
                                                      ?.value )
                                                      ),        
                                                ),
                                                ),
                                              ),
                                            ],
                                                                                        )        
                                          ],
                                        )
                                      ),
                                      
                                      //CURRENT TAB
                                      Positioned(
                                          left: 45,
                                          bottom: 8,
                                          width: width,
                                          child: Text(
                                              selectedFontCategory == 'search'
                                                  ? ''
                                                  : selectedFontCategory,
                                              textAlign: TextAlign.start,
                                              maxLines: 1,
                                              style: GoogleFonts.leagueSpartan(
                                                  color: defaultPalette.primary,
                                                  fontSize: (width / 7).clamp(10, 20),
                                                  letterSpacing: 0))),
                                      //
                                      if (selectedFontCategory == 'search')
                                        //Search BAR TEXTFIELDFORM
                                        Positioned(
                                          right: 15,
                                          top: 75,
                                          width: width-16,
                                          child: TextFormField(
                                            style: GoogleFonts.bungee(
                                                color: defaultPalette.primary,
                                                fontSize: (width / 6).clamp(5, 15)),
                                            cursorColor: defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              // labelText: 'Search Fonts',
                                              contentPadding: EdgeInsets.all(0),
                                              hintText: 'Type to search fonts...',
                                              focusColor: defaultPalette.primary,
                                              hintStyle: GoogleFonts.leagueSpartan(
                                                  fontSize: 15,
                                                  color: defaultPalette.primary),
                                              prefixIcon: Icon(TablerIcons.search,
                                                  color: defaultPalette.primary),
                                              border: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                gapPadding: 2,
                                                borderRadius: BorderRadius.circular(22),
                                              ),
                                            ),
                                            onChanged: (query) {
                                              setState(() {
                                                filteredFonts = categorizedFonts.entries
                                                    .expand((entry) => entry.value)
                                                    .where((font) =>
                                                        font.toLowerCase().contains(query
                                                            .toLowerCase()) &&
                                                        GoogleFonts.asMap().containsKey(
                                                            font)) 
                                                    .toList();
                                              });
                                            },
                                          ),
                                        ),
                                  
                                      ],
                                    ),

                                  
                                  const SizedBox(
                                      height:2
                                  ),
                                ],
                              ),
                            );
                        }),
                      ),
                      ),
                      ),
                      ),
                    
                    ],

                    if (index == 1)
                    //FUNCTIONS //Desktop WEB
                    Positioned.fill(
                      child: Stack(
                        children: [
                          //GRAPH BEHIND FONT CARD
                          ...[
                          Padding(
                            padding: const EdgeInsets.all(10),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(25),
                              child: Opacity(
                                opacity: 0.35,
                                child: SizedBox(
                                  width: sWidth,
                                  height: sHeight,
                                  child: LineChart(LineChartData(
                                      lineBarsData: [LineChartBarData()],
                                      titlesData:
                                          const FlTitlesData(show: false),
                                      gridData: FlGridData(
                                          getDrawingVerticalLine: (value) =>
                                              FlLine(
                                                  color: defaultPalette.extras[0]
                                                      .withOpacity(0.8),
                                                  dashArray: [5, 5],
                                                  strokeWidth: 1),
                                          getDrawingHorizontalLine: (value) =>
                                              FlLine(
                                                  color: defaultPalette
                                                      .extras[0]
                                                      .withOpacity(0.8),
                                                  dashArray: [5, 5],
                                                  strokeWidth: 1),
                                          show: true,
                                          horizontalInterval: 10,
                                          verticalInterval: 50),
                                      borderData: FlBorderData(show: false),
                                      minY: 0,
                                      maxY: 50,
                                      maxX: dateTimeNow.millisecondsSinceEpoch
                                                  .ceilToDouble() /
                                              500 +
                                          250,
                                      minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                              
                                ),
                              ),
                            ),
                          ),
                          Container(
                            width: width+10,
                            margin: EdgeInsets.only(left:6,top: 5),
                            color: defaultPalette.transparent
                          ),
                          ],
                          //functions drivers and conditional formatting
                          Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(5)
                            ),
                            width: width,
                            margin: EdgeInsets.only(
                              top: 15,
                              left: 10,
                              right: 13),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(10),
                              child: SyntaxView(
                                code: item.textEditorConfigurations.controller.document.toDelta().toJson().toList()[0].entries.map((e) {
                                  if (e.value is Map) {
                                    var mapStr = (e.value as Map).entries.map((a) => '\t${a.key}: ${a.value}').join(',\n');
                                    return '${e.key}: {\n$mapStr\n}';
                                  } else {
                                    return '${e.key}: ${e.value}';
                                  }
                                }).join(',\n'),
                                syntax: Syntax.YAML, 
                                syntaxTheme: SyntaxTheme.vscodeDark(), // Theme
                                fontSize: 12.0, // Font size
                                withZoom: false, // Enable/Disable zoom icon controls
                                withLinesCount: true, // Enable/Disable line number
                                expanded: false, // Enable/Disable container expansion
                                selectable: true 
                              ),
                            ),
                          ),
                          Positioned(
                            top:150,
                            left:15,
                            width: width,
                            child: Text(item.indexPath.toString()),
                          )

                          ],
                      ),
                    ),

                    if( index == 2 ) ...buildSuperDecorationSwiperInterface(textDecorationPath, textDecorationNameController)
                  ],
                );
              }),
        );
      case 3:
        //The actual cards for list properties
        return FadeInLeft(
          onFinish: (direction) {
            setState(() {
              listPropertyCardsController
                  .setCardIndex(whichListPropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
            controller: listPropertyCardsController,
            backgroundCardCount: 1,
            backgroundCardOffset: Offset(3, 3),
            duration: Duration(milliseconds: 150),
            backgroundCardScale: 1,
            loop: true,
            cardCount: 2,
            allowUnSwipe: true,
            allowUnlimitedUnSwipe: true,
            initialIndex: whichListPropertyTabIsClicked,
            maxAngle: 50,
            threshold: 100,
            onCardPositionChanged: (position) {
              setState(() {
                // isListDecorationLibraryToggled = true;
                _cardPosition =
                    position.offset.dx.abs() + position.offset.dy.abs();
              });
            },
            onSwipeEnd: (a, b, direction) {
              // print(direction.toString());
              setState(() {
                // ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
                isListDecorationLibraryToggled = false;
                whichListPropertyTabIsClicked = b;
                _cardPosition = 0;
                if (sheetListItem.id == 'yo') {
                  _findSheetListItem();
                }
              });
            },
            onSwipeCancelled: (activity) {},
            cardBuilder: (BuildContext context, int index) {
              int currentCardIndex = whichListPropertyTabIsClicked;
              var width = (sWidth * wH2DividerPosition - 25);
              final isSizeBigForRow = (sWidth * wH2DividerPosition) > 200;

              Widget roundButton(
                void Function() onTap,
                Widget icon,
                String s, {
                double borderRadius = 9999,
                bool isSelected = false,
                EdgeInsets padding = const EdgeInsets.all(3),
                bool showText = true
              }) {
                return InkWell(
                  hoverColor: defaultPalette.primary.withOpacity(0.5),
                  splashColor: defaultPalette.primary.withOpacity(0.5),
                  highlightColor: defaultPalette.primary.withOpacity(0.5),
                  onTap: () {
                    setState(() {
                      onTap();
                    });
                  },
                  child: Row(
                    children: [
                      ClipRRect(
                        borderRadius: BorderRadius.circular(borderRadius),
                        child: Material(
                          color: isSelected
                              ? defaultPalette.primary
                              : defaultPalette.transparent,
                          child: InkWell(
                            hoverColor: defaultPalette.primary.withOpacity(0.5),
                            splashColor:
                                defaultPalette.primary.withOpacity(0.5),
                            highlightColor:
                                defaultPalette.primary.withOpacity(0.5),
                            onTap: () {
                              setState(() {
                                onTap();
                              });
                            },
                            child: Container(
                                padding: padding,
                                decoration: BoxDecoration(
                                  border: isSelected
                                      ? Border.all(
                                          color: defaultPalette.extras[0])
                                      : Border.fromBorderSide(BorderSide.none),
                                  borderRadius:
                                      BorderRadius.circular(borderRadius),
                                  // color: defaultPalette.secondary
                                ),
                                child: icon),
                          ),
                        ),
                      ),
                      // SizedBox(width: 2,),
                      if (isSizeBigForRow && showText)
                        Expanded(
                          child: Text(
                            s,
                            maxLines: 1,
                            style: GoogleFonts.lexend(
                                fontSize: 13,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        )
                    ],
                  ),
                );
              }

              Widget roundButton2(
                void Function() onTap,
                Widget icon, {
                double borderRadius = 9999,
                bool isSelected = false,
                EdgeInsets padding = const EdgeInsets.all(3),
              }) {
                return ClipRRect(
                  borderRadius: BorderRadius.circular(borderRadius),
                  child: Material(
                    color: isSelected ? defaultPalette.primary : defaultPalette.secondary,
                    child: InkWell(
                      hoverColor: defaultPalette.primary,
                      splashColor: defaultPalette.primary,
                      highlightColor: defaultPalette.primary,
                      onTap: () {
                        setState(() {
                          onTap();
                        });
                      },
                      child: Container(
                          padding: padding,
                          decoration: BoxDecoration(
                            border: isSelected
                                ? Border.all(color: defaultPalette.extras[0])
                                : Border.fromBorderSide(BorderSide.none),
                            borderRadius: BorderRadius.circular(borderRadius),
                            // color: defaultPalette.primary
                          ),
                          child: icon),
                    ),
                  ),
                );
              }

              Widget titleTile(
              String name,
              IconData icon, {
              double fontSize = 13,
              }) {
              return Row(children: [
                Icon(icon, size: 15),
                Expanded(
                  child: Text(
                    name,
                    maxLines: 1,
                    style: GoogleFonts.lexend(
                        fontSize: fontSize,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w500),
                  ),
                )
              ]);
            }

              Widget toggleSelectionRow(
                List<Widget> icons,
                List<dynamic> values,
              ) {
                List<bool> selected = [];

                for (var v = 0; v < values.length; v++) {
                   {
                    if (values[v] is MainAxisAlignment) {
                      if (sheetListItem.mainAxisAlignment == values[v]) {
                        selected.add(true);
                      } else {
                        selected.add(false);
                      }
                    } else if (values[v] is CrossAxisAlignment) {
                      if (sheetListItem.crossAxisAlignment == values[v]) {
                        selected.add(true);
                      } else {
                        selected.add(false);
                      }
                    } 
                  }
                }

                Function() switchFunction(dynamic value) {
                  if (value is CrossAxisAlignment) {
                    return () {
                      sheetListItem.crossAxisAlignment = value;
                    };
                  } else {
                    return () {
                      sheetListItem.mainAxisAlignment = value;
                    };
                  }
                }

                return Container(
                  padding: EdgeInsets.all(2),
                  decoration: BoxDecoration(
                      color: defaultPalette.secondary,
                      border: Border.all(),
                      borderRadius: BorderRadius.circular(5)),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      for (int i = 0; i < icons.length; i++) ...[
                        Expanded(
                            child: roundButton2(switchFunction(values[i]), icons[i], isSelected: selected[i], borderRadius: 5, ),),
                        if (i != icons.length - 1)
                          SizedBox(
                            width: 2,
                          )
                      ]
                    ],
                  ),
                );
              }

              return Stack(
                children: [
                  Positioned.fill(
                    child: AnimatedContainer(
                      duration: Durations.short3,
                      margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border.all(width: 2),
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                  ),
                  Positioned.fill(
                    child: AnimatedOpacity(
                      opacity: currentCardIndex == index
                          ? 0
                          : index >= (currentCardIndex + 2) % 10
                              ? 1
                              : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                      duration: Duration(milliseconds: 300),
                      child: AnimatedContainer(
                        duration: Duration(milliseconds: 300),
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: index == (currentCardIndex + 1) % 10
                              ? defaultPalette.extras[0]
                              : index == (currentCardIndex + 2) % 10
                                  ? defaultPalette.extras[0]
                                  : defaultPalette.extras[0],
                          border: Border.all(width: 2),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                  ),

                  //List Properties
                  if (index == 0) ...[
                    Positioned.fill(
                      child: Padding(
                        padding:
                            EdgeInsets.all(15).copyWith(left: 12, right: 14),
                        child: ClipRRect(
                            borderRadius: BorderRadius.circular(20),
                            child: ScrollConfiguration(
                                behavior: ScrollBehavior()
                                    .copyWith(scrollbars: false),
                                child: DynMouseScroll(
                                    durationMS: 500,
                                    scrollSpeed: 1,
                                    builder: (context, controller, physics) {
                                      return SingleChildScrollView(
                                          controller: controller,
                                          physics: physics,
                                          child: Column(
                                            children: [
                                              Text(
                                                'listProperties',
                                                maxLines: 1,
                                                style: GoogleFonts.lexend(
                                                    fontSize: 20,
                                                    height:2,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500),
                                              ),
                                              Text(
                                                'id: ' + sheetListItem.id,
                                                maxLines: 1,
                                                style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    height:2,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500),
                                              ),
                                              Text(
                                                'parentId: '+ sheetListItem.parentId,
                                                maxLines: 1,
                                                style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    height:2,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500),
                                              ),
                                              titleTile( 
                                                'direction',
                                                TablerIcons.directions),
                                              
                                              AnimatedToggleSwitch<Axis>.dual(
                                                current:
                                                    sheetListItem.direction,
                                                first: Axis.vertical,
                                                second: Axis.horizontal,
                                                onChanged: (value) {
                                                  setState(() {
                                                    sheetListItem
                                                        .direction = value;
                                                  });
                                                },
                                                animationCurve:
                                                    Curves.easeInOutExpo,
                                                animationDuration:
                                                    Durations.medium4,
                                                borderWidth:
                                                    2, // backgroundColor is set independently of the current selection
                                                styleBuilder: (value) =>
                                                    ToggleStyle(
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    5),
                                                        indicatorBorderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    5),
                                                        borderColor:
                                                            defaultPalette
                                                                .secondary,
                                                        backgroundColor:
                                                            defaultPalette
                                                                .secondary,
                                                        indicatorColor:
                                                            defaultPalette
                                                                    .extras[
                                                                0]), // indicatorColor changes and animates its value with the selection
                                                iconBuilder: (value) {
                                                  return Icon(
                                                      value ==
                                                              Axis
                                                                  .horizontal
                                                          ? TablerIcons
                                                              .grip_horizontal
                                                          : TablerIcons
                                                              .grip_vertical,
                                                      size: 12,
                                                      color: defaultPalette
                                                          .primary);
                                                },
                                                textBuilder: (value) {
                                                  return Text(
                                                    value == Axis.horizontal
                                                        ? 'Horizontal'
                                                        : 'Vertical',
                                                    style:
                                                        GoogleFonts.bungee(
                                                            fontSize: 12),
                                                  );
                                                },
                                                height: 25,
                                                spacing: (width) - 100,
                                              ),
                                              SizedBox(height:4),
                                              titleTile( 
                                                '${sheetListItem.mainAxisAlignment.name}',
                                                sheetListItem.direction == Axis.vertical? TablerIcons.caret_up_down: TablerIcons.caret_left_right),
                                              
                                              toggleSelectionRow([
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_top:TablerIcons.layout_align_left, size:18),
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_center:TablerIcons.layout_align_middle, size:18),
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_align_bottom:TablerIcons.layout_align_right, size:18),
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.layout_distribute_horizontal:TablerIcons.layout_distribute_vertical, size:18),
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.dots_vertical:TablerIcons.dots, size:18),
                                                Icon(sheetListItem.direction == Axis.vertical?TablerIcons.separator_horizontal:TablerIcons.separator_vertical, size:18),
                                                
                                              ], [
                                                MainAxisAlignment.start,
                                                MainAxisAlignment.center,
                                                MainAxisAlignment.end,
                                                MainAxisAlignment.spaceAround,
                                                MainAxisAlignment.spaceEvenly,
                                                MainAxisAlignment.spaceBetween
                                              ]),
                                           
                                              SizedBox(height:4),
                                              titleTile(
                                                '${sheetListItem.crossAxisAlignment.name}',
                                                sheetListItem.direction == Axis.vertical? TablerIcons.caret_left_right: TablerIcons.caret_up_down),
                                              toggleSelectionRow([
                                                Icon(TablerIcons.sign_left, size:18),
                                                Icon(TablerIcons.float_center, size:18),
                                                Icon(TablerIcons.sign_right, size:18),
                                                
                                              ], [
                                                CrossAxisAlignment.start,
                                                CrossAxisAlignment.center,
                                                CrossAxisAlignment.end
                                              ]),
                                              
                                              SizedBox(height:4),
                                              titleTile( ' mainAxisSize',
                                                TablerIcons.ruler_measure),
                                              
                                              AnimatedToggleSwitch<MainAxisSize>.dual(
                                                current:
                                                    sheetListItem.mainAxisSize,
                                                first: MainAxisSize.min,
                                                second: MainAxisSize.max,
                                                onChanged: (value) {
                                                  setState(() {
                                                    sheetListItem
                                                        .mainAxisSize = value;
                                                  });
                                                },
                                                animationCurve:
                                                    Curves.easeInOutExpo,
                                                animationDuration:
                                                    Durations.medium4,
                                                borderWidth:
                                                    2, // backgroundColor is set independently of the current selection
                                                styleBuilder: (value) =>
                                                    ToggleStyle(
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    5),
                                                        indicatorBorderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    5),
                                                        borderColor:
                                                            defaultPalette
                                                                .secondary,
                                                        backgroundColor:
                                                            defaultPalette
                                                                .secondary,
                                                        indicatorColor:
                                                            defaultPalette
                                                                    .extras[
                                                                0]), // indicatorColor changes and animates its value with the selection
                                                iconBuilder: (value) {
                                                  return Icon(
                                                      value ==
                                                              MainAxisSize.min
                                                          ? TablerIcons
                                                              .viewport_narrow
                                                          : TablerIcons
                                                              .viewport_wide,
                                                      size: 12,
                                                      color: defaultPalette
                                                          .primary);
                                                },
                                                textBuilder: (value) {
                                                  return Text(
                                                    value ==MainAxisSize.min
                                                        ? 'min'
                                                        : 'max',
                                                    style:
                                                        GoogleFonts.bungee(
                                                            fontSize: 12),
                                                  );
                                                },
                                                height: 25,
                                                spacing: (width) - 100,
                                              ),
                                              
                                              Text(sheetListItem.indexPath.toString()),
                                            ],
                                          ));
                                    }))),
                      ),
                    )
                  ],
                     
                  if(index == 1) ...buildSuperDecorationSwiperInterface(listDecorationPath, listDecorationNameController)
                ],
              );
            },
          ),
        );
      case 4:
        //The actual cards for table properties
        return FadeInRight(
          onFinish: (direction) {
            setState(() {
              tablePropertyCardsController
                  .setCardIndex(whichTablePropertyTabIsClicked);
            });
          },
          from: 3,
          duration: Durations.short3,
          child: AppinioSwiper(
            controller: tablePropertyCardsController,
            backgroundCardCount: 1,
            backgroundCardOffset: Offset(3, 3),
            duration: Duration(milliseconds: 150),
            backgroundCardScale: 1,
            loop: true,
            cardCount: 3,
            allowUnSwipe: true,
            allowUnlimitedUnSwipe: true,
            initialIndex: whichTablePropertyTabIsClicked,
            maxAngle: 50,
            threshold: 100,
            onCardPositionChanged: (position) {
              setState(() {
                // isListDecorationLibraryToggled = true;
                _cardPosition =
                    position.offset.dx.abs() + position.offset.dy.abs();
              });
            },
            onSwipeEnd: (a, b, direction) {
              // print(direction.toString());
              setState(() {
                // ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
                isListDecorationLibraryToggled = false;
                whichTablePropertyTabIsClicked = b;
                _cardPosition = 0;
                if (sheetTableItem.id == 'yo') {
                  _findSheetListItem();
                }
              });
            },
            onSwipeCancelled: (activity) {},
            cardBuilder: (context, index) {
              var tblinx = int.tryParse(sheetTableItem.sheetTableDecoration.id.substring(sheetTableItem.sheetTableDecoration.id.indexOf('/') + 1))??-69;
              var tblbginx = int.tryParse(sheetTableItem.sheetTableDecoration.id.substring(sheetTableItem.sheetTableDecoration.id.indexOf('/') + 1))??-69;
              var rowinx = int.tryParse(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.substring(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration.indexOf('/') + 1))??-33;
              var colinx = int.tryParse(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.substring(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration.indexOf('/') + 1))??-33;
              var width = (sWidth * wH2DividerPosition - 30);
              var sheetTableDecoration = sheetDecorationList[tblinx];
              var rowDecoration = sheetDecorationList[rowinx];
              var columnDecoration = sheetDecorationList[colinx];
              var sheetTablebgDecoration = sheetDecorationList[tblbginx];
              String selectedDecorationTitle = 
              whichTableDecorationIsClicked == 0
              ? ' Table'
              : whichTableDecorationIsClicked == 1
                ? ' TableBG'
                : whichTableDecorationIsClicked == 2
                  ? ' Row '+(sheetTableVariables.rowLayerIndex+1).toString()
                  : ' Column '+numberToColumnLabel(sheetTableVariables.columnLayerIndex+1);
              List<TextEditingController> tableTextControllers=[
                TextEditingController()..text= (sheetTableItem.pinnedRows-1).toString(),
                TextEditingController()..text= (sheetTableItem.pinnedColumns-1).toString(),
                TextEditingController()..text= sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size.toStringAsFixed(2).replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text= sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size.toStringAsFixed(2).replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text=sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan.toString().replaceAll(RegExp(r'.0$'),''),
                TextEditingController()..text= sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan.toString().replaceAll(RegExp(r'.0$'),''),
                    
              ];
              
              Widget switchTableDecorationTile (int s, String p, double top){
              return Positioned(
                top:top,
                child: GestureDetector(
                  onTap:(){
                    setState(() {
                      whichTableDecorationIsClicked = s;
                      selectedDecorationTitle = p;
                      isTableDecorationModeDropped = false;
                      _findSheetTableItem(sheetTableItem, updateVariables: false);
                    });
                  },
                  child: Text( p,
                  maxLines: 1,
                  overflow:TextOverflow.ellipsis,
                  style: GoogleFonts.lexend(
                  fontSize: 15,
                  letterSpacing:-1,
                  )),
                ));
            }
    
              Widget titleTile(
              String name,
              IconData icon, {
              double fontSize = 13,
              }) {
              return Row(children: [
                Icon(icon, size: 20),
                Expanded(
                  child: Text(
                    name,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: GoogleFonts.lexend(
                        fontSize: fontSize,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w500),
                  ),
                  )
                ]);
              }
              
              List<Widget> tablePropertyTile(int s, String name, IconData icon) {
                return [
                  SizedBox(width:2),
                  MouseRegion(
                    cursor: s!=5? SystemMouseCursors.resizeLeftRight: SystemMouseCursors.basic,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                        //  fontFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier = HardwareKeyboard.instance.isControlPressed
                            ? 5
                            : HardwareKeyboard.instance.isShiftPressed
                                ? 0.1
                                : 1;
                        setState(() {
                          double currentValue =
                              double.tryParse(tableTextControllers[s].text) ??
                                  0.0;
                          double newValue = (currentValue + details.delta.dx * multiplier)
                              .clamp(
                                s==0
                                ? 0
                                : double.negativeInfinity
                               , double.infinity);

                          double parsedValue = double.parse(newValue.toStringAsFixed(2));
                          switch (s) {
                            case 0:
                              sheetTableItem.pinnedRows=(parsedValue+1).ceil().clamp(1, sheetTableItem.rowData.length);
                              break;
                            case 1:
                              sheetTableItem.pinnedColumns=(parsedValue+1).ceil().clamp(1, sheetTableItem.columnData.length);
                              break;
                            case 2:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;
                            case 3:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;  
                            case 4:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, double.infinity);
                              break;
                            // case 5:
                            //   sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                            //   break;
                            case 6:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;  
                            case 7:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, double.infinity);
                              break;     
                            case 8:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan=(parsedValue.round()).clamp(1, (sheetTableItem.rowData.length-sheetTableVariables.rowLayerIndex));
                              applySpans(sheetTableItem);
                              break;  
                            case 9:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan=(parsedValue.round()).clamp(1, (sheetTableItem.columnData.length-sheetTableVariables.columnLayerIndex));
                              applySpans(sheetTableItem);
                              break;        
                          }
                          
                        });
                      },
                      child: Row(
                        children: [
                          Icon(
                            icon,
                            size: 16,
                          ),
                          Text(
                            name,
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 10,
                    child: SizedBox(
                      height: 12,
                      child: TextFormField(
                        // onTapOutside: (event) => fontFocusNodes[s].unfocus(),
                        // focusNode: fontFocusNodes[s],
                        controller: tableTextControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(allowNegative: true),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            var parsedValue = double.parse(value);
                          switch (s) {
                            case 0:
                              sheetTableItem.pinnedRows=(double.parse(value)+1).ceil();
                              break;
                            case 1:
                              sheetTableItem.pinnedColumns=(double.parse(value)+1).ceil();
                              break;
                            case 2:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].size = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;
                            case 3:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize);
                              break;  
                            case 4:
                              sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].minSize, double.infinity);
                              break;
                            case 5:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].size = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;
                            case 6:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize = parsedValue.clamp(0, sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize);
                              break;  
                            case 7:
                              sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].maxSize = parsedValue.clamp(sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].minSize, double.infinity);
                              break;  
                            case 8:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].rowSpan=(parsedValue).ceil().clamp(1, sheetTableItem.rowData.length);
                              break;  
                            case 9:
                              sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].colSpan=(parsedValue).ceil().clamp(1, sheetTableItem.columnData.length);
                              break;      
                          }
                          });
                        },
                      ),
                    ),
                  ),
                ];
                }

              Widget tableAxisCard(int axis) {
                return Stack(
                  children: [
                    //BackgroundColor
                    Container(
                      width: width,
                      height: 195,
                      padding: EdgeInsets.only(left: 1),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: defaultPalette.primary,
                        border: Border.all(width:2, color:defaultPalette.extras[0]),
                        borderRadius: BorderRadius.circular(20),
                      ),
                    ),
                    //Add row or column and TITLE 
                    Positioned(
                      left: 8,
                      top: 8,
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          ClipRRect(
                            borderRadius:BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.primary,
                              child: InkWell(
                                hoverColor: defaultPalette.secondary,
                                splashColor: defaultPalette.secondary,
                                highlightColor: defaultPalette.secondary,
                                onTap: () {
                                  setState(() {
                                    
                                    if (axis==0) {
                                      
                                      sheetTableItem.rowData.add(
                                        SheetTableRow(
                                          id: 'RW-'+Uuid().v4(), 
                                          parentId: sheetTableItem.id,
                                          rowDecoration: sheetTableItem.sheetTableDecoration.id,
                                          indexPath: IndexPath(
                                            parent: sheetTableItem.indexPath,
                                            index: sheetTableItem.rowData.length)
                                          )
                                      );
                                      sheetTableItem.cellData.add(
                                        List.generate(sheetTableItem.columnData.length, (index)  
                                        { 
                                          var rowIndexPath = IndexPath(
                                            parent: sheetTableItem.indexPath,
                                            index:sheetTableItem.cellData.length
                                          );
                                          return SheetTableCell(
                                          id: '${numberToColumnLabel(index+1)}'+sheetTableItem.rowData.length.toString(), 
                                          parentId: sheetTableItem.id, 
                                          sheetItem: _addTextField(
                                            parentId: sheetTableItem.id,
                                            textDecoration: sheetTableItem.sheetTableDecoration,
                                            shouldReturn: true,
                                            isCell: true,
                                            hide:false,
                                            indexPath: IndexPath(
                                              parent: rowIndexPath,
                                              index: index),
                                            name:'${numberToColumnLabel(index+1)}'+sheetTableItem.rowData.length.toString(),
                                            ),
                                          indexPath: rowIndexPath  
                                          );
                                        }
                                        )
                                      );
                                    } else{
                                      sheetTableItem.columnData.add(
                                        SheetTableColumn(
                                          id: 'CL-'+Uuid().v4(), parentId: sheetTableItem.id,
                                          size: 50,
                                          columnDecoration: sheetTableItem.sheetTableDecoration.id,
                                          indexPath: IndexPath(
                                            parent: sheetTableItem.indexPath,
                                            index: sheetTableItem.columnData.length)
                                          )
                                      );
                                      for (var i = 0; i < sheetTableItem.rowData.length; i++) {
                                        var rowIndexPath = IndexPath(
                                          parent: sheetTableItem.indexPath,
                                          index: i
                                        );
                                        sheetTableItem.cellData[i].add(
                                          SheetTableCell(
                                            id: '${numberToColumnLabel(sheetTableItem.cellData[i].length+1)}'+(i+1).toString(), 
                                            parentId: parentId, 
                                            sheetItem: _addTextField(
                                            parentId: sheetTableItem.id,
                                            textDecoration: sheetTableItem.sheetTableDecoration,
                                            shouldReturn: true,
                                            isCell: true,
                                            hide: false,
                                            name: '${numberToColumnLabel(sheetTableItem.cellData[i].length+1)}'+(i+1).toString(),
                                            indexPath: IndexPath(
                                              parent: rowIndexPath,
                                              index: sheetTableItem.cellData[i].length)
                                            ),
                                            indexPath: rowIndexPath
                                            )

                                        );
                                      }
                                    }
                                  });
                                },
                                child: Icon(
                                  TablerIcons.plus,
                                  size:23,
                                ),
                              ),
                            ),
                          ),
                          Icon(
                            axis == 0? TablerIcons.layout_rows : TablerIcons.layout_columns,
                            size:24,
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                              Text(
                              axis==0? 'rows ':'columns ',
                              maxLines: 1,
                              style: GoogleFonts.lexend(
                                height: 0.7,
                                fontSize:20,
                                letterSpacing: -1,
                                fontWeight: FontWeight.w500),
                              ),
                              // const SizedBox(
                              //   height:4
                              // ),
                              // Text(
                              // '  id: '+ (axis==0? sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].id:sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].id),
                              //   maxLines: 1,
                              //   overflow: TextOverflow.ellipsis,
                              //   textAlign: TextAlign.center,
                              //   style: GoogleFonts.lexend(
                              //     height: 0.8,
                              //     fontSize: 8,
                              //     letterSpacing: -1,
                              //     fontWeight: FontWeight.w500),
                              // ),                        
                            ],
                          ),
                          SizedBox(
                            width: 2,
                          ),
                        ],
                      ),
                    ),
                    //Properties of AXIS editor, textfields and decor display
                    Positioned(
                        left: 42,
                        top: 45,
                        height:140,
                        width:width - 49,
                        child: Column(
                          children: [
                              SizedBox(
                              width:width - 49,
                              child: Row(
                                children: [Expanded(
                                  child: titleTile(
                                  (axis==0?'row':'col')+' decor ', 
                                  TablerIcons.sparkles,
                                  fontSize: 14
                                  ),
                                ),]
                              ),
                            ),   
                            //decoration button for row or column
                            ElevatedLayerButton(
                              onClick:(){
                                whichTableDecorationIsClicked = axis==0? 2:3;
                                tablePropertyCardsController.setCardIndex(2);
                                whichTablePropertyTabIsClicked =2;
                                _findSheetTableItem(sheetTableItem, updateVariables: false);
                              },
                              buttonHeight: 48,
                              buttonWidth: (width-48.2),
                              borderRadius: BorderRadius.circular(15),
                              animationDuration: const Duration( milliseconds: 100),
                              animationCurve: Curves.ease,
                              topDecoration: BoxDecoration(
                                color: Colors.white,
                                border: Border.all(),
                              ),
                              topLayerChild: Row(
                                children: [
                                  Container(
                                    margin: EdgeInsets.all(4),
                                    width:35,height:35,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(15),
                                      border: Border.all()),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(15),
                                      child: buildDecoratedContainer(
                                        (axis ==0? rowDecoration: columnDecoration) as SuperDecoration, 
                                        SizedBox(
                                          width:width,
                                          height:35,
                                        ),
                                        true),
                                    ),
                                  ),
                                  Expanded(
                                    child: Text(
                                      sheetTableDecoration.name,
                                      maxLines: 1,
                                      textAlign: TextAlign.center,
                                      overflow: TextOverflow.ellipsis,
                                      style: GoogleFonts.lexend(
                                        color: defaultPalette.extras[0],
                                        fontSize: 15,
                                        letterSpacing: -1,
                                        fontWeight: FontWeight.w500),
                                    ),
                                  ),
                                  
                                ],
                              ),
                              subfac: 5,
                              depth:2,
                              baseDecoration: BoxDecoration(
                                color: defaultPalette.extras[3],
                                // border: Border.all(),
                              ),
                            ),
                            const SizedBox(
                              height:3
                            ),
                             const SizedBox(
                                height:5
                              ),
                              ...axis==0?
                              [
                              Row(children:tablePropertyTile(2,' size', TablerIcons.ruler_measure_2)),
                              Row(children:tablePropertyTile(3,' min', TablerIcons.point_filled)),
                              Row(children:tablePropertyTile(4,' max', TablerIcons.circle)),
                              ]
                              :
                              [
                              Row(children:tablePropertyTile(5,' size', TablerIcons.ruler_measure)),
                              Row(children:tablePropertyTile(6,' min', TablerIcons.point_filled)),
                              Row(children:tablePropertyTile(7,' max', TablerIcons.circle)),
                              ],
                              const SizedBox(
                                height:3
                              ),
                            
                          ],
                        )),
                    //THE LAYERS AND SCROLLBAR OF SHADOWLAYERS IN DECORATION EDITOR
                    Positioned(
                      top: 42,
                      left:2,
                      child: Column(
                        children: [
                          SizedBox(
                            width: 31,
                            height: 122,
                            child: ScrollConfiguration(
                              behavior: ScrollBehavior()
                                  .copyWith(scrollbars: false),
                              child: DynMouseScroll(
                                  durationMS: 500,
                                  scrollSpeed: 1,
                                  builder: (context, controller, physics) {
                                    return ScrollbarUltima(
                                      alwaysShowThumb: true,
                                      controller: controller,
                                      scrollbarPosition:
                                          ScrollbarPosition.left,
                                      backgroundColor: defaultPalette.primary,
                                      scrollbarLength: 120,
                                      isDraggable: true,
                                      maxDynamicThumbLength: 60,
                                      thumbBuilder:
                                          (context, animation, widgetStates) {
                                        return Container(
                                          margin:EdgeInsets.only(top:0),
                                          decoration: BoxDecoration(
                                              border: Border.all(color: defaultPalette.extras[3],),
                                              color: defaultPalette.extras[3],
                                              borderRadius:
                                                  BorderRadius.circular(2)),
                                          width: 5,
                                        );
                                      },
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(left: 7.0),
                                        child: ReorderableListView(
                                          onReorder: (oldIndex, newIndex) {
                                            setState(() {
                                              // print(oldIndex.toString() +
                                              //     ' ' +
                                              //     newIndex.toString());
                                              // final shadowList =
                                              //     currentItemDecoration
                                              //             .decoration
                                              //             .boxShadow ??
                                              //         [];
                                              // final shadow = shadowList
                                              //     .removeAt(oldIndex);
                                              // if ((newIndex !=
                                              //     shadowList.length + 1)) {
                                              //   print('hah' +
                                              //       shadowList.length
                                              //           .toString() +
                                              //       ' ' +
                                              //       newIndex.toString());
                                              //   shadowList.insert(
                                              //       newIndex, shadow);
                                              //   if (oldIndex < newIndex) {
                                              //     shadowLayerIndex =
                                              //         newIndex - 1;
                                              //   } else {
                                              //     shadowLayerIndex =
                                              //         newIndex;
                                              //   }
                                              //   print('hah' +
                                              //       shadowLayerIndex
                                              //           .toString() +
                                              //       ' ' +
                                              //       newIndex.toString());
                                              // } else {
                                              //   shadowList.add(shadow);
                                              //   shadowLayerIndex =
                                              //       shadowList.length - 1;
                                              //   print(oldIndex.toString() +
                                              //       ' ' +
                                              //       newIndex.toString());
                                              // }
                                              // currentItemDecoration =
                                              //     currentItemDecoration.copyWith(
                                              //         decoration:
                                              //             currentItemDecoration
                                              //                 .decoration
                                              //                 .copyWith(
                                              //                     boxShadow:
                                              //                         shadowList));
                                            });
                                          },
                                          proxyDecorator:
                                              (child, index, animation) {
                                            return child;
                                          },
                                          buildDefaultDragHandles: false,
                                          physics: physics,
                                          scrollController: controller,
                                          children: [
                                          for (int i = 0;
                                              i < (axis==0?sheetTableItem.rowData.length:sheetTableItem.columnData.length);
                                              i++)
                                          ReorderableDragStartListener(
                                            index: i,
                                            key: ValueKey(i),
                                            child: ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              child: Padding(
                                                padding: EdgeInsets.only(bottom: 0),
                                                child: Material(
                                                  color: defaultPalette.transparent,
                                                  child: InkWell(
                                                    hoverColor: defaultPalette.extras[3],
                                                    splashColor:
                                                        defaultPalette
                                                            .extras[3],
                                                    highlightColor:
                                                        defaultPalette
                                                            .extras[3],
                                                    onTap: () {
                                                      setState(() {
                                                        if (axis==0) {
                                                          sheetTableVariables.rowLayerIndex = i;
                                                        } else {
                                                          sheetTableVariables.columnLayerIndex = i;
                                                        }
                                                      });
                                                    },
                                                    child: Container(
                                                      margin:
                                                          EdgeInsets.only( bottom:1,
                                                              right: 1),
                                                      padding:
                                                          EdgeInsets.only(
                                                        left: 1,
                                                      ),
                                                      decoration:
                                                        BoxDecoration(
                                                            border: (axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? Border
                                                                    .all(
                                                                      color: defaultPalette.extras[3],
                                                                    )
                                                                //   top: BorderSide(), bottom: BorderSide(),left: BorderSide(), right: BorderSide.none
                                                                // )
                                                                : null,
                                                            color: (axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? defaultPalette
                                                                    .extras[3]
                                                                : null,
                                                            borderRadius:
                                                                BorderRadius.circular(
                                                                    5)),
                                                      child: Text(
                                                        ' ${axis ==0? i+1:numberToColumnLabel(i+1)}',
                                                        style: GoogleFonts.lexend(
                                                            fontSize: axis==0? 17:15,
                                                            letterSpacing:
                                                                -1,
                                                            color:(axis==0? sheetTableVariables.rowLayerIndex:sheetTableVariables.columnLayerIndex) ==
                                                                    i
                                                                ? defaultPalette.primary: defaultPalette
                                                                .extras[0]),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                          ],
                                        ),
                                      ),
                                    );
                                  }),
                              ),
                            ),
                            SizedBox(
                              height: 2,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.secondary,
                                      splashColor: defaultPalette.secondary,
                                      highlightColor: defaultPalette.secondary,
                                      onTap: () {
                                        setState(() {
                                         if (axis == 0 && sheetTableItem.rowData.length>1 ) {
                                          sheetTableItem.rowData.removeAt(sheetTableVariables.rowLayerIndex);
                                          sheetTableItem.cellData.removeAt(sheetTableVariables.rowLayerIndex);
                                          if (sheetTableVariables.rowLayerIndex == sheetTableItem.rowData.length) {
                                            sheetTableVariables.rowLayerIndex--;
                                          }
                                         } else if(axis == 1 &&sheetTableItem.columnData.length>1 ){
                                          sheetTableItem.columnData.removeAt(sheetTableVariables.columnLayerIndex);
                                          for (var i = 0; i < sheetTableItem.rowData.length; i++) {

                                            sheetTableItem.cellData[i].removeAt(sheetTableVariables.columnLayerIndex);
                                          }
                                         }
                                         _findItem();
                                         if (sheetTableVariables.columnLayerIndex == sheetTableItem.columnData.length) {
                                            sheetTableVariables.columnLayerIndex--;
                                          }
                                         reassignCellIds(sheetTableItem); 
                                        });
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              color:
                                                  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.trash,
                                            size: 18,
                                          )),
                                    ),
                                  ),
                                ),
                                
                              ],
                            )
                          
                          ],
                        )),
                      ],
                    );             
              }

              return Stack(
                children:[
                  Positioned.fill(
                    child: AnimatedContainer(
                      duration: Durations.short3,
                      margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: defaultPalette.secondary,
                        border: Border.all(width: 2),
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                  ),
                  Positioned.fill(
                    child: AnimatedOpacity(
                      opacity: whichTablePropertyTabIsClicked == index
                          ? 0
                          : index >= (whichTablePropertyTabIsClicked + 2) % 10
                              ? 1
                              : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                      duration: Duration(milliseconds: 300),
                      child: AnimatedContainer(
                        duration: Duration(milliseconds: 300),
                        margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: index == (whichTablePropertyTabIsClicked + 1) % 10
                              ? defaultPalette.extras[0]
                              : index == (whichTablePropertyTabIsClicked + 2) % 10
                                  ? defaultPalette.extras[0]
                                  : defaultPalette.extras[0],
                          border: Border.all(width: 2),
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                    ),
                  ),
                  //GRAPH BEHIND FORMAT CARD
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(25),
                      child: Opacity(
                        opacity: 0.35,
                        child: LineChart(LineChartData(
                          lineBarsData: [LineChartBarData()],
                          titlesData: const FlTitlesData(show: false),
                          gridData: FlGridData(
                            getDrawingVerticalLine: (value) => FlLine(
                              color: defaultPalette.extras[0]
                                  .withOpacity(0.8),
                              dashArray: [5, 5],
                              strokeWidth: 1),
                            getDrawingHorizontalLine: (value) => FlLine(
                              color: defaultPalette.extras[0]
                                  .withOpacity(0.8),
                              dashArray: [5, 5],
                              strokeWidth: 1),
                            show: true,
                            horizontalInterval: 2,
                            verticalInterval: 30),
                          borderData: FlBorderData(show: false),
                          minY: 0,
                          maxY: 50,
                          maxX: dateTimeNow.millisecondsSinceEpoch
                                      .ceilToDouble() /
                                  500 +
                              250,
                          minX: dateTimeNow.millisecondsSinceEpoch
                                  .ceilToDouble() /
                              500)),
                      ),
                    ),
                  ),
                  
                  if (index == 0) ...[
                    Positioned.fill(
                      child: Padding(
                        padding: EdgeInsets.all(15).copyWith(left: 12, right: 14),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: ScrollConfiguration(
                            behavior: ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                    children: [
                                      //Id of Table
                                      Container(
                                      margin: EdgeInsets.only(top:4, left:2, right:2),
                                      padding: EdgeInsets.all(5),
                                      decoration: BoxDecoration(
                                      color:defaultPalette.primary,
                                      borderRadius: BorderRadius.circular(20),
                                      border: Border.all(color: defaultPalette.extras[0], width: 2)
                                      ),
                                      child: Column(
                                        children: [
                                        const SizedBox(
                                          height:3
                                        ),
                                        Row(
                                          children: [
                                            const Icon(TablerIcons.table,
                                              size:30,
                                              weight: 600,
                                            ),
                                            const SizedBox(
                                              width:3
                                            ),
                                            Expanded(
                                              child: Column(
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                mainAxisAlignment: MainAxisAlignment.start,
                                                children: [
                                                  Text('tableProperties',
                                                  maxLines: 1,
                                                  overflow: TextOverflow.ellipsis,
                                                  style: GoogleFonts.lexend(
                                                    height: 0.9,
                                                    fontSize:18,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w500),
                                                  ),
                                                  const SizedBox(
                                                    height:4
                                                  ),
                                                  Text(
                                                  'id: '+ (sheetTableItem.id),
                                                    maxLines: 1,
                                                    overflow: TextOverflow.ellipsis,
                                                    textAlign: TextAlign.center,
                                                    style: GoogleFonts.lexend(
                                                      height: 1,
                                                      fontSize: 8,
                                                      letterSpacing: -1,
                                                      fontWeight: FontWeight.w500),
                                                  ),                        
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      // cells and rows and columns count
                                      Container(
                                        padding: EdgeInsets.all(0).copyWith(left:4,right: 4),
                                        height: 25,
                                        decoration: BoxDecoration(
                                        color: defaultPalette.secondary,
                                        borderRadius: BorderRadius.circular(15),
                                        border: Border.all(
                                          width: 2,
                                          color: defaultPalette.extras[0]),
                                        ),
                                        child:Row(
                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                          children: [
                                            Icon(TablerIcons.border_all, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.columnData.length*sheetTableItem.rowData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                            Container(
                                              height: 35,
                                              width: 2,
                                              color: defaultPalette.extras[0],

                                            ),
                                            SizedBox(width: 2,),
                                            Icon(TablerIcons.layout_rows, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.rowData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                            Container(
                                              height: 35,
                                              width: 2,
                                              color: defaultPalette.extras[0],

                                            ),
                                            SizedBox(width: 2,),
                                            Icon(TablerIcons.layout_columns, size:16),
                                            Expanded(
                                              child: Text( '${sheetTableItem.columnData.length}', 
                                              textAlign: TextAlign.center,
                                              style: GoogleFonts.lexend(
                                                  fontSize:13,
                                                  letterSpacing: -1,
                                                  color: defaultPalette.extras[0]),
                                              ),
                                            ),
                                     
                                          ],
                                        ) ,
                                      ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      // Row(mainAxisAlignment:MainAxisAlignment.spaceBetween, children:tablePropertyTile(0, 'pinnedRows', TablerIcons.layout_sidebar)),
                                      Row(mainAxisAlignment:MainAxisAlignment.spaceBetween, children:tablePropertyTile(1, 'pinnedColumns', TablerIcons.layout_navbar)),
                                      const SizedBox(
                                            height:4
                                          ),
                                      
                                      
                                      ],
                                      ),
                                      ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      //decoration in table properties
                                      Row(
                                        children: [
                                          Expanded(
                                            child: Column(
                                              children: [
                                                titleTile(
                                                  ' decor ', 
                                                  TablerIcons.sparkles,
                                                  fontSize: 15
                                                  ),   
                                                ElevatedLayerButton(
                                                  onClick: (){
                                                    setState(() {
                                                    whichTableDecorationIsClicked = 0;
                                                    tablePropertyCardsController.setCardIndex(2);
                                                    whichTablePropertyTabIsClicked =2;
                                                    _findSheetTableItem(sheetTableItem, updateVariables: false);
                                                  });
                                                  },
                                                  buttonHeight: 50,
                                                  buttonWidth: (width-12.5)/2,
                                                  borderRadius: BorderRadius.circular(15),
                                                  animationDuration: const Duration( milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    children: [
                                                      Container(
                                                        margin: EdgeInsets.all(4),
                                                        width:35,height:35,
                                                        decoration: BoxDecoration(
                                                          borderRadius: BorderRadius.circular(15),
                                                          border: Border.all()),
                                                        child: ClipRRect(
                                                          borderRadius: BorderRadius.circular(15),
                                                          child: buildDecoratedContainer(
                                                            sheetTableDecoration as SuperDecoration, 
                                                            SizedBox(
                                                              width:width,
                                                              height:35,
                                                            ),
                                                            true),
                                                        ),
                                                      ),
                                                      Expanded(
                                                        child: Text(
                                                          sheetTableDecoration.name,
                                                          maxLines: 1,
                                                          textAlign: TextAlign.center,
                                                          overflow: TextOverflow.ellipsis,
                                                          style: GoogleFonts.lexend(
                                                            color: defaultPalette.extras[0],
                                                            fontSize: 15,
                                                            letterSpacing: -1,
                                                            fontWeight: FontWeight.w500),
                                                        ),
                                                      ),
                                                      
                                                    ],
                                                  ),
                                                  subfac: 5,
                                                  depth:3.5,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[3],
                                                    border: Border.all(),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                          //bgdecoration in table properties
                                          Expanded(
                                            child: Column(
                                              children: [
                                                titleTile(
                                                  ' bg decor ', 
                                                  TablerIcons.sparkles,
                                                  fontSize: 15
                                                  ),   
                                                ElevatedLayerButton(
                                                  onClick: (){
                                                    whichTableDecorationIsClicked = 1;
                                                    tablePropertyCardsController.setCardIndex(2);
                                                    whichTablePropertyTabIsClicked =2;
                                                    _findSheetTableItem(sheetTableItem, updateVariables: false);
                                                  },
                                                  buttonHeight: 50,
                                                  buttonWidth: (width-12.5)/2,
                                                  borderRadius: BorderRadius.circular(15),
                                                  animationDuration: const Duration( milliseconds: 100),
                                                  animationCurve: Curves.ease,
                                                  topDecoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(),
                                                  ),
                                                  topLayerChild: Row(
                                                    children: [
                                                      Container(
                                                        margin: EdgeInsets.all(4),
                                                        width:35,height:35,
                                                        decoration: BoxDecoration(
                                                          borderRadius: BorderRadius.circular(15),
                                                          border: Border.all()),
                                                        child: ClipRRect(
                                                          borderRadius: BorderRadius.circular(15),
                                                          child: buildDecoratedContainer(
                                                            sheetTablebgDecoration as SuperDecoration, 
                                                            SizedBox(
                                                              width:width,
                                                              height:35,
                                                            ),
                                                            true),
                                                        ),
                                                      ),
                                                        Expanded(
                                                          child: Text(
                                                            sheetTablebgDecoration.name,
                                                            maxLines: 1,
                                                            textAlign: TextAlign.center,
                                                            overflow: TextOverflow.ellipsis,
                                                            style: GoogleFonts.lexend(
                                                              color: defaultPalette.extras[0],
                                                              fontSize: 15,
                                                              letterSpacing: -1,
                                                              fontWeight: FontWeight.w500),
                                                          ),
                                                        ),
                                                      
                                                    ],
                                                  ),
                                                  subfac: 5,
                                                  depth:3.5,
                                                  baseDecoration: BoxDecoration(
                                                    color: defaultPalette.extras[3],
                                                    border: Border.all(),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(
                                            height:8
                                          ),
                                      //row and column property cards
                                      ...[
                                          tableAxisCard(0),
                                          const SizedBox(
                                            height:8
                                          ),
                                          tableAxisCard(1) 
                                      ],
                                      const SizedBox(
                                            height:5
                                          ),
                                      ],
                                  ));
                              }
                            )
                          )
                        )
                      )
                    )
                  ],
                  
                  if(index==1) ...[
                    Positioned.fill(
                      child: Padding(
                        padding: EdgeInsets.all(15).copyWith(left: 12, right: 14),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(20),
                          child: ScrollConfiguration(
                            behavior: ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                              durationMS: 500,
                              scrollSpeed: 1,
                              builder: (context, controller, physics) {
                                return SingleChildScrollView(
                                  controller: controller,
                                  physics: physics,
                                  child: Column(
                                      children:[
                                        Container(
                                        margin: EdgeInsets.only(top:4, left:2, right:2),
                                        padding: EdgeInsets.all(5),
                                        decoration: BoxDecoration(
                                        color:defaultPalette.primary,
                                        borderRadius: BorderRadius.circular(20),
                                        border: Border.all(color: defaultPalette.extras[0], width: 2)),
                                        child:  Stack(
                                          children: [
                                            Positioned(
                                              right:0,
                                              child: Text((sheetTableItem.cellData[sheetTableVariables.rowLayerIndex][sheetTableVariables.columnLayerIndex].id),
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      textAlign: TextAlign.center,
                                                      style: GoogleFonts.mitr(
                                                        color:defaultPalette.extras[0].withOpacity(0.1),
                                                        height: 1,
                                                        fontSize:90,
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500),
                                                    ),
                                            ),   
                                            Column(
                                            children: [
                                            const SizedBox(
                                              height:3
                                            ),
                                            Row(
                                              children: [
                                                const Icon(TablerIcons.border_all,
                                                  size:30,
                                                  weight: 600,
                                                ),
                                                const SizedBox(
                                                  width:3
                                                ),
                                                //title and id of cell data
                                                Expanded(
                                                  child: Column(
                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                    mainAxisAlignment: MainAxisAlignment.start,
                                                    children: [
                                                      Text('cellProperties',
                                                      maxLines: 1,
                                                      overflow: TextOverflow.ellipsis,
                                                      style: GoogleFonts.lexend(
                                                        height: 0.9,
                                                        fontSize:18,
                                                        letterSpacing: -1,
                                                        fontWeight: FontWeight.w500),
                                                      ),                  
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                            const SizedBox(
                                                height:8
                                              ),     
                                          // Row(mainAxisAlignment:MainAxisAlignment.spaceBetween, children:tablePropertyTile(0, 'pinnedRows', TablerIcons.layout_sidebar)),
                                          Row(children:tablePropertyTile(8, ' rowSpan', TablerIcons.table_row)),
                                          Row(children:tablePropertyTile(9, ' colSpan', TablerIcons.table_column)),
                                          const SizedBox( height:4 ),
                                          
                                          
                                          ],
                                          ),
                                          ],
                                        ),
                                        ),
                                      ],
                                    ),
                                 );
                               }
                             ),
                           ),
                         ),
                       ),
                     )
                  ],
                  if (index == 2) ...[
                  ...buildSuperDecorationSwiperInterface(
                    whichTableDecorationIsClicked ==0
                    ? tableDecorationPath
                    : whichTableDecorationIsClicked ==1
                    ? tablebgDecorationPath
                    : whichTableDecorationIsClicked ==2
                    ? rowDecorationPath
                    : columnDecorationPath
                    , 
                    whichTableDecorationIsClicked ==0
                    ? tableDecorationNameController
                    : whichTableDecorationIsClicked ==1
                    ? tablebgDecorationNameController
                    : whichTableDecorationIsClicked ==2
                    ? rowDecorationNameController
                    : columnDecorationNameController
                    
                    ),
                  
                  Positioned(
                  top:75,
                  left:42,
                  child: ClipRRect(
                    borderRadius:BorderRadius.circular(5),
                    child: Material(
                            color: defaultPalette.transparent,
                            child: InkWell(
                              hoverColor: defaultPalette.primary,
                              highlightColor: defaultPalette.primary,
                              splashColor: defaultPalette.primary,
                              onTap:(){
                                setState(() {
                                  isTableDecorationModeDropped= !isTableDecorationModeDropped;
                                });
                              },
                              child: AnimatedContainer(
                                duration: Durations.medium4,
                                height:isTableDecorationModeDropped? 110:26,
                                width: width-90,
                                decoration:BoxDecoration(
                                  color: isTableDecorationModeDropped? defaultPalette.primary: defaultPalette.transparent,
                                  border: isTableDecorationModeDropped? Border.all():null,
                                  borderRadius:BorderRadius.circular(5),
                                ),
                                child: Stack(children: [
                                  Positioned(
                                    top:5,
                                    width: width-90,
                                    child: Row(
                                      children: [
                                        Expanded(child: Text(
                                          selectedDecorationTitle,
                                          maxLines: 1,
                                          overflow:TextOverflow.ellipsis,
                                          style: GoogleFonts.rockSalt())),
                                        Icon(TablerIcons.transfer_vertical, size:18),
                                        SizedBox(width:2)
                                      ],
                                    )),
                                  switchTableDecorationTile(0, ' Table', 30),
                                  switchTableDecorationTile(1, ' Tablebg', 50),
                                  switchTableDecorationTile(2, ' Row '+(sheetTableVariables.rowLayerIndex+1).toString(), 70),
                                  switchTableDecorationTile(3, ' Column '+ numberToColumnLabel(sheetTableVariables.columnLayerIndex+1), 90),
                          
                          // Text(sheetTableItem.id.startsWith('TB')? 'Table':'Row')
                            ],)
                          ),
                        ),
                      ),
                      )
                    ),
        
                  ],
                  
                ]
              );
            },
            )
        );
      default:
    }

    return FadeInRight(
      from: 3,
      duration: Durations.short3,
      child: AppinioSwiper(
        backgroundCardCount: 1,
        backgroundCardOffset: Offset(4, 4),
        duration: Duration(milliseconds: 150),
        backgroundCardScale: 1,
        loop: true,
        cardCount: spreadSheetList.length < 2 ? 2 : spreadSheetList.length,
        allowUnSwipe: true,
        allowUnlimitedUnSwipe: true,
        initialIndex: currentPageIndex,
        controller: propertyCardsController,
        onCardPositionChanged: (position) {
          setState(() {
            _cardPosition = position.offset.dx.abs() + position.offset.dy.abs();
          });
        },
        onSwipeEnd: (a, b, direction) {
          // print(direction.toString());
          setState(() {
            ref.read(propertyCardIndexProvider.notifier).update((s) => s = b);
            if (_cardPosition > 50) {
              currentPageIndex = (currentPageIndex + 1) % pageCount;
              _renderPagePreviewOnProperties();
            }
            // _currentCardIndex = b;
            _cardPosition = 0;
          });
        },
        onSwipeCancelled: (activity) {},
        cardBuilder: (BuildContext context, int index) {
          int currentCardIndex = ref.watch(propertyCardIndexProvider);
          int ind = pageCount <= 1 ? 0 : index;
          TextEditingController pgHexController = TextEditingController(
              text: '#${colorToHex(documentPropertiesList[ind].pageColor)}');
          return Stack(
            children: [
              Positioned.fill(
                child: AnimatedContainer(
                  duration: Durations.short3,
                  margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border.all(width: 2),
                    borderRadius: BorderRadius.circular(25),
                  ),
                ),
              ),

              Positioned.fill(
                child: AnimatedOpacity(
                  opacity: currentCardIndex == index
                      ? 0
                      : index >= (currentCardIndex + 2) % 10
                          ? 1
                          : (1 - (_cardPosition / 200).clamp(0.0, 1.0)),
                  duration: Duration(milliseconds: 300),
                  child: AnimatedContainer(
                    duration: Duration(milliseconds: 300),
                    margin: EdgeInsets.all(10).copyWith(left: 5, right: 8),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      color: index == (currentCardIndex + 1) % 10
                          ? defaultPalette.extras[0]
                          : index == (currentCardIndex + 2) % 10
                              ? defaultPalette.extras[0]
                              : defaultPalette.extras[0],
                      border: Border.all(width: 2),
                      borderRadius: BorderRadius.circular(25),
                    ),
                  ),
                ),
              ),

              // PROPERTIES Tab Parent
              Positioned(
                top: 0,
                height: (sHeight * 0.9) - 20,
                width: sWidth * wH2DividerPosition,
                child: Container(
                  padding:
                      EdgeInsets.only(top: 5, left: 0, right: 0, bottom: 70),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(25),
                    color: defaultPalette.transparent,
                  ),
                  margin: EdgeInsets.all(15),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(15),
                    child: PieCanvas(
                      child: ScrollConfiguration(
                        behavior: ScrollBehavior().copyWith(scrollbars: false),
                        child: SingleChildScrollView(
                          physics:
                              const CustomScrollPhysics(scrollFactor: 0.01),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              //MINI PREVIEW AND PAGE NUMBER AND NEXTPREV PARENT PARENT
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  //PAGE PROPERTIES FOR {{{MINI PAGE RENDER}}}
                                  Container(
                                    height: 120,
                                    width: 95,
                                    alignment: Alignment.center,
                                    child: Stack(
                                      children: [
                                        //{{{GRAPH}}}
                                        ClipRRect(
                                          borderRadius:
                                              BorderRadius.circular(25),
                                          child: Container(
                                            height: 120,
                                            // width: ((sWidth * wH2DividerPosition)/2)<150?100:((sWidth * wH2DividerPosition)/2),
                                            width: 95,
                                            decoration: BoxDecoration(
                                                borderRadius:
                                                    BorderRadius.circular(25),
                                                border: Border.all(),
                                                color: defaultPalette.extras[0]
                                                    .withOpacity(0.1)),
                                            child: Opacity(
                                              opacity: 1,
                                              child: LineChart(LineChartData(
                                                  lineBarsData: [
                                                    LineChartBarData()
                                                  ],
                                                  titlesData: const FlTitlesData(
                                                      show: false),
                                                  gridData: FlGridData(
                                                      getDrawingVerticalLine: (value) => FlLine(
                                                          color: defaultPalette
                                                              .extras[0]
                                                              .withOpacity(0.3),
                                                          dashArray: [5, 5],
                                                          strokeWidth: 1),
                                                      getDrawingHorizontalLine: (value) => FlLine(
                                                          color: defaultPalette
                                                              .extras[0]
                                                              .withOpacity(0.3),
                                                          dashArray: [5, 5],
                                                          strokeWidth: 1),
                                                      show: true,
                                                      horizontalInterval: 5,
                                                      verticalInterval: 30),
                                                  borderData:
                                                      FlBorderData(show: false),
                                                  minY: 0,
                                                  maxY: 50,
                                                  maxX: dateTimeNow.millisecondsSinceEpoch
                                                              .ceilToDouble() /
                                                          500 +
                                                      250,
                                                  minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                            ),
                                          ),
                                        ),
                                        //{{{MINI PAGE}}}
                                        GestureDetector(
                                          onTap: () {
                                            _renderPagePreviewOnProperties();
                                          },
                                          child: Container(
                                            height: documentPropertiesList[
                                                            currentPageIndex]
                                                        .orientationController ==
                                                    pw.PageOrientation.portrait
                                                ? 100
                                                : 60,
                                            width: documentPropertiesList[
                                                            currentPageIndex]
                                                        .orientationController ==
                                                    pw.PageOrientation.portrait
                                                ? 80
                                                : 80,
                                            margin: const EdgeInsets.only(
                                                top: 10, left: 8),
                                            decoration: BoxDecoration(
                                              image: cachedImageData != null
                                                  ? DecorationImage(
                                                      image: MemoryImage(
                                                          cachedImageData!),
                                                      fit: documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .orientationController ==
                                                              pw.PageOrientation
                                                                  .portrait
                                                          ? BoxFit.fitHeight
                                                          : BoxFit.fitWidth,
                                                    )
                                                  : null,
                                            ),
                                            child: cachedImageData == null
                                                ? Center(
                                                    child:
                                                        CircularProgressIndicator(),
                                                  )
                                                : null,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  //PAGE NUMBER AND DELETE AND NEXT-PREV
                                  Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    // mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                    children: [
                                      if (((sWidth * wH2DividerPosition) -
                                              145) >
                                          66)
                                        Container(
                                            height: 90,
                                            width:
                                                (sWidth * wH2DividerPosition) -
                                                    150,
                                            alignment: Alignment.center,
                                            child: CountingAnimation(
                                                value: (currentPageIndex + 1)
                                                    .toString(),
                                                scrollCount: 3,
                                                textStyle:
                                                    GoogleFonts.pressStart2p(
                                                        color: defaultPalette
                                                            .extras[0],
                                                        fontSize: 50))),
                                      Container(
                                        width:
                                            (sWidth * wH2DividerPosition) - 145,
                                        height: (sWidth * wH2DividerPosition) -
                                                    145 >
                                                66
                                            ? 20
                                            : 120,
                                        child: Flex(
                                          direction:
                                              (sWidth * wH2DividerPosition) -
                                                          145 >
                                                      66
                                                  ? Axis.horizontal
                                                  : Axis.vertical,
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceAround,
                                          crossAxisAlignment:
                                              (sWidth * wH2DividerPosition) -
                                                          145 >
                                                      66
                                                  ? CrossAxisAlignment.start
                                                  : CrossAxisAlignment.center,
                                          children: [
                                            if ((sWidth * wH2DividerPosition) -
                                                    145 <
                                                66)
                                              CountingAnimation(
                                                  value: documentPropertiesList[
                                                          currentPageIndex]
                                                      .pageNumberController
                                                      .text,
                                                  scrollCount: 3,
                                                  textStyle:
                                                      GoogleFonts.pressStart2p(
                                                          color: defaultPalette
                                                              .extras[0],
                                                          fontSize: 20)),
                                            //{{PREVIOUS PAGE BUTTON}}
                                            GestureDetector(
                                              onTap: () {
                                                setState(() {
                                                  if (currentPageIndex == 0) {
                                                    // pdfScrollController.animateTo(
                                                    //     currentPageIndex *
                                                    //         ((1.41428571429 *
                                                    //                 ((sWidth *
                                                    //                     (1 -
                                                    //                         vDividerPosition)))) +
                                                    //             16),
                                                    //     duration:
                                                    //         const Duration(
                                                    //             milliseconds:
                                                    //                 100),
                                                    //     curve: Curves.easeIn);
                                                    _renderPagePreviewOnProperties();
                                                    return;
                                                  }
                                                  currentPageIndex--;
                                                  propertyCardsController
                                                      .setCardIndex(
                                                          currentPageIndex);

                                                  propertyCardsController
                                                      .animateTo(Offset(1, 1),
                                                          duration:
                                                              Durations.short1,
                                                          curve: Curves.linear);

                                                  // pdfScrollController.animateTo(
                                                  //     currentPageIndex *
                                                  //         ((1.41428571429 *
                                                  //                 ((sWidth *
                                                  //                     (1 -
                                                  //                         vDividerPosition)))) +
                                                  //             16),
                                                  //     duration: const Duration(
                                                  //         milliseconds: 100),
                                                  //     curve: Curves.easeIn);
                                                  _renderPagePreviewOnProperties();
                                                });
                                              },
                                              child: Icon(
                                                TablerIcons
                                                    .arrow_badge_left_filled,
                                                color: defaultPalette.extras[0],
                                                size: 23,
                                              ),
                                            ),
                                            //{{DELETE PAGE BUTTON}}
                                            GestureDetector(
                                              onTap: () {
                                                _confirmDeleteLayout(
                                                    deletePage: true);
                                                // pdfScrollController.animateTo(
                                                //     currentPageIndex *
                                                //         ((1.41428571429 *
                                                //                 ((sWidth *
                                                //                     (1 -
                                                //                         vDividerPosition)))) +
                                                //             16),
                                                //     duration: const Duration(
                                                //         milliseconds: 100),
                                                //     curve: Curves.easeIn);
                                              },
                                              child: Icon(
                                                TablerIcons.trash,
                                                color: defaultPalette.black,
                                                size: 20,
                                              ),
                                            ),
                                            //{{NEXT PAGE BUTTON}}
                                            GestureDetector(
                                              onTap: () {
                                                setState(() {
                                                  if (pageCount ==
                                                      (currentPageIndex + 1)) {
                                                    _addPdfPage();
                                                    currentPageIndex++;
                                                    propertyCardsController
                                                        .setCardIndex(
                                                            currentPageIndex);
                                                    propertyCardsController
                                                        .animateTo(Offset(1, 1),
                                                            duration: Durations
                                                                .short1,
                                                            curve:
                                                                Curves.linear);

                                                    // pdfScrollController.animateTo(
                                                    //     currentPageIndex *
                                                    //         ((1.41428571429 *
                                                    //                 ((sWidth *
                                                    //                         (1 -
                                                    //                             vDividerPosition)) -
                                                    //                     6)) +
                                                    //             6),
                                                    //     duration:
                                                    //         const Duration(
                                                    //             milliseconds:
                                                    //                 100),
                                                    //     curve: Curves.easeIn);
                                                    _renderPagePreviewOnProperties();
                                                    return;
                                                  }
                                                  currentPageIndex++;
                                                  propertyCardsController
                                                      .setCardIndex(
                                                          currentPageIndex);
                                                  propertyCardsController
                                                      .animateTo(Offset(1, 1),
                                                          duration:
                                                              Durations.short1,
                                                          curve: Curves.linear);

                                                  // pdfScrollController.animateTo(
                                                  //     currentPageIndex *
                                                  //         ((1.41428571429 *
                                                  //                 ((sWidth *
                                                  //                         (1 -
                                                  //                             vDividerPosition)) -
                                                  //                     6)) +
                                                  //             6),
                                                  //     duration: const Duration(
                                                  //         milliseconds: 100),
                                                  //     curve: Curves.easeIn);
                                                  _renderPagePreviewOnProperties();
                                                });
                                              },
                                              child: Icon(
                                                TablerIcons
                                                    .arrow_badge_right_filled,
                                                color: defaultPalette.extras[0],
                                                size: 23,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  )
                                ],
                              ),
                              //FORMATS TITLE

                              Container(
                                width: sWidth * wH2DividerPosition - 45,
                                height: 15,
                                alignment: Alignment.topCenter,
                                margin: EdgeInsets.only(top: 10, right: 5),
                                decoration: BoxDecoration(
                                    // color: defaultPalette.extras[0],
                                    borderRadius: BorderRadius.circular(5),
                                    border: Border.all(width: 0.1)),
                                child: Text(
                                  'FORMATS',
                                  style: GoogleFonts.bungee(fontSize: 10),
                                ),
                              ),

                              //ORIENTATIONS BUTTONS
                              Padding(
                                padding: const EdgeInsets.only(right: 5.0),
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceEvenly,
                                  children: [
                                    //PORTRAIT BUTTON
                                    GestureDetector(
                                      onTap: () {
                                        setState(() {
                                          addToTheLeft = true;

                                          documentPropertiesList[
                                                      currentPageIndex]
                                                  .orientationController =
                                              pw.PageOrientation.portrait;
                                        });
                                        _renderPagePreviewOnProperties();
                                        Future.delayed(Durations.short1)
                                            .then((onValue) {
                                          setState(() {
                                            addToTheLeft = false;
                                          });
                                          _renderPagePreviewOnProperties();
                                        });
                                      },
                                      onTapDown: (d) {
                                        setState(() {
                                          addToTheLeft = true;
                                        });
                                      },
                                      onTapUp: (d) {
                                        setState(() {
                                          addToTheLeft = false;
                                        });
                                      },
                                      child: Stack(
                                        children: [
                                          Container(
                                            width:
                                                (sWidth * wH2DividerPosition -
                                                        65) /
                                                    2,
                                            height: 30,
                                            alignment: Alignment.topCenter,
                                            margin: EdgeInsets.only(top: 10),
                                            decoration: BoxDecoration(
                                                color: defaultPalette.extras[0],
                                                borderRadius:
                                                    BorderRadius.circular(5),
                                                border: Border.all(
                                                    width: 1,
                                                    strokeAlign: BorderSide
                                                        .strokeAlignOutside)),
                                          ),
                                          AnimatedContainer(
                                            duration: addToTheLeft
                                                ? Duration.zero
                                                : Duration.zero,
                                            width: (sWidth *
                                                        wH2DividerPosition -
                                                    (addToTheLeft ? 65 : 69)) /
                                                2,
                                            height: addToTheLeft ? 30 : 28,
                                            alignment: Alignment.topLeft,
                                            margin: EdgeInsets.only(
                                                top: addToTheLeft ? 10 : 12,
                                                left: addToTheLeft ? 0 : 2),
                                            padding: EdgeInsets.only(left: 0),
                                            decoration: BoxDecoration(
                                                color: defaultPalette.primary,
                                                borderRadius: BorderRadius.only(
                                                    topRight: Radius.circular(
                                                        addToTheLeft ? 5 : 0),
                                                    topLeft: Radius.circular(5),
                                                    bottomRight:
                                                        Radius.circular(5),
                                                    bottomLeft: Radius.circular(
                                                        addToTheLeft ? 5 : 0)),
                                                border: Border.all(width: 0.1)),
                                            child: Column(
                                              children: [
                                                Text(
                                                  ' Port',
                                                  style: GoogleFonts.bungee(
                                                      fontSize: 12),
                                                ),
                                                Text(
                                                  'rait ',
                                                  style: GoogleFonts.bungee(
                                                      fontSize: 7),
                                                ),
                                              ],
                                            ),
                                          ),
                                          Positioned(
                                            right: 0,
                                            top: 15,
                                            child: Transform.flip(
                                              flipX: true,
                                              child: Icon(
                                                TablerIcons.building_estate,
                                                color: defaultPalette.extras[0]
                                                    .withOpacity(0.2),
                                                size: 20,
                                              ),
                                            ),
                                          )
                                        ],
                                      ),
                                    ),
                                    //LANDSCAPE BUTTON
                                    SizedBox(width: 5),
                                    GestureDetector(
                                      onTap: () {
                                        setState(() {
                                          addToTheRight = true;

                                          documentPropertiesList[
                                                      currentPageIndex]
                                                  .orientationController =
                                              pw.PageOrientation.landscape;
                                        });
                                        _renderPagePreviewOnProperties();
                                        Future.delayed(Durations.short1)
                                            .then((onValue) {
                                          setState(() {
                                            addToTheRight = false;
                                          });
                                          _renderPagePreviewOnProperties();
                                        });
                                      },
                                      onTapDown: (d) {
                                        setState(() {
                                          addToTheRight = true;
                                        });
                                      },
                                      onTapUp: (d) {
                                        setState(() {
                                          addToTheRight = false;
                                        });
                                      },
                                      child: Stack(
                                        children: [
                                          Container(
                                            width:
                                                (sWidth * wH2DividerPosition -
                                                        55) /
                                                    2,
                                            height: 30,
                                            alignment: Alignment.topCenter,
                                            margin: EdgeInsets.only(top: 10),
                                            decoration: BoxDecoration(
                                                color: defaultPalette.extras[0],
                                                borderRadius:
                                                    BorderRadius.circular(5),
                                                border: Border.all(
                                                    width: 1,
                                                    strokeAlign: BorderSide
                                                        .strokeAlignOutside)),
                                          ),
                                          AnimatedContainer(
                                            duration: Duration.zero,
                                            width: (sWidth *
                                                        wH2DividerPosition -
                                                    (addToTheRight ? 55 : 60)) /
                                                2,
                                            height: addToTheRight ? 30 : 28,
                                            alignment: Alignment.topRight,
                                            margin: EdgeInsets.only(
                                                top: addToTheRight ? 10 : 12,
                                                left: addToTheRight ? 0 : 2),
                                            padding: EdgeInsets.only(left: 0),
                                            decoration: BoxDecoration(
                                                color: defaultPalette.primary,
                                                boxShadow: [
                                                  BoxShadow(
                                                    color: Colors.black
                                                        .withOpacity(0.2),
                                                    offset: Offset(2,
                                                        2), // Position of the shadow
                                                    blurRadius: 5,
                                                    spreadRadius:
                                                        -5, // Negative to create inward shadow
                                                  ),
                                                  BoxShadow(
                                                    color: Colors.white
                                                        .withOpacity(0.7),
                                                    offset: Offset(-2,
                                                        -2), // Highlight for a 3D effect
                                                    blurRadius: 5,
                                                    spreadRadius: -5,
                                                  ),
                                                ],
                                                borderRadius: BorderRadius.only(
                                                    topRight: Radius.circular(
                                                        addToTheRight ? 5 : 0),
                                                    topLeft: Radius.circular(5),
                                                    bottomRight:
                                                        Radius.circular(5),
                                                    bottomLeft: Radius.circular(
                                                        addToTheRight ? 5 : 0)),
                                                border: Border.all(width: 0.1)),
                                            child: Column(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.end,
                                              children: [
                                                Text(
                                                  'Land ',
                                                  style: GoogleFonts.bungee(
                                                      fontSize: 12),
                                                ),
                                                Text(
                                                  'Scape  ',
                                                  style: GoogleFonts.bungee(
                                                      fontSize: 7),
                                                ),
                                              ],
                                            ),
                                          ),
                                          Positioned(
                                            left: 5,
                                            top: 15,
                                            child: Icon(
                                              TablerIcons.sunset_2,
                                              color: defaultPalette.extras[0]
                                                  .withOpacity(0.2),
                                              size: 20,
                                            ),
                                          )
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),

                              //
                              //OPERATIONS BUTTONS
                              Padding(
                                padding: const EdgeInsets.only(right: 5.0),
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    SizedBox(
                                      width:
                                          (sWidth * wH2DividerPosition - 65) /
                                              2,
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          //ADD PAGE BUTTON
                                          PieMenu(
                                            controller: opsAddPieController,
                                            actions: [
                                              getPieActionForAddMove(
                                                  'LEFT', true),
                                              getPieActionForAddMove(
                                                  'RIGHT', true)
                                            ],
                                            onToggle: (menuOpen) {
                                              if (!menuOpen) {
                                                opsAddPieController.closeMenu();
                                                opsMovePieController
                                                    .closeMenu();
                                                opsCopyPieController
                                                    .closeMenu();
                                                opsFormatPieController
                                                    .closeMenu();
                                              }
                                            },
                                            theme: PieTheme(
                                                rightClickShowsMenu: true,
                                                buttonSize:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            3)
                                                        .clamp(40, 100),
                                                spacing: 5,
                                                radius:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            2)
                                                        .clamp(50, 100),
                                                customAngle: -20,
                                                menuAlignment: Alignment.center,
                                                pointerSize: 20,
                                                menuDisplacement: Offset(0, 4),
                                                tooltipPadding:
                                                    EdgeInsets.all(5),
                                                tooltipTextStyle:
                                                    GoogleFonts.bungee(
                                                        fontSize: 20),
                                                buttonTheme: PieButtonTheme(
                                                    backgroundColor:
                                                        defaultPalette.tertiary,
                                                    iconColor:
                                                        defaultPalette.primary,
                                                    decoration: BoxDecoration(
                                                      border:
                                                          Border.all(width: 1),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              200),
                                                      color: defaultPalette
                                                          .extras[0],
                                                    ))),
                                            child: Container(
                                              margin: const EdgeInsets.only(
                                                  top: 8.0),
                                              // padding: const EdgeInsets.all(1),
                                              child: IconButton.filled(
                                                  style: IconButton.styleFrom(
                                                    backgroundColor:
                                                        defaultPalette.extras[
                                                            0], // Background color
                                                    foregroundColor: defaultPalette
                                                        .primary, // Icon color
                                                    // Elevation of the button
                                                    padding: EdgeInsets.symmetric(
                                                        vertical: 10.0,
                                                        horizontal:
                                                            2), // Padding around the icon
                                                    shape:
                                                        RoundedRectangleBorder(
                                                      // Custom button shape
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              5.0),
                                                    ),
                                                  ),
                                                  constraints: BoxConstraints(
                                                    minWidth: (sWidth *
                                                                wH2DividerPosition -
                                                            65) /
                                                        6,
                                                    minHeight: 42,
                                                  ), // Reduces the overall size further
                                                  visualDensity:
                                                      VisualDensity.compact,
                                                  iconSize: 12,
                                                  onPressed: () {
                                                    opsAddPieController
                                                        .openMenu();
                                                  },
                                                  icon: Icon(TablerIcons.plus)),
                                            ),
                                          ),
                                          //MOVE PAGE BUTTON
                                          PieMenu(
                                            controller: opsMovePieController,
                                            actions: [
                                              getPieActionForAddMove(
                                                  'LEFT', false),
                                              getPieActionForAddMove(
                                                  'RIGHT', false),
                                            ],
                                            onToggle: (menuOpen) {
                                              if (!menuOpen) {
                                                opsAddPieController.closeMenu();
                                                opsMovePieController
                                                    .closeMenu();
                                                opsCopyPieController
                                                    .closeMenu();
                                                opsFormatPieController
                                                    .closeMenu();
                                              }
                                            },
                                            theme: PieTheme(
                                                rightClickShowsMenu: true,
                                                buttonSize:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            3)
                                                        .clamp(40, 100),
                                                spacing: 10,
                                                radius:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            2)
                                                        .clamp(50, 100),
                                                customAngle: -20,
                                                menuAlignment: Alignment.center,
                                                pointerSize: 20,
                                                menuDisplacement: Offset(0, 4),
                                                tooltipPadding:
                                                    EdgeInsets.all(0),
                                                tooltipTextStyle:
                                                    GoogleFonts.bungee(
                                                        fontSize: 20),
                                                buttonTheme: PieButtonTheme(
                                                    backgroundColor:
                                                        defaultPalette.tertiary,
                                                    iconColor:
                                                        defaultPalette.primary,
                                                    decoration: BoxDecoration(
                                                      border:
                                                          Border.all(width: 1),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              200),
                                                      color: defaultPalette
                                                          .extras[0],
                                                    ))),
                                            child: Container(
                                              margin: const EdgeInsets.only(
                                                  top: 8.0),
                                              // padding: const EdgeInsets.all(1),
                                              child: IconButton.filled(
                                                  style: IconButton.styleFrom(
                                                    backgroundColor:
                                                        defaultPalette.extras[
                                                            0], // Background color
                                                    foregroundColor: defaultPalette
                                                        .primary, // Icon color
                                                    // Elevation of the button
                                                    padding: EdgeInsets.symmetric(
                                                        vertical:
                                                            10.0), // Padding around the icon
                                                    shape:
                                                        RoundedRectangleBorder(
                                                      // Custom button shape
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              5.0),
                                                    ),
                                                  ),
                                                  constraints: BoxConstraints(
                                                    minWidth: (sWidth *
                                                                wH2DividerPosition -
                                                            65) /
                                                        6.3,
                                                    minHeight: 42,
                                                  ), // Reduces the overall size further
                                                  visualDensity:
                                                      VisualDensity.compact,
                                                  iconSize: 15,
                                                  onPressed: () {
                                                    opsMovePieController
                                                        .openMenu();
                                                  },
                                                  icon: Icon(TablerIcons
                                                      .arrows_move_vertical)),
                                            ),
                                          ),
                                          //Duplicate PAGE BUTTON
                                          PieMenu(
                                            actions: [
                                              getPieActionForDuplicate('LEFT'),
                                              getPieActionForDuplicate('RIGHT')
                                            ],
                                            controller: opsCopyPieController,
                                            onToggle: (menuOpen) {
                                              if (!menuOpen) {
                                                opsAddPieController.closeMenu();
                                                opsMovePieController
                                                    .closeMenu();
                                                opsCopyPieController
                                                    .closeMenu();
                                                opsFormatPieController
                                                    .closeMenu();
                                              }
                                            },
                                            theme: PieTheme(
                                                rightClickShowsMenu: true,
                                                buttonSize:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            3)
                                                        .clamp(40, 100),
                                                spacing: 5,
                                                radius:
                                                    ((sWidth * wH2DividerPosition -
                                                                65) /
                                                            2)
                                                        .clamp(50, 100),
                                                customAngle: 20,
                                                menuAlignment: Alignment.center,
                                                pointerSize: 20,
                                                menuDisplacement: Offset(0, 4),
                                                tooltipPadding:
                                                    EdgeInsets.all(5),
                                                tooltipTextStyle:
                                                    GoogleFonts.bungee(
                                                        fontSize: 20),
                                                buttonTheme: PieButtonTheme(
                                                    backgroundColor:
                                                        defaultPalette.tertiary,
                                                    iconColor:
                                                        defaultPalette.primary,
                                                    decoration: BoxDecoration(
                                                      border:
                                                          Border.all(width: 1),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              200),
                                                      color: defaultPalette
                                                          .extras[0],
                                                    ))),
                                            child: Container(
                                              margin: const EdgeInsets.only(
                                                  top: 8.0),
                                              child: IconButton.filled(
                                                  style: IconButton.styleFrom(
                                                    backgroundColor:
                                                        defaultPalette
                                                            .extras[0],
                                                    foregroundColor:
                                                        defaultPalette.primary,
                                                    padding: const EdgeInsets
                                                        .symmetric(
                                                        vertical: 10.0),
                                                    shape:
                                                        RoundedRectangleBorder(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              5.0),
                                                    ),
                                                  ),
                                                  constraints: BoxConstraints(
                                                    minWidth: (sWidth *
                                                                wH2DividerPosition -
                                                            65) /
                                                        5.5,
                                                    minHeight: 42,
                                                  ), // Reduces the overall size further
                                                  visualDensity:
                                                      VisualDensity.compact,
                                                  iconSize: 15,
                                                  onPressed: () {
                                                    opsCopyPieController
                                                        .openMenu();
                                                  },
                                                  icon: const Icon(TablerIcons
                                                      .dots_vertical)),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    PieMenu(
                                      controller: currentPageIndex == index
                                          ? opsFormatPieController
                                          : null,
                                      actions: [
                                        getPieAction('A3'),
                                        getPieAction('A4'),
                                        getPieAction('A5'),
                                        getPieAction('A6'),
                                        getPieAction('Letter'),
                                        getPieAction('Legal'),
                                      ],
                                      theme: PieTheme(
                                          rightClickShowsMenu: true,
                                          buttonSize:
                                              ((sWidth * wH2DividerPosition -
                                                          65) /
                                                      6)
                                                  .clamp(40, 400),
                                          spacing: 1,
                                          radius:
                                              ((sWidth * wH2DividerPosition -
                                                          65) /
                                                      4)
                                                  .clamp(50, 400),
                                          customAngle: -180,
                                          menuAlignment: Alignment.center,
                                          menuDisplacement: Offset(
                                              -(sWidth * wH2DividerPosition -
                                                      38) /
                                                  6,
                                              4),
                                          tooltipPadding: EdgeInsets.all(0),
                                          tooltipTextStyle:
                                              GoogleFonts.bungee(fontSize: 20),
                                          buttonTheme: PieButtonTheme(
                                              backgroundColor:
                                                  defaultPalette.primary,
                                              iconColor:
                                                  defaultPalette.extras[0],
                                              decoration: BoxDecoration(
                                                border: Border.all(width: 3),
                                                borderRadius:
                                                    BorderRadius.circular(200),
                                                color: defaultPalette.extras[0],
                                              ))),
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(top: 8.0),
                                        child: IconButton.filled(
                                            style: IconButton.styleFrom(
                                              backgroundColor:
                                                  defaultPalette.extras[
                                                      0], // Background color
                                              foregroundColor: defaultPalette
                                                  .primary, // Icon color
                                              // Elevation of the button
                                              padding: EdgeInsets.symmetric(
                                                  vertical:
                                                      10.0), // Padding around the icon
                                              shape: RoundedRectangleBorder(
                                                // Custom button shape
                                                borderRadius:
                                                    BorderRadius.circular(5.0),
                                              ),
                                            ),
                                            constraints: BoxConstraints(
                                              minWidth:
                                                  (sWidth * wH2DividerPosition -
                                                          38) /
                                                      2,
                                              minHeight: 42,
                                            ), // Reduces the overall size further
                                            visualDensity:
                                                VisualDensity.compact,
                                            iconSize: 20,
                                            onPressed: () {
                                              opsFormatPieController.openMenu();
                                            },
                                            icon: SizedBox(
                                              width:
                                                  (sWidth * wH2DividerPosition -
                                                          52) /
                                                      2,
                                              child: Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceAround,
                                                children: [
                                                  Icon(TablerIcons.file_smile),
                                                  Text(
                                                    getPageFormatString(
                                                        documentPropertiesList[
                                                                currentPageIndex]
                                                            .pageFormatController),
                                                    style: GoogleFonts.bungee(
                                                        color: defaultPalette
                                                            .primary),
                                                  ),
                                                ],
                                              ),
                                            )),
                                      ),
                                    )
                                  ],
                                ),
                              ),

                              //STYLES TITLE
                              Container(
                                width: sWidth * wH2DividerPosition - 45,
                                height: 15,
                                alignment: Alignment.topCenter,
                                margin: EdgeInsets.only(top: 10, right: 5),
                                decoration: BoxDecoration(
                                    // color: defaultPalette.extras[0],
                                    borderRadius: BorderRadius.circular(5),
                                    border: Border.all(width: 0.1)),
                                child: Text(
                                  'Styles',
                                  style: GoogleFonts.bungee(fontSize: 10),
                                ),
                              ),

                              const SizedBox(
                                height: 10,
                              ),

                              // MARGIN Main
                              Column(
                                children: [
                                  //Margin TiTle
                                  SizedBox(
                                    height: textFieldHeight / 2,
                                    child: Row(
                                      children: [
                                        Expanded(
                                          child: Text(
                                            'Margin',
                                            style: GoogleFonts.bungee(
                                                fontSize: 13),
                                          ),
                                        ),

                                        const SizedBox(
                                          width: 5,
                                        ),
                                        //Margin ONE Field
                                        Expanded(
                                          child: TextFormField(
                                            onTapOutside: (event) {
                                              marginAllFocus.unfocus();
                                            },
                                            obscureText: documentPropertiesList[
                                                    currentPageIndex]
                                                .useIndividualMargins,
                                            focusNode: marginAllFocus,
                                            controller: documentPropertiesList[
                                                    currentPageIndex]
                                                .marginAllController,
                                            inputFormatters: [
                                              NumericInputFormatter(
                                                  maxValue: documentPropertiesList[
                                                              currentPageIndex]
                                                          .pageFormatController
                                                          .width /
                                                      2.001)
                                            ],
                                            textAlignVertical:
                                                TextAlignVertical.top,
                                            textAlign: TextAlign.center,
                                            decoration: InputDecoration(
                                              contentPadding:
                                                  const EdgeInsets.all(0),
                                              floatingLabelAlignment:
                                                  FloatingLabelAlignment.center,
                                              labelStyle: GoogleFonts.lexend(
                                                  color: defaultPalette.black),
                                              filled: true,
                                              fillColor:
                                                  !documentPropertiesList[
                                                              currentPageIndex]
                                                          .useIndividualMargins
                                                      ? defaultPalette.primary
                                                      : defaultPalette.primary
                                                          .withOpacity(0.5),
                                              border: OutlineInputBorder(
                                                // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                borderRadius: BorderRadius.circular(
                                                    5.0), // Replace with your desired radius
                                              ),
                                              enabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide(
                                                    width: 1.2,
                                                    color:
                                                        defaultPalette.black),
                                                borderRadius:
                                                    BorderRadius.circular(
                                                        5.0), // Same as border
                                              ),
                                              focusedBorder: OutlineInputBorder(
                                                borderSide: BorderSide(
                                                    width: 1.5,
                                                    color: defaultPalette
                                                        .tertiary),
                                                borderRadius:
                                                    BorderRadius.circular(
                                                        5.0), // Same as border
                                              ),
                                            ),
                                            keyboardType: TextInputType.number,
                                            style: GoogleFonts.bungee(
                                                // fontStyle: FontStyle.italic,
                                                fontSize: 12,
                                                color: defaultPalette.black),
                                            onChanged: (value) {
                                              // setState(() {

                                              documentPropertiesList[
                                                      currentPageIndex]
                                                  .marginTopController
                                                  .text = value;
                                              documentPropertiesList[
                                                      currentPageIndex]
                                                  .marginBottomController
                                                  .text = value;
                                              documentPropertiesList[
                                                      currentPageIndex]
                                                  .marginLeftController
                                                  .text = value;
                                              documentPropertiesList[
                                                      currentPageIndex]
                                                  .marginRightController
                                                  .text = value;
                                              // _updatePdfPreview(
                                              //     '');
                                              // });
                                            },
                                            enabled: !documentPropertiesList[
                                                    currentPageIndex]
                                                .useIndividualMargins,
                                          ),
                                        ),

                                        const SizedBox(
                                          width: 5,
                                        ),
                                        //Increase Decrease
                                        Column(
                                          children: [
                                            //Margin increment button
                                            GestureDetector(
                                              onTap: () {
                                                setState(() {
                                                  documentPropertiesList[
                                                          currentPageIndex]
                                                      .marginAllController
                                                      .text = (double.parse(
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginAllController
                                                                  .text) +
                                                          1)
                                                      .toString();
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginTopController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginBottomController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginLeftController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginRightController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                });

                                                // _updatePdfPreview('');
                                              },
                                              child: const Icon(
                                                IconsaxPlusLinear.arrow_up_1,
                                                size: 10,
                                              ),
                                            ),
                                            //Margin decrement button
                                            GestureDetector(
                                              onTap: () {
                                                setState(() {
                                                  var value =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text =
                                                      (double.parse(value) - 1)
                                                          .abs()
                                                          .toString();
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginTopController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginBottomController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginLeftController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginRightController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                });
                                                // _updatePdfPreview('');
                                              },
                                              child: const Icon(
                                                IconsaxPlusLinear.arrow_down,
                                                size: 10,
                                              ),
                                            ),
                                          ],
                                        ),
                                        ////INDIVIDUAL MARGINS BUTTON
                                        IconButton(
                                            padding: const EdgeInsets.all(0),
                                            onPressed: () {
                                              setState(() {
                                                documentPropertiesList[
                                                            currentPageIndex]
                                                        .useIndividualMargins =
                                                    !documentPropertiesList[
                                                            currentPageIndex]
                                                        .useIndividualMargins;
                                                if (documentPropertiesList[
                                                            currentPageIndex]
                                                        .useIndividualMargins ==
                                                    false) {
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginTopController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginBottomController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginLeftController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                  documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginRightController
                                                          .text =
                                                      documentPropertiesList[
                                                              currentPageIndex]
                                                          .marginAllController
                                                          .text;
                                                }
                                              });
                                            },
                                            icon: documentPropertiesList[
                                                        currentPageIndex]
                                                    .useIndividualMargins
                                                ? const Icon(
                                                    IconsaxPlusBold.maximize_1,
                                                    size: 20,
                                                  )
                                                : const Icon(
                                                    IconsaxPlusLinear
                                                        .maximize_2,
                                                    size: 20,
                                                  ))
                                        // Text(
                                        //     'Use Individual Margins'),
                                      ],
                                    ),
                                  ),

                                  if (documentPropertiesList[currentPageIndex]
                                      .useIndividualMargins)
                                    Column(
                                      children: [
                                        const SizedBox(
                                          height: 10,
                                        ),
                                        //TOP AND BOTTOM Margin TiTle

                                        Row(
                                          children: [
                                            //Top Margin text
                                            Expanded(
                                              flex: 2,
                                              child: SizedBox(
                                                height: textFieldHeight / 2,
                                                child: Row(
                                                  children: [
                                                    Expanded(
                                                      flex: 1,
                                                      child: Text(
                                                        'Top',
                                                        style:
                                                            GoogleFonts.bungee(
                                                                fontSize: 11),
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //TOP Margin ONE Field
                                                    Expanded(
                                                      flex: 1,
                                                      child: TextFormField(
                                                        onTapOutside: (event) {
                                                          marginTopFocus
                                                              .unfocus();
                                                        },
                                                        focusNode:
                                                            marginTopFocus,
                                                        controller: documentPropertiesList[
                                                                currentPageIndex]
                                                            .marginTopController,
                                                        inputFormatters: [
                                                          // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                          NumericInputFormatter(
                                                              maxValue: (documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .pageFormatController
                                                                          .height /
                                                                      1.11 -
                                                                  double.parse(documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .marginBottomController
                                                                      .text))),
                                                        ],
                                                        cursorColor:
                                                            defaultPalette
                                                                .secondary,
                                                        textAlign:
                                                            TextAlign.center,
                                                        textAlignVertical:
                                                            TextAlignVertical
                                                                .top,
                                                        decoration:
                                                            InputDecoration(
                                                          contentPadding:
                                                              const EdgeInsets
                                                                  .all(0),
                                                          filled: true,
                                                          fillColor:
                                                              defaultPalette
                                                                  .primary,
                                                          border:
                                                              OutlineInputBorder(
                                                            // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Replace with your desired radius
                                                          ),
                                                          enabledBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 1.2,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                          focusedBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 3,
                                                                color: defaultPalette
                                                                    .tertiary),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                        ),
                                                        keyboardType:
                                                            TextInputType
                                                                .number,
                                                        style:
                                                            GoogleFonts.bungee(
                                                                // fontStyle: FontStyle.italic,
                                                                fontSize: 12,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                        onChanged: (value) {
                                                          // setState(() {
                                                          if (value.isEmpty) {
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginTopController
                                                                .text = '0';
                                                          }
                                                          setState(() {});
                                                          // _updatePdfPreview(
                                                          //     '');
                                                          // });
                                                        },
                                                        enabled: documentPropertiesList[
                                                                currentPageIndex]
                                                            .useIndividualMargins,
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Increase Decrease
                                                    Column(
                                                      children: [
                                                        //Margin increment button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginTopController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginTopController
                                                                          .text) +
                                                                      1)
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_up_1,
                                                            size: 10,
                                                          ),
                                                        ),
                                                        //Margin decrement button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginTopController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginTopController
                                                                          .text) -
                                                                      1)
                                                                  .abs()
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_down,
                                                            size: 10,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            ),

                                            const SizedBox(
                                              width: 10,
                                            ),
                                            //Bottom Margin text
                                            Expanded(
                                              flex: 3,
                                              child: SizedBox(
                                                height: textFieldHeight / 2,
                                                child: Row(
                                                  children: [
                                                    Expanded(
                                                      flex: 3,
                                                      child: Text(
                                                        'Bottom',
                                                        style:
                                                            GoogleFonts.bungee(
                                                                fontSize: 11),
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Bottom Margin ONE Field
                                                    Expanded(
                                                      flex: 2,
                                                      child: TextFormField(
                                                        onTapOutside: (event) {
                                                          marginBottomFocus
                                                              .unfocus();
                                                        },
                                                        focusNode:
                                                            marginBottomFocus,
                                                        controller: documentPropertiesList[
                                                                currentPageIndex]
                                                            .marginBottomController,
                                                        inputFormatters: [
                                                          // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                          NumericInputFormatter(
                                                              maxValue: (documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .pageFormatController
                                                                          .height /
                                                                      1.11 -
                                                                  double.parse(documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .marginTopController
                                                                      .text))),
                                                        ],
                                                        cursorColor:
                                                            defaultPalette
                                                                .secondary,
                                                        textAlign:
                                                            TextAlign.center,
                                                        textAlignVertical:
                                                            TextAlignVertical
                                                                .top,
                                                        decoration:
                                                            InputDecoration(
                                                          contentPadding:
                                                              const EdgeInsets
                                                                  .all(0),
                                                          filled: true,
                                                          fillColor:
                                                              defaultPalette
                                                                  .primary,
                                                          border:
                                                              OutlineInputBorder(
                                                            // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Replace with your desired radius
                                                          ),
                                                          enabledBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 1.2,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                          focusedBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 3,
                                                                color: defaultPalette
                                                                    .tertiary),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                        ),
                                                        keyboardType:
                                                            TextInputType
                                                                .number,
                                                        style:
                                                            GoogleFonts.bungee(
                                                                // fontStyle: FontStyle.italic,
                                                                fontSize: 12,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                        onChanged: (value) {
                                                          // setState(() {
                                                          if (value.isEmpty) {
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginBottomController
                                                                .text = '0';
                                                          }
                                                          setState(() {});
                                                          // _updatePdfPreview(
                                                          //     '');
                                                          // });
                                                        },
                                                        enabled: documentPropertiesList[
                                                                currentPageIndex]
                                                            .useIndividualMargins,
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Increase Decrease
                                                    Column(
                                                      children: [
                                                        //Margin increment button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginBottomController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginBottomController
                                                                          .text) +
                                                                      1)
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_up_1,
                                                            size: 10,
                                                          ),
                                                        ),
                                                        //Margin decrement button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginBottomController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginBottomController
                                                                          .text) -
                                                                      1)
                                                                  .abs()
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_down,
                                                            size: 10,
                                                          ),
                                                        ),
                                                      ],
                                                    ),

                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                        const SizedBox(
                                          height: 10,
                                        ),
                                        // LEFT AND RIGHT Margin Title
                                        Row(
                                          children: [
                                            //Left Margin text
                                            Expanded(
                                              flex: 10,
                                              child: SizedBox(
                                                height: textFieldHeight / 2,
                                                child: Row(
                                                  children: [
                                                    Expanded(
                                                      child: Text(
                                                        'Left',
                                                        style:
                                                            GoogleFonts.bungee(
                                                                fontSize: 11),
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Left Margin ONE Field
                                                    Expanded(
                                                      child: TextFormField(
                                                        onTapOutside: (event) {
                                                          marginBottomFocus
                                                              .unfocus();
                                                        },
                                                        focusNode:
                                                            marginLeftFocus,
                                                        controller: documentPropertiesList[
                                                                currentPageIndex]
                                                            .marginLeftController,
                                                        inputFormatters: [
                                                          // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                          NumericInputFormatter(
                                                              maxValue: (documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .pageFormatController
                                                                          .height /
                                                                      1.11 -
                                                                  double.parse(documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .marginRightController
                                                                      .text))),
                                                        ],
                                                        cursorColor:
                                                            defaultPalette
                                                                .secondary,
                                                        textAlign:
                                                            TextAlign.center,
                                                        textAlignVertical:
                                                            TextAlignVertical
                                                                .top,
                                                        decoration:
                                                            InputDecoration(
                                                          contentPadding:
                                                              const EdgeInsets
                                                                  .all(0),
                                                          filled: true,
                                                          fillColor:
                                                              defaultPalette
                                                                  .primary,
                                                          border:
                                                              OutlineInputBorder(
                                                            // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Replace with your desired radius
                                                          ),
                                                          enabledBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 1.2,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                          focusedBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 3,
                                                                color: defaultPalette
                                                                    .tertiary),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                        ),
                                                        keyboardType:
                                                            TextInputType
                                                                .number,
                                                        style:
                                                            GoogleFonts.bungee(
                                                                // fontStyle: FontStyle.italic,
                                                                fontSize: 12,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                        onChanged: (value) {
                                                          // setState(() {
                                                          if (value.isEmpty) {
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginLeftController
                                                                .text = '0';
                                                          }
                                                          setState(() {});
                                                          // _updatePdfPreview(
                                                          //     '');
                                                          // });
                                                        },
                                                        enabled: documentPropertiesList[
                                                                currentPageIndex]
                                                            .useIndividualMargins,
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Increase Decrease
                                                    Column(
                                                      children: [
                                                        //Margin increment button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginLeftController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginLeftController
                                                                          .text) +
                                                                      1)
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_up_1,
                                                            size: 10,
                                                          ),
                                                        ),
                                                        //Margin decrement button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginLeftController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginLeftController
                                                                          .text) -
                                                                      1)
                                                                  .abs()
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_down,
                                                            size: 10,
                                                          ),
                                                        ),
                                                      ],
                                                    ),

                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            ),
                                            const SizedBox(
                                              width: 5,
                                            ),
                                            //Right Margin text
                                            Expanded(
                                              flex: 11,
                                              child: SizedBox(
                                                height: textFieldHeight / 2,
                                                child: Row(
                                                  children: [
                                                    Expanded(
                                                      flex: 2,
                                                      child: Text(
                                                        'Right',
                                                        style:
                                                            GoogleFonts.bungee(
                                                                fontSize: 11),
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Right Margin ONE Field
                                                    Expanded(
                                                      child: TextFormField(
                                                        onTapOutside: (event) {
                                                          marginBottomFocus
                                                              .unfocus();
                                                        },
                                                        focusNode:
                                                            marginRightFocus,
                                                        controller: documentPropertiesList[
                                                                currentPageIndex]
                                                            .marginRightController,
                                                        inputFormatters: [
                                                          // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                          NumericInputFormatter(
                                                              maxValue: (documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .pageFormatController
                                                                          .height /
                                                                      1.11 -
                                                                  double.parse(documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .marginLeftController
                                                                      .text))),
                                                        ],
                                                        cursorColor:
                                                            defaultPalette
                                                                .secondary,
                                                        textAlign:
                                                            TextAlign.center,
                                                        textAlignVertical:
                                                            TextAlignVertical
                                                                .top,
                                                        decoration:
                                                            InputDecoration(
                                                          contentPadding:
                                                              const EdgeInsets
                                                                  .all(0),
                                                          filled: true,
                                                          fillColor:
                                                              defaultPalette
                                                                  .primary,
                                                          border:
                                                              OutlineInputBorder(
                                                            // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Replace with your desired radius
                                                          ),
                                                          enabledBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 1.2,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                          focusedBorder:
                                                              OutlineInputBorder(
                                                            borderSide: BorderSide(
                                                                width: 3,
                                                                color: defaultPalette
                                                                    .tertiary),
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5.0), // Same as border
                                                          ),
                                                        ),
                                                        keyboardType:
                                                            TextInputType
                                                                .number,
                                                        style:
                                                            GoogleFonts.bungee(
                                                                // fontStyle: FontStyle.italic,
                                                                fontSize: 12,
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                        onChanged: (value) {
                                                          // setState(() {
                                                          if (value.isEmpty) {
                                                            documentPropertiesList[
                                                                    currentPageIndex]
                                                                .marginRightController
                                                                .text = '0';
                                                          }
                                                          setState(() {});
                                                          // _updatePdfPreview(
                                                          //     '');
                                                          // });
                                                        },
                                                        enabled: documentPropertiesList[
                                                                currentPageIndex]
                                                            .useIndividualMargins,
                                                      ),
                                                    ),

                                                    const SizedBox(
                                                      width: 5,
                                                    ),
                                                    //Increase Decrease (Right Margin)
                                                    Column(
                                                      children: [
                                                        //Margin increment button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginRightController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginRightController
                                                                          .text) +
                                                                      1)
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_up_1,
                                                            size: 10,
                                                          ),
                                                        ),
                                                        //Margin decrement button
                                                        GestureDetector(
                                                          onTap: () {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .marginRightController
                                                                  .text = (double.parse(documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginRightController
                                                                          .text) -
                                                                      1)
                                                                  .abs()
                                                                  .toInt()
                                                                  .toString();
                                                            });

                                                            // _updatePdfPreview('');
                                                          },
                                                          child: const Icon(
                                                            IconsaxPlusLinear
                                                                .arrow_down,
                                                            size: 10,
                                                          ),
                                                        ),
                                                      ],
                                                    ),

                                                    const SizedBox(
                                                      width: 10,
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                        const SizedBox(
                                          height: 0,
                                        )
                                      ],
                                    ),
                                  // Divider(),
                                ],
                              ),
                              //HEX TITLE
                              Container(
                                width: sWidth * wH2DividerPosition - 45,
                                height: 15,
                                alignment: Alignment.topCenter,
                                margin: EdgeInsets.only(top: 10, right: 5),
                                padding: EdgeInsets.only(left: 5, right: 5),
                                decoration: BoxDecoration(
                                    // color: defaultPalette.extras[0],
                                    borderRadius: BorderRadius.circular(5),
                                    border: Border.all(width: 0.1)),
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Expanded(
                                      flex: 5,
                                      child: Text(
                                        'PAGE HEX',
                                        style: GoogleFonts.bungee(fontSize: 10),
                                      ),
                                    ),
                                    Expanded(
                                      flex: 3,
                                      child: TextFormField(
                                        onTapOutside: (event) {},
                                        controller: pgHexController,
                                        inputFormatters: [
                                          HexColorInputFormatter()
                                        ],
                                        onFieldSubmitted: (value) {
                                          setState(() {
                                            documentPropertiesList[ind]
                                                .pageColor = hexToColor(value);
                                          });
                                        },
                                        style: GoogleFonts.bungee(fontSize: 10),
                                        cursorColor: defaultPalette.tertiary,
                                        textAlign: TextAlign.center,
                                        textAlignVertical:
                                            TextAlignVertical.center,
                                        decoration: InputDecoration(
                                          contentPadding:
                                              const EdgeInsets.all(0),
                                          border: InputBorder.none,
                                          enabledBorder: OutlineInputBorder(
                                            borderSide: BorderSide(
                                                width: 2,
                                                color:
                                                    defaultPalette.transparent),
                                            borderRadius:
                                                BorderRadius.circular(12.0),
                                          ),
                                          focusedBorder: OutlineInputBorder(
                                            borderSide: BorderSide(
                                                width: 3,
                                                color:
                                                    defaultPalette.transparent),
                                            borderRadius:
                                                BorderRadius.circular(10.0),
                                          ),
                                        ),
                                        keyboardType: TextInputType.number,
                                      ),
                                    ),
                                  ],
                                ),
                              ),

                              //COLOR SWATCH And WHEEL FOR PAGE COLOR
                              Stack(
                                children: [
                                  SizedBox(
                                      width:
                                          ((sWidth * wH2DividerPosition - 115)),
                                      height: 140),
                                  //COLOR WHEEL FOR PAGE COLOR
                                  Positioned(
                                    right: 8,
                                    height: 140,
                                    width: 120,
                                    top: 4,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.end,
                                      children: [
                                        //COLOR WHEEL FOR PAGE COLOR
                                        SizedBox(
                                          height: 100,
                                          width: 90,
                                          child: WheelPicker(
                                            color: HSVColor.fromColor(documentPropertiesList[ind]
                                                .pageColor),
                                            onChanged: (c) {
                                              setState(() {
                                                documentPropertiesList[ind]
                                                    .pageColor = c.toColor();
                                              });
                                            },
                                            
                                          ),
                                        ),
                                        SizedBox(
                                          height: 0,
                                        ),

                                        //Name of PAGE COLOR
                                        Text(
                                            ColorTools.nameThatColor(
                                              documentPropertiesList[ind]
                                                  .pageColor,
                                            ),
                                            style: GoogleFonts.bungee(
                                                fontSize: 12)),
                                      ],
                                    ),
                                  ),
                                  //COLOR SWATCH FOR PAGE COLOR

                                  
                                ],
                              ),

                              const SizedBox(
                                height: 30,
                              )
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget buildDecoratedContainer(
    SuperDecoration superDecoration,
    Widget child,
    bool isPreview, {
    List<String> visitedIds = const [],
    int depth = 0,
    int maxDepth = 10, // Adjustable depth limit for cycles
  }) {
    
    // Add current ID to visited list if not already present
    List<String> newVisitedIds = List.from(visitedIds);

    // Check for cycle and update visited list only if not already in it
    if (visitedIds.contains(superDecoration.id)) {
      // print('Cycle detected');
      // If already visited and depth limit reached, break
      if (depth >= maxDepth) {
        print('Max depth reached at ${superDecoration.id}. Stopping further nesting.');
        return child;
      }
    } else {
      // Add to visited list since it is not yet visited
      newVisitedIds.add(superDecoration.id);
    }

    Widget current = child;
        
    // Get the decorations stack (direct descendants)
    List<SheetDecoration> stack = decorationListIterator(superDecoration.itemDecorationList);

    for (int i = stack.length - 1; i >= 0; i--) {
      final deco = stack[i];

      // Continue building the decoration if within depth limit
      if (depth < maxDepth) {
        if (deco is ItemDecoration) {
          BoxDecoration boxDecoration = deco.decoration;
          Border border = ((boxDecoration.border ?? Border.all(color: Colors.transparent)) as Border);

          current = Container(
            padding: deco.padding,
            margin: deco.margin,
            alignment: null,
            decoration: boxDecoration.copyWith(
              border: Border(
                top: border.top.copyWith(width: border.top.width.clamp(0, isPreview ? 15 : double.infinity)),
                bottom: border.bottom.copyWith(width: border.bottom.width.clamp(0, isPreview ? 15 : double.infinity)),
                left: border.left.copyWith(width: border.left.width.clamp(0, isPreview ? 15 : double.infinity)),
                right: border.right.copyWith(width: border.right.width.clamp(0, isPreview ? 15 : double.infinity)),
              ),
            ),
            foregroundDecoration: deco.foregroundDecoration,
            transform: deco.transform,
            child: current,
          );
        } else if (deco is SuperDecoration) {
          // Recursive call with updated visited list and increased depth
          current = buildDecoratedContainer(
            deco,
            current,
            isPreview,
            // visitedIds: newVisitedIds,
            depth: depth + 1,
            maxDepth: maxDepth,
          );
        }
      } else {
        // print('Depth limit reached, stopping recursion.');
      }
    }

    return current;
  }

  List<Widget> buildSuperDecorationSwiperInterface(List<String> itemDecorationPath, TextEditingController itemDecorationNameController){
    final width = (sWidth*wH2DividerPosition)-35;
    final isSizeBigForRow = (sWidth * wH2DividerPosition) > 200;
    var inx = int.tryParse(itemDecorationPath.last.substring(itemDecorationPath.last.indexOf('/') + 1))??-4;
    var itinx = 0;
    if(decorationIndex !=-1){
      itinx = int.tryParse((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[decorationIndex].substring((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[decorationIndex].indexOf('/') + 1))??-7;
                                              
    }
    
   // print('inxindex: '+inx.toString()+'||itinx: '+itinx.toString()+'\\decorationIndex: '+decorationIndex.toString());
    Widget roundButton(
      void Function() onTap,
      Widget icon,
      String s, {
      double borderRadius = 9999,
      bool isSelected = false,
      EdgeInsets padding = const EdgeInsets.all(3),
      bool showText = true
    }) {
      return InkWell(
        hoverColor: defaultPalette.primary.withOpacity(0.5),
        splashColor: defaultPalette.primary.withOpacity(0.5),
        highlightColor: defaultPalette.primary.withOpacity(0.5),
        onTap: () {
          setState(() {
            onTap();
          });
        },
        child: Row(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(borderRadius),
              child: Material(
                color: isSelected
                    ? defaultPalette.primary
                    : defaultPalette.transparent,
                child: InkWell(
                  hoverColor: defaultPalette.primary.withOpacity(0.5),
                  splashColor:
                      defaultPalette.primary.withOpacity(0.5),
                  highlightColor:
                      defaultPalette.primary.withOpacity(0.5),
                  onTap: () {
                    setState(() {
                      onTap();
                    });
                  },
                  child: Container(
                      padding: padding,
                      decoration: BoxDecoration(
                        border: isSelected
                            ? Border.all(
                                color: defaultPalette.extras[0])
                            : Border.fromBorderSide(BorderSide.none),
                        borderRadius:
                            BorderRadius.circular(borderRadius),
                        // color: defaultPalette.secondary
                      ),
                      child: icon),
                ),
              ),
            ),
            // SizedBox(width: 2,),
            if (isSizeBigForRow && showText)
              Expanded(
                child: Text(
                  s,
                  maxLines: 1,
                  style: GoogleFonts.lexend(
                      fontSize: 13,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0]),
                ),
              )
          ],
        ),
      );
    }

    
    return [
                      
      Positioned.fill(
      child: AnimatedPadding(
        duration: Durations.medium1,
        padding: EdgeInsets.all(17.2)
            .copyWith(right: 15, left: 12.2),
        child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Column(
              children: [
                //grey Balloon button and circlebutton elevated &&&  DECOR Title and the preview box and text information
                Row(
                  mainAxisAlignment:
                      MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    //grey Balloon button and circlebutton elevated on upper half
                    Column(
                      crossAxisAlignment:
                          CrossAxisAlignment.start,
                      mainAxisAlignment:
                          MainAxisAlignment.spaceBetween,
                      children: [
                        GestureDetector(
                          onTap: () {
                            setState(() {
                              decorationIndex = -1;
                              isListDecorationLibraryToggled = false;
                              isListDecorationPropertiesToggled = false;
                              updateSheetDecorationvariables(sheetDecorationList[inx] as SuperDecoration);
                              itemDecorationNameController.text = (sheetDecorationList[inx] as SuperDecoration).name;
                              print(sheetDecorationList[inx].id);    
                              print((sheetDecorationList[inx] as SuperDecoration).itemDecorationList);
                               
                            });
                          },
                          child: AnimatedContainer(
                            duration: Durations.medium4,
                            curve: Curves.easeInOut,
                            height: 32,
                            width: 32,
                            child: Icon(TablerIcons.balloon,
                                size: 20,
                                color:whichPropertyTabIsClicked == 2
                                ? defaultPalette.primary
                                : whichPropertyTabIsClicked == 3
                                ? defaultPalette.extras[0]
                                : defaultPalette.primary,
                                // shadows: [
                                //   BoxShadow(
                                //     spreadRadius: 5,
                                //     blurRadius: 5,
                                //     color: defaultPalette.extras[0].withAlpha(0)
                                //   ),
                                // ], 
                                 ),
                            // padding: EdgeInsets.only(left:5),
                            decoration: BoxDecoration(
                              color:  whichPropertyTabIsClicked == 2
                                ? defaultPalette.tertiary
                                : whichPropertyTabIsClicked == 3
                                ? defaultPalette.extras[1]
                                : defaultPalette.extras[3],
                              border: Border.all(width:1),
                              borderRadius: BorderRadius.circular(500),
                            ),
                          ),
                        ),
                        SizedBox(height: 3),
                        
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            
                          
                            setState(() {
                              isListDecorationLibraryToggled = !isListDecorationLibraryToggled;
                            });
                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.file_search,
                            size: 18,
                            // color: defaultPalette.tertiary
                            // color: Colors.blue,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                        SizedBox(height: 2),
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            setState(() {
                              isListDecorationPropertiesToggled =
                                  !isListDecorationPropertiesToggled;
                            });
                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.adjustments_alt,
                            size: 18,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                        SizedBox(height: 3),
                        //add new itemdecoration Layer
                        ElevatedLayerButton(
                          subfac: 2,
                          depth: 1.7,
                          onClick: () {
                            setState(() {
                              var itemDecoId = 'dITM-${ const Uuid().v4()}/'+sheetDecorationList.length.toString();
                              var itemDecoration = ItemDecoration(id: itemDecoId);
                              var inx = int.tryParse(itemDecorationPath.last.substring(itemDecorationPath.last.indexOf('/') + 1))??-2;

                              if ((sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length < 70) {
                                // Add the new decoration to the main list
                                sheetDecorationList.add(itemDecoration);
                                print('added to main list');
                                (sheetDecorationList[inx] as SuperDecoration).itemDecorationList =  [...(sheetDecorationList[inx] as SuperDecoration).itemDecorationList, itemDecoId];
                                print('added to super list');
                                // Get the reference to the SuperDecoration from the list
                                
                                updateSheetDecorationvariables(sheetDecorationList[inx] as  SuperDecoration);
                                
                              } else {
                                print('Guys come on, turn this into a super now');
                              }
                            });

                          },
                          buttonHeight: 25,
                          buttonWidth: 25,
                          borderRadius:
                              BorderRadius.circular(50),
                          animationDuration:
                              const Duration(milliseconds: 30),
                          animationCurve: Curves.ease,
                          topDecoration: BoxDecoration(
                            color: Colors.white,
                            border: Border.all(),
                          ),
                          topLayerChild: Icon(
                            TablerIcons.north_star,
                            size: 18,
                            // color: defaultPalette.tertiary
                            // color: Colors.blue,
                          ),
                          baseDecoration: BoxDecoration(
                            color: defaultPalette.extras[0],
                            border: Border.all(),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(width: 3),
                    //DECOR Title and the preview box and text information besides
                    Expanded(
                      flex: 2,
                      child: Column(
                        mainAxisAlignment:
                            MainAxisAlignment.spaceBetween,
                        children: [
                          //Balloon Animation BG and TITLE saying "DECOR"
                          Stack(
                            children: [
                              Container(
                                decoration: BoxDecoration(
                                  color:defaultPalette.extras[0],
                                  borderRadius: BorderRadius.circular(50),
                                  border: Border.all(
                                    width:1,
                                    color:defaultPalette.extras[0],)
                                ),
                                height: 30,
                                child: ClipRRect(
                                  borderRadius:
                                BorderRadius.circular(60),
                                  child: MultipleBalloons(
                                  minSize: 15,
                                  maxSize: 30,
                                  maxSpeed: 1.5,
                                  maxSwayAmount: 25,
                                  minSwayAmount: 2,
                                  balloonCount: 8,
                                  colors: [
                                    whichPropertyTabIsClicked ==2
                                    ? defaultPalette.tertiary
                                    : whichPropertyTabIsClicked ==3
                                    ? defaultPalette.extras[1]
                                    : defaultPalette.extras[3],
                                    
                                    whichPropertyTabIsClicked ==2
                                    ? defaultPalette.tertiary
                                    : whichPropertyTabIsClicked ==3
                                    ? defaultPalette.extras[1]
                                    : defaultPalette.extras[3],
                                    defaultPalette.secondary,

                                  ]
                                  // [
                                  //   defaultPalette.extras[0],
                                  //   defaultPalette.extras[9],
                                  //   defaultPalette.extras[6],
                                  //   defaultPalette.extras[3],
                                  //   defaultPalette.tertiary,
                                  //   defaultPalette.extras[1],
                                  //   defaultPalette.extras[3],
                                  //   defaultPalette.tertiary,
                                  // ],
                                ),
                                ),
                              ),
                              Positioned(
                                right: 0,
                                height: 30,
                                child: Text(
                                  whichPropertyTabIsClicked == 2
                                ? "textDecor  "
                                : whichPropertyTabIsClicked == 3
                                ? 'listDecor '
                                : 'tableDecor ',
                                  style: GoogleFonts.lexend(
                                      fontSize: 18,
                                      color: defaultPalette
                                          .primary),
                                  textAlign: TextAlign.start,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 3),
                          //PreviewBox of Decoration AND Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                          Stack(
                            children: [
                              SizedBox(
                                  width: width, height: 80),
                              // PreviewBox of Decoration AND Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                              Row(
                              mainAxisAlignment:MainAxisAlignment .spaceBetween,
                              crossAxisAlignment:CrossAxisAlignment.end,
                              children: [
                                Expanded(
                                  //Name of Decoration Editing Field. Title saying "SUPER". ID of Decoration display
                                  child: Column(
                                    crossAxisAlignment:CrossAxisAlignment.start,
                                    children:  !isListDecorationPropertiesToggled
                                    ? [
                                      if(whichPropertyTabIsClicked !=4)
                                      // Title saying "SUPER"
                                      Padding(
                                        padding: const EdgeInsets.only(left:2.0),
                                        child: Text(
                                          '' + (decorationIndex == -1  
                                          ? (sheetDecorationList[inx] as SuperDecoration) 
                                          : sheetDecorationList[itinx]).runtimeType.toString()
                                          .replaceAll(RegExp(r'Decoration'), '')
                                          .replaceAll(RegExp(r'Item'), 'Layer ' + decorationIndex.toString()), maxLines:1,
                                            style: GoogleFonts.rockSalt(
                                            color: defaultPalette.extras[0],
                                            height: 1.5,
                                            fontSize: 16,
                                          ),
                                          overflow: TextOverflow.ellipsis
                                        ),
                                      )
                                      
                                      ,
                                      //Name of Decoration Editing Field.
                                      SizedBox(
                                        height:
                                            20,
                                        child:
                                            TextFormField(
                                          focusNode:
                                              textDecorationNameFocusNode,
                                          cursorColor:
                                              defaultPalette.extras[0],
                                          controller:
                                              itemDecorationNameController,
                                          decoration:
                                              InputDecoration(
                                            filled:
                                                true,
                                            fillColor:
                                                defaultPalette.transparent,
                                            contentPadding:
                                                EdgeInsets.all(0),
                                            border:
                                                OutlineInputBorder(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                            enabledBorder:
                                                OutlineInputBorder(
                                              borderSide:
                                                  BorderSide(width: 0, color: defaultPalette.transparent),
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                            focusedBorder:
                                                OutlineInputBorder(
                                              borderSide:
                                                  BorderSide(
                                                width: 3,
                                                color: nameExists
                                                    ? layoutName.text == initialLayoutName
                                                        ? defaultPalette.extras[1]
                                                        : Colors.red
                                                    : defaultPalette.transparent,
                                              ),
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                            ),
                                          ),
                                          onChanged:
                                              (value) {
                                            setState(() {
                                            var currentItemDecoration = sheetDecorationList[inx];
                                            // itemDecorationNameController.text = value;
                                            if (decorationIndex == -1) {
                                              if (currentItemDecoration is SuperDecoration) {
                                                // Update the decoration and the name in the list item
                                                var updatedDecoration = currentItemDecoration.copyWith(name: value);
                                                sheetDecorationList[inx] = updatedDecoration;
                                                  
                                              }
                                            } else {
                                              currentItemDecoration = sheetDecorationList[itinx];

                                              try {
                                                if (currentItemDecoration is SuperDecoration) {
                                                  currentItemDecoration= currentItemDecoration.copyWith(name: value);
                                                  sheetDecorationList[itinx] = currentItemDecoration;
                                                } else if (currentItemDecoration is ItemDecoration) {
                                                  currentItemDecoration = currentItemDecoration.copyWith(name: value);
                                                  sheetDecorationList[itinx] = currentItemDecoration;
                                                }
                                              } on Exception catch (e) {
                                                print('Error updating decoration: $e');
                                              }

                                            }
                                            
                                          });


                                          },
                                          style: GoogleFonts.lexend(
                                              color:
                                                  defaultPalette.black,
                                              fontSize: 15),
                                        ),
                                      ),
                                      //ID of Decoration display
                                      SingleChildScrollView(
                                        scrollDirection:
                                            Axis.horizontal,
                                        child: RichText(
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                            text: TextSpan(
                                                style: GoogleFonts.lexend(
                                                  color: defaultPalette.extras[0],
                                                  height: 1.5,
                                                  fontSize: 6,
                                                ),
                                                children: [
                                                  TextSpan(text: 'id: '),
                                                  TextSpan(
                                                    text:sheetDecorationList[inx].id =='yo'
                                                    ?''
                                                    : decorationIndex == -1 
                                                    ? (sheetDecorationList[inx] as SuperDecoration).id 
                                                    : (sheetDecorationList[inx] as SuperDecoration).itemDecorationList[decorationIndex],
                                                    style: GoogleFonts.lexend(color: defaultPalette.extras[0], fontSize: 6, fontWeight: FontWeight.normal),
                                                  ),
                                                ])),
                                      ),
                                      // SizedBox(height:5),
                                    ]
                                  : [],
                                  ),
                                ),
                                SizedBox(
                                  width: 5,
                                ),
                                //PreviewBox of Selected Decoration
                                Container(
                                  height: 80,
                                  width: 58,
                                  padding: EdgeInsets.only(
                                      right: 3),
                                  child:buildDecoratedContainer(
                                          decorationIndex ==
                                                  -1
                                              ? (sheetDecorationList[inx] as SuperDecoration)
                                              : SuperDecoration(
                                                  id: 'yo',
                                                  itemDecorationList: [
                                                      ...(sheetDecorationList[inx] as SuperDecoration)
                                                          .itemDecorationList
                                                          .sublist(0, (decorationIndex + 1).clamp(0, (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length))
                                                    ]),
                                          SizedBox(
                                              width: 30,
                                              height: 30),
                                          true, maxDepth: 5),
                                )
                              ]),
                              // Layer Functions
                              AnimatedPositioned(
                                duration: Durations.medium4,
                                curve: Curves.easeInOut,
                                left:
                                    isListDecorationPropertiesToggled
                                        ? 0
                                        : -width,
                                top: 20,
                                width:
                                    isListDecorationPropertiesToggled
                                        ? width - 102
                                        : 50,
                                child: AnimatedContainer(
                                  duration: Durations.medium4,
                                  curve: Curves.easeInOut,
                                  height: 60,
                                  padding: EdgeInsets.all(4),
                                  transform: Matrix4.identity()
                                    ..translate(
                                        isListDecorationPropertiesToggled
                                            ? 0.0
                                            : (-((sHeight * 0.9) -250) /10).clamp(double.negativeInfinity,50))
                                    ..rotateZ(
                                        isListDecorationPropertiesToggled
                                            ? 0
                                            : -math.pi / 4),
                                  decoration: BoxDecoration(
                                      color:
                                          isListDecorationPropertiesToggled
                                              ? defaultPalette.secondary
                                              : defaultPalette.extras[0],
                                      borderRadius:
                                          BorderRadius.circular(
                                              isListDecorationPropertiesToggled
                                                  ? 10
                                                  : 0),
                                      border: Border.all()),
                                  child: Stack(
                                    children: [
                                      SingleChildScrollView(
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment
                                                  .start,
                                          children: [
                                            Text(
                                              ' layerFunctions',
                                              maxLines: 1,
                                              style: GoogleFonts.lexend(
                                                  fontSize: 13,
                                                  letterSpacing: -1,
                                                  color:
                                                      defaultPalette
                                                          .extras[0]),
                                            ),
                                            //duplicate
                                            roundButton(() {
                                              if (decorationIndex != -1) {
                                              
                                                var decoId = Uuid().v4();
                                                // print('Generated new ID: $decoId');
                                                // print('Parent decoration ID: ${sheetListItem.listDecoration.id}');
                                      
                                                // Step 1: Get the parent decoration safely
                                                var parentItemDecoration = sheetDecorationList[inx];
                                      
                                                if (parentItemDecoration == null) {
                                                  print('Error: Could not find parent decoration.');
                                                  return;
                                                }
                                      
                                                // Ensure the parent is a SuperDecoration
                                                if (parentItemDecoration is! SuperDecoration) {
                                                  print('Error: Parent decoration is not a SuperDecoration.');
                                                  return;
                                                }
                                      
                                                // Step 2: Create a new decoration based on the current one
                                                var currentItemDecoration = sheetDecorationList[itinx];
                                      
                                                if (currentItemDecoration == null) {
                                                  print(
                                                      'Error: Could not find current item decoration at index: $decorationIndex');
                                                  return;
                                                }
                                      
                                                // Step 3: Create the new decoration
                                                SheetDecoration newDecoration;
                                                if (currentItemDecoration is ItemDecoration) {
                                                  newDecoration = currentItemDecoration.copyWith(id:'dITM-$decoId/'+sheetDecorationList.length.toString());
                                                } else if (currentItemDecoration is SuperDecoration) {
                                                  newDecoration = currentItemDecoration.copyWith(
                                                    id: 'dSPR-$decoId/'+sheetDecorationList.length.toString(),
                                                    itemDecorationList: List<String>.from(currentItemDecoration.itemDecorationList),
                                                  );
                                                } else {
                                                  print('Error: Unknown decoration type.');
                                                  return;
                                                }
                                      
                                                // Step 4: Add the new decoration to the list
                                                sheetDecorationList.add(newDecoration);
                                                // print('New decoration added with ID: $decoId');
                                      
                                                // Step 5: Update the parent decoration with the new ID
                                                var updatedItemDecorationList = [
                                                  ...parentItemDecoration.itemDecorationList.sublist(0, decorationIndex),
                                                  decoId,
                                                  ...parentItemDecoration.itemDecorationList.sublist(decorationIndex),
                                                ];
                                      
                                                var updatedParentDecoration = parentItemDecoration.copyWith(
                                                  itemDecorationList: updatedItemDecorationList,
                                                );
                                      
                                                // Step 6: Update the list item and the sheet decoration list
                                                int parentIndex = sheetDecorationList.indexWhere((decoration) =>
                                                    decoration.id == parentItemDecoration.id);
                                      
                                                if (parentIndex != -1) {
                                                  sheetDecorationList[parentIndex] = updatedParentDecoration;
                                                  print('Updated parent decoration with new ID list.');
                                                } else {
                                                  print('Error: Could not update parent decoration.');
                                                }
                                            }
                                      
                                      
                                            },
                                                Icon(
                                                  TablerIcons.copy,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'duplicate'),
                                            // make new
                                            roundButton(() {
                                              if (decorationIndex !=
                                                  -1) {}
                                            },
                                                Icon(
                                                  TablerIcons
                                                      .file_star,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'makeNew'),
                                            //delete
                                            roundButton(() {
                                              if (decorationIndex !=
                                                        -1) {
                                                if ((sheetDecorationList[inx] as SuperDecoration)
                                                        .itemDecorationList
                                                        .length >
                                                    1) {(sheetDecorationList[inx] as SuperDecoration)
                                                      .itemDecorationList
                                                      .removeAt(
                                                          decorationIndex);
                                                  decorationIndex -=
                                                      1;
                                                }
                                            }
                                            },
                                                Icon(
                                                  TablerIcons.trash,
                                                  color:
                                                      defaultPalette
                                                          .extras[0],
                                                  size: 15,
                                                ),
                                                'delete'),
                                          ],
                                        ),
                                      ),
                                      Positioned(
                                        width: 20,
                                        right:0,
                                        child: roundButton((){
                                          isListDecorationPropertiesToggled = !isListDecorationPropertiesToggled; 
                                        }, Icon(TablerIcons.x, size:14), '')),
                                    ],
                                  ),
                                ),
                              ),
                              //the path display
                              SizedBox(
                                width: width-102,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: Row(
                                    children: itemDecorationPath.map((ex) {
                                      var tmpinx = int.tryParse(itemDecorationPath[(itemDecorationPath.indexOf(ex)-1).clamp(0, double.infinity).ceil()].substring(itemDecorationPath[(itemDecorationPath.indexOf(ex)-1).clamp(0, double.infinity).ceil()].indexOf('/') + 1))??-55;
                                      
                                      return 
                                        Wrap(
                                          children: [
                                            Material(
                                              color: defaultPalette.transparent,
                                              child: InkWell(
                                                hoverColor:  defaultPalette.secondary,
                                                  highlightColor:  defaultPalette.secondary,
                                                  splashColor:  defaultPalette.secondary,
                                                  onTap: () {
                                                    setState(() {
                                                      print(itemDecorationPath);
                                                      itemDecorationPath.removeRange(itemDecorationPath.indexOf(ex) + 1, itemDecorationPath.length);
                                                      decorationIndex =-1;
                                                      var tmpinx = int.tryParse(ex.substring(ex.indexOf('/') + 1))??-12;
                                                      itemDecorationNameController.text = sheetDecorationList[tmpinx].name;
                                                      updateSheetDecorationvariables(sheetDecorationList[tmpinx] as SuperDecoration);
                                                    });
                                                  },
                                                child:itemDecorationPath.indexOf(ex)==0
                                              ? Icon(TablerIcons.smart_home, size:15)
                                              :  Container(
                                                  padding: EdgeInsets.symmetric(horizontal: 2),
                                                  decoration: BoxDecoration(
                                                    shape: BoxShape.circle,),
                                                  child: Text(
                                                    (sheetDecorationList[tmpinx] as SuperDecoration).itemDecorationList.indexOf(ex).toString(),
                                                    style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    letterSpacing: -1,
                                                    fontWeight: FontWeight.w600,
                                                    color: defaultPalette.extras[0])
                                                  ),              
                                                ),),
                                            ),
                                            const Icon(TablerIcons.chevron_compact_right, size:15),
                                          ],
                                        )
                                      ;
                                    },).toList(),
                                  ),
                                ),
                              ),
                              
                            ],
                          ),
                        ],
                      ),
                    ),
                    SizedBox(width: 2),
                  ],
                ),
              ],
            )),
      ),
    ),

      //TreeView of Properties per layer and THE ALL THE EDITOR UIs and LIBRARY
      Positioned(
        left: showDecorationLayers ? 48 : 12,
        top: 138,
        right: 16,
        bottom: 18,
        child: Builder(builder: (context) {
          var style = GoogleFonts.lexend(
              fontSize: 13, color: defaultPalette.extras[0]);
          var childStyle = style.copyWith(fontSize: 11);
          var iconColor = defaultPalette.extras[0];
          double childPinSize = 18;
          return ClipRRect(
            borderRadius: BorderRadius.circular(9).copyWith(
                bottomLeft: Radius.circular(
                    showDecorationLayers ? 10 : 25),
                bottomRight: Radius.circular(20)),
            child: Container(
              decoration: BoxDecoration(
                color: defaultPalette.secondary,
                border: Border.all(color: defaultPalette.extras[0],),
                borderRadius: BorderRadius.circular(9).copyWith(
                    bottomLeft: Radius.circular(
                        showDecorationLayers ? 10 : 25),
                    bottomRight: Radius.circular(20)),
              ),
              child: Stack(
                children: [
                  //TreeView of Properties per layer and THE ALL THE EDITOR UIs
                  Padding(
                    padding: const EdgeInsets.all(0).copyWith(top: isListDecorationLibraryToggled? 35:0),
                    child: ScrollConfiguration(
                      behavior:
                          ScrollBehavior().copyWith(scrollbars: false),
                      child: DynMouseScroll(
                          durationMS: 500,
                          scrollSpeed: 1,
                          builder: (context, controller, physics) {
                            SheetDecoration currentItemDecoration = SuperDecoration(id: 'yo', name: 'name');
                            
                            if (decorationIndex != -1) {
                            currentItemDecoration = sheetDecorationList[itinx];
                            }
                            return SingleChildScrollView(
                              controller: controller,
                              physics: physics,
                              child: Column(
                                children: [
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled)
                                  Container(
                                    decoration: BoxDecoration(
                                        color:
                                            defaultPalette.transparent,
                                        borderRadius:
                                            BorderRadius.circular(6)),
                                    child: decorationIndex != -1
                                  ? currentItemDecoration
                                      is ItemDecoration
                                  ? TreeView<String>(
                                      showSelectAll: true,
                                      showExpandCollapseButton:
                                          true,
                                      width:
                                          showDecorationLayers
                                              ? width - 30
                                              : width,
                                      onSelectionChanged:
                                          (p0) {
                                        // print(p0);
                                        setState(() {
                                        var selectedItemDecoration =sheetDecorationList[itinx] as ItemDecoration;
                    
                                        // Update the decoration with new pinned properties
                                        selectedItemDecoration = selectedItemDecoration.copyWith(
                                          pinned: {
                                            'padding': {
                                              'isPinned': p0[1],      // 1
                                              'top': p0[2],           // 2
                                              'bottom': p0[3],        // 3
                                              'left': p0[4],          // 4
                                              'right': p0[5],         // 5
                                            },
                                            'margin': {
                                              'isPinned': p0[6],      // 6
                                              'top': p0[7],           // 7
                                              'bottom': p0[8],        // 8
                                              'left': p0[9],          // 9
                                              'right': p0[10],        // 10
                                            },
                                            'decoration': {
                                              'isPinned': p0[11],     // 11
                                              'color': p0[12],        // 12
                                              'border': p0[13],       // 13
                                              'borderRadius': {
                                                'isPinned': p0[14],   // 14
                                                'topLeft': p0[15],    // 15
                                                'topRight': p0[16],   // 16
                                                'bottomLeft': p0[17], // 17
                                                'bottomRight': p0[18],// 18
                                              },
                                              'boxShadow': p0[19],    // 19
                                              'image': {
                                                'isPinned': p0[20],   // 20
                                                'bytes': p0[21],      // 21
                                                'fit': p0[22],        // 22
                                                'repeat': p0[23],     // 23
                                                'alignment': p0[24],  // 24
                                                'scale': p0[25],      // 25
                                                'opacity': p0[26],    // 26
                                                'filterQuality': p0[27], // 27
                                                'invertColors': p0[28],  // 28
                                              },   
                                            },
                                            'foregroundDecoration': {
                                              'isPinned': p0[29],     // 29
                                              'color': p0[30],        // 30
                                              'border': p0[31],       // 31
                                              'borderRadius': {
                                                'isPinned': p0[32],   // 32
                                                'topLeft': p0[33],    // 33
                                                'topRight': p0[34],   // 34
                                                'bottomLeft': p0[35], // 35
                                                'bottomRight': p0[36],// 36
                                              },
                                              'boxShadow': p0[37],    // 37
                                              'image': {
                                                'isPinned': p0[38],   // 38
                                                'bytes': p0[39],      // 39
                                                'fit': p0[40],        // 40
                                                'repeat': p0[41],     // 41
                                                'alignment': p0[42],  // 42
                                                'scale': p0[43],      // 43
                                                'opacity': p0[44],    // 44
                                                'filterQuality': p0[45], // 45
                                                'invertColors': p0[46],  // 46
                                              }, 
                                            },
                                            'transform': {
                                              'isPinned': p0[47],     // 47
                                            },
                                          },
                                        );
                    
                                        // ✅ Update the main decoration list with the modified item decoration
                                        int index = sheetDecorationList.indexWhere((decoration) => decoration.id == selectedItemDecoration.id);
                                        if (index != -1) {
                                          sheetDecorationList[index] = selectedItemDecoration;
                                        }
                    
                                        // ✅ Update the decoration in the sheetListItem
                                          
                    
                                        print('Updated decoration: ${selectedItemDecoration.id}');
                                      });
                    
                                      },
                                      onExpansionChanged:
                                          (e) {
                                        setState(() {
                                          // print(expansionLevels);
                                          expansionLevels = [
                                            e[0],
                                            e[1],
                                            e[6],
                                            e[11],
                                            e[14],
                                            e[20],
                                            e[29],
                                            e[32],
                                            e[38],
                                          ];
                                        });
                                      },
                                      nodes: [
                                          TreeNode(
                                              indentSize: 2,
                                              selectable:
                                                  false,
                                              alternateChildren:
                                                  true,
                                              isExpanded:
                                                  expansionLevels[
                                                      0],
                                              children: [
                                                //padding
                                                TreeNode(
                                                    isExpanded:
                                                        expansionLevels[
                                                            1],
                                                    label: Text(
                                                        'padding',
                                                        style:
                                                            style),
                                                    isSelected:
                                                        currentItemDecoration.pinned['padding'][
                                                            'isPinned'],
                                                    icon: Icon(
                                                        TablerIcons
                                                            .box_padding,
                                                        size:
                                                            16,
                                                        color:
                                                            iconColor),
                                                    indentSize:
                                                        8,
                                                    alternateChildren:
                                                        false,
                                                    checkboxSize:
                                                        20,
                                                    children: [
                                                      TreeNode<String>(
                                                        label: Text('top',style: childStyle),
                                                        icon: Transform.rotate(
                                                            angle: pi,
                                                            child: Icon(TablerIcons.layout_bottombar_inactive, size: 15)),
                                                        checkboxSize:childPinSize,
                                                        isSelected:currentItemDecoration.pinned['padding']['top'],
                                                      ),
                                                      TreeNode<String>(
                                                        label: Text('bottom',style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_bottombar_inactive,
                                                            size: 15),
                                                        checkboxSize:childPinSize,
                                                        isSelected: currentItemDecoration.pinned['padding']['bottom'],
                                                      ),
                                                      TreeNode<String>(
                                                        label: Text('left',style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_sidebar_inactive,
                                                            size: 15),
                                                        checkboxSize:childPinSize,
                                                        isSelected:currentItemDecoration.pinned['padding']['left'],
                                                      ),
                                                      TreeNode<  String>(
                                                        label: Text(
                                                            'right',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.layout_sidebar_right_inactive,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['padding']['right'],
                                                      )
                                                    ]),
                                                //margin
                                                TreeNode(
                                                    label: Text(
                                                        'margin',
                                                        style:
                                                            style),
                                                    isExpanded:
                                                        expansionLevels[
                                                            2],
                                                    icon: Icon(TablerIcons.box_margin,
                                                        size:
                                                            16,
                                                        color:
                                                            iconColor),
                                                    indentSize:
                                                        8,
                                                    alternateChildren:
                                                        false,
                                                    checkboxSize:
                                                        20,
                                                    isSelected: (currentItemDecoration)
                                                        .pinned['margin']['isPinned'],
                                                    children: [
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'top',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_bottom,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['top'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'bottom',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_top,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['bottom'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'left',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_right,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['left'],
                                                      ),
                                                      TreeNode<
                                                          String>(
                                                        label: Text(
                                                            'right',
                                                            style: childStyle),
                                                        icon: Icon(
                                                            TablerIcons.box_align_left,
                                                            size: 15),
                                                        checkboxSize:
                                                            childPinSize,
                                                        isSelected:
                                                            currentItemDecoration.pinned['margin']['right'],
                                                      )
                                                    ]),
                                                //decoration
                                                for (int i = 0;
                                                    i < 2;
                                                    i++)
                                                  TreeNode(
                                                      isExpanded: expansionLevels[i == 0
                                                          ? 3
                                                          : 6],
                                                      label: Text(
                                                          i == 0
                                                              ? 'decor'
                                                              : 'foreground',
                                                          style:
                                                              style),
                                                      icon: Icon(  TablerIcons .palette,
                                                          size:  16,
                                                          color: iconColor),
                                                      indentSize: 8,
                                                      alternateChildren:  false,
                                                      checkboxSize:   20,
                                                      isSelected: (currentItemDecoration).pinned[i ==0
                                                          ? 'decoration'
                                                          : 'foregroundDecoration']['isPinned'],
                                                      children: [
                                                        TreeNode< String>(
                                                          label: Text('color', style: childStyle),
                                                          icon: Icon(TablerIcons.color_swatch, size: 15),
                                                          checkboxSize: childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['color'],
                                                        ),
                                                        TreeNode< String>(
                                                          label:  Text('border', style: childStyle),
                                                          icon: Icon(TablerIcons.border_sides, size: 15),
                                                          checkboxSize:
                                                              childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['border'],
                                                        ),
                                                        TreeNode<String>(
                                                            label: Text('cornerRadius', style: childStyle),
                                                            icon: Icon(TablerIcons.border_corners, size: 15),
                                                            checkboxSize: childPinSize,
                                                            isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['isPinned'],
                                                            isExpanded: expansionLevels[i == 0 ? 4 : 7],
                                                            alternateChildren: false,
                                                            children: [
                                                              TreeNode<String>(label: Text('topLeft', style: childStyle), icon: Icon(TablerIcons.radius_top_left, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['topLeft']),
                                                              TreeNode<String>(label: Text('topRight', style: childStyle), icon: Icon(TablerIcons.radius_top_right, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['topRight']),
                                                              TreeNode<String>(label: Text('bottomLeft', style: childStyle), icon: Icon(TablerIcons.radius_bottom_left, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['bottomLeft']),
                                                              TreeNode<String>(label: Text('bottomRight', style: childStyle), icon: Icon(TablerIcons.radius_bottom_right, size: 15), checkboxSize: childPinSize, isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['borderRadius']['bottomRight']),
                                                            ]),
                                                        TreeNode<
                                                            String>(
                                                          label:
                                                              Text('shadow', style: childStyle),
                                                          icon:
                                                              Icon(TablerIcons.shadow, size: 15),
                                                          checkboxSize:
                                                              childPinSize,
                                                          isSelected: currentItemDecoration.pinned[i == 0
                                                              ? 'decoration'
                                                              : 'foregroundDecoration']['boxShadow'],
                                                        ),
                                                        TreeNode<String>(
                                                            label: Text('image', style: childStyle),
                                                            isExpanded: expansionLevels[i == 0 ? 5 : 8],
                                                            icon: Icon(TablerIcons.photo, size: 15),
                                                            checkboxSize: childPinSize,
                                                            alternateChildren: false,
                                                            indentSize: 5,
                                                            isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['isPinned'],
                                                            children: [
                                                              TreeNode<String>(
                                                                label: Text('file', style: childStyle),
                                                                selectable: false,
                                                                icon: Icon(TablerIcons.file_type_jpg, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['bytes'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('fit', style: childStyle),
                                                                icon: Icon(TablerIcons.artboard, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['fit'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('repeat', style: childStyle),
                                                                icon: Icon(TablerIcons.layout_grid, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['repeat'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('align', style: childStyle),
                                                                icon: Icon(TablerIcons.align_box_left_stretch, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['alignment'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('scale', style: childStyle),
                                                                icon: Icon(TablerIcons.scale, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['scale'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('opacity', style: childStyle),
                                                                icon: Icon(TablerIcons.square_toggle, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['opacity'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('quality', style: childStyle),
                                                                icon: Icon(TablerIcons.michelin_star, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['filterQuality'],
                                                              ),
                                                              TreeNode<String>(
                                                                label: Text('invert', style: childStyle),
                                                                icon: Icon(TablerIcons.brightness_2, size: 15),
                                                                checkboxSize: childPinSize,
                                                                isSelected: currentItemDecoration.pinned[i == 0 ? 'decoration' : 'foregroundDecoration']['image']['invertColors'],
                                                              ),
                                                            ]),
                                                        
                                                      ]),
                    
                                                //transform
                                                TreeNode(
                                                  label: Text(
                                                      'transform',
                                                      style:
                                                          style),
                                              icon: Icon(
                                                  TablerIcons .transform_point,
                                                  size:  16,
                                                  color: iconColor),
                                              indentSize: 17,
                                              alternateChildren: false,
                                              checkboxSize:  20,
                                              isSelected: (currentItemDecoration)
                                                  .pinned['transform']['isPinned'],
                                            ),
                                          ])
                                        ])
                                  : null
                                  : null,
                                  ),
                                  //ALL THE EDITOR UIs
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled && itinx !=-1)
                                    if (sheetDecorationList[itinx]
                                      is ItemDecoration)
                                    ...buildItemDecorationEditor(context,
                                        (sheetDecorationList[itinx]
                                            as ItemDecoration), shadowLayerIndex: sheetDecorationVariables[decorationIndex].listShadowLayerSelectedIndex),
                                  //If selected layer is superdecoration
                                  if (decorationIndex != -1 && !isListDecorationLibraryToggled && itinx !=-1)
                                    if (sheetDecorationList[itinx]
                                      is SuperDecoration)
                                        ...buildSuperDecorationEditor(context,sheetDecorationList[itinx]
                                            as SuperDecoration),
                                  if(decorationIndex == -1 && !isListDecorationLibraryToggled )
                                  ...buildSuperDecorationEditor(context,sheetDecorationList[inx] as SuperDecoration),
                                            
                                  //THE LIBRARY FOR DECORATION          
                                  if(isListDecorationLibraryToggled)
                                  Padding(
                                    padding: const EdgeInsets.all(4.0),
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      children: [
                                        Row(
                                              mainAxisAlignment: MainAxisAlignment.start,
                                              children: [
                                                
                                              UtilityWidgets.maybeTooltip(
                                                message: 'addNewSuperDecoration.',
                                                child: roundButton(
                                                  () { 
                                                    var currentItemDecoration = (sheetDecorationList[inx] as SuperDecoration); 
                                                      
                                                  setState(() {
                                                    if (currentItemDecoration.itemDecorationList.length < 70) {
                                                      (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.add(newSuperDecoration().id);
                                                    } else {
                                                      print('Guys come on, turn this into a super now');
                                                    }
                                                  });
                                                  },
                                                  Icon(TablerIcons.plus,size: 14,), 'add',padding: EdgeInsets.all(2), showText: false),
                                              ),
                                                
                                              ],
                                            ), 
                                        // SizedBox(height:4),
                                          ...filteredDecorations.map((e) {
                                          
                                      return Container(
                                        width: width,
                                        margin: EdgeInsets.only(bottom: 4),
                                        padding: EdgeInsets.all(3),
                                          decoration: BoxDecoration(
                                        color: defaultPalette.secondary,
                                        border: Border.all(color: defaultPalette.extras[0],),
                                        borderRadius: BorderRadius.circular(5)
                                      ),
                                        child: Column(
                                          children: [
                                            // the preview in the cards and details in searching decoration
                                            Container( 
                                              padding: EdgeInsets.all(3),
                                              decoration: BoxDecoration(
                                              color: defaultPalette.primary,
                                              border: Border.all(color: defaultPalette.extras[0],),
                                              borderRadius: BorderRadius.circular(5)),
                                              child: Row(
                                                // crossAxisAlignment: CrossAxisAlignment.start,
                                                children: [
                                                  SizedBox(
                                                    height:75,
                                                    width:55,
                                                    child: buildDecoratedContainer(
                                                      !(e is ItemDecoration)? e: SuperDecoration(id: 'yo', itemDecorationList: [e.id]), 
                                                    SizedBox(
                                                      height: 20, width:20
                                                    ), true, maxDepth: 2),
                                                  ),
                                                  SizedBox(  width:3),

                                                  Expanded(
                                                    child: Column(
                                                      crossAxisAlignment: CrossAxisAlignment.end,
                                                      children: [
                                                        Text(e.name, style: GoogleFonts.lexend(
                                                          color: defaultPalette.extras[0],
                                                          letterSpacing:-1,
                                                          fontSize: 15), maxLines: 2),
                                                        Text(e.id, style: GoogleFonts.lexend(
                                                          color: defaultPalette.extras[0],
                                                          letterSpacing:-0.5,
                                                          fontSize: 8),maxLines: 1,textAlign: TextAlign.end,),
                                                        SizedBox(  height:5),
                                                        // The runTimeType badge for Decoration in Search
                                                        Container(decoration: BoxDecoration(
                                                        color: defaultPalette.secondary,
                                                        border: Border.all(width: 0.6),
                                                        borderRadius: BorderRadius.circular(5),),
                                                          child: SingleChildScrollView(
                                                            scrollDirection: Axis.horizontal,
                                                            child: Row(
                                                              mainAxisSize: MainAxisSize.min,

                                                              children: [
                                                                SizedBox(  width:3),
                                                                DecoratedBox(decoration: BoxDecoration(
                                                                  borderRadius: BorderRadius.circular(9999),
                                                                  color:(e is ItemDecoration)? defaultPalette.tertiary: defaultPalette.extras[2],
                                                                ), child: SizedBox(height: 10,width: 10,),),
                                                                SizedBox(  width:3),
                                                                Text(e.runtimeType.toString(), style: GoogleFonts.lexend(
                                                                color: defaultPalette.extras[0],
                                                                letterSpacing:-1,
                                                                fontSize: 10), maxLines: 1,),
                                                                SizedBox(  width:3),
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                        // SizedBox(  height:5),
                                                        
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                            SizedBox(  height:3),
                                            // the buttons in the cards and functions in searching decoration
                                            
                                            Row(
                                              mainAxisAlignment: MainAxisAlignment.start,
                                              children: [
                                                
                                              UtilityWidgets.maybeTooltip(
                                                message: 'add this as a layer to the current SuperDecoration.',
                                                child: roundButton(
                                                  () { 
                                                    var currentItemDecoration = (sheetDecorationList[inx] as SuperDecoration); 
                                                      
                                                  if (currentItemDecoration.itemDecorationList.length < 70) {
                                                      
                                                    if (currentItemDecoration is SuperDecoration) {
                                                      // Create a new list with the updated decoration IDs
                                                      var updatedList = List<String>.from(currentItemDecoration.itemDecorationList);
                                                      updatedList.add(e.id);
                                                                                              
                                                      // Create the updated decoration using copyWith
                                                      var updatedDecoration = currentItemDecoration.copyWith(
                                                        itemDecorationList: updatedList,
                                                      );
                                                                
                                                      sheetDecorationList[inx] = updatedDecoration;
                                                      
                                                                                              
                                                      updateSheetDecorationvariables(currentItemDecoration);
                                                      
                                                      print('New decoration added');
                                                      print(updatedDecoration.itemDecorationList);
                                                    } else {
                                                      print('Error: Decoration is not a SuperDecoration');
                                                    }
                                                  } else {
                                                    print('Guys come on, turn this into a super now');
                                                  }
                                                  },
                                                  Icon(TablerIcons.plus,size: 14,), 'add',padding: EdgeInsets.all(2), showText: false),
                                              ),
                                                
                                              UtilityWidgets.maybeTooltip(
                                                message: 'delete this decoration permanently.',
                                                child: roundButton(() {
                                                                                              
                                                  // int index = sheetDecorationList.indexWhere((deco) => deco.id == e.id);
                                                  // if (index != -1) {
                                                  //   sheetDecorationList.removeAt(index);
                                                  // }
                                                  // Boxes.getDecorations().deleteAt(index);
                                                  // for (int i = 0; i < sheetDecorationList.length; i++) {
                                                  //   final deco = sheetDecorationList[i];
                                                  //   deco.id = '${deco.id.split('/')[0]}/$i';
                                                  // }
                                                  // filteredDecorations = sheetDecorationList
                                                  // .where((decoration) =>
                                                  //     decoration.name.toLowerCase().contains(decorationSearchController.text.toLowerCase()))
                                                  // .toList();
                                                  // saveDecorations(sheetDecorationList);
                                                  
                                                  },
                                                  Icon(TablerIcons.trash,size: 14,), 'delete',padding: EdgeInsets.all(2), showText: false),
                                              ),
                                              
                                              if(e is SuperDecoration && itemDecorationPath.length ==1)
                                              UtilityWidgets.maybeTooltip(
                                                message: 'switch the current SuperDecoration with this one.',
                                                child: roundButton(() {
                                                  var tmpinx = int.tryParse(e.id.substring(e.id.indexOf('/') + 1))??-33;
                                                  switch (whichPropertyTabIsClicked) {
                                                    case 2:
                                                      item.textDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                      updateSheetDecorationvariables(e);
                                                      decorationIndex =-1;
                                                      itemDecorationPath
                                                      ..clear()
                                                      ..add(e.id);
                                                    
                                                      break;
                                                    case 3:
                                                      sheetListItem.listDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                      updateSheetDecorationvariables(e);
                                                      decorationIndex =-1;
                                                      itemDecorationPath
                                                      ..clear()
                                                      ..add(e.id);  
                                                      break;
                                                    case 4:
                                                      if(whichTableDecorationIsClicked == 0){
                                                        updateSheetDecorationvariables(e);
                                                        decorationIndex =-1;
                                                        itemDecorationPath..clear()..add(e.id);
                                                        
                                                        for (var i = 0; i < sheetTableItem.cellData.length; i++) {
                                                         var row = sheetTableItem.cellData[i];
                                                          for (var j = 0; j < row.length; j++) {
                                                            var cell = row[j];
                                                            if ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.columnData[j].columnDecoration) {
                                                              print('cell');
                                                              sheetTableItem.columnData[j].columnDecoration = sheetDecorationList[tmpinx].id;
                                                            }
                                                            if ((cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.rowData[i].rowDecoration) {
                                                              print('bell');
                                                              sheetTableItem.rowData[i].rowDecoration = sheetDecorationList[tmpinx].id;
                                                            }
                                                            print('sell');
                                                            print((cell.sheetItem as SheetText).textDecoration.id);
                                                            print(sheetTableItem.sheetTableDecoration.id );
                                                            print('sell');
                                                            if (cell.sheetItem is SheetText && ((cell.sheetItem as SheetText).textDecoration.id ==
                                                                  sheetTableItem.sheetTableDecoration.id )) {
                                                            print(cell.sheetItem);   
                                                            print('dell');
                                                            (cell.sheetItem as SheetText).textDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                            
                                                          }
                                                          }
                                                        }
                                                        sheetTableItem.sheetTableDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                        
                                                      
                                                      } else if(whichTableDecorationIsClicked == 1){
                                                        sheetTableItem.sheetTablebgDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                        updateSheetDecorationvariables(e);
                                                        decorationIndex =-1;
                                                        itemDecorationPath..clear()..add(e.id);
                                                      } else if (whichTableDecorationIsClicked == 2){
                                                        updateSheetDecorationvariables(e);
                                                        decorationIndex =-1;
                                                        itemDecorationPath..clear()..add(e.id);
                                                        for (var cell in sheetTableItem.cellData[sheetTableVariables.rowLayerIndex]) {
                                                          // print(cell);
                                                          if (cell.sheetItem is SheetText &&
                                                              ((cell.sheetItem as SheetText).textDecoration.id ==
                                                                  sheetTableItem.sheetTableDecoration.id || 
                                                                  (cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration)) {
                                                            // print(cell.sheetItem);        
                                                            (cell.sheetItem as SheetText).textDecoration = sheetDecorationList[tmpinx] as SuperDecoration; 
                                                          }
                                                        }
                                                        sheetTableItem.rowData[sheetTableVariables.rowLayerIndex].rowDecoration = sheetDecorationList[tmpinx].id;
                                                        
                                                      } else if (whichTableDecorationIsClicked == 3){
                                                        updateSheetDecorationvariables(e);
                                                        decorationIndex =-1;
                                                        itemDecorationPath..clear()..add(e.id);
                                                        for (var row in sheetTableItem.cellData) {
                                                        var cell = row[sheetTableVariables.columnLayerIndex];
                                                        print(cell);
                                                        if (cell.sheetItem is SheetText && ((cell.sheetItem as SheetText).textDecoration.id ==
                                                                sheetTableItem.sheetTableDecoration.id ||
                                                                (cell.sheetItem as SheetText).textDecoration.id == sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration)) {
                                                          print(cell.sheetItem);   
                                                          (cell.sheetItem as SheetText).textDecoration = sheetDecorationList[tmpinx] as SuperDecoration;
                                                          }
                                                        }
                                                        sheetTableItem.columnData[sheetTableVariables.columnLayerIndex].columnDecoration = sheetDecorationList[tmpinx].id;
                                                        

                                                      }
                                                      
                                                      break;
                                                  }
                                                  itemDecorationNameController.text=e.name;

                                                  
                                                  },Icon(TablerIcons.replace,size: 14,), 'switchTo',padding: EdgeInsets.all(2), showText: false),
                                                  
                                              ),
                                              
                                              if(e is SuperDecoration)
                                              UtilityWidgets.maybeTooltip(
                                                message: '''add it's child layers to the current SuperDecoration.''',
                                                child: roundButton(() {
                                                  if ((sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length < 70) {
                                                    
                                                    
                                                    if ((sheetDecorationList[inx]) is SuperDecoration) {

                                                      (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.addAll(e.itemDecorationList);                                        
                                                                               
                                                    } else {
                                                      print('Error: Decoration is not a SuperDecoration');
                                                    }
                                                  } else {
                                                    print('Guys come on, turn this into a super now');
                                                  }
                                                  },Icon(TablerIcons.library_plus,size: 14,), 'switchTo',padding: EdgeInsets.all(2), showText: false),
                                              ),
                                              
                                              ],
                                            ),    
                                          ],
                                        ),
                                      );
                                    },).toList()
                                      ],
                                    ),
                                  ),
                                  
                                  ],
                              ),
                            );
                          }),
                    ),
                  ),
                  //Decoration Search Bar
                  if(isListDecorationLibraryToggled)
                  Container(
                  height: 25,
                  margin: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: defaultPalette.primary,
                    border: Border.all(color: defaultPalette.extras[0],),
                    borderRadius: BorderRadius.circular(5)
                  ),
                  child: TextFormField(
                      style: GoogleFonts.lexend(
                          color: defaultPalette.extras[0],
                          letterSpacing:-1,
                          fontSize: 15),
                      cursorColor: defaultPalette.tertiary,
                      controller: decorationSearchController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.all(0),
                        hintText: 'searchDecors...',
                        focusColor: defaultPalette.primary,
                        hintStyle: GoogleFonts.lexend(
                          color: defaultPalette.extras[0],
                          letterSpacing:-1,
                          fontSize: 15),
                        prefixIcon: Icon(TablerIcons.search, size:15,
                            color: defaultPalette.extras[0]),
                        border: OutlineInputBorder(
                          borderSide: BorderSide.none, 
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      onChanged: (query) {
                        setState(() {
                          // Filter the list of SheetDecoration by their names
                          filteredDecorations = sheetDecorationList
                              .where((decoration) =>
                                  decoration.name.toLowerCase().contains(query.toLowerCase()))
                              .toList();
                            // Debugging output
                        });
                      },
                            
                    ),
                  ),
                                      
                ],
              ),
            ),
          );
        }),
      ),

      //BLACK STRIP ANIMATED OF DECORATION LAYERs BACKGRGOUND
      AnimatedPositioned(
        duration: Durations.medium1,
        curve: Curves.easeOut,
        bottom: 32,
        left: showDecorationLayers ? 12.5 : 12,
        child: AnimatedContainer(
          duration: Durations.medium4,
          curve: Curves.easeInOut,
          height:
              showDecorationLayers ? (sHeight * 0.9) - 240 : 0,
          width: 25,
          alignment: Alignment.bottomCenter,
          padding: EdgeInsets.only(left:3),
          decoration: BoxDecoration(
            color: defaultPalette.extras[0],
            border:Border.all(color:defaultPalette.extras[0],width:1),
            borderRadius: BorderRadius.circular(
                    showDecorationLayers ? 50 : 0)
                .copyWith(bottomLeft: Radius.circular(0)),
          ),
          child: Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(
                    showDecorationLayers ? 50 : 0),
                // child: BubbleBackground(
                //   // config: BubbleConfig(
                //   //   minRadius: 5,
                //   //   maxRadius: 15
                //   // ),      
                //                       ),
              ),
              Text('Decor \n\nLayers \n \n     ',
                  style: GoogleFonts.bungee(
                      color: whichPropertyTabIsClicked != 3
                                ? defaultPalette.extras[0]
                                : defaultPalette.secondary.withOpacity(0.5),
                      fontSize: 10)),
            ],
          ),
        ),
      ),
      //LAYERS OF DECORATION AS TILES REORDERABLE
      AnimatedPositioned(
        duration: Durations.medium3,
        curve: Curves.easeInBack,
        bottom: 30,
        left: showDecorationLayers ? 6.5 : -50,
        child: ClipRRect(
          borderRadius: BorderRadius.circular(0).copyWith(
              topRight: Radius.circular(5),
              bottomRight: Radius.circular(5)),
          child: AnimatedContainer(
              duration: Durations.medium1,
              curve: Curves.easeInOut,
              height: (sHeight * 0.9) - 250,
              width: 38,
              padding: EdgeInsets.only(bottom: 10),
              decoration: BoxDecoration(
                // color: defaultPalette.secondary,
                borderRadius: BorderRadius.circular(50).copyWith(
                  bottomLeft: Radius.circular(0),
                  bottomRight: Radius.circular(0)),
              ),
              child: ScrollConfiguration(
                behavior:
                    ScrollBehavior().copyWith(scrollbars: false),
                child: DynMouseScroll(
                    durationMS: 500,
                    scrollSpeed: 1,
                    builder: (context, controller, physics) {
                      List<MapEntry<int, SheetDecoration>> decorationEntries = (sheetDecorationList[inx] as SuperDecoration).itemDecorationList
                      .asMap().entries.toList().reversed.map((entry) {
                        // Get the actual decoration using the ID
                        var tmpinx = int.tryParse(entry.value.substring(entry.value.indexOf('/') + 1))??-155;
    
                        final decoration = sheetDecorationList[tmpinx];
                        return MapEntry(entry.key, decoration);
                      }).toList();
                      return ScrollbarUltima.semicircle(
                        alwaysShowThumb: true,
                        controller: controller,
                        scrollbarPosition: ScrollbarPosition.left,
                        backgroundColor: defaultPalette.extras[0],
                        scrollbarLength: (sHeight * 0.9) - 270,
                        isDraggable: true,
                        thumbCrossAxisSize: 5,
                        elevation: 0,
                        arrowsColor: defaultPalette.primary,
                        child: Padding(
                          padding:
                              const EdgeInsets.only(left: 8.0),
                          child: ReorderableListView(
                            onReorder: (oldIndex, newIndex) {
                              setState(() {
                                final itemList = (sheetDecorationList[inx] as SuperDecoration)
                                    .itemDecorationList.reversed.toList();

                                final elem = itemList
                                      .removeAt(oldIndex);
                                  if ((newIndex !=
                                      itemList.length + 2)) {
                                    print('hah' +
                                        itemList.length
                                            .toString() +
                                        ' ' +
                                        newIndex.toString());

                                    
                                    if (oldIndex < newIndex) {
                                      itemList.insert(newIndex-1,elem);
                                      // decorationIndex =
                                      //     (newIndex - 1);
                                    } else {
                                      // decorationIndex =
                                      //     newIndex;
                                      itemList.insert(
                                        newIndex, elem);
                                    }
                                    print('hah' +
                                        oldIndex
                                            .toString() +
                                        ' ' +
                                        newIndex.toString());
                                  } else {
                                    itemList.add(elem);
                                    // decorationIndex =
                                    //     itemList.length - 1;
                                    print(oldIndex.toString() +
                                        ' ' +
                                        newIndex.toString());
                                  }
                                  (sheetDecorationList[inx] as SuperDecoration)
                                    .itemDecorationList = itemList.reversed.toList();
                                  
                                updateSheetDecorationvariables((sheetDecorationList[inx] as SuperDecoration));
                              });
                            },
                            proxyDecorator:
                                (child, index, animation) {
                              return child;
                            },
                            buildDefaultDragHandles: false,
                            physics: physics,
                            scrollController: controller,
                            children: [
                              for (final entry in decorationEntries)
                                ReorderableDragStartListener(
                                  index: (((sheetDecorationList[inx] as SuperDecoration)
                                          .itemDecorationList
                                          .length -
                                      1) -
                                      entry.key),
                                  key: ValueKey(entry.key),
                                  child: Stack(
                                    children: [
                                      //tiny layer body of decoration
                                      AnimatedContainer(
                                        duration: Duration(
                                            milliseconds: (500 +
                                                    (300 /(((sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length == 1 
                                                    ? 2 
                                                    : (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length) - 1)) * entry.key)
                                                .round()),
                                        curve: Curves.easeIn,
                                        height: (((sHeight * 0.9) - 250) / (decorationIndex == entry.key ? 8 : 10.3))
                                            .clamp(0, decorationIndex == entry.key ? 70 : 50),
                                        alignment: Alignment.topCenter, // Set pivot to bottom-left
                                        transform: Matrix4.identity()
                                        ..translate(showDecorationLayers
                                              ? 0.0
                                              : (-((sHeight * 0.9) - 250) /10).clamp(double.negativeInfinity, 50))
                                          ..rotateZ( showDecorationLayers? 0: -math.pi / 2),
                                        margin: EdgeInsets.only(
                                            bottom: 5,
                                            right: showDecorationLayers
                                                ? 0
                                                : (10 *entry.key) + 1),
                                        padding: EdgeInsets.only(
                                            top: 4, left: 15),

                                        decoration: BoxDecoration(
                                          color: entry.value
                                                  is ItemDecoration
                                              ? decorationIndex ==
                                                      entry.key
                                                  ? defaultPalette
                                                      .extras[0]
                                                  : defaultPalette
                                                      .tertiary
                                              : defaultPalette
                                                  .extras[1],
                                          border:Border.all()      ,  
                                          borderRadius:
                                              BorderRadius.circular(
                                                      showDecorationLayers
                                                          ? 5
                                                          : 500)
                                                  .copyWith(),
                                        ),
                                      ),

                                      //Border for when tapped
                                      AnimatedOpacity(
                                        duration: Duration(
                                            milliseconds: (500 +
                                                    (300 /
                                                            (((sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length == 1 ? 2 : (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length) -
                                                                1)) *
                                                        entry.key)
                                                .round()),
                                        opacity:
                                            decorationIndex ==
                                                    entry.key
                                                ? 1
                                                : 0,
                                        child: AnimatedContainer(
                                          duration: Duration(
                                              milliseconds: 600),
                                          curve: Curves.easeIn,
                                          height: (((sHeight *
                                                          0.9) -
                                                      250) /
                                                  (decorationIndex ==
                                                          entry
                                                              .key
                                                      ? 8
                                                      : 10.3))
                                              .clamp(
                                                  0,
                                                  decorationIndex ==
                                                          entry
                                                              .key
                                                      ? 70
                                                      : 50),
                                          alignment: Alignment
                                              .topLeft, // Set pivot to bottom-left
                                          transform: Matrix4
                                              .identity()
                                            ..translate(showDecorationLayers
                                                ? 0.0
                                                : (-((sHeight * 0.9) -
                                                            250) /
                                                        10)
                                                    .clamp(
                                                        double
                                                            .negativeInfinity,
                                                        50))
                                            ..rotateZ(
                                                showDecorationLayers
                                                    ? 0
                                                    : -math.pi /
                                                        2),
                                          margin: EdgeInsets.only(
                                              bottom: 5,
                                              right: showDecorationLayers
                                                  ? 0
                                                  : (10 *
                                                          entry
                                                              .key) +
                                                      1),
                                          padding:
                                              EdgeInsets.all(1),
                                          decoration:
                                              BoxDecoration(
                                                  // color: entry.value is ItemDecoration? defaultPalette.tertiary:defaultPalette.extras[1] ,
                                                  borderRadius:
                                                      BorderRadius.circular(
                                                          showDecorationLayers
                                                              ? 5
                                                              : 500),
                                                  border: Border(
                                                    right: BorderSide(
                                                        color: defaultPalette
                                                            .tertiary,
                                                        width: 2),
                                                    left: BorderSide(
                                                        color: defaultPalette
                                                            .tertiary,
                                                        width: 2),
                                                    top: BorderSide(
                                                        color: defaultPalette
                                                            .tertiary,
                                                        width: 2),
                                                    bottom: BorderSide(
                                                        color: defaultPalette
                                                            .tertiary,
                                                        width:
                                                            16),
                                                  )),
                                          child:
                                              buildDecoratedContainer(
                                                  SuperDecoration(
                                                      id: 'id',
                                                      itemDecorationList: [
                                                        (sheetDecorationList[inx] as SuperDecoration)
                                                            .itemDecorationList[entry.key]
                                                      ]),
                                                  SizedBox(
                                                    height: 10,
                                                    width: 10,
                                                  ),
                                                  true, maxDepth: 2),
                                        ),
                                      ),

                                      //onTap onHover Functions
                                      // if(decorationIndex != entry.key)
                                      Padding(
                                        padding:
                                            const EdgeInsets.all(
                                                1.0),
                                        child: ClipRRect(
                                          borderRadius:
                                              BorderRadius.circular(
                                                  showDecorationLayers
                                                      ? 5
                                                      : 500),
                                          child: Material(
                                            color: defaultPalette
                                                .transparent,
                                            child: InkWell(
                                                hoverColor: decorationIndex == entry.key
                                                    ? defaultPalette.transparent
                                                    : defaultPalette.primary,
                                                highlightColor: decorationIndex ==entry.key
                                                    ? defaultPalette.transparent
                                                    : defaultPalette.primary,
                                                splashColor: decorationIndex == entry.key
                                                    ? defaultPalette .transparent
                                                    : defaultPalette.tertiary,
                                                onTap: () {
                                                  setState(() {
                                                    if (decorationIndex !=entry.key) {
                                                        decorationIndex =entry.key;
                                                        print(decorationIndex);
                                                        itinx = int.tryParse((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[decorationIndex].substring((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[decorationIndex].indexOf('/') + 1))??-7;
       
                                                        var itemDecoration = sheetDecorationList[itinx];
                                                        itemDecorationNameController .text =itemDecoration.name;
                                                        isListDecorationLibraryToggled =false;
                                                        print(decorationIndex);
                                                        // updateListDecorationVariables(sIndex: -1);

                                                        if (itemDecoration
                                                            is SuperDecoration) {
                                                              print(decorationIndex);
                                                          updateSheetDecorationvariables(itemDecoration);
                                                          return;
                                                        } else{
                                                          print(decorationIndex);
                                                          // _findSheetListItem();
                                                          updateSheetDecorationvariables((sheetDecorationList[inx] as SuperDecoration));
                                                          
                                                          decorationIndex = entry.key;
                                                          }
                                                      }
                                                  });
                                                },
                                                onDoubleTap: () {
                                                  setState(() {
                                                    var tmpinx = int.tryParse((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[entry.key].substring((sheetDecorationList[inx] as SuperDecoration).itemDecorationList[entry.key].indexOf('/') + 1))??-88;
                                                    var itemDecoration = sheetDecorationList[tmpinx];
                                                    if (itemDecoration is SuperDecoration) {    
                                                    listDecorationNameController.text = itemDecoration.name;
                                                    isListDecorationLibraryToggled = false;

                                                    updateSheetDecorationvariables(itemDecoration);
                                                    itemDecorationPath.add(itemDecoration.id);
                                                    print(itemDecorationPath);
                                                    decorationIndex = -1;
                                                    }

                                                  });
                                                },
                                                child: SizedBox(
                                                  width: 40,
                                                  height: (((sHeight * 0.9) - 250) / (decorationIndex == entry.key ? 8 : 10.3))
                                            .clamp(0, decorationIndex == entry.key ? 70 : 50) -
                                                      2,
                                                )),
                                          ),
                                        ),
                                      ),

                                      //Numbering on the right of the tiny layer box
                                      AnimatedPositioned(
                                        duration: Duration(
                                            milliseconds: (500 +
                                                    (300 /
                                                            (((sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length == 1 ? 2 : (sheetDecorationList[inx] as SuperDecoration).itemDecorationList.length) -
                                                                1)) *
                                                        entry.key)
                                                .round()),
                                        bottom:
                                            showDecorationLayers
                                                ? decorationIndex ==
                                                        entry.key
                                                    ? 6
                                                    : (((sHeight * 0.9) - 250) /
                                                                10)
                                                            .clamp(
                                                                0,
                                                                50) /
                                                        2.5
                                                : 0,
                                        right: decorationIndex ==
                                                entry.key
                                            ? 8
                                            : 2,
                                        child: decorationIndex ==
                                                entry.key
                                            ? GestureDetector(
                                                onTap: () {
                                                  if (decorationIndex !=
                                                      -1) {
                                                    setState(() {
                                                      if ((sheetDecorationList[inx] as SuperDecoration)
                                                              .itemDecorationList
                                                              .length >
                                                          0) {
                                                        (sheetDecorationList[inx] as SuperDecoration)
                                                            .itemDecorationList
                                                            .removeAt(
                                                                decorationIndex);
                                                        decorationIndex =-1;
                                                        updateSheetDecorationvariables((sheetDecorationList[inx] as SuperDecoration));
                                                      }

                                                    });
                                                  }
                                                },
                                                child: Icon(
                                                  TablerIcons
                                                      .trash,
                                                  size: 14,
                                                  color: defaultPalette
                                                      .extras[0],
                                                ),
                                              )
                                            : CountingAnimation(
                                                value: (entry.key)
                                                    .toString(),
                                                mainAlignment:
                                                    MainAxisAlignment
                                                        .end,
                                                singleScollDuration:
                                                    Durations
                                                        .short1,
                                                scrollCount: 2,
                                                textStyle:
                                                    GoogleFonts
                                                        .bungee(
                                                  fontSize:
                                                      decorationIndex ==
                                                              entry.key
                                                          ? 15
                                                          : 10,
                                                  color: decorationIndex ==
                                                          entry
                                                              .key
                                                      ? defaultPalette
                                                          .primary
                                                      : defaultPalette
                                                          .extras[0],
                                                ),
                                              ),
                                      ),
                                    ],
                                  ),
                                ),
                              SizedBox(
                                  key: ValueKey('rty'),
                                  height: 10)
                            ],
                          ),
                        ),
                      );
                    }),
              )),
        ),
      ),
      //BUTTON SHOW LAYER OF DECORATION
      Positioned(
        bottom: 17,
        left: 12,
        child: ElevatedLayerButton(
          // isTapped: false,
          // toggleOnTap: true,
          subfac: 3,
          depth: 3,
          onClick: () {
            // Future.delayed(Duration.zero)
            //     .then((y) {
            //   appWindow.minimize();
            // });
            setState(() {
              showDecorationLayers = !showDecorationLayers;
              if (item.id == 'yo') {
                _findSheetListItem();
              }
            });
          },
          buttonHeight: 35,
          buttonWidth: 35,
          borderRadius: BorderRadius.circular(30),
          animationDuration: const Duration(milliseconds: 10),
          animationCurve: Curves.ease,
          topDecoration: BoxDecoration(
            color: Colors.white,
            border: Border.all(width:1.5),
          ),
          topLayerChild: Icon(
            TablerIcons.stack_2,
            size: 18,
            // color: defaultPalette.tertiary
            // color: Colors.blue,
          ),
          baseDecoration: BoxDecoration(
            color: defaultPalette.extras[0],
            border: Border.all(),
          ),
        ),
      ),
      //dropdown to switch betwee table row and column
      if(false)
        Positioned(
          top:75,
          left:42,
          child: ClipRRect(
            borderRadius:BorderRadius.circular(5),
            child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      hoverColor: defaultPalette.primary,
                      highlightColor: defaultPalette.primary,
                      splashColor: defaultPalette.primary,
                      onTap:(){
                        setState(() {
                          isTableDecorationModeDropped= !isTableDecorationModeDropped;
                        });
                      },
                      child: AnimatedContainer(
                        duration: Durations.medium4,
                        height:isTableDecorationModeDropped? 110:26,
                        width: width-90,
                        decoration:BoxDecoration(
                          color: isTableDecorationModeDropped? defaultPalette.primary: defaultPalette.transparent,
                          border: isTableDecorationModeDropped? Border.all():null,
                          borderRadius:BorderRadius.circular(5),
                        ),
                        child: Stack(children: [
                          Positioned(
                            top:5,
                            width: width-90,
                            child: Row(
                              children: [
                                // Expanded(child: Text(selectedDecorationTitle,style: GoogleFonts.rockSalt())),
                                Icon(TablerIcons.transfer_vertical, size:18),
                                SizedBox(width:2)
                              ],
                            )),
                          // switchTableDecorationTile(0, ' Table', 30),
                          // switchTableDecorationTile(1, ' Tablebg', 50),
                          // switchTableDecorationTile(2, ' Row '+(sheetTableVariables.rowLayerIndex+1).toString(), 70),
                          // switchTableDecorationTile(3, ' Column '+ numberToColumnLabel(sheetTableVariables.columnLayerIndex+1), 90),
                          
                          // Text(sheetTableItem.id.startsWith('TB')? 'Table':'Row')
                        ],)
                      ),
                    ),
                  ),
          )
        ),
                            
      ];
  }

  List<Widget> buildSuperDecorationEditor(
    BuildContext context,
    SuperDecoration superDecoration,
  ){
    if(superDecoration.itemDecorationList.isEmpty){
      return [];
    }
    var index = -1;
    return superDecoration.itemDecorationList.map((e) {
      var tmpinx = int.tryParse(e.substring(e.indexOf('/') + 1))??-33;
      var itemDecoration = sheetDecorationList[tmpinx];
      index++;
      // print('yo: '+index.toString()+' '+ sheetDecorationVariables.length.toString());
      if (itemDecoration is ItemDecoration) {
      return 
        Column(
          children:[
            GestureDetector(
              onTap: () {
               
                setState(() {
                  var i =sheetDecorationVariables.indexWhere((el) => el.id==itemDecoration.id,);
                  //  print('LALALA: '+i.toString());
                  sheetDecorationVariables[i].isExpanded = !sheetDecorationVariables[i].isExpanded;
                });
              },
              child: Container(
                padding: const EdgeInsets.all(4.0),
                margin: const EdgeInsets.all(3.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.tertiary,
                  border: Border.all(color: defaultPalette.extras[0],),),
                child: Row( 
                  children: [
                    Container(
                      height:30,
                      width:30, 
                      alignment: Alignment(0, 0),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: defaultPalette.primary,
                        border: Border.all(color: defaultPalette.extras[0],),),
                      child: Text(
                        index.toString(),
                        style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])
                      ),              
                    ),
                    Expanded(
                      child: Text(itemDecoration.name +' ',
                      textAlign: TextAlign.end,
                      style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.primary)),
                    ),
                  ],
                ),
              ),
            ),
            if(sheetDecorationVariables[index].isExpanded)
            ...buildItemDecorationEditor(context, itemDecoration, index: index, shadowLayerIndex: sheetDecorationVariables[index].listShadowLayerSelectedIndex)
          ]);
      } else {
        return GestureDetector(
              onTap: () {
                setState(() {
                  var itemDecoration =  sheetDecorationList[tmpinx];
                  if (itemDecoration is SuperDecoration) {    
                  listDecorationNameController.text = itemDecoration.name;
                  textDecorationNameController.text = itemDecoration.name;
                  isListDecorationLibraryToggled = false;

                  updateSheetDecorationvariables(itemDecoration);
                  if (whichPropertyTabIsClicked==3) {
                    listDecorationPath.add(itemDecoration.id);
                    print(listDecorationPath);
                  } else if (whichPropertyTabIsClicked==2) {
                    textDecorationPath.add(itemDecoration.id);
                    print(textDecorationPath);
                  }
                  decorationIndex = -1;
                  }

                });
              },
              child: Container(
                padding: const EdgeInsets.all(4.0),
                margin: const EdgeInsets.all(3.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.extras[1],
                  border: Border.all(color: defaultPalette.extras[0],),),
                child: Row( 
                  children: [
                    Container(
                      height:30,
                      width:30, 
                      alignment: Alignment(0, 0),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: defaultPalette.primary,
                        border: Border.all(color: defaultPalette.extras[0],),),
                      child: Text(
                        index.toString(),
                        style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])
                      ),              
                    ),
                    Expanded(
                      child: Text(itemDecoration.name +' ',
                      textAlign: TextAlign.end,
                      style: GoogleFonts.lexend(
                        fontSize: 20,
                        letterSpacing: -1,
                        fontWeight: FontWeight.w600,
                        color: defaultPalette.extras[0])),
                    ),
                  ],
                ),
              ),
            );
      }
    },).toList().reversed.toList();
  }

  List<Widget> buildItemDecorationEditor(
    BuildContext context,
    ItemDecoration itemDecoration,
    {
      int index = -1,
      int shadowLayerIndex =-1,
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var pinned = itemDecoration.pinned;
    List<TextEditingController> listPaddingControllers = [
      TextEditingController()
        ..text = itemDecoration.padding.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.bottom
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.left
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.padding.right
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];
    List<TextEditingController> listMarginControllers = [
      TextEditingController()
        ..text = itemDecoration.margin.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.top
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.bottom
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.left
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = itemDecoration.margin.right
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];

    return [
      if (pinned['padding']['top'] ||
          pinned['padding']['bottom'] ||
          pinned['padding']['left'] ||
          pinned['padding']['right'])
        Container(
          child: buildListPaddingMarginEditor(
              isMargin: false,
              itemDecoration: itemDecoration,
              listPaddingControllers: listPaddingControllers,
              marginControllers: listMarginControllers,
              pinned: pinned, index: index),
        ),
      SizedBox(
        height: 0,
      ),
      if (pinned['margin']['top'] ||
          pinned['margin']['bottom'] ||
          pinned['margin']['left'] ||
          pinned['margin']['right'])
        Container(
          child: buildListPaddingMarginEditor(
              isMargin: true,
              itemDecoration: itemDecoration,
              listPaddingControllers: listPaddingControllers,
              marginControllers: listMarginControllers,
              pinned: pinned,
              index: index
              ),
        ),
      SizedBox(
        height: 3,
      ),
      if (pinned['decoration']['color'] ||
          pinned['decoration']['border'] ||
          pinned['decoration']['borderRadius']['topLeft'] ||
          pinned['decoration']['borderRadius']['topRight'] ||
          pinned['decoration']['borderRadius']['bottomLeft'] ||
          pinned['decoration']['borderRadius']['bottomRight'] ||
          pinned['decoration']['image']['bytes'] ||
          pinned['decoration']['image']['fit'] ||
          pinned['decoration']['image']['repeat'] ||
          pinned['decoration']['image']['alignment'] ||
          pinned['decoration']['image']['scale'] ||
          pinned['decoration']['image']['opacity'] ||
          pinned['decoration']['image']['filterQuality'] ||
          pinned['decoration']['image']['invertColors'] ||
          pinned['decoration']['boxShadow'])
        buildDecorationEditor(context, itemDecoration, index: index, shadowLayerIndex: shadowLayerIndex),
    ];
  }

  Widget buildListPaddingMarginEditor({
    required bool isMargin,
    required ItemDecoration itemDecoration,
    List<TextEditingController> listPaddingControllers = const [],
    List<TextEditingController> marginControllers = const [],
    List<TextEditingController> borderRadiusControllers = const [],
    bool isBorderRadius = false,
    bool isBorder = false,
    Map<String, dynamic> pinned = const {},
    int index = -1
  }) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    // Choose the proper controller list based on the flag.
    var isExpanded = isBorderRadius
        ? isListBorderRadiusExpanded
        : isMargin
            ? isListMarginExpanded
            : isListPaddingExpanded;
    final controllers = isBorderRadius
        ? borderRadiusControllers
        : isMargin
            ? marginControllers
            : listPaddingControllers;
    final focusNodes = isBorderRadius
        ? sheetDecorationVariables[index].borderRadiusFocusNodes
        : isMargin
            ? sheetDecorationVariables[index].marginFocusNodes
            : sheetDecorationVariables[index].listPaddingFocusNodes;
    String pinnedKey =
        isBorderRadius ? 'decoration' : (isMargin ? 'margin' : 'padding');
    String subKey = isBorderRadius ? 'borderRadius' : '';
    var tmpinx = int.tryParse(sheetDecorationVariables[index].id.substring(sheetDecorationVariables[index].id.indexOf('/') + 1))??-155;
     
    ItemDecoration currentItemDecoration = sheetDecorationList[tmpinx] as ItemDecoration;
    final pinnedMap = currentItemDecoration
        .pinned[pinnedKey];
    final topIsPinned =
        isBorderRadius ? pinnedMap[subKey]['topLeft'] : pinnedMap['top'];

    final bottomIsPinned =
        isBorderRadius ? pinnedMap[subKey]['topRight'] : pinnedMap['bottom'];

    final leftIsPinned =
        isBorderRadius ? pinnedMap[subKey]['bottomLeft'] : pinnedMap['left'];

    final rightIsPinned =
        isBorderRadius ? pinnedMap[subKey]['bottomRight'] : pinnedMap['right'];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 76 : 40)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 76 : 40);



    void horizontalDragFunction (DragUpdateDetails details, {
      String s ='all',
      int side =0,
    }) {
      var multiplier =  HardwareKeyboard.instance.isControlPressed
              ? 10
              : HardwareKeyboard.instance.isShiftPressed
                  ? 0.1
                  : 1;
      setState(() {
        double currentValue = double.tryParse(controllers[side].text) ?? 0.0;
        double newValue = (currentValue +
                details.delta.dx * multiplier)
            .clamp( 0,double.infinity); // Adjust sensitivity here

        // controllers[0].text = newValue.toStringAsFixed(2);

        double parsedValue =  double.parse(newValue.toStringAsFixed(2));
        

        if (isBorderRadius) {
          currentItemDecoration =
              (currentItemDecoration as ItemDecoration)
                  .copyWith(decoration: currentItemDecoration
                          .decoration
                          .copyWith(
            borderRadius: setBorderRadius(
                s, parsedValue, itemDecoration),
          ));
          
        } else if (isMargin) {
          EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.margin.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.margin.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.margin.copyWith(left: parsedValue)
        : currentItemDecoration.margin.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  margin: inset);
        } else {
            EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.padding.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.padding.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.padding.copyWith(left: parsedValue)
        : currentItemDecoration.padding.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  padding: inset);
        }
        sheetDecorationList[tmpinx] = currentItemDecoration;
      });
    }

    void fieldSubmitFunction (String value, {
      String s ='all',
      int side =0,
    }) {
      
      setState(() {
        double parsedValue = double.parse(value);
        

        if (isBorderRadius) {
          currentItemDecoration =
              (currentItemDecoration as ItemDecoration)
                  .copyWith(decoration: currentItemDecoration
                          .decoration
                          .copyWith(
            borderRadius: setBorderRadius(
                s, parsedValue, itemDecoration),
          ));
          
        } else if (isMargin) {
          EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.margin.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.margin.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.margin.copyWith(left: parsedValue)
        : currentItemDecoration.margin.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  margin: inset);
        } else {
            EdgeInsets inset = side == 0
        ? EdgeInsets.all(parsedValue)
        : side == 1
        ?  currentItemDecoration.padding.copyWith(top: parsedValue)
        : side == 2 
        ? currentItemDecoration.padding.copyWith(bottom: parsedValue)
        : side == 3
        ? currentItemDecoration.padding.copyWith(left: parsedValue)
        : currentItemDecoration.padding.copyWith(right: parsedValue);

          currentItemDecoration =
              currentItemDecoration.copyWith(
                  padding: inset);
        }
        sheetDecorationList[tmpinx] = currentItemDecoration;
      });
    }


    
    return GestureDetector(
      onTap: () {
        setState(() {
          if (isBorderRadius) {
            isListBorderRadiusExpanded = !isListBorderRadiusExpanded;
          } else if (isMargin) {
            isListMarginExpanded = !isListMarginExpanded;
          } else {
            isListPaddingExpanded = !isListPaddingExpanded;
          }
          isExpanded = isBorderRadius
              ? isListBorderRadiusExpanded
              : isMargin
                  ? isListMarginExpanded
                  : isListPaddingExpanded;
          // print(isExpanded);
        });
      },
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
        ),
        margin: EdgeInsets.all(4).copyWith(bottom: 2, left: 3, top: 2),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            //padding/margin/borderRadius isPinned
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // "Pad" field for all sides
                Expanded(
                  child: Container(
                    padding: EdgeInsets.only(left: 2),
                    decoration: BoxDecoration(
                        border: Border.all(),
                        color: defaultPalette.primary,
                        borderRadius: BorderRadius.circular(5)),
                    child: Row(
                      children: [
                        MouseRegion(
                          cursor: SystemMouseCursors.resizeLeftRight,
                          child: GestureDetector(
                            onHorizontalDragCancel: () {
                              focusNodes[0].requestFocus();
                            },
                            onHorizontalDragStart: (details) {
                              dragBackupValue =
                                  double.parse(controllers[0].text);
                            },
                            onHorizontalDragUpdate: horizontalDragFunction,
                            child: Row(
                              children: [
                                Icon(
                                    isBorderRadius
                                        ? TablerIcons.border_corners
                                        : isMargin
                                            ? TablerIcons.box_margin
                                            : TablerIcons.box_padding,
                                    size: 16,
                                    color: defaultPalette.extras[0]),
                                Text(
                                  isBorderRadius
                                      ? (sWidth * wH2DividerPosition) > 220
                                          ? ' borderRadius '
                                          : 'radius'
                                      : isMargin
                                          ? ' margin '
                                          : (sWidth * wH2DividerPosition) > 220
                                              ? ' padding '
                                              : ' pad ',
                                  style: GoogleFonts.lexend(
                                      fontSize: 15,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Expanded(
                          child: SizedBox(
                            height: 20,
                            child: TextFormField(
                              onTapOutside: (event) => focusNodes[0].unfocus(),
                              focusNode: focusNodes[0],
                              controller: controllers[0],
                              inputFormatters: [
                                NumericInputFormatter(),
                              ],
                              cursorColor: defaultPalette.tertiary,
                              selectionControls: NoMenuTextSelectionControls(),
                              textAlign: TextAlign.end,
                              decoration: InputDecoration(
                                contentPadding: const EdgeInsets.all(2),
                                labelStyle: GoogleFonts.lexend(
                                    color: defaultPalette.black),
                                fillColor: defaultPalette.transparent,
                                border: InputBorder.none,
                                enabledBorder: OutlineInputBorder(
                                    borderSide: BorderSide.none),
                                focusedBorder: OutlineInputBorder(
                                    borderSide: BorderSide.none),
                              ),
                              keyboardType: TextInputType.number,
                              style: GoogleFonts.mitr(
                                  fontSize: 15,
                                  color: defaultPalette.extras[0],
                                  letterSpacing: -1),
                              onFieldSubmitted: fieldSubmitFunction,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(
                  width: 2,
                ),
                //PIN isPinned
                ClipRRect(
                  borderRadius: BorderRadius.circular(500),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      hoverColor: defaultPalette.tertiary,
                      splashColor: defaultPalette.tertiary,
                      highlightColor: defaultPalette.tertiary,
                      onTap: () {
                        setState(() {
                          // Toggle isPinned based on the condition
                          if (isBorderRadius) {
                            currentItemDecoration.pinned['decoration']
                                    ['borderRadius']['isPinned'] =
                                !currentItemDecoration.pinned['decoration']
                                    ['borderRadius']['isPinned'];
                            currentItemDecoration.pinned['decoration']
                                ['borderRadius']['topLeft'] = false;
                            currentItemDecoration.pinned['decoration']
                                ['borderRadius']['topRight'] = false;
                            currentItemDecoration.pinned['decoration']
                                ['borderRadius']['bottomLeft'] = false;
                            currentItemDecoration.pinned['decoration']
                                ['borderRadius']['bottomRight'] = false;
                            expansionLevels[7] =
                                currentItemDecoration.pinned['decoration']
                                    ['borderRadius']['isPinned'];
                          } else if (isMargin) {
                            currentItemDecoration.pinned['margin']['isPinned'] =
                                !currentItemDecoration.pinned['margin']
                                    ['isPinned'];
                            if (currentItemDecoration.pinned['margin']
                                ['isPinned']) {
                              currentItemDecoration.pinned['margin']['top'] =
                                  true;
                              currentItemDecoration.pinned['margin']['bottom'] =
                                  true;
                              currentItemDecoration.pinned['margin']['left'] =
                                  true;
                              currentItemDecoration.pinned['margin']['right'] =
                                  true;
                            } else {
                              currentItemDecoration.pinned['margin']['top'] =
                                  false;
                              currentItemDecoration.pinned['margin']['bottom'] =
                                  false;
                              currentItemDecoration.pinned['margin']['left'] =
                                  false;
                              currentItemDecoration.pinned['margin']['right'] =
                                  false;
                            }
                            // expansionLevels[1]  = currentItemDecoration.pinned['margin']['isPinned'];
                          } else {
                            currentItemDecoration.pinned['padding']
                                    ['isPinned'] =
                                !currentItemDecoration.pinned['padding']
                                    ['isPinned'];
                            if (currentItemDecoration.pinned['padding']
                                ['isPinned']) {
                              currentItemDecoration.pinned['padding']['top'] =
                                  true;
                              currentItemDecoration.pinned['padding']
                                  ['bottom'] = true;
                              currentItemDecoration.pinned['padding']['left'] =
                                  true;
                              currentItemDecoration.pinned['padding']['right'] =
                                  true;
                            } else {
                              currentItemDecoration.pinned['padding']['top'] =
                                  false;
                              currentItemDecoration.pinned['padding']
                                  ['bottom'] = false;
                              currentItemDecoration.pinned['padding']['left'] =
                                  false;
                              currentItemDecoration.pinned['padding']['right'] =
                                  false;
                            }
                          }
                          sheetDecorationList[tmpinx] = currentItemDecoration;


                        });
                      },
                      child: Icon(
                          isBorderRadius
                              ? pinned['decoration']['borderRadius']['isPinned']
                                  ? TablerIcons.pin_filled
                                  : TablerIcons.pin
                              : isMargin
                                  ? pinned['margin']['isPinned']
                                      ? TablerIcons.pin_filled
                                      : TablerIcons.pin
                                  : pinned['padding']['isPinned']
                                      ? TablerIcons.pin_filled
                                      : TablerIcons.pin,
                          size: 16,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ],
            ),
            if (!isExpanded) ...[
              const SizedBox(height: 4),
              Container(
                padding: EdgeInsets.all(0),
                decoration: BoxDecoration(
                    border: Border.all(),
                    borderRadius: BorderRadius.circular(5)),
                child: Column(
                  children: [
                    // Top and Bottom adjustments
                    Flex(
                      direction: (sWidth * wH2DividerPosition) > 220
                          ? Axis.horizontal
                          : Axis.vertical,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        if (topIsPinned)
                          // Top
                          Container(
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    bottomIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(topLeft: Radius.circular(5), topRight: Radius.circular((sWidth * wH2DividerPosition) > 220 &&
                                                bottomIsPinned ? 0: 5))),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[1].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[1].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'topLeft', side: 1);
                                      },
                                      child: Transform.rotate(
                                          angle: isBorderRadius
                                              ? 0
                                              : isMargin
                                                  ? 0
                                                  : -pi / 2,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons.radius_top_left
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_bottom
                                                      : TablerIcons
                                                          .layout_sidebar_right_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[1].unfocus(),
                                      focusNode: focusNodes[1],
                                      controller: controllers[1],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      cursorColor: defaultPalette.tertiary,
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        // suffix: Text('top',style: GoogleFonts.mitr(
                                        //   fontSize: 10,
                                        //   color: defaultPalette.primary),)
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'topLeft', side: 1);
                                      },
                                    ),
                                  ),
                                  //PIN isPinned
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['topLeft'] =
                                                  !currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['topLeft'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                      .pinned['margin']['top'] =
                                                  !currentItemDecoration
                                                      .pinned['margin']['top'];
                                             } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['top'] =
                                                  !currentItemDecoration
                                                      .pinned['padding']['top'];
                                            }

                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned['decoration']
                                                            ['borderRadius']
                                                        ['topLeft']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['top']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['top']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  const SizedBox(
                                    width: 2,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        
                        if (bottomIsPinned)
                          // Bottom
                          Container(
                            height: 20,
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    topIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                  topLeft: Radius.circular(topIsPinned ? 0 : 5),
                                  topRight: Radius.circular(
                                      (sWidth * wH2DividerPosition) > 220
                                          ? 5
                                          : 0),
                                )),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[2].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[2].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'topRight', side: 2);
                                      },
                                      child: Transform.rotate(
                                          angle: 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons.radius_top_right
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_top
                                                      : TablerIcons
                                                          .layout_bottombar_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  const SizedBox(width: 0),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[2].unfocus(),
                                      focusNode: focusNodes[2],
                                      controller: controllers[2],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      cursorColor: defaultPalette.tertiary,
                                      textAlign: TextAlign.start,
                                      textAlignVertical: TextAlignVertical.top,
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'topRight', side: 2);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['topRight'] =
                                                  !currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['topRight'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['bottom'] =
                                                  !currentItemDecoration
                                                          .pinned['margin']
                                                      ['bottom'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['bottom'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['bottom'];
                                             }

                                            // Update the list item with the modified currentItemDecoration
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned['decoration']
                                                            ['borderRadius']
                                                        ['topRight']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['bottom']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']
                                                            ['bottom']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 0),
                    // Left and Right adjustments
                    Flex(
                      direction: (sWidth * wH2DividerPosition) > 220
                          ? Axis.horizontal
                          : Axis.vertical,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        if (leftIsPinned)
                          // Left
                          Container(
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    rightIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                    bottomLeft: Radius.circular(
                                        (sWidth * wH2DividerPosition) > 220
                                            ? 5
                                            : 0),
                                    bottomRight: Radius.circular(
                                        rightIsPinned ? 0 : 5))),
                            child: SizedBox(
                              height: 20,
                              child: Row(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[3].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[3].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'bottomLeft', side: 3);
                                      },
                                      child: Transform.rotate(
                                          angle: isBorderRadius
                                              ? 0
                                              : isMargin
                                                  ? 0
                                                  : 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons
                                                      .radius_bottom_left
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_right
                                                      : TablerIcons
                                                          .layout_sidebar_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[3].unfocus(),
                                      focusNode: focusNodes[3],
                                      controller: controllers[3],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      cursorColor: defaultPalette.tertiary,
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'bottomLeft', side: 3);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['bottomLeft'] =
                                                  !currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['bottomLeft'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['left'] =
                                                  !currentItemDecoration
                                                      .pinned['margin']['left'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['left'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['left'];
                                            }
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned['decoration']
                                                            ['borderRadius']
                                                        ['bottomLeft']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['left']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['left']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                        const SizedBox(
                          width: 0,
                          height: 0,
                        ),
                        if (rightIsPinned)
                          // RIGHT
                          Container(
                            height: 20,
                            width: (sWidth * wH2DividerPosition) > 220 &&
                                    leftIsPinned
                                ? widthSmall
                                : widthBig,
                            padding: EdgeInsets.only(left: 2),
                            decoration: BoxDecoration(
                                color: defaultPalette.primary,
                                borderRadius: BorderRadius.circular(0).copyWith(
                                    bottomLeft: Radius.circular(
                                        (sWidth * wH2DividerPosition) > 220 &&
                                                leftIsPinned
                                            ? 0
                                            : 5),
                                    bottomRight: Radius.circular(5))),
                            child: SizedBox(
                              height: 18,
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  MouseRegion(
                                    cursor: SystemMouseCursors.resizeLeftRight,
                                    child: GestureDetector(
                                      onHorizontalDragCancel: () {
                                        focusNodes[4].requestFocus();
                                      },
                                      onHorizontalDragStart: (details) {
                                        dragBackupValue =
                                            double.parse(controllers[4].text);
                                      },
                                      onHorizontalDragUpdate: (details) {
                                        horizontalDragFunction(details, s: 'bottomRight', side: 4);
                                      },
                                      child: Transform.rotate(
                                          angle: 0,
                                          child: Icon(
                                              isBorderRadius
                                                  ? TablerIcons
                                                      .radius_bottom_right
                                                  : isMargin
                                                      ? TablerIcons
                                                          .box_align_left
                                                      : TablerIcons
                                                          .layout_sidebar_right_inactive,
                                              size: 15,
                                              color: defaultPalette.extras[0])),
                                    ),
                                  ),
                                  const SizedBox(width: 0),
                                  Expanded(
                                    child: TextFormField(
                                      onTapOutside: (event) =>
                                          focusNodes[4].unfocus(),
                                      focusNode: focusNodes[4],
                                      controller: controllers[4],
                                      inputFormatters: [
                                        NumericInputFormatter()
                                      ],
                                      selectionControls:
                                          NoMenuTextSelectionControls(),
                                      cursorColor: defaultPalette.tertiary,
                                      textAlign: TextAlign.start,
                                      textAlignVertical: TextAlignVertical.top,
                                      decoration: InputDecoration(
                                        contentPadding:
                                            const EdgeInsets.symmetric(
                                                horizontal: 2),
                                        filled: true,
                                        fillColor: defaultPalette.transparent,
                                        border: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide.none,
                                        ),
                                      ),
                                      keyboardType: TextInputType.number,
                                      style: GoogleFonts.mitr(
                                          fontSize: 12,
                                          color: defaultPalette.extras[0]),
                                      onFieldSubmitted: (value) {
                                        fieldSubmitFunction(value, s: 'bottomRight', side: 4);
                                      },
                                    ),
                                  ),
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(500),
                                    child: Material(
                                      color: defaultPalette.transparent,
                                      child: InkWell(
                                        hoverColor: defaultPalette.tertiary,
                                        splashColor: defaultPalette.tertiary,
                                        highlightColor: defaultPalette.tertiary,
                                        onTap: () {
                                          setState(() {
                                             

                                            // Toggle isPinned based on the condition
                                            if (isBorderRadius) {
                                              currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['bottomRight'] =
                                                  !currentItemDecoration.pinned[
                                                              'decoration']
                                                          ['borderRadius']
                                                      ['bottomRight'];
                                            } else if (isMargin) {
                                              currentItemDecoration
                                                          .pinned['margin']
                                                      ['right'] =
                                                  !currentItemDecoration
                                                          .pinned['margin']
                                                      ['right'];
                                            } else {
                                              currentItemDecoration
                                                          .pinned['padding']
                                                      ['right'] =
                                                  !currentItemDecoration
                                                          .pinned['padding']
                                                      ['right'];
                                            }
                                          });
                                        },
                                        child: Icon(
                                            isBorderRadius
                                                ? pinned['decoration']
                                                            ['borderRadius']
                                                        ['bottomRight']
                                                    ? TablerIcons.pin_filled
                                                    : TablerIcons.pin
                                                : isMargin
                                                    ? pinned['margin']['right']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin
                                                    : pinned['padding']['right']
                                                        ? TablerIcons.pin_filled
                                                        : TablerIcons.pin,
                                            size: 15,
                                            color: defaultPalette.extras[0]),
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 2)
                                ],
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 0),
                  ],
                ),
              ),
            ]
          ],
        ),
      ),
    );
  }

  BorderRadius setBorderRadius(
      String s, double value, ItemDecoration itemDecoration) {
    bool isNotNull = itemDecoration.decoration.borderRadius != null;
    switch (s) {
      case 'topLeft':
        return BorderRadius.only(
          topLeft: Radius.circular(value),
          topRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'topRight':
        return BorderRadius.only(
          topLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: Radius.circular(value),
          bottomLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'bottomLeft':
        return BorderRadius.only(
          topLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: Radius.circular(value),
          bottomRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomRight
              : Radius.circular(0),
        );
      case 'bottomRight':
        return BorderRadius.only(
          topLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius).topLeft
              : Radius.circular(0),
          topRight: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .topRight
              : Radius.circular(0),
          bottomLeft: isNotNull
              ? (itemDecoration.decoration.borderRadius as BorderRadius)
                  .bottomLeft
              : Radius.circular(0),
          bottomRight: Radius.circular(value),
        );
      case 'all':
        return BorderRadius.all(Radius.circular(value));

      default:
        return BorderRadius.all(Radius.circular(value));
    }
  }

  Widget buildDecorationEditor(
    BuildContext context,
    ItemDecoration? itemDecoration,
    {
      int index =-1,
      int shadowLayerIndex = -1,
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var tmpinx = int.tryParse(sheetDecorationVariables[index].id.substring(sheetDecorationVariables[index].id.indexOf('/') + 1))??-155;
    ItemDecoration currentItemDecoration = itemDecoration ?? 
        sheetDecorationList[tmpinx] as ItemDecoration;
    Border currentBorder =
        (currentItemDecoration.decoration.border ?? Border.all(color: defaultPalette.transparent)) as Border;
    final borderRadiusControllers = [
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .topRight
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .bottomLeft
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.borderRadius ??
                BorderRadius.circular(0)) as BorderRadius)
            .bottomRight
            .x
            .toString()
            .replaceAll(RegExp(r'\.0$'), ''),
    ];
    final listBorderControllers = [
      TextEditingController()
        ..text = (currentItemDecoration.decoration.border ?? Border.all())
            .top
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = (currentItemDecoration.decoration.border ?? Border.all())
            .top
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = (currentItemDecoration.decoration.border ?? Border.all())
            .bottom
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.border ?? Border.all())
                as Border)
            .left
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
      TextEditingController()
        ..text = ((currentItemDecoration.decoration.border ?? Border.all())
                as Border)
            .right
            .width
            .toString()
            .replaceAll(RegExp(r'.0$'), ''),
    ];
    List<TextEditingController> colorHexControllers = [
      TextEditingController()
        ..text = colorToHex(currentItemDecoration.decoration.color ??
            defaultPalette.transparent),
      TextEditingController()
        ..text = (((currentItemDecoration.decoration.border ?? Border.all(color: defaultPalette.transparent))
                as Border))
            .top
            .color
            .hexAlpha
    ];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 84 : 47)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 74 : 40);
    final isSizeBigForBorderRow = (sWidth * wH2DividerPosition) > 260;

    Widget borderSideSelect(int s, String side, Color color, String width) {
      return ClipRRect(
        borderRadius: BorderRadius.circular(5),
        child: Material(
          color: defaultPalette.transparent,
          child: InkWell(
            hoverColor: defaultPalette.primary,
            splashColor: defaultPalette.primary,
            highlightColor: defaultPalette.primary,
            onTap: () {
              setState(() {
                
              });
            },
            child: Container(
              width: isSizeBigForBorderRow ? widthSmall : widthBig,
              decoration: BoxDecoration(
                  border: Border.fromBorderSide(BorderSide.none),
                  borderRadius: BorderRadius.circular(5),
                  color: defaultPalette.transparent),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  MouseRegion(
                    cursor: SystemMouseCursors.resizeLeftRight,
                    child: GestureDetector(
                      onHorizontalDragCancel: () {
                        sheetDecorationVariables[index].listBorderFocusNodes[s].requestFocus();
                      },
                      onHorizontalDragStart: (details) {
                        dragBackupValue =
                            double.parse(listBorderControllers[s].text);
                      },
                      onHorizontalDragUpdate: (details) {
                        var multiplier =
                            HardwareKeyboard.instance.isControlPressed
                                ? 10
                                : HardwareKeyboard.instance.isShiftPressed
                                    ? 0.1
                                    : 1;
                        setState(() {
                        double currentValue =
                            double.tryParse(listBorderControllers[s].text) ?? 0.0;
                        double newValue = (currentValue + details.delta.dx * multiplier)
                            .clamp(0, double.infinity);

                        double parsedValue = double.parse(newValue.toStringAsFixed(2));

                        // Get the current border from the decoration or default to Border.all()
                        Border currentBorder = (currentItemDecoration.decoration.border ?? Border.all(color: defaultPalette.transparent)) as Border;

                        // Utility function to update the border side with the new width
                        BorderSide updateBorderSide(BorderSide side) {
                          return side.copyWith(width: parsedValue);
                        }

                        // Update the border based on the selected side (s)
                        Border updatedBorder;
                        if (s == 0) {
                          // Update all sides with the same value
                          updatedBorder = Border.fromBorderSide( currentBorder.top.copyWith(width: parsedValue));
                            
                        } else {
                          updatedBorder = Border(
                            top: s == 1 ? updateBorderSide(currentBorder.top) : currentBorder.top,
                            bottom: s == 2 ? updateBorderSide(currentBorder.bottom) : currentBorder.bottom,
                            left: s == 3 ? updateBorderSide(currentBorder.left) : currentBorder.left,
                            right: s == 4 ? updateBorderSide(currentBorder.right) : currentBorder.right,
                          );
                        }

                        // Check if any side has a non-zero width
                        bool hasNonZeroWidth = updatedBorder.top.width > 0 ||
                                              updatedBorder.bottom.width > 0 ||
                                              updatedBorder.left.width > 0 ||
                                              updatedBorder.right.width > 0;

                        // If any side has non-zero width, update zero-width sides to 1
                        if (hasNonZeroWidth) {
                          updatedBorder = Border(
                            top: updatedBorder.top.width == 0 ? updatedBorder.top.copyWith(width: 1) : updatedBorder.top,
                            bottom: updatedBorder.bottom.width == 0 ? updatedBorder.bottom.copyWith(width: 1) : updatedBorder.bottom,
                            left: updatedBorder.left.width == 0 ? updatedBorder.left.copyWith(width: 1) : updatedBorder.left,
                            right: updatedBorder.right.width == 0 ? updatedBorder.right.copyWith(width: 1) : updatedBorder.right,
                          );
                        }

                        // Update the item decoration with the new border
                        currentItemDecoration = currentItemDecoration.copyWith(
                          decoration: currentItemDecoration.decoration.copyWith(
                            border: updatedBorder,
                          ),
                        );

                        // Update the decoration in the sheetDecorationList
                        sheetDecorationList[tmpinx] = currentItemDecoration;
 
                      });

                      },
                      child: Text(
                        '  $side ',
                        style: GoogleFonts.lexend(
                            fontSize: 14,
                            letterSpacing: -1,
                            color: defaultPalette.extras[0]),
                      ),
                    ),
                  ),
                  Expanded(
                    child: SizedBox(
                      height: 20,
                      child: TextFormField(
                        onTapOutside: (event) =>
                            sheetDecorationVariables[index].listBorderFocusNodes[s].unfocus(),
                        focusNode: sheetDecorationVariables[index].listBorderFocusNodes[s],
                        controller: listBorderControllers[s],
                        inputFormatters: [
                          NumericInputFormatter(),
                        ],
                        cursorColor: defaultPalette.tertiary,
                        selectionControls: NoMenuTextSelectionControls(),
                        textAlign: TextAlign.end,
                        decoration: InputDecoration(
                          contentPadding: const EdgeInsets.all(0),
                          labelStyle:
                              GoogleFonts.lexend(color: defaultPalette.black),
                          fillColor: defaultPalette.transparent,
                          border: InputBorder.none,
                          enabledBorder:
                              OutlineInputBorder(borderSide: BorderSide.none),
                          focusedBorder:
                              OutlineInputBorder(borderSide: BorderSide.none),
                        ),
                        keyboardType: TextInputType.number,
                        style: GoogleFonts.mitr(
                            fontSize: 13,
                            color: defaultPalette.extras[0],
                            letterSpacing: -1),
                        onFieldSubmitted: (value) {
                          setState(() {
                            double parsedValue = double.parse(value);

                            // Get the current border from the decoration or default to Border.all()
                            Border currentBorder = (currentItemDecoration.decoration.border ?? Border.all(color: defaultPalette.transparent)) as Border;

                            // Utility function to update the border side with the new width
                            BorderSide updateBorderSide(BorderSide side) {
                              return side.copyWith(width: parsedValue);
                            }

                            // Update the border based on the selected side (s)
                            Border updatedBorder;
                            if (s == 0) {
                              // Update all sides with the same value
                              updatedBorder = Border.fromBorderSide( currentBorder.top.copyWith(width: parsedValue));
                            } else {
                              updatedBorder = Border(
                                top: s == 1 ? updateBorderSide(currentBorder.top) : currentBorder.top,
                                bottom: s == 2 ? updateBorderSide(currentBorder.bottom) : currentBorder.bottom,
                                left: s == 3 ? updateBorderSide(currentBorder.left) : currentBorder.left,
                                right: s == 4 ? updateBorderSide(currentBorder.right) : currentBorder.right,
                              );
                            }

                            // Check if any side has a non-zero width
                            bool hasNonZeroWidth = updatedBorder.top.width > 0 ||
                                                  updatedBorder.bottom.width > 0 ||
                                                  updatedBorder.left.width > 0 ||
                                                  updatedBorder.right.width > 0;

                            // If any side has non-zero width, update zero-width sides to 1
                            if (hasNonZeroWidth) {
                              updatedBorder = Border(
                                top: updatedBorder.top.width == 0 ? updatedBorder.top.copyWith(width: 1) : updatedBorder.top,
                                bottom: updatedBorder.bottom.width == 0 ? updatedBorder.bottom.copyWith(width: 1) : updatedBorder.bottom,
                                left: updatedBorder.left.width == 0 ? updatedBorder.left.copyWith(width: 1) : updatedBorder.left,
                                right: updatedBorder.right.width == 0 ? updatedBorder.right.copyWith(width: 1) : updatedBorder.right,
                              );
                            }

                            // Update the item decoration with the new border
                            currentItemDecoration = currentItemDecoration.copyWith(
                              decoration: currentItemDecoration.decoration.copyWith(
                                border: updatedBorder,
                              ),
                            );

                            // Update the decoration in the sheetDecorationList
                            sheetDecorationList[tmpinx] = currentItemDecoration;
 
                          });
                        },
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 2,
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            //DECORATION Title this is the editable property title
            Expanded(
              child: Container(
                padding: EdgeInsets.only(left: 2),
                margin: EdgeInsets.only(left: 3, right: 4),
                decoration: BoxDecoration(
                    // border: Border.all(),
                    // color:defaultPalette.primary,
                    borderRadius: BorderRadius.circular(5)),
                child: Row(
                  children: [
                    Icon(TablerIcons.palette,
                        size: 16, color: defaultPalette.extras[0]),
                    Expanded(
                      child: SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Text(
                          ' decor ',
                          style: GoogleFonts.lexend(
                              fontSize: 15,
                              letterSpacing: -1,
                              color: defaultPalette.extras[0]),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(
              width: 2,
            ),
            //DECORATION isPinned
            ClipRRect(
              borderRadius: BorderRadius.circular(500),
              child: Material(
                color: defaultPalette.transparent,
                child: InkWell(
                  hoverColor: defaultPalette.tertiary,
                  splashColor: defaultPalette.tertiary,
                  highlightColor: defaultPalette.tertiary,
                  onTap: () {
                    setState(() {
                      currentItemDecoration.pinned['decoration'] = {
                        'isPinned': false,
                        'color': false,
                        'border': false,
                        'borderRadius': {
                          'isPinned': false,
                          'topLeft': false,
                          'topRight': false,
                          'bottomLeft': false,
                          'bottomRight': false,
                        },
                        'boxShadow': false,
                        'image': {
                          'isPinned': false,
                          'bytes': false,
                          'fit': false,
                          'repeat': false,
                          'alignment': false,
                          'scale': false,
                          'opacity': false,
                          'filterQuality': false,
                          'invertColors': false,
                        },
                        'backgroundBlendMode': false,
                      };

                      // Update the list item with the modified currentItemDecoration
                      currentItemDecoration = currentItemDecoration;
                    });
                  },
                  child: Icon(
                      currentItemDecoration.pinned['decoration']['isPinned']
                          ? TablerIcons.pin_filled
                          : TablerIcons.pin,
                      size: 16,
                      color: defaultPalette.extras[0]),
                ),
              ),
            ),
            const SizedBox(
              width: 4,
            ),
          ],
        ),
        const SizedBox(
          width: 2,
          height: 2,
        ),

        ///COLOR FOR THE DECORATION SECTION
        if (currentItemDecoration.pinned['decoration']['color'])
          Flex(
            direction: Axis.vertical,
            children: [
              SizedBox(width: 2, height: 2),
              //title and hex code of plain color title
              GestureDetector(
                      onTap: () {
                        setState(() {
                          isListColorExpanded = !isListColorExpanded;
                        });
                      },
                child: Container(
                  height: 25,
                  padding: EdgeInsets.only(left: 2),
                  margin: EdgeInsets.only(left: 3, right: 4),
                  decoration: BoxDecoration(
                      border: Border.all(),
                      color: defaultPalette.primary,
                      borderRadius: BorderRadius.circular(5)),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Icon(TablerIcons.color_swatch,
                          size: 16, color: defaultPalette.extras[0]),
                      if ((sWidth * wH2DividerPosition) > 220)
                        SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Text(
                            ' color ',
                            style: GoogleFonts.lexend(
                                fontSize: 15,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                      Expanded(
                        child: SizedBox(
                          height: 25,
                          child: TextField(
                            focusNode: sheetDecorationVariables[index].colorHexFocusNodes[0],
                            controller: colorHexControllers[0],
                            onSubmitted: (value) {
                              setState(() {
                                currentItemDecoration =
                                    currentItemDecoration.copyWith(
                                        decoration: currentItemDecoration
                                            .decoration
                                            .copyWith(color: hexToColor(value)));
                              sheetDecorationList[tmpinx] = currentItemDecoration;
                              });
                            },
                            textAlignVertical: TextAlignVertical.top,
                            textAlign: TextAlign.end,
                            cursorColor: defaultPalette.tertiary,
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.only(left: 2),
                              labelStyle:
                                  GoogleFonts.lexend(color: defaultPalette.black),
                              hoverColor: defaultPalette.transparent,
                              filled: true,
                              fillColor: defaultPalette.transparent,
                              border: InputBorder.none,
                              enabledBorder: OutlineInputBorder(
                                borderSide: BorderSide.none,
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide.none,
                                borderRadius: BorderRadius.circular(5.0),
                              ),
                            ),
                            style: GoogleFonts.lexend(
                                letterSpacing: -1,
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                                color: defaultPalette.black),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(0.0),
                        child: DecoratedBox(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.fromBorderSide(
                              BorderSide.none,
                            ),
                            color: currentItemDecoration.decoration.color ??
                                defaultPalette.transparent,
                          ),
                          child: SizedBox(
                            width: 15,
                            height: 15,
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 2,
                      ),
                      ClipRRect(
                        borderRadius: BorderRadius.circular(9999),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            focusColor: defaultPalette.primary,
                            hoverColor: defaultPalette.primary,
                            highlightColor: defaultPalette.primary,
                            onTap: () {
                              EyeDropper.enableEyeDropper(context, (value) {
                                setState(() {
                                currentItemDecoration =
                                    currentItemDecoration.copyWith(
                                        decoration: currentItemDecoration
                                            .decoration
                                            .copyWith(color: value));
                                
                                  sheetDecorationList[tmpinx] = currentItemDecoration;
                                
                              });
                              },);
                            },
                            child: const Icon(
                              TablerIcons.color_picker,
                              size: 19,
                            ),
                          ),
                        ),
                      ),
                      ClipRRect(
                        borderRadius: BorderRadius.circular(500),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            hoverColor: defaultPalette.tertiary,
                            splashColor: defaultPalette.tertiary,
                            highlightColor: defaultPalette.tertiary,
                            onTap: () {
                              setState(() {
                                currentItemDecoration.pinned['decoration']
                                        ['color'] =
                                    !currentItemDecoration.pinned['decoration']
                                        ['color'];
                
                                // Update the list item with the modified currentItemDecoration
                                currentItemDecoration = currentItemDecoration;
                              });
                            },
                            child: Icon(
                                currentItemDecoration.pinned['decoration']
                                        ['color']
                                    ? TablerIcons.pin_filled
                                    : TablerIcons.pin,
                                size: 16,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 2,
                      )
                    ],
                  ),
                ),
              ),
              // List Decoration COLOR main

              if (isListColorExpanded) ...[
                //list COLOR PICKER Main
                SizedBox(
                  width: 2,
                  height: 4,
                ),

                Container(
                  width: widthBig,
                  padding: EdgeInsets.only(left: 3, right: 3),
                  decoration: BoxDecoration(
                      border: Border.all(),
                      color: defaultPalette.primary,
                      borderRadius: BorderRadius.circular(5)),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Text(
                          ' ${(ColorTools.nameThatColor(
                            currentItemDecoration.decoration.color ??
                                defaultPalette.transparent,
                          )).toLowerCase()}',
                          style: GoogleFonts.lexend(
                              fontSize: 14,
                              letterSpacing: -1,
                              color: defaultPalette.extras[0]),
                        ),
                      ),

                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          if ((sWidth * wH2DividerPosition) > 220)
                            Expanded(
                              child: HSVPicker(
                                color: HSVColor.fromColor(
                                  currentItemDecoration.decoration.color ??
                                      defaultPalette.transparent,
                                ),
                                onChanged: (value) {
                                  currentItemDecoration = currentItemDecoration.copyWith(
                                    decoration: currentItemDecoration
                                      .decoration
                                      .copyWith(
                                        color: value.toColor().withAlpha(
                                          (currentItemDecoration
                                            .decoration
                                            .color ??defaultPalette.transparent).alpha)));
                                           
                                  setState(() { 
                                  sheetDecorationList[tmpinx] = currentItemDecoration;
                                  });
                                },
                              ),
                            ),
                          Expanded(
                            child: IntrinsicHeight(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                // crossAxisAlignment: CrossAxisAlignment.end,
                                children: [
                                  //list COLOR WHEEL COLOR
                                  WheelPicker(
                                    color: HSVColor.fromColor(
                                      currentItemDecoration.decoration.color ??
                                          defaultPalette.transparent,
                                    ),
                                    onChanged: (HSVColor value) {
                                      currentItemDecoration = currentItemDecoration.copyWith(
                                            decoration: currentItemDecoration
                                            .decoration
                                            .copyWith(color: value.toColor().withAlpha((currentItemDecoration
                                                    .decoration.color ??defaultPalette.transparent).alpha)));
                                      
                                      setState(() {
                                      sheetDecorationList[tmpinx] = currentItemDecoration;
                                      });
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      //list alpha picker
                      AlphaPicker(
                        alpha: (currentItemDecoration.decoration.color ??
                                defaultPalette.transparent)
                            .alpha,
                        onChanged: (int value) {
                          currentItemDecoration =currentItemDecoration.copyWith(decoration: currentItemDecoration.decoration
                                    .copyWith(color: (currentItemDecoration.decoration.color ??
                                                defaultPalette.transparent).withAlpha(value)));
                          
                          setState(() {
                          sheetDecorationList[tmpinx] = currentItemDecoration;
                          });
                        },
                      ),
                    ],
                  ),
                ),
              
              ],
              SizedBox(width: 2, height: 4),
            ],
          ),

        ///BORDER COLOR AND WIDTH SECTION FOR DECORATION
        if (currentItemDecoration.pinned['decoration']['border']) ...[
          //title for border
          GestureDetector(
            onTap: () {
              setState(() {
                isListBorderExpanded = !isListBorderExpanded;
              });
            },
            child: Container(
            height: 25,
            padding: EdgeInsets.only(left: 2),
            margin: EdgeInsets.only(left: 3, right: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Icon(TablerIcons.border_sides,
                    size: 16, color: defaultPalette.extras[0]),
                if ((sWidth * wH2DividerPosition) > 220)
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(' border ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                Expanded(
                  child: SizedBox(
                    height: 25,
                    child: TextField(
                      focusNode: sheetDecorationVariables[index].colorHexFocusNodes[1],
                      controller: colorHexControllers[1],
                      onSubmitted: (value) {
                        setState(() {
                          currentItemDecoration =
                              currentItemDecoration.copyWith(
                                  decoration: currentItemDecoration.decoration
                                      .copyWith(
                                          border: Border.all(
                                              color: hexToColor(value))));
                          sheetDecorationList[tmpinx] = currentItemDecoration;                   
                        });
                      },
                      textAlignVertical: TextAlignVertical.top,
                      textAlign: TextAlign.end,
                      cursorColor: defaultPalette.tertiary,
                      decoration: InputDecoration(
                        contentPadding: const EdgeInsets.only(left: 2),
                        labelStyle:
                            GoogleFonts.lexend(color: defaultPalette.black),
                        hoverColor: defaultPalette.transparent,
                        filled: true,
                        fillColor: defaultPalette.transparent,
                        border: InputBorder.none,
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide.none,
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide.none,
                          borderRadius: BorderRadius.circular(5.0),
                        ),
                      ),
                      style: GoogleFonts.lexend(
                          letterSpacing: -1,
                          fontWeight: FontWeight.w500,
                          fontSize: 14,
                          color: defaultPalette.black),
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(0.0),
                  child: DecoratedBox(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.fromBorderSide(
                        BorderSide.none,
                      ),
                      color: (currentItemDecoration.decoration.border ??
                              Border.all(color: defaultPalette.transparent))
                          .top
                          .color,
                    ),
                    child: SizedBox(
                      width: 15,
                      height: 15,
                    ),
                  ),
                ),
                SizedBox(
                  width: 2,
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(9999),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      focusColor: defaultPalette.primary,
                      hoverColor: defaultPalette.primary,
                      highlightColor: defaultPalette.primary,
                      onTap: () {
                        EyeDropper.enableEyeDropper(context, (value) {
                          setState(() {
                          currentItemDecoration =
                        currentItemDecoration.copyWith(
                            decoration: currentItemDecoration.decoration
                                .copyWith(
                                    border: Border.all(
                                        color: value?? defaultPalette.extras[0])));
                          
                          sheetDecorationList[tmpinx] = currentItemDecoration;
                          
                        });
                        },);
                      },
                      child: const Icon(
                        TablerIcons.color_picker,
                        size: 19,
                      ),
                    ),
                  ),
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(500),
                  child: Material(
                    color: defaultPalette.transparent,
                    child: InkWell(
                      hoverColor: defaultPalette.tertiary,
                      splashColor: defaultPalette.tertiary,
                      highlightColor: defaultPalette.tertiary,
                      onTap: () {
                        setState(() {
                          currentItemDecoration.pinned['decoration']['border'] =
                              !currentItemDecoration.pinned['decoration']
                                  ['border'];
          
                          // Update the list item with the modified currentItemDecoration
                          currentItemDecoration = currentItemDecoration;
                        });
                      },
                      child: Icon(
                          currentItemDecoration.pinned['decoration']['border']
                              ? TablerIcons.pin_filled
                              : TablerIcons.pin,
                          size: 16,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
                SizedBox(
                  width: 2,
                )
              ],
            ),
          ),
          ),

          if (isListBorderExpanded) ...[
            SizedBox(
              width: 2,
              height: 4,
            ),
            //LINE or DASHED AND SIDES MENU
            Container(
              margin: EdgeInsets.only(
                left: 3,
                right: 3,
              ),
              padding: EdgeInsets.only(left: 4, right: 5, top: 4, bottom: 4),
              decoration: BoxDecoration(
                  border: Border.all(),
                  color: defaultPalette.primary,
                  borderRadius: BorderRadius.circular(5)),
              child: Flex(
                direction:
                    isSizeBigForBorderRow ? Axis.horizontal : Axis.vertical,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // SIDES MENU
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Container(
                        width:
                            isSizeBigForBorderRow ? widthSmall - 5 : widthBig,
                        padding: EdgeInsets.all(3),
                        decoration: BoxDecoration(
                            border: Border.all(),
                            color: defaultPalette.secondary,
                            borderRadius: BorderRadius.circular(5)),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(99999),
                                  child: Container(
                                      padding: EdgeInsets.all(2),
                                      decoration: BoxDecoration(
                                          border: Border.all(
                                              color: defaultPalette.extras[0]),
                                          borderRadius:
                                              BorderRadius.circular(99999),
                                          color: defaultPalette.primary),
                                      child: Icon(
                                        TablerIcons.slash,
                                        size: 13,
                                      )),
                                ),
                                SizedBox(
                                  width: 3,
                                ),
                                Text(
                                  'line ',
                                  style: GoogleFonts.lexend(
                                      fontSize: 14,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                            // SizedBox(width: 2,height: 0,),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  ' side',
                                  style: GoogleFonts.lexend(
                                      fontSize: 12,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                                Text(
                                  'width',
                                  style: GoogleFonts.lexend(
                                      fontSize: 12,
                                      letterSpacing: -1,
                                      color: defaultPalette.extras[0]),
                                ),
                              ],
                            ),
                            //All Border Side Select
                            borderSideSelect(
                                0,
                                'all',
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .color,
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                1,
                                'top',
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .color,
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .top
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                2,
                                'bottom',
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .bottom
                                    .color,
                                (currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent))
                                    .bottom
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                3,
                                'left',
                                ((currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .left
                                    .color,
                                ((currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .left
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                            SizedBox(
                              width: 2,
                              height: 2,
                            ),
                            //top Border Side Select
                            borderSideSelect(
                                4,
                                'right',
                                ((currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .right
                                    .color,
                                ((currentItemDecoration.decoration.border ??
                                        Border.all(color: defaultPalette.transparent)) as Border)
                                    .right
                                    .width
                                    .toString()
                                    .replaceAll(RegExp(r'.0$'), '')),
                          ],
                        ),
                      ),
                    ],
                  ),
                  // if(isSizeBigForBorderRow)
                  //COLOR SELECTOR SECTION
                  SizedBox(
                    width: isSizeBigForBorderRow ? widthSmall : widthBig,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Text(
                            ' ${(ColorTools.nameThatColor(currentBorder.top.color)).toLowerCase()}',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ),
                        //list Wheel COLOR
                        WheelPicker(
                          color: HSVColor.fromColor(
                            (currentItemDecoration.decoration.border ??
                                    Border.all(color: defaultPalette.transparent))
                                .top
                                .color,
                          ),
                          onChanged: (HSVColor value) {
                            Border currentBorder =
                                (currentItemDecoration.decoration.border ??
                                    Border.all(color: defaultPalette.transparent)) as Border;
                            currentItemDecoration =currentItemDecoration.copyWith(
                              decoration: currentItemDecoration
                                  .decoration
                                  .copyWith(
                              border:Border(
                                bottom: currentBorder.bottom.copyWith(
                                    color: value.toColor().withAlpha(
                                          (currentBorder.bottom.color)
                                              .alpha,
                                        )),
                                top: currentBorder.top.copyWith(
                                    color: value.toColor().withAlpha(
                                          (currentBorder.top.color)
                                              .alpha,
                                        )),
                                left: currentBorder.left.copyWith(
                                    color: value.toColor().withAlpha(
                                          (currentBorder.left.color)
                                              .alpha,
                                        )),
                                right: currentBorder.right.copyWith(
                                    color: value.toColor().withAlpha(
                                          (currentBorder.right.color)
                                              .alpha,
                                        )),
                                ),
                              ));        
                            setState(() {
                              sheetDecorationList[tmpinx] = currentItemDecoration;
                            });
                          },
                        ),
                        //Alpha picker list decoration
                        AlphaPicker(
                          alpha: (currentItemDecoration.decoration.border ??
                                  Border.all(color: defaultPalette.transparent))
                              .top
                              .color
                              .alpha,
                          onChanged: (int value) {
                            Border currentBorder =
                                (currentItemDecoration.decoration.border ??
                                    Border.all(color: defaultPalette.transparent)) as Border;
                             currentItemDecoration =
                                  currentItemDecoration.copyWith(
                                      decoration: currentItemDecoration
                                          .decoration
                                          .copyWith(
                                border: Border(
                                  bottom: currentBorder.bottom.copyWith(
                                      color: currentBorder.bottom.color
                                          .withAlpha(value)),
                                  top: currentBorder.top.copyWith(
                                      color: currentBorder.top.color
                                          .withAlpha(value)),
                                  left: currentBorder.left.copyWith(
                                      color: currentBorder.left.color
                                          .withAlpha(value)),
                                  right: currentBorder.right.copyWith(
                                      color: currentBorder.right.color
                                          .withAlpha(value)),
                                ),
                              ));        
                            setState(() {
                              sheetDecorationList[tmpinx] = currentItemDecoration;
                            });
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],

          SizedBox(width: 2, height: 3),
        ],

        if (currentItemDecoration.pinned['decoration']['borderRadius']
            ['isPinned']) ...[
          buildListPaddingMarginEditor(
            isBorderRadius: true,
            isMargin: false,
            itemDecoration: (currentItemDecoration as ItemDecoration),
            pinned: currentItemDecoration.pinned,
            borderRadiusControllers: borderRadiusControllers,
            index: index
          ),
          SizedBox(width: 2, height: 3),
        ],
        if (currentItemDecoration.pinned['decoration']['boxShadow']) ...[
          buildShadowEditor(context, shadowLayerIndex: shadowLayerIndex, sIndex: index),
          SizedBox(width: 2, height: 2),
        ],

        if (currentItemDecoration.pinned['decoration']['image']['bytes'] ||
            currentItemDecoration.pinned['decoration']['image']['fit'] ||
            currentItemDecoration.pinned['decoration']['image']['repeat'] ||
            currentItemDecoration.pinned['decoration']['image']['alignment'] ||
            currentItemDecoration.pinned['decoration']['image']['scale'] ||
            currentItemDecoration.pinned['decoration']['image']['opacity'] ||
            currentItemDecoration.pinned['decoration']['image']
                ['filterQuality'] ||
            currentItemDecoration.pinned['decoration']['image']['invertColors'])
          buildDecorationImageEditor(index: index),
        SizedBox(width: 2, height: 10),
      ],
    );
  }

  Widget buildShadowEditor(
    BuildContext context,
    {
      int sIndex = -1,
      int shadowLayerIndex = -1,
    }
  ) {
    sIndex = sIndex==-1? decorationIndex==-1?0: decorationIndex:sIndex;
    shadowLayerIndex = shadowLayerIndex == -1
    ?  0
    : shadowLayerIndex;
    var tmpinx = int.tryParse(sheetDecorationVariables[sIndex].id.substring(sheetDecorationVariables[sIndex].id.indexOf('/') + 1))??-155;
    
    ItemDecoration currentItemDecoration = 
        sheetDecorationList[tmpinx] as ItemDecoration;
    List<BoxShadow> currentShadow =
        currentItemDecoration.decoration.boxShadow ?? [BoxShadow()];
    currentShadow = [...(currentShadow.isEmpty ? [BoxShadow()] : currentShadow)];
    List<List<TextEditingController>> listShadowControllers = [];
    final widthSmall =
        ((sWidth * wH2DividerPosition) - (showDecorationLayers ? 84 : 50)) / 2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 68 : 32);
    final isSizeBigForRow = (sWidth * wH2DividerPosition) > 260;

    currentShadow.forEach(
      (element) {
        listShadowControllers.add([
          TextEditingController()..text = element.spreadRadius.toString(),
          TextEditingController()..text = element.blurRadius.toString(),
          TextEditingController()..text = element.offset.dx.toString(),
          TextEditingController()..text = element.offset.dy.toString(),
          TextEditingController()..text = element.color.hexAlpha,
        ]);
      },
    );
    List<Widget> shadowPropertyTile(
      int s,
      String name,
    ) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              sheetDecorationVariables[sIndex].listShadowFocusNodes[shadowLayerIndex][s]
                  .requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 10
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.1
                      : 1;
              setState(() {
                double currentValue = double.tryParse(
                        listShadowControllers[shadowLayerIndex][s]
                            .text) ??
                    0.0;
                double newValue = (currentValue + details.delta.dx * multiplier)
                    ;

                double parsedValue = double.parse(newValue.toStringAsFixed(2));
                currentShadow[shadowLayerIndex] =
                    currentShadow[shadowLayerIndex].copyWith(
                  spreadRadius: s == 0 ? parsedValue.clamp(0, double.infinity) : null,
                  blurRadius: s == 1 ? parsedValue.clamp(0, double.infinity) : null,
                  offset: s == 2
                      ? Offset(
                          parsedValue,
                          currentShadow[shadowLayerIndex]
                              .offset
                              .dy)
                      : s == 3
                          ? Offset(
                              currentShadow[shadowLayerIndex]
                                  .offset
                                  .dx,
                              parsedValue)
                          : null,
                );

                currentItemDecoration = ItemDecoration(
                  id:currentItemDecoration.id,
                  alignment: currentItemDecoration.alignment,
                  decoration: currentItemDecoration.decoration
                        .copyWith(boxShadow: [...currentShadow]),
                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                  margin: currentItemDecoration.margin,
                  padding: currentItemDecoration.padding,
                  name: currentItemDecoration.name,
                  pinned: currentItemDecoration.pinned,
                  transform: currentItemDecoration.transform
                  );
               
               sheetDecorationList[tmpinx] = currentItemDecoration;
              });
            },
            child: Text(
              ' $name ',
              style: GoogleFonts.lexend(
                  fontSize: 12,
                  letterSpacing: -1,
                  color: defaultPalette.extras[0]),
            ),
          ),
        ),
        SizedBox(
          height: 12,
          child: TextFormField(
            onTapOutside: (event) =>
                sheetDecorationVariables[sIndex].listShadowFocusNodes[shadowLayerIndex][s]
                    .unfocus(),
            focusNode: sheetDecorationVariables[sIndex].listShadowFocusNodes[shadowLayerIndex][s],
            controller: listShadowControllers[shadowLayerIndex]
                [s],
            inputFormatters: [
              NumericInputFormatter(),
            ],
            cursorColor: defaultPalette.tertiary,
            selectionControls: NoMenuTextSelectionControls(),
            textAlign: TextAlign.end,
            decoration: InputDecoration(
              contentPadding: const EdgeInsets.all(0),
              labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
              fillColor: defaultPalette.transparent,
              border: InputBorder.none,
              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
            ),
            keyboardType: TextInputType.number,
            style: GoogleFonts.mitr(
                fontSize: 13,
                color: defaultPalette.extras[0],
                letterSpacing: -1),
            onFieldSubmitted: (value) {
              setState(() {
                double parsedValue = double.parse(value);
                currentShadow[shadowLayerIndex] =
                    currentShadow[shadowLayerIndex].copyWith(
                  spreadRadius: s == 0 ? parsedValue : null,
                  blurRadius: s == 1 ? parsedValue : null,
                  offset: s == 2
                  ? Offset(
                    parsedValue,
                    currentShadow[shadowLayerIndex].offset.dy)
                  : s == 3
                    ? Offset(
                      currentShadow[shadowLayerIndex].offset.dx,
                      parsedValue)
                    : null,
                );

                currentItemDecoration = ItemDecoration(
                  id:currentItemDecoration.id,
                  alignment: currentItemDecoration.alignment,
                  decoration: currentItemDecoration.decoration
                        .copyWith(boxShadow: [...currentShadow]),
                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                  margin: currentItemDecoration.margin,
                  padding: currentItemDecoration.padding,
                  name: currentItemDecoration.name,
                  pinned: currentItemDecoration.pinned,
                  transform: currentItemDecoration.transform
                  );
                sheetDecorationList[tmpinx] = currentItemDecoration;      
              });
            },
          ),
        ),
        // SizedBox(width: 2,),
      ];
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        //Title for shadow
        Container(
          width: widthBig,
          margin: EdgeInsets.only(
            left: 3,
            right: 3,
          ),
          padding: EdgeInsets.only(left: 2, right: 2, top: 0, bottom: 0),
          decoration: BoxDecoration(
              border: Border.all(),
              color: defaultPalette.primary,
              borderRadius: BorderRadius.circular(5)),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(TablerIcons.shadow,
                  size: 16, color: defaultPalette.extras[0]),
              Expanded(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      isListShadowExpanded = !isListShadowExpanded;
                    });
                  },
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(
                      ' shadow ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ),
              SizedBox(
                width: 2,
              ),
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        currentItemDecoration.pinned['decoration']
                                ['boxShadow'] =
                            !currentItemDecoration.pinned['decoration']
                                ['boxShadow'];

                        // Update the list item with the modified currentItemDecoration
                        currentItemDecoration = currentItemDecoration;
                      });
                    },
                    child: Icon(
                        currentItemDecoration.pinned['decoration']['boxShadow']
                            ? TablerIcons.pin_filled
                            : TablerIcons.pin,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            ],
          ),
        ),

        SizedBox(width: 2, height: 4),
        if (isListShadowExpanded) ...[
          Container(
            width: widthBig,
            margin: EdgeInsets.only(
              left: 3,
              right: 3,
            ),
            padding: EdgeInsets.only(left: 4, right: 4, top: 4, bottom: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Flex(
              direction: isSizeBigForRow ? Axis.horizontal : Axis.vertical,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Stack(
                  children: [
                    Container(
                      width: isSizeBigForRow ? widthSmall : widthBig,
                      height: 155,
                      padding: EdgeInsets.only(left: 1),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: defaultPalette.secondary,
                        border: Border.all(),
                        borderRadius: BorderRadius.circular(5),
                      ),
                    ),
                    Positioned(
                      left: 3,
                      top: 3,
                      child: Row(
                        children: [
                          //add new shadow layer
                          ClipRRect(
                            borderRadius: BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.transparent,
                              child: InkWell(
                                hoverColor: defaultPalette.primary,
                                splashColor: defaultPalette.primary,
                                highlightColor: defaultPalette.primary,
                                onTap: () {
                                  setState(() {
                                    currentShadow.add(BoxShadow());
                                    currentItemDecoration = currentItemDecoration
                                        .copyWith(
                                            decoration: currentItemDecoration
                                                .decoration
                                                .copyWith(
                                                    boxShadow: currentShadow));
                                    sheetDecorationList[tmpinx] = currentItemDecoration;
                                    sheetDecorationVariables[sIndex].listShadowFocusNodes = List.generate( 
                                      currentItemDecoration.decoration.boxShadow!.length,(index) => List.generate( 5,(index) => FocusNode(),)
                                    ,);     
                                    sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = 0;
                                  });
                                },
                                child: Container(
                                    padding: EdgeInsets.all(2),
                                    decoration: BoxDecoration(
                                        border: Border.all(
                                            color: defaultPalette.extras[0]),
                                        borderRadius:
                                            BorderRadius.circular(99999),
                                        color: defaultPalette.primary),
                                    child: Icon(
                                      TablerIcons.plus,
                                      size: 15,
                                    )),
                              ),
                            ),
                          ),
                          SizedBox(
                            width: 2,
                          ),
                          ClipRRect(
                            borderRadius: BorderRadius.circular(99999),
                            child: Material(
                              color: defaultPalette.transparent,
                              child: Container(
                                  padding: EdgeInsets.all(2.2),
                                  decoration: BoxDecoration(
                                      border: Border.all(
                                          color: defaultPalette.extras[0]),
                                      borderRadius:
                                          BorderRadius.circular(99999),
                                      color: defaultPalette.primary),
                                  child: Icon(
                                    TablerIcons.stack,
                                    size: 15,
                                  )),
                            ),
                          ),
                          Text(
                            ' layers',
                            style: GoogleFonts.lexend(
                                fontSize: 14,
                                letterSpacing: -1,
                                color: defaultPalette.extras[0]),
                          ),
                        ],
                      ),
                    ),
                    //Properties of SHADOW editor, textfields
                    Positioned(
                        left: 35,
                        top: 28,
                        child: Container(
                          width:
                              isSizeBigForRow ? widthSmall - 38 : widthBig - 52,
                          height: 123,
                          padding: EdgeInsets.only(
                            left: 1,
                          ),
                          alignment: Alignment.center,
                          decoration: BoxDecoration(
                            color: defaultPalette.primary,
                            border: Border.all(),
                            borderRadius: BorderRadius.circular(5),
                          ),
                          child: ScrollConfiguration(
                            behavior:
                                ScrollBehavior().copyWith(scrollbars: false),
                            child: DynMouseScroll(
                                durationMS: 500,
                                scrollSpeed: 1,
                                builder: (context, controller, physics) {
                                  return SingleChildScrollView(
                                    controller: controller,
                                    physics: physics,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        ...shadowPropertyTile(0, 'spread'),
                                        ...shadowPropertyTile(1, 'blur'),
                                        ...shadowPropertyTile(2, 'offsetX'),
                                        ...shadowPropertyTile(3, 'offsetY'),
                                        SizedBox(height: 2),
                                        //Hex for shadow color editor
                                        Row(
                                          children: [
                                            Expanded(
                                              child: Text(
                                                ' color ',
                                                style: GoogleFonts.lexend(
                                                    fontSize: 12,
                                                    letterSpacing: -1,
                                                    color: defaultPalette
                                                        .extras[0]),
                                              ),
                                            ),
                                            DecoratedBox(
                                              decoration: BoxDecoration(
                                                shape: BoxShape.circle,
                                                border: Border.fromBorderSide(
                                                  BorderSide.none,
                                                ),
                                                color: currentShadow[
                                                        shadowLayerIndex]
                                                    .color,
                                              ),
                                              child: SizedBox(
                                                width: 12,
                                                height: 12,
                                              ),
                                            ),
                                            SizedBox(width: 2)
                                          ],
                                        ),
                                        SizedBox(
                                          height: 18,
                                          child: TextField(
                                            focusNode: sheetDecorationVariables[sIndex].listShadowFocusNodes[
                                                shadowLayerIndex][4],
                                            controller: listShadowControllers[
                                                shadowLayerIndex][4],
                                            onSubmitted: (value) {
                                              setState(() {
                                                currentShadow[
                                                        shadowLayerIndex] =
                                                    currentShadow[
                                                            shadowLayerIndex]
                                                        .copyWith(
                                                            color: hexToColor(
                                                                value));
                                                currentItemDecoration =
                                                    currentItemDecoration.copyWith(
                                                        decoration:
                                                            currentItemDecoration
                                                                .decoration
                                                                .copyWith(
                                                                    boxShadow:
                                                                        currentShadow));
                                                currentItemDecoration = ItemDecoration(
                                                  id:currentItemDecoration.id,
                                                  alignment: currentItemDecoration.alignment,
                                                  decoration: currentItemDecoration.decoration
                                                        .copyWith(boxShadow: [...currentShadow]),
                                                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                                                  margin: currentItemDecoration.margin,
                                                  padding: currentItemDecoration.padding,
                                                  name: currentItemDecoration.name,
                                                  pinned: currentItemDecoration.pinned,
                                                  transform: currentItemDecoration.transform
                                                  );    
                                               sheetDecorationList[tmpinx] = currentItemDecoration;                       
                                              });
                                            },
                                            // textAlignVertical: TextAlignVertical.top,
                                            textAlign: TextAlign.end,
                                            cursorColor:
                                                defaultPalette.tertiary,
                                            decoration: InputDecoration(
                                              contentPadding:
                                                  const EdgeInsets.only(
                                                      left: 2),
                                              labelStyle: GoogleFonts.lexend(
                                                  color: defaultPalette.black),
                                              hoverColor:
                                                  defaultPalette.transparent,
                                              filled: true,
                                              fillColor:
                                                  defaultPalette.transparent,
                                              border: InputBorder.none,
                                              enabledBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                              ),
                                              focusedBorder: OutlineInputBorder(
                                                borderSide: BorderSide.none,
                                                borderRadius:
                                                    BorderRadius.circular(5.0),
                                              ),
                                            ),
                                            style: GoogleFonts.lexend(
                                                letterSpacing: -1,
                                                fontWeight: FontWeight.w500,
                                                fontSize: 14,
                                                color: defaultPalette.black),
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                }),
                          ),
                        )),
                    //THE LAYERS AND SCROLLBAR OF SHADOWLAYERS IN DECORATION EDITOR
                    Positioned(
                        top: 28,
                        left: 3,
                        child: Column(
                          children: [
                            SizedBox(
                              width: 30,
                              height: 105,
                              child: ScrollConfiguration(
                                behavior: ScrollBehavior()
                                    .copyWith(scrollbars: false),
                                child: DynMouseScroll(
                                    durationMS: 500,
                                    scrollSpeed: 1,
                                    builder: (context, controller, physics) {
                                      return ScrollbarUltima(
                                        alwaysShowThumb: true,
                                        controller: controller,
                                        scrollbarPosition:
                                            ScrollbarPosition.right,
                                        backgroundColor: defaultPalette.primary,
                                        scrollbarLength: 105,
                                        isDraggable: true,
                                        maxDynamicThumbLength: 90,
                                        thumbBuilder:
                                            (context, animation, widgetStates) {
                                          return Container(
                                            decoration: BoxDecoration(
                                                border: Border.all(),
                                                color: defaultPalette.primary,
                                                borderRadius:
                                                    BorderRadius.circular(2)),
                                            width: 5,
                                          );
                                        },
                                        child: Padding(
                                          padding:
                                              const EdgeInsets.only(left: 0.0),
                                          child: ReorderableListView(
                                            onReorder: (oldIndex, newIndex) {
                                              setState(() {
                                                print(oldIndex.toString() +
                                                    ' ' +
                                                    newIndex.toString());
                                                final shadowList =
                                                    currentItemDecoration
                                                            .decoration
                                                            .boxShadow ??
                                                        [];

                                                final shadow = shadowList
                                                    .removeAt(oldIndex);
                                                if ((newIndex !=
                                                    shadowList.length + 1)) {
                                                  print('hah' +
                                                      shadowList.length
                                                          .toString() +
                                                      ' ' +
                                                      newIndex.toString());

                                                  shadowList.insert(
                                                      newIndex, shadow);
                                                  if (oldIndex < newIndex) {
                                                    shadowLayerIndex =
                                                        newIndex - 1;
                                                  } else {
                                                    shadowLayerIndex =
                                                        newIndex;
                                                  }
                                                  print('hah' +
                                                      shadowLayerIndex
                                                          .toString() +
                                                      ' ' +
                                                      newIndex.toString());
                                                } else {
                                                  shadowList.add(shadow);
                                                  shadowLayerIndex =
                                                      shadowList.length - 1;
                                                  print(oldIndex.toString() +
                                                      ' ' +
                                                      newIndex.toString());
                                                }
                                                currentItemDecoration =
                                                    currentItemDecoration.copyWith(
                                                        decoration:
                                                            currentItemDecoration
                                                                .decoration
                                                                .copyWith(
                                                                    boxShadow:
                                                                        shadowList));
                                              });
                                            },
                                            proxyDecorator:
                                                (child, index, animation) {
                                              return child;
                                            },
                                            buildDefaultDragHandles: false,
                                            physics: physics,
                                            scrollController: controller,
                                            children: [
                                              for (int i = 0;
                                                  i < currentShadow.length;
                                                  i++)
                                                ReorderableDragStartListener(
                                                  index: i,
                                                  key: ValueKey(i),
                                                  child: ClipRRect(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5),
                                                    child: Padding(
                                                      padding: EdgeInsets.only(
                                                          bottom: 2),
                                                      child: Material(
                                                        color: defaultPalette
                                                            .transparent,
                                                        child: InkWell(
                                                          hoverColor:
                                                              defaultPalette
                                                                  .primary,
                                                          splashColor:
                                                              defaultPalette
                                                                  .primary,
                                                          highlightColor:
                                                              defaultPalette
                                                                  .primary,
                                                          onTap: () {
                                                            setState(() {
                                                              sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex =
                                                                  i;
                                                            });
                                                          },
                                                          child: Container(
                                                            margin:
                                                                EdgeInsets.only(
                                                                    right: 1),
                                                            padding:
                                                                EdgeInsets.only(
                                                              left: 1,
                                                            ),
                                                            decoration:
                                                                BoxDecoration(
                                                                    border: shadowLayerIndex ==
                                                                            i
                                                                        ? Border
                                                                            .all()
                                                                        //   top: BorderSide(), bottom: BorderSide(),left: BorderSide(), right: BorderSide.none
                                                                        // )
                                                                        : null,
                                                                    color: shadowLayerIndex ==
                                                                            i
                                                                        ? defaultPalette
                                                                            .primary
                                                                        : null,
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            5)),
                                                            child: Text(
                                                              ' ${i + 1}',
                                                              style: GoogleFonts.lexend(
                                                                  fontSize: 14,
                                                                  letterSpacing:
                                                                      -1,
                                                                  color: defaultPalette
                                                                      .extras[0]),
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                            ],
                                          ),
                                        ),
                                      );
                                    }),
                              ),
                            ),
                            SizedBox(
                              height: 2,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.primary,
                                      splashColor: defaultPalette.primary,
                                      highlightColor: defaultPalette.primary,
                                      onTap: () {
                                        setState(() {
                                          if (currentShadow.length>1) {
                                            currentShadow.removeAt(
                                                shadowLayerIndex);
                                            currentItemDecoration = ItemDecoration(
                                                  id:currentItemDecoration.id,
                                                  alignment: currentItemDecoration.alignment,
                                                  decoration: currentItemDecoration.decoration
                                                        .copyWith(boxShadow: [...currentShadow]),
                                                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                                                  margin: currentItemDecoration.margin,
                                                  padding: currentItemDecoration.padding,
                                                  name: currentItemDecoration.name,
                                                  pinned: currentItemDecoration.pinned,
                                                  transform: currentItemDecoration.transform
                                                  );    
                                               sheetDecorationList[tmpinx] = currentItemDecoration;       
                                          sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = (shadowLayerIndex -
                                                                1)
                                                            .clamp(0,
                                                                double.infinity)
                                                        as int;              
                                          }
                                          //  shadowLayerIndex = currentShadow.length-1;
                                        });
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              color:
                                                  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.trash,
                                            size: 14,
                                          )),
                                    ),
                                  ),
                                ),
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(5),
                                  child: Material(
                                    color: defaultPalette.transparent,
                                    child: InkWell(
                                      hoverColor: defaultPalette.primary,
                                      splashColor: defaultPalette.primary,
                                      highlightColor: defaultPalette.primary,
                                      onTap: () {
                                        setState(() {
                                          currentShadow.insert(
                                              shadowLayerIndex,
                                              currentShadow[
                                                  shadowLayerIndex]);
                                          currentItemDecoration = ItemDecoration(
                                                  id:currentItemDecoration.id,
                                                  alignment: currentItemDecoration.alignment,
                                                  decoration: currentItemDecoration.decoration
                                                        .copyWith(boxShadow: [...currentShadow]),
                                                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                                                  margin: currentItemDecoration.margin,
                                                  padding: currentItemDecoration.padding,
                                                  name: currentItemDecoration.name,
                                                  pinned: currentItemDecoration.pinned,
                                                  transform: currentItemDecoration.transform
                                                  );    
                                               sheetDecorationList[tmpinx] = currentItemDecoration;         
                                          sheetDecorationVariables[sIndex].listShadowLayerSelectedIndex = shadowLayerIndex +1;            
                                          //  shadowLayerIndex = currentShadow.length-1;
                                        });
                                      },
                                      child: Container(
                                          padding: EdgeInsets.all(0),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(5),
                                              color:
                                                  defaultPalette.transparent),
                                          child: Icon(
                                            TablerIcons.copy,
                                            size: 14,
                                          )),
                                    ),
                                  ),
                                ),
                              ],
                            )
                          ],
                        )),
                  ],
                ),
                //Wheel picker for SHADOW COLOR
                SizedBox(
                  width: isSizeBigForRow ? widthSmall - 10 : widthBig,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: SingleChildScrollView(
                              scrollDirection: Axis.horizontal,
                              child: Text(
                                ' ${(ColorTools.nameThatColor(currentShadow[shadowLayerIndex].color)).toLowerCase()}',
                                style: GoogleFonts.lexend(
                                    fontSize: 14,
                                    letterSpacing: -1,
                                    color: defaultPalette.extras[0]),
                              ),
                            ),
                          ),
                          ClipRRect(
                        borderRadius: BorderRadius.circular(9999),
                        child: Material(
                          color: defaultPalette.transparent,
                          child: InkWell(
                            focusColor: defaultPalette.primary,
                            hoverColor: defaultPalette.primary,
                            highlightColor: defaultPalette.primary,
                            onTap: () {
                              EyeDropper.enableEyeDropper(context, (value) {
                                setState(() {
                                  currentShadow[
                                      shadowLayerIndex] = currentShadow[
                                          shadowLayerIndex]
                                      .copyWith(
                                          color: value);
                                  currentItemDecoration =
                                      currentItemDecoration.copyWith(
                                          decoration: currentItemDecoration.decoration
                                              .copyWith(boxShadow: currentShadow));
                                  currentItemDecoration = ItemDecoration(
                                  id:currentItemDecoration.id,
                                  alignment: currentItemDecoration.alignment,
                                  decoration: currentItemDecoration.decoration
                                        .copyWith(boxShadow: [...currentShadow]),
                                  foregroundDecoration: currentItemDecoration.foregroundDecoration,
                                  margin: currentItemDecoration.margin,
                                  padding: currentItemDecoration.padding,
                                  name: currentItemDecoration.name,
                                  pinned: currentItemDecoration.pinned,
                                  transform: currentItemDecoration.transform
                                  );    
                                sheetDecorationList[tmpinx] = currentItemDecoration;                  
                          });
                              },);
                            },
                            child: const Icon(
                              TablerIcons.color_picker,
                              size: 19,
                            ),
                          ),
                        ),
                      ),
                        ],
                      ),
                      //list Wheel COLOR
                      WheelPicker(
                        color: HSVColor.fromColor(
                          currentShadow[shadowLayerIndex].color,
                        ),
                        onChanged: (HSVColor value) {
                          setState(() {
                            currentShadow[
                                shadowLayerIndex] = currentShadow[
                                    shadowLayerIndex]
                                .copyWith(
                                    color: value.toColor().withAlpha(
                                        currentShadow[
                                                shadowLayerIndex]
                                            .color
                                            .alpha));
                            currentItemDecoration =
                                currentItemDecoration.copyWith(
                                    decoration: currentItemDecoration.decoration
                                        .copyWith(boxShadow: currentShadow));
                            currentItemDecoration = ItemDecoration(
                            id:currentItemDecoration.id,
                            alignment: currentItemDecoration.alignment,
                            decoration: currentItemDecoration.decoration
                                  .copyWith(boxShadow: [...currentShadow]),
                            foregroundDecoration: currentItemDecoration.foregroundDecoration,
                            margin: currentItemDecoration.margin,
                            padding: currentItemDecoration.padding,
                            name: currentItemDecoration.name,
                            pinned: currentItemDecoration.pinned,
                            transform: currentItemDecoration.transform
                            );    
                          sheetDecorationList[tmpinx] = currentItemDecoration;                  
                          });
                          
                        },
                      ),
                      //Alpha picker list decoration
                      AlphaPicker(
                        alpha: currentShadow[shadowLayerIndex]
                            .color
                            .alpha,
                        onChanged: (int value) {
                          setState(() {
                            currentShadow[shadowLayerIndex] =
                                currentShadow[shadowLayerIndex]
                                    .copyWith(
                                        color: currentShadow[
                                                shadowLayerIndex]
                                            .color
                                            .withAlpha(value));
                            currentItemDecoration = ItemDecoration(
                              id:currentItemDecoration.id,
                              alignment: currentItemDecoration.alignment,
                              decoration: currentItemDecoration.decoration
                                    .copyWith(boxShadow: [...currentShadow]),
                              foregroundDecoration: currentItemDecoration.foregroundDecoration,
                              margin: currentItemDecoration.margin,
                              padding: currentItemDecoration.padding,
                              name: currentItemDecoration.name,
                              pinned: currentItemDecoration.pinned,
                              transform: currentItemDecoration.transform
                              );    
                            sheetDecorationList[tmpinx] = currentItemDecoration;                  
                          });
                          
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ]
      ],
    );
  }

  Widget buildDecorationImageEditor(
    {
      int index = -1
    }
  ) {
    index = index==-1? decorationIndex==-1?0: decorationIndex:index;
    var tmpinx = int.tryParse(sheetDecorationVariables[index].id.substring(sheetDecorationVariables[index].id.indexOf('/') + 1))??-155;
    
    ItemDecoration currentItemDecoration = 
        sheetDecorationList[tmpinx] as ItemDecoration;
    final currentDecorationImage = currentItemDecoration.decoration.image;
    // final widthSmall =  ((sWidth * wH2DividerPosition)-(showDecorationLayers? 84:48))/2;
    final widthBig =
        (sWidth * wH2DividerPosition) - (showDecorationLayers ? 74 : 40);
    // final isSizeBigForBorderRow = (sWidth * wH2DividerPosition)>260;
    List<TextEditingController> listImageAlignControllers = [];
    List<TextEditingController> listImagePropertyControllers = [];
    if (currentDecorationImage != null) {
      listImageAlignControllers = [
        TextEditingController()
          ..text = (currentDecorationImage.alignment as Alignment)
              .x
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
        TextEditingController()
          ..text = (currentDecorationImage.alignment as Alignment)
              .y
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
      ];
      listImagePropertyControllers = [
        TextEditingController()
          ..text = (currentDecorationImage.scale)
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
        TextEditingController()
          ..text = (currentDecorationImage.opacity)
              .toString()
              .replaceAll(RegExp(r'.0$'), ''),
      ];
    }

    Widget roundButton(
      void Function() onTap,
      Widget icon, {
      double borderRadius = 9999,
      bool isSelected = false,
      EdgeInsets padding = const EdgeInsets.all(3),
    }) {
      return ClipRRect(
        borderRadius: BorderRadius.circular(borderRadius),
        child: Material(
          color: isSelected ? defaultPalette.primary : defaultPalette.secondary,
          child: InkWell(
            hoverColor: defaultPalette.primary,
            splashColor: defaultPalette.primary,
            highlightColor: defaultPalette.primary,
            onTap: () {
              setState(() {
                onTap();
              });
            },
            child: Container(
                padding: padding,
                decoration: BoxDecoration(
                  border: isSelected
                      ? Border.all(color: defaultPalette.extras[0])
                      : Border.fromBorderSide(BorderSide.none),
                  borderRadius: BorderRadius.circular(borderRadius),
                  // color: defaultPalette.primary
                ),
                child: icon),
          ),
        ),
      );
    }

    Widget titleTile(
      String name,
      IconData icon, {
      double fontSize = 13,
    }) {
      return Row(children: [
        Icon(icon, size: 15),
        Expanded(
          child: Text(
            name,
            maxLines: 1,
            style: GoogleFonts.lexend(
                fontSize: fontSize,
                letterSpacing: -1,
                fontWeight: FontWeight.w500),
          ),
        )
      ]);
    }

    Widget toggleSelectionRow(
      List<Widget> icons,
      List<dynamic> values,
    ) {
      List<bool> selected = [];

      for (var v = 0; v < values.length; v++) {
        if (currentDecorationImage != null) {
          if (values[v] is BoxFit) {
            if (currentDecorationImage.fit == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is FilterQuality) {
            if (currentDecorationImage.filterQuality == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is double) {
            if (values[v] ==
                    (currentDecorationImage.alignment as Alignment).x &&
                values[v] < 0) {
              selected.add(true);
            } else if (values[v] == 0 &&
                values[v] ==
                    (currentDecorationImage.alignment as Alignment).x) {
              selected.add(true);
            } else if (values[v] ==
                    (currentDecorationImage.alignment as Alignment).x &&
                values[v] > 0) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else if (values[v] is Alignment) {
            if (values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y &&
                values[v].y < 0) {
              selected.add(true);
            } else if (values[v].y == 0 &&
                values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y) {
              selected.add(true);
            } else if (values[v].y ==
                    (currentDecorationImage.alignment as Alignment).y &&
                values[v].y > 0) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          } else {
            if (currentDecorationImage.repeat == values[v]) {
              selected.add(true);
            } else {
              selected.add(false);
            }
          }
        }
      }

      Function() switchFunction(dynamic value) {
        if (value is BoxFit) {
          return () {
            if (currentDecorationImage != null) {
              currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration.copyWith(
                      image: DecorationImage(
                image: MemoryImage(
                    (currentDecorationImage.image as MemoryImage).bytes),
                fit: value,
                repeat: currentDecorationImage.repeat,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              )));
              sheetDecorationList[tmpinx] = currentItemDecoration;
            }
          };
        } else if (value is FilterQuality) {
          return () {
            if (currentDecorationImage != null) {
              currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration.copyWith(
                      image: DecorationImage(
                image: MemoryImage(
                    (currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: value,
                invertColors: currentDecorationImage.invertColors,
              )));
              sheetDecorationList[tmpinx] = currentItemDecoration;
            }
          };
        } else if (value is double) {
          return () {
            Alignment newAlignment = Alignment(value.clamp(-1, 1),
                (currentDecorationImage!.alignment as Alignment).y);

            if (currentDecorationImage != null) {
              currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration.copyWith(
                      image: DecorationImage(
                image: MemoryImage(
                    (currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: newAlignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              )));
             sheetDecorationList[tmpinx] = currentItemDecoration;
            }

            currentItemDecoration = currentItemDecoration.copyWith(
                decoration: currentItemDecoration.decoration);
          };
        } else if (value is Alignment) {
          return () {
            Alignment newAlignment = Alignment(
                (currentDecorationImage!.alignment as Alignment).x, value.y);

            if (currentDecorationImage != null) {
              currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration.copyWith(
                      image: DecorationImage(
                image: MemoryImage(
                    (currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: currentDecorationImage.repeat,
                alignment: newAlignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              )));
              sheetDecorationList[tmpinx] = currentItemDecoration;
            }

            currentItemDecoration = currentItemDecoration.copyWith(
                decoration: currentItemDecoration.decoration);
          };
        } else {
          return () {
            if (currentDecorationImage != null) {
              currentItemDecoration = currentItemDecoration.copyWith(
                  decoration: currentItemDecoration.decoration.copyWith(
                      image: DecorationImage(
                image: MemoryImage(
                    (currentDecorationImage.image as MemoryImage).bytes),
                fit: currentDecorationImage.fit,
                repeat: value,
                alignment: currentDecorationImage.alignment,
                scale: currentDecorationImage.scale,
                opacity: currentDecorationImage.opacity,
                filterQuality: currentDecorationImage.filterQuality,
                invertColors: currentDecorationImage.invertColors,
              )));
              sheetDecorationList[tmpinx] = currentItemDecoration;
            }
          };
        }
      }

      return Container(
        padding: EdgeInsets.all(2),
        decoration: BoxDecoration(
            color: defaultPalette.secondary,
            border: Border.all(),
            borderRadius: BorderRadius.circular(5)),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            for (int i = 0; i < icons.length; i++) ...[
              Expanded(
                  child: roundButton(switchFunction(values[i]), icons[i],
                      isSelected: selected[i], borderRadius: 5)),
              if (i != icons.length - 1)
                SizedBox(
                  width: 2,
                )
            ]
          ],
        ),
      );
    }

    List<Widget> imageAlignPropertyTile(
      int s,
    ) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              sheetDecorationVariables[index].listImageAlignFocusNodes[s].requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 0.5
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.01
                      : 0.1;
              setState(() {
                double currentValue =
                    double.tryParse(listImageAlignControllers[s].text) ?? 0.0;
                double newValue =
                    (currentValue + details.delta.dx * multiplier);

                double parsedValue = double.parse(newValue.toStringAsFixed(4));
                Alignment newAlignment = s == 0
                    ? Alignment(parsedValue,
                        (currentDecorationImage!.alignment as Alignment).y)
                    : Alignment(
                        (currentDecorationImage!.alignment as Alignment).x,
                        parsedValue,
                      );

                if (currentDecorationImage != null) {
                  currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration.copyWith(
                          image: DecorationImage(
                    image: MemoryImage(
                        (currentDecorationImage.image as MemoryImage).bytes),
                    fit: currentDecorationImage.fit,
                    repeat: currentDecorationImage.repeat,
                    alignment: newAlignment,
                    scale: currentDecorationImage.scale,
                    opacity: currentDecorationImage.opacity,
                    filterQuality: currentDecorationImage.filterQuality,
                    invertColors: currentDecorationImage.invertColors,
                  )));
                }

                currentItemDecoration = currentItemDecoration.copyWith(
                    decoration: currentItemDecoration.decoration);
                sheetDecorationList[tmpinx] = currentItemDecoration; 
              });
            },
            child: Icon(
              s == 0
                  ? TablerIcons.arrows_horizontal
                  : TablerIcons.arrows_vertical,
              size: 16,
            ),
          ),
        ),
        Expanded(
          flex: 10,
          child: SizedBox(
            height: 12,
            child: TextFormField(
              onTapOutside: (event) => sheetDecorationVariables[index].listImageAlignFocusNodes[s].unfocus(),
              focusNode: sheetDecorationVariables[index].listImageAlignFocusNodes[s],
              controller: listImageAlignControllers[s],
              inputFormatters: [
                NumericInputFormatter(allowNegative: true),
              ],
              cursorColor: defaultPalette.tertiary,
              selectionControls: NoMenuTextSelectionControls(),
              textAlign: TextAlign.end,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.all(0),
                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                fillColor: defaultPalette.transparent,
                border: InputBorder.none,
                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
              ),
              keyboardType: TextInputType.number,
              style: GoogleFonts.mitr(
                  fontSize: 13,
                  color: defaultPalette.extras[0],
                  letterSpacing: -1),
              onFieldSubmitted: (value) {
                setState(() {
                  double parsedValue = double.parse(value);

                  Alignment newAlignment = s == 0
                      ? Alignment(parsedValue.clamp(-1, 1),
                          (currentDecorationImage!.alignment as Alignment).y)
                      : Alignment(
                          (currentDecorationImage!.alignment as Alignment).x,
                          parsedValue.clamp(-1, 1),
                        );

                  if (currentDecorationImage != null) {
                    currentItemDecoration = currentItemDecoration.copyWith(
                        decoration: currentItemDecoration.decoration.copyWith(
                            image: DecorationImage(
                      image: MemoryImage(
                          (currentDecorationImage.image as MemoryImage).bytes),
                      fit: currentDecorationImage.fit,
                      repeat: currentDecorationImage.repeat,
                      alignment: newAlignment,
                      scale: currentDecorationImage.scale,
                      opacity: currentDecorationImage.opacity,
                      filterQuality: currentDecorationImage.filterQuality,
                      invertColors: currentDecorationImage.invertColors,
                    )));
                  }

                  currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration);
                  sheetDecorationList[tmpinx] = currentItemDecoration; 
                });
              },
            ),
          ),
        ),
        SizedBox(
          width: 2,
        ),
        Expanded(
          flex: 25,
          child: SizedBox(
            height: 30,
            child: toggleSelectionRow(
                s == 0
                    ? [
                        Icon(TablerIcons.layout_align_left, size: 16),
                        Icon(TablerIcons.layout_align_center, size: 16),
                        Icon(TablerIcons.layout_align_right, size: 16),
                      ]
                    : [
                        Icon(TablerIcons.layout_align_top, size: 16),
                        Icon(TablerIcons.layout_align_middle, size: 16),
                        Icon(TablerIcons.layout_align_bottom, size: 16),
                      ],
                s == 0
                    ? [-1.0, 0.0, 1.0]
                    : [
                        Alignment(0, -1),
                        Alignment(0, 0),
                        Alignment(0, 1),
                      ]),
          ),
        )
      ];
    }

    List<Widget> imagePropertyTile(int s) {
      return [
        MouseRegion(
          cursor: SystemMouseCursors.resizeLeftRight,
          child: GestureDetector(
            onHorizontalDragCancel: () {
              sheetDecorationVariables[index].listImagePropertyFocusNodes[s].requestFocus();
            },
            onHorizontalDragUpdate: (details) {
              var multiplier = HardwareKeyboard.instance.isControlPressed
                  ? 0.5
                  : HardwareKeyboard.instance.isShiftPressed
                      ? 0.01
                      : 0.1;
              setState(() {
                double currentValue =
                    double.tryParse(listImagePropertyControllers[s].text) ??
                        0.0;
                double newValue = (currentValue + details.delta.dx * multiplier)
                    .clamp(-1, double.infinity);

                double parsedValue = double.parse(newValue.toStringAsFixed(4));

                if (currentDecorationImage != null) {
                  currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration.copyWith(
                          image: DecorationImage(
                    image: MemoryImage(
                        (currentDecorationImage.image as MemoryImage).bytes),
                    fit: currentDecorationImage.fit,
                    repeat: currentDecorationImage.repeat,
                    alignment: currentDecorationImage.alignment,
                    scale: s == 0 ? parsedValue : currentDecorationImage.scale,
                    opacity: s == 1
                        ? parsedValue.clamp(0, 1)
                        : currentDecorationImage.opacity,
                    filterQuality: currentDecorationImage.filterQuality,
                    invertColors: currentDecorationImage.invertColors,
                  )));
                }

                currentItemDecoration = currentItemDecoration.copyWith(
                    decoration: currentItemDecoration.decoration);
                sheetDecorationList[tmpinx] = currentItemDecoration;
              });
            },
            child: Row(
              children: [
                Icon(
                  s == 0 ? TablerIcons.scale : TablerIcons.square_toggle,
                  size: 16,
                ),
                Text(
                  s == 0 ? ' scale ' : ' opacity ',
                  style: GoogleFonts.lexend(
                      fontSize: 14,
                      letterSpacing: -1,
                      color: defaultPalette.extras[0]),
                ),
              ],
            ),
          ),
        ),
        Expanded(
          flex: 10,
          child: SizedBox(
            height: 12,
            child: TextFormField(
              onTapOutside: (event) => sheetDecorationVariables[index].listImagePropertyFocusNodes[s].unfocus(),
              focusNode: sheetDecorationVariables[index].listImagePropertyFocusNodes[s],
              controller: listImagePropertyControllers[s],
              inputFormatters: [
                NumericInputFormatter(allowNegative: true),
              ],
              cursorColor: defaultPalette.tertiary,
              selectionControls: NoMenuTextSelectionControls(),
              textAlign: TextAlign.end,
              decoration: InputDecoration(
                contentPadding: const EdgeInsets.all(0),
                labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                fillColor: defaultPalette.transparent,
                border: InputBorder.none,
                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none),
                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none),
              ),
              keyboardType: TextInputType.number,
              style: GoogleFonts.mitr(
                  fontSize: 13,
                  color: defaultPalette.extras[0],
                  letterSpacing: -1),
              onFieldSubmitted: (value) {
                setState(() {
                  double parsedValue = double.parse(value);

                  if (currentDecorationImage != null) {
                    currentItemDecoration = currentItemDecoration.copyWith(
                        decoration: currentItemDecoration.decoration.copyWith(
                            image: DecorationImage(
                      image: MemoryImage(
                          (currentDecorationImage.image as MemoryImage).bytes),
                      fit: currentDecorationImage.fit,
                      repeat: currentDecorationImage.repeat,
                      alignment: currentDecorationImage.alignment,
                      scale:
                          s == 0 ? parsedValue : currentDecorationImage.scale,
                      opacity:
                          s == 1 ? parsedValue : currentDecorationImage.opacity,
                      filterQuality: currentDecorationImage.filterQuality,
                      invertColors: currentDecorationImage.invertColors,
                    )));
                  }

                  currentItemDecoration = currentItemDecoration.copyWith(
                      decoration: currentItemDecoration.decoration);
                  sheetDecorationList[tmpinx] = currentItemDecoration;
                });
              },
            ),
          ),
        ),
        SizedBox(
          width: 2,
        ),
      ];
    }

    return Column(
      children: [
        //Title for Decoration Image Editor
        Container(
          width: widthBig,
          margin: EdgeInsets.only(
            left: 3,
            right: 3,
          ),
          padding: EdgeInsets.only(left: 2, right: 2, top: 0, bottom: 0),
          decoration: BoxDecoration(
              border: Border.all(),
              color: defaultPalette.primary,
              borderRadius: BorderRadius.circular(5)),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(TablerIcons.photo,
                  size: 16, color: defaultPalette.extras[0]),
              Expanded(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      isListDecorationImageExpanded =
                          !isListDecorationImageExpanded;
                    });
                  },
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Text(
                      ' image ',
                      style: GoogleFonts.lexend(
                          fontSize: 15,
                          letterSpacing: -1,
                          color: defaultPalette.extras[0]),
                    ),
                  ),
                ),
              ),
              SizedBox(
                width: 2,
              ),
              ClipRRect(
                borderRadius: BorderRadius.circular(500),
                child: Material(
                  color: defaultPalette.transparent,
                  child: InkWell(
                    hoverColor: defaultPalette.tertiary,
                    splashColor: defaultPalette.tertiary,
                    highlightColor: defaultPalette.tertiary,
                    onTap: () {
                      setState(() {
                        currentItemDecoration.pinned['decoration']['image']
                                ['isPinned'] =
                            !currentItemDecoration.pinned['decoration']['image']
                                ['isPinned'];

                        // Update the list item with the modified currentItemDecoration
                        currentItemDecoration = currentItemDecoration;
                      });
                    },
                    child: Icon(
                        currentItemDecoration.pinned['decoration']['image']
                                ['isPinned']
                            ? TablerIcons.pin_filled
                            : TablerIcons.pin,
                        size: 16,
                        color: defaultPalette.extras[0]),
                  ),
                ),
              ),
            ],
          ),
        ),
        SizedBox(width: 2, height: 4),
        if (isListDecorationImageExpanded) ...[
          Container(
            width: widthBig,
            margin: EdgeInsets.only(
              left: 3,
              right: 3,
            ),
            padding: EdgeInsets.only(left: 4, right: 4, top: 4, bottom: 4),
            decoration: BoxDecoration(
                border: Border.all(),
                color: defaultPalette.primary,
                borderRadius: BorderRadius.circular(5)),
            child: Column(
              children: [
                GestureDetector(
                  onTap: () async {
                    if (currentDecorationImage == null) {
                      FilePickerResult? result =
                        await FilePicker.platform.pickFiles(
                            type: FileType.custom,
                            allowedExtensions: [
                              'jpg',
                              'png',
                            ],
                            withData: true);
                              
                      if (result != null) {
                        setState(() {
                          currentItemDecoration = currentItemDecoration
                            .copyWith(
                              decoration: currentItemDecoration.decoration
                              .copyWith(
                                image: DecorationImage(
                                  image: MemoryImage(
                                    result.files[0].bytes!),
                                  fit: currentDecorationImage !=null
                                    ? currentDecorationImage.fit
                                    : BoxFit.fitWidth)));
                         sheetDecorationList[tmpinx] = currentItemDecoration;                     
                        });
                      }
                    }
                  },
                  child: Container(
                    decoration: BoxDecoration(
                        color: defaultPalette.secondary,
                        border: Border.all(),
                        borderRadius: BorderRadius.circular(5)),
                    padding: EdgeInsets.all(2),
                    child: Column(
                      children: [
                        Container(
                          width: sWidth,
                          height: 50,
                          decoration: BoxDecoration(
                              image: currentDecorationImage ?? null,
                              color: defaultPalette.secondary,
                              borderRadius: BorderRadius.circular(5)),
                          child: currentDecorationImage != null
                              ? null
                              : Icon(
                                  TablerIcons.photo_plus,
                                  size: 16,
                                ),
                        ),
                        if (currentDecorationImage != null)
                          Padding(
                            padding: const EdgeInsets.only(top: 2.0),
                            child: Row(
                              // mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                roundButton(() async {
                                  FilePickerResult? result =
                                      await FilePicker.platform.pickFiles(
                                          type: FileType.custom,
                                          allowedExtensions: [
                                            'jpg',
                                            'png',
                                          ],
                                          withData: true);
                                  if (result != null) {
                                    setState(() {
                                      currentItemDecoration =
                                          currentItemDecoration.copyWith(
                                              decoration: currentItemDecoration
                                              .decoration .copyWith(
                                                image: DecorationImage(
                                                image: MemoryImage( result.files[0].bytes!),
                                                fit: currentDecorationImage !=null
                                                ? currentDecorationImage
                                                    .fit
                                                : BoxFit
                                                    .fitWidth)));
                                    sheetDecorationList[tmpinx] = currentItemDecoration;             
                                    });
                                  }
                                }, Icon(TablerIcons.photo_plus, size: 15),
                                    isSelected: true),
                                SizedBox(width: 2),
                                roundButton(() {
                                  currentItemDecoration =
                                      currentItemDecoration.copyWith(
                                          decoration: BoxDecoration(
                                              image: null,
                                              border: currentItemDecoration
                                                  .decoration.border,
                                              borderRadius:
                                                  currentItemDecoration
                                                      .decoration.borderRadius,
                                              boxShadow: currentItemDecoration
                                                  .decoration.boxShadow,
                                              color: currentItemDecoration
                                                  .decoration.color,
                                              gradient: currentItemDecoration
                                                  .decoration.gradient,
                                              backgroundBlendMode:
                                                  currentItemDecoration
                                                      .decoration
                                                      .backgroundBlendMode));
                                sheetDecorationList[tmpinx] = currentItemDecoration;                  
                                }, Icon(TablerIcons.trash, size: 15),
                                    isSelected: true),
                              ],
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                SizedBox(height: 4),
                if (currentDecorationImage != null) ...[
                  ////The setup for BoxFit
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['fit']) ...[
                    titleTile(' ${currentDecorationImage.fit!.name}',
                        TablerIcons.artboard),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.arrow_autofit_content,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrow_autofit_height,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrow_autofit_width,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.arrows_maximize,
                        size: 20,
                      ),
                      Icon(
                        TablerIcons.input_x,
                        size: 20,
                      ),
                    ], [
                      BoxFit.contain,
                      BoxFit.fitHeight,
                      BoxFit.fitWidth,
                      BoxFit.fill,
                      BoxFit.none
                    ]),
                    SizedBox(height: 2),
                  ],

                  ////The setup for Repeating Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['repeat']) ...[
                    titleTile(' ${currentDecorationImage.repeat.name}',
                        TablerIcons.layout_grid),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.layout_grid,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.columns_3,
                        size: 18,
                      ),
                      Transform.rotate(
                          angle: pi / 2,
                          child: Icon(
                            TablerIcons.columns_3,
                            size: 18,
                          )),
                      Icon(
                        TablerIcons.input_x,
                        size: 18,
                      ),
                    ], [
                      ImageRepeat.repeat,
                      ImageRepeat.repeatX,
                      ImageRepeat.repeatY,
                      ImageRepeat.noRepeat,
                    ]),
                    SizedBox(height: 3),
                  ],

                  ///The setup for Aligning Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['alignment']) ...[
                    titleTile(
                        ' ${currentDecorationImage.alignment.toString()}'
                            .replaceAll(RegExp(r'\)'), '')
                            .replaceAll(RegExp(r'Alignment.'), ''),
                        TablerIcons.align_box_left_stretch,
                        fontSize: 13),
                    SizedBox(height: 2),
                    Row(
                      children: [
                        ...imageAlignPropertyTile(1),
                      ],
                    ),
                    SizedBox(height: 3),
                    Row(
                      children: [...imageAlignPropertyTile(0)],
                    ),
                  ],
                  ////The setup for Scale Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['scale']) ...[
                    SizedBox(height: 4),
                    Row(
                      children: [...imagePropertyTile(0)],
                    ),
                  ],
                  ////The setup for Opacity of Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['opacity']) ...[
                    SizedBox(height: 3),
                    Row(
                      children: [...imagePropertyTile(1)],
                    ),
                    SizedBox(height: 4),
                  ],
                  ////The setup for Quality of Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['filterQuality']) ...[
                    titleTile(' ${currentDecorationImage.filterQuality.name}',
                        TablerIcons.michelin_star),
                    SizedBox(height: 1),
                    toggleSelectionRow([
                      Icon(
                        TablerIcons.antenna_bars_2,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_3,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_4,
                        size: 18,
                      ),
                      Icon(
                        TablerIcons.antenna_bars_5,
                        size: 18,
                      ),
                    ], [
                      FilterQuality.none,
                      FilterQuality.low,
                      FilterQuality.medium,
                      FilterQuality.high,
                    ]),
                  ],
                  ////The setup for Inversion of Image
                  if (currentItemDecoration.pinned['decoration']['image']
                      ['invertColors']) ...[
                    SizedBox(height: 4),
                    titleTile(' invert', TablerIcons.brightness_2),
                    SizedBox(height: 1),
                    AnimatedToggleSwitch<bool>.dual(
                      current: currentDecorationImage.invertColors,
                      first: false,
                      second: true,
                      onChanged: (value) {
                        setState(() {
                          currentItemDecoration =
                              currentItemDecoration.copyWith(
                                  decoration:
                                      currentItemDecoration.decoration.copyWith(
                                          image: DecorationImage(
                            image: MemoryImage(
                                (currentDecorationImage.image as MemoryImage)
                                    .bytes),
                            fit: currentDecorationImage.fit,
                            repeat: currentDecorationImage.repeat,
                            alignment: currentDecorationImage.alignment,
                            scale: currentDecorationImage.scale,
                            opacity: currentDecorationImage.opacity,
                            filterQuality: currentDecorationImage.filterQuality,
                            invertColors: value,
                          )));
                          currentItemDecoration =
                              currentItemDecoration.copyWith(
                                  decoration: currentItemDecoration.decoration);
                         sheetDecorationList[tmpinx] = currentItemDecoration;     
                        });
                      },
                      animationCurve: Curves.easeInOutExpo,
                      animationDuration: Durations.medium4,
                      borderWidth:
                          2, // backgroundColor is set independently of the current selection
                      styleBuilder: (value) => ToggleStyle(
                          borderRadius: BorderRadius.circular(10),
                          indicatorBorderRadius: BorderRadius.circular(15),
                          borderColor: defaultPalette.secondary,
                          backgroundColor: defaultPalette.secondary,
                          indicatorBorder:
                              Border.all(color: defaultPalette.extras[0]),
                          indicatorColor: defaultPalette
                              .primary), // indicatorColor changes and animates its value with the selection
                      iconBuilder: (value) {
                        return Icon(
                            value == false
                                ? TablerIcons.blob
                                : TablerIcons.blob_filled,
                            size: 12,
                            color: defaultPalette.extras[0]);
                      },
                      textBuilder: (value) {
                        return Text(
                          value == false ? 'unInverted' : 'inverted',
                          style: GoogleFonts.lexend(
                              letterSpacing: -1, fontSize: 14),
                        );
                      },
                      height: 25,
                      spacing: (widthBig) - 100,
                    ),
                  ],
                ],
              ],
            ),
          ),
        ]
      ],
    );
  }
  
  List<List<SheetTableCell>> defaultSheetTableCellData(String parentId, SuperDecoration sheetTableDecoration, IndexPath indexPath) {
  const rows = 5;
  const cols = 8;
  
  return List.generate(rows, (row) {
    return List.generate(cols, (col) {
      final content = 'Cell ${String.fromCharCode(65 + col)}${row+1}';
      var newId = 'TX-${ const Uuid().v4()}'; 
      var cellIndexPath = IndexPath(
        parent: indexPath,
        index: row);
      return SheetTableCell(
        id: '${numberToColumnLabel(col+1)}${row+1}',
        parentId: parentId,
        data: content,
        sheetItem: addTextField(
          id: newId,
          parentId: parentId,
          docString: [],
          findItem: _findItem,
          textFieldTapDown: textFieldTapDown,
          textDecoration: sheetTableDecoration,
          hide: false,
          name:'${numberToColumnLabel(col+1)}${row+1}',
          indexPath: IndexPath(
            parent: cellIndexPath,
            index: col)

          ),
        rowSpan: 1,
        colSpan: 1,
        indexPath: cellIndexPath,
      );
      
      });
    });
  }

  List<SheetTableColumn> defaultSheetTableColumnData(String parentId, String columnDecoration, IndexPath indexPath) {
  return List.generate(8, (index) {
    return SheetTableColumn(
      id: 'CL-${ const Uuid().v4()}',
      parentId: parentId,
      size: 80, 
      columnDecoration: columnDecoration,
      indexPath: IndexPath(
        parent: indexPath,
        index: index)
    );
  });
  }

  List<SheetTableRow> defaultSheetTableRowData(String parentId, String rowDecoration, IndexPath indexPath) {

  return List.generate(5, (index) {
    return SheetTableRow(
      id: 'RW-${ const Uuid().v4()}',
      parentId: parentId,
      size: 30,
      rowDecoration: rowDecoration,
      indexPath: IndexPath(
        parent: indexPath,
        index: index)
    );
  });
}

  void applySpans(SheetTable sheetTable) {
      final rows = sheetTable.cellData.length;
      final cols = sheetTable.columnData.length;
      for (int r = 0; r < rows; r++) {
        for (int c = 0; c < sheetTable.cellData[r].length; c++) {
          sheetTable.cellData[r][c].isVisible = true;
        }
      }
      print('running apply spans');
      for (int row = 0; row < rows; row++) {
        for (int col = 0; col < cols; col++) {
          final cell = sheetTable.cellData[row][col];
          if (!cell.isVisible) continue;

          for (int dr = 0; dr < cell.rowSpan; dr++) {
            for (int dc = 0; dc < cell.colSpan; dc++) {
              final r = row + dr;
              final c = col + dc;

              if (r == row && c == col) continue;
              if (r < rows && c < sheetTable.cellData[r].length) {
                sheetTable.cellData[r][c].isVisible = false;
              }
            }
          }
        }
      }
    }

  void reassignCellIds(SheetTable sheetTable) {
    for (int row = 0; row < sheetTable.cellData.length; row++) {
      for (int col = 0; col < sheetTable.cellData[row].length; col++) {
        final cell = sheetTable.cellData[row][col];
        final newId = '${numberToColumnLabel(col + 1)}${row + 1}';

        cell.id = newId;

        if (cell.sheetItem is SheetText) {
          (cell.sheetItem as SheetText).name = newId;
        }
      }
    }
  }
                            

}

  TextStyle customStyleBuilder(attribute) {
    if (attribute.key == 'letterSpacing') {
      String? letterSpacing = attribute.value as String?;
      return TextStyle(
        letterSpacing: double.parse(letterSpacing ?? '0'),
      );
    }
    // Handle word spacing (custom attribute example)
    if (attribute.key == 'wordSpacing') {
      String? wordSpacing = attribute.value as String?;
      return TextStyle(
        wordSpacing: double.parse(wordSpacing ?? '0'),
      );
    }
    // Handle line height (custom attribute example)
    if (attribute.key == 'lineHeight') {
      String? lineHeight = attribute.value as String?;
      return TextStyle(
        height: double.parse(lineHeight ?? '1'),
      );
    }

    // Return default TextStyle if attribute not handled
    return const TextStyle();
  }

  (int row, int col) parseCellId(String id) {
    final match = RegExp(r'^([A-Z]+)(\d+)$').firstMatch(id);
    if (match == null) throw FormatException("Invalid cell id format: $id");
    final col = columnLabelToNumber(match.group(1)!);
    final row = int.parse(match.group(2)!) - 1;
    return (row, col);
  }
  
  String numberToColumnLabel(int number) {
    String result = '';
    while (number > 0) {
      number--; // Excel columns are 1-indexed, so adjust
      result = String.fromCharCode((number % 26) + 65) + result;
      number ~/= 26;
    }
    return result;
  }

  int columnLabelToNumber(String columnLabel) {
    int result = 0;
    for (int i = 0; i < columnLabel.length; i++) {
      result *= 26;
      result += columnLabel.codeUnitAt(i) - 'A'.codeUnitAt(0) + 1;
    }
    return result - 1; // 0-indexed
  }

      
class WordSpacingAttribute extends Attribute<String?> {
  static const _key = 'wordSpacing';
  const WordSpacingAttribute(String? value)
      : super('wordSpacing', AttributeScope.inline, value);
}

class LineHeightAttribute extends Attribute<String?> {
  static const _key = 'lineHeight';
  const LineHeightAttribute(String? value)
      : super('lineHeight', AttributeScope.inline, value);
}

class LetterSpacingAttribute extends Attribute<String?> {
  static const _key = 'letterSpacing';
  const LetterSpacingAttribute(String? value)
      : super('letterSpacing', AttributeScope.inline, value);
}

class StrokeAttribute extends Attribute<String> {
  StrokeAttribute(String colorHex, double strokeWidth)
      : super('stroke', AttributeScope.inline, '$colorHex,$strokeWidth');
}

class CustomScrollPhysics extends ScrollPhysics {
  final double scrollFactor;

  const CustomScrollPhysics({ScrollPhysics? parent, this.scrollFactor = 0.2})
      : super(parent: parent);

  @override
  Simulation? createBallisticSimulation(
      ScrollMetrics position, double velocity) {
    // Adjust the velocity to control the scroll distance
    return super.createBallisticSimulation(position, velocity * scrollFactor);
  }

  @override
  CustomScrollPhysics applyTo(ScrollPhysics? ancestor) {
    return CustomScrollPhysics(
        parent: buildParent(ancestor), scrollFactor: scrollFactor);
  }
}

class SmoothScrollPhysics extends ScrollPhysics {
  const SmoothScrollPhysics({ScrollPhysics? parent}) : super(parent: parent);

  @override
  SmoothScrollPhysics applyTo(ScrollPhysics? ancestor) {
    return SmoothScrollPhysics(parent: buildParent(ancestor));
  }

  @override
  double get minFlingVelocity => 0.01; // Reduce flick sensitivity

  @override
  double get maxFlingVelocity => 5000.0; // Prevent excessive speed

  @override
  double get dragStartDistanceMotionThreshold =>
      3.5; // Adjust for smoother control
}

class NoMenuTextSelectionControls extends MaterialTextSelectionControls {
  @override
  Widget buildToolbar(
    BuildContext context,
    Rect globalEditableRegion,
    double textLineHeight,
    Offset position,
    List<TextSelectionPoint> endpoints,
    TextSelectionDelegate delegate,
    ValueListenable<ClipboardStatus>? clipboardStatus,
    Offset? lastSecondaryTapDownPosition,
  ) {
    // Return null or an empty container to disable the right-click context menu
    return Container();
  }
}

class SmoothScrollBehavior extends MaterialScrollBehavior {
  @override
  ScrollPhysics getScrollPhysics(BuildContext context) {
    return AlwaysScrollableScrollPhysics().applyTo(
      BouncingScrollPhysics(), // or ClampingScrollPhysics()
    );
  }
}

class SheetLayoutDelegate extends MultiChildLayoutDelegate {
  final List<List<SheetTableCell>> cells;
  final List<SheetTableColumn> columnData;
  final List<SheetTableRow> rowData;

  SheetLayoutDelegate({
    required this.cells,
    required this.columnData,
    required this.rowData,
  });

  @override
void performLayout(Size size) {
  for (var rowList in cells) {
    for (var cell in rowList) {
      if (!cell.isVisible) continue;

      final (row, col) = parseCellId(cell.id);

      final layoutId = cell.id;

      if (hasChild(layoutId)) {
        double top = 0.0;
        for (int i = 0; i < row; i++) {
          top += rowData[i].size + 2 * 1;
        }

        double left = 0.0;
        for (int i = 0; i < col; i++) {
          left += columnData[i].size + 14 + 2 * 1;
        }

        final double width = columnData
          .skip(col)
          .take(cell.colSpan)
          .fold(0.0, (a, b) => a + b.size)
          + (14 + 2 * 1) * cell.colSpan;

        final double height = rowData
          .skip(row)
          .take(cell.rowSpan)
          .fold(0.0, (a, b) => a + b.size)
          + (2 * 1) * cell.rowSpan;


        layoutChild(
          layoutId,
          BoxConstraints.tight(Size(width, height)),
        );

        positionChild(layoutId, Offset(left, top));
      }
    }
  }
}


  @override
  bool shouldRelayout(covariant SheetLayoutDelegate oldDelegate) => true;
}

class SheetDecorationVariables {
  String id ='';
  bool isExpanded = true;
  bool isListMarginExpanded = false;
  bool isListPaddingExpanded = false;
  bool isListBorderRadiusExpanded = false;
  bool isListBorderExpanded = true;
  bool isListColorExpanded = true;
  bool isListShadowExpanded = true;
  bool isListDecorationImageExpanded = true;
  List<FocusNode> marginFocusNodes = [];
  List<FocusNode> listPaddingFocusNodes = [];
  List<FocusNode> colorHexFocusNodes = [ ];
  List<FocusNode> borderFocusNodes = [];
  List<FocusNode> borderRadiusFocusNodes = [];
  List<FocusNode> listBorderFocusNodes = [];
  List<List<FocusNode>> listShadowFocusNodes = [];
  List<FocusNode> listImageAlignFocusNodes = [FocusNode(), FocusNode()];
  List<FocusNode> listImagePropertyFocusNodes = [FocusNode(), FocusNode()];
  int listShadowLayerSelectedIndex =0;
  SheetDecorationVariables({
    this.id ='',
    this.isExpanded = false,
    this.isListMarginExpanded = false,
    this.isListPaddingExpanded = false,
    this.isListBorderRadiusExpanded = false,
    this.isListBorderExpanded = false,
    this.isListColorExpanded = false,
    this.isListShadowExpanded = false,
    this.isListDecorationImageExpanded = false,
    this.marginFocusNodes = const [],
    this.listPaddingFocusNodes = const [],
    this.colorHexFocusNodes = const [],
    this.borderFocusNodes = const [],
    this.borderRadiusFocusNodes = const [],
    this.listBorderFocusNodes = const [],
    this.listShadowFocusNodes = const [],
    this.listImageAlignFocusNodes = const [],
    this.listImagePropertyFocusNodes = const [],
    this.listShadowLayerSelectedIndex = 0
  });
  
}

class SheetTableVariables {
  String id ='';
  int rowLayerIndex = 0;
  int columnLayerIndex =0;
  
  SheetTableVariables({
    this.id ='',
    this.rowLayerIndex =0,
    this.columnLayerIndex =0,
  });
}
