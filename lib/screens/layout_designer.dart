// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:async';
import 'dart:io';
import 'dart:ui' as ui;
import 'dart:math';
import 'package:animated_menu/animated_menu.dart';
import 'package:appinio_swiper/appinio_swiper.dart';
import 'package:billblaze/Home.dart';
import 'package:billblaze/models/layout_model.dart';
import 'package:billblaze/providers/box_provider.dart';
import 'package:bitsdojo_window/bitsdojo_window.dart';
import 'package:custom_border/border.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_quill/extensions.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:number_counting_animation/number_counting_animation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_context_menu/flutter_context_menu.dart';
import 'package:billblaze/components/flutter_balloon_slider.dart';
import 'package:billblaze/components/zoomable.dart' as zz;
import 'package:billblaze/components/tab_container/tab_controller.dart';
import 'package:billblaze/components/text_toolbar/list_item_model.dart';
import 'package:billblaze/components/text_toolbar/playable_toolbar_flutter.dart';
import 'package:billblaze/util/HexColorInputFormatter.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart'
    show ColorPicker, MaterialPicker;
import 'package:animated_custom_dropdown/custom_dropdown.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:billblaze/colors.dart';
import 'package:billblaze/components/printing.dart'
    if (dart.library.html) 'package:printing/printing.dart';
// import 'package:printing/printing.dart';
import 'package:billblaze/models/spread_sheet_lib/spread_sheet.dart';
import 'package:billblaze/models/spread_sheet_lib/sheet_list.dart';
import 'package:billblaze/models/spread_sheet_lib/text_editor_item.dart';
import 'package:billblaze/models/document_properties_model.dart';
import 'package:billblaze/util/numeric_input_filter.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_quill/flutter_quill.dart';
// show
//     QuillEditor,
//     QuillController,
//     Attribute,
//     Document,
//     QuillEditorConfigurations;
import 'package:flutter_quill/quill_delta.dart';
import 'package:flutter_tabler_icons/flutter_tabler_icons.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:iconsax_plus/iconsax_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:pie_menu/pie_menu.dart';
import 'dart:math' as math;

import 'package:uuid/uuid.dart';

import '../components/elevated_button.dart';

class PanelIndex {
  String id;
  String parentId = '';
  int panelIndex;
  PanelIndex({required this.id, required this.panelIndex, this.parentId = ''});

  PanelIndex copyWith({
    String? id,
    int? panelIndex,
  }) {
    return PanelIndex(
      id: id ?? this.id,
      panelIndex: panelIndex ?? this.panelIndex,
    );
  }

  @override
  String toString() => 'PanelIndex(id: $id, panelIndex: $panelIndex)';

  @override
  bool operator ==(covariant PanelIndex other) {
    if (identical(this, other)) return true;

    return other.id == id && other.panelIndex == panelIndex;
  }

  @override
  int get hashCode => id.hashCode ^ panelIndex.hashCode;
}

class SelectedIndex {
  // int pageIndex;
  String id;
  List<int> selectedIndexes;
  SelectedIndex({
    // required this.pageIndex,
    required this.id,
    required this.selectedIndexes,
  });
  SelectedIndex copyWith({
    String? id,
    List<int>? selectedIndexes,
  }) {
    return SelectedIndex(
      id: id ?? this.id,
      selectedIndexes: selectedIndexes ?? this.selectedIndexes,
    );
  }
}

class SheetListClipboard {
  List<SheetItem> data;
  Axis direction;
  SheetListClipboard({required this.data, this.direction = Axis.vertical});
}

final propertyCardIndexProvider = StateProvider<int>((ref) {
  return 0;
});

//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//
//
class LayoutDesigner3 extends ConsumerStatefulWidget {
  final int? id;
  final int? index;
  const LayoutDesigner3({
    Key? key,
    this.id = null,
    this.index = -1,
  }) : super(key: key);

  @override
  ConsumerState<LayoutDesigner3> createState() => _LayoutDesigner3State();
}

class _LayoutDesigner3State extends ConsumerState<LayoutDesigner3>
    with SingleTickerProviderStateMixin {
  double hDividerPosition = 0.5;
  double vDividerPosition = 0.55;
  double appbarHeight = 0.065;
  double wH1DividerPosition = 0.25;
  double wH2DividerPosition = 0.25;
  double wVDividerPosition = 0.5;
  double _cardPosition = 0;
  DateTime dateTimeNow = DateTime.now();
  int pageCount = 0;
  int currentPageIndex = 0;
  List<SelectedIndex> selectedIndex = [];
  PanelIndex panelIndex = PanelIndex(id: '', panelIndex: -1, parentId: '');
  SheetListClipboard sheetListClipboard = SheetListClipboard(data: []);
  PageController pageViewIndicatorController = PageController();
  PageController textStyleTabControler = PageController();
  ScrollController pdfScrollController = ScrollController();
  AppinioSwiperController propertyCardsController = AppinioSwiperController();
  PieMenuController opsAddPieController = PieMenuController();
  PieMenuController opsMovePieController = PieMenuController();
  PieMenuController opsCopyPieController = PieMenuController();
  PieMenuController opsFormatPieController = PieMenuController();
  List<SheetList> spreadSheetList = [];
  List<DocumentProperties> documentPropertiesList = [];
  double textFieldHeight = 40;
  double presuConstraintsMinW = 20;
  double pdfPreviewPaddingScaleFactor = 1;
  FocusNode marginAllFocus = FocusNode();
  FocusNode marginTopFocus = FocusNode();
  FocusNode marginBottomFocus = FocusNode();
  FocusNode marginLeftFocus = FocusNode();
  FocusNode marginRightFocus = FocusNode();
  FocusNode fontSizeFocus = FocusNode();
  FocusNode letterSpaceFocus = FocusNode();
  FocusNode wordSpaceFocus = FocusNode();
  FocusNode lineSpaceFocus = FocusNode();
  zz.TransformationController transformationcontroller =
      zz.TransformationController();
  late TabController tabcunt;
  List<String> fonts = [
    'Billabong',
    'AlexBrush',
    'Allura',
    'Arizonia',
    'ChunkFive',
    'GrandHotel',
    'GreatVibes',
    'Lobster',
    'OpenSans',
    'OstrichSans',
    'Oswald',
    'Pacifico',
    'Quicksand',
    'Roboto',
    'SEASRN',
    'Windsong',
  ];
  List<Color> paletteColors = [
    Colors.black,
    Colors.white,
    Color(int.parse('0xffEA2027')),
    Color(int.parse('0xff006266')),
    Color(int.parse('0xff1B1464')),
    Color(int.parse('0xff5758BB')),
    Color(int.parse('0xff6F1E51')),
    Color(int.parse('0xffB53471')),
    Color(int.parse('0xffEE5A24')),
    Color(int.parse('0xff009432')),
    Color(int.parse('0xff0652DD')),
    Color(int.parse('0xff9980FA')),
    Color(int.parse('0xff833471')),
    Color(int.parse('0xff112CBC4')),
    Color(int.parse('0xffFDA7DF')),
    Color(int.parse('0xffED4C67')),
    Color(int.parse('0xffF79F1F')),
    Color(int.parse('0xffA3CB38')),
    Color(int.parse('0xff1289A7')),
    Color(int.parse('0xffD980FA'))
  ];

  List<bool> isTapped = [false, true, false, false, false];
  List<GlobalKey> globalKeys = [];
  List<Uint8List> _images = [];
  late LayoutModel? lm;
  GlobalKey spreadSheetKey = GlobalKey();
  double get sWidth => MediaQuery.of(context).size.width;
  double get sHeight => MediaQuery.of(context).size.height;
  int key = 0;
  int keyIndex = 0;
  SystemMouseCursor _cursor = SystemMouseCursors.basic;
  Timer? _timer;
  TextEditingController layoutName = TextEditingController();
  late String initialLayoutName;
  bool nameExists = false;
  final FocusNode layoutNamefocusNode = FocusNode();
  double whichPropertyTabIsClicked = 1;
  Uint8List? cachedImageData;
  bool hasRenderedOnce = false;
  bool addToTheLeft = false;
  bool addToTheRight = false;
  //
  //
  //
  //
  @override
  void initState() {
    super.initState();
    _renderPagePreviewOnProperties().then((x) {
      Future.delayed(Durations.extralong2).then((x) {
        _renderPagePreviewOnProperties();
      });
    });
    key = widget.id ?? -1;
    keyIndex = widget.index ?? -1;
    // _timer = Timer.periodic(Duration(milliseconds: 100), (t) {
    //   setState(() {
    //     dateTimeNow = DateTime.now();
    //   });
    // });
    // animateToPage(currentPageIndex);
    var box = Boxes.getLayouts();
    if (key == -1) {
      print('create new layout');
      layoutName.text = Boxes.getLayoutName();
      initialLayoutName = layoutName.text;
      lm = LayoutModel(
          createdAt: DateTime.now(),
          modifiedAt: DateTime.now(),
          name: layoutName.text,
          docPropsList: [],
          spreadSheetList: [],
          id: const Uuid().v4());

      key = Random().nextInt(100000);
      keyIndex = box.length;
      box.put(key, lm!);
      print(key);
      lm!.save();
      Future.delayed(Duration.zero).then(
        (value) {
          _addPdfPage();
        },
      ).then(
        (value) {
          print(Boxes.getLayouts().get(key)?.docPropsList);
        },
      );
    } else {
      // _addPdfPage();
      print('reaches else in init');
      print(key);
      lm = box.get(key);
      print(box.get(key));
      print(lm?.docPropsList);
      spreadSheetList = boxToSpreadSheet(lm?.spreadSheetList);
      documentPropertiesList = boxToDocProp(lm?.docPropsList);
      layoutName.text = lm!.name;
      initialLayoutName = layoutName.text;
      print(documentPropertiesList.isEmpty);
      if (documentPropertiesList.isEmpty) {
        _addPdfPage();
      }
    }

    // _updatePdfPreview('');
    tabcunt = TabController(length: 2, vsync: this);
    globalKeys = List.generate(1000, (_) => GlobalKey());
  }

  @override
  void didChangeDependencies() {
    // TODO: implement didChangeDependencies
    super.didChangeDependencies();
    setState(() {
      var x = 80 / sHeight;
      wVDividerPosition = wVDividerPosition.clamp(x, 1);
      if (!ref.read(pgPropsEnableProvider)) {
        wVDividerPosition = 20 / sHeight;
      }
      if (!hasRenderedOnce) {
        // Capture the image the first time the widget is inserted into the tree
        _renderPagePreviewOnProperties();
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    pageViewIndicatorController.dispose();
    textStyleTabControler.dispose();
    propertyCardsController.dispose();
    pdfScrollController.dispose();
    transformationcontroller.dispose();
    super.dispose();
  }

  List<DocumentProperties> boxToDocProp(docproplist) {
    List<DocumentProperties> listbox = [];

    for (DocumentPropertiesBox doc in docproplist) {
      print('doc num: ${doc.pageNumberController}');
      listbox.add(doc.toDocumentProperties());
      setState(() {
        pageCount++;
      });
    }
    return listbox;
  }

  List<DocumentPropertiesBox> docPropToBox(docproplist) {
    List<DocumentPropertiesBox> listbox = [];
    for (DocumentProperties doc in docproplist) {
      listbox.add(doc.toDocPropBox());
    }
    return listbox;
  }

  List<SheetListBox> spreadSheetToBox(spreadSheetList) {
    List<SheetListBox> listbox = [];
    for (SheetList sheetlist in spreadSheetList) {
      SheetListBox sheetListBox = SheetListBox(
          sheetList: [],
          direction: sheetlist.direction == Axis.vertical ? true : false,
          id: sheetlist.id,
          mainAxisAlignment: getStringFromMainAxisAlignment(
              sheetlist.listDecoration.mainAxisAlignment),
          crossAxisAlignment: getStringFromCrossAxisAlignment(
              sheetlist.listDecoration.crossAxisAlignment),
          image: sheetlist.listDecoration.decoration.image == null
              ? null
              : (sheetlist.listDecoration.decoration.image?.image
                      as MemoryImage)
                  .bytes,
          imageFit: getStringFromBoxFit(
              sheetlist.listDecoration.decoration.image?.fit),
          padding: getPaddingFromEdgeInsets(sheetlist.listDecoration.padding),
          widthAdjustment: getPaddingFromEdgeInsets(
              sheetlist.listDecoration.widthAdjustment),
          parentId: sheetlist.parentId);
      for (var i = 0; i < sheetlist.length; i++) {
        if (sheetlist[i] is TextEditorItem) {
          sheetListBox.sheetList.add((sheetlist[i] as TextEditorItem)
              .toTEItemBox((sheetlist[i] as TextEditorItem)));
        } else if (sheetlist[i] is SheetList) {
          sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
        }
      }
      listbox.add(sheetListBox);
    }
    return listbox;
  }

  // TextEditorItemBox tEItemToteItemBox(TextEditorItem item) {
  //   print(
  //       'conversion text: ${item.textEditorController.document.toDelta().toJson()}');
  //   return TextEditorItemBox(
  //       textEditorController:
  //           item.textEditorController.document.toDelta().toJson(),
  //       id: item.id,
  //       parentId: item.parentId,
  //       linkedTextEditors: item.linkedTextEditors);
  // }

  SheetListBox sheetListtoBox(SheetList sheetlist) {
    SheetListBox sheetListBox = SheetListBox(
        sheetList: [],
        direction: sheetlist.direction == Axis.vertical ? true : false,
        size: [sheetlist.size.width, sheetlist.size.height],
        mainAxisAlignment: getStringFromMainAxisAlignment(
            sheetlist.listDecoration.mainAxisAlignment),
        crossAxisAlignment: getStringFromCrossAxisAlignment(
            sheetlist.listDecoration.crossAxisAlignment),
        image: sheetlist.listDecoration.decoration.image == null
            ? null
            : (sheetlist.listDecoration.decoration.image?.image as MemoryImage)
                .bytes,
        imageFit:
            getStringFromBoxFit(sheetlist.listDecoration.decoration.image?.fit),
        padding: getPaddingFromEdgeInsets(sheetlist.listDecoration.padding),
        widthAdjustment:
            getPaddingFromEdgeInsets(sheetlist.listDecoration.widthAdjustment),
        id: sheetlist.id,
        parentId: sheetlist.parentId);
    for (var i = 0; i < sheetlist.length; i++) {
      if (sheetlist[i] is TextEditorItem) {
        sheetListBox.sheetList.add((sheetlist[i] as TextEditorItem)
            .toTEItemBox((sheetlist[i] as TextEditorItem)));
      } else if (sheetlist[i] is SheetList) {
        sheetListBox.sheetList.add(sheetListtoBox(sheetlist[i] as SheetList));
      }
    }
    return sheetListBox;
  }

  List<SheetList> boxToSpreadSheet(spreadsheetlist) {
    List<SheetList> listbox = [];
    List<Map<String, List<dynamic>>> listOfIdsNControllers = [];
    for (SheetListBox e in spreadsheetlist) {
      SheetList sheetList =
          SheetList(id: e.id, parentId: e.parentId, sheetList: []);
      for (var item in e.sheetList) {
        if (item is TextEditorItemBox) {
          print('There is a TextEditorItemBox');
          print('TextEditor Id: ' + item.id);
          print(item.linkedTextEditors);
          TextEditorItem tEItem = _addTextField(
              shouldReturn: true,
              docString: item.textEditorController,
              id: item.id,
              parentId: item.parentId);
          tEItem = tEItem.copyWith(
              id: item.id,
              parentId: item.parentId,
              linkedTextEditors: item.linkedTextEditors);
          for (var i = 0; i < listOfIdsNControllers.length; i++) {
            print("THIS THE FOCUS NOW: " + listOfIdsNControllers[i].toString());
            if (listOfIdsNControllers[i].containsKey(tEItem.id)) {
              tEItem = tEItem.copyWith(
                  textEditorController: listOfIdsNControllers[i][tEItem.id]![0],
                  textEditorConfigurations: QuillEditorConfigurations(
                    customStyleBuilder: (attribute) {
                      // Handle letter spacing
                      if (attribute.key == 'letterSpacing') {
                        String? letterSpacing = attribute.value as String?;
                        return TextStyle(
                          letterSpacing: double.parse(letterSpacing ?? '0'),
                        );
                      }
                      // Handle word spacing (custom attribute example)
                      if (attribute.key == 'wordSpacing') {
                        String? wordSpacing = attribute.value as String?;
                        return TextStyle(
                          wordSpacing: double.parse(wordSpacing ?? '0'),
                        );
                      }
                      // Handle line height (custom attribute example)
                      if (attribute.key == 'lineHeight') {
                        String? lineHeight = attribute.value as String?;
                        return TextStyle(
                          height: double.parse(lineHeight ?? '0'),
                        );
                      }
                      // Return default TextStyle if attribute not handled
                      return const TextStyle();
                    },
                    disableClipboard: false,
                    onTapDown: tEItem.textEditorConfigurations.onTapDown,
                    builder: tEItem.textEditorConfigurations.builder,
                    controller: QuillController(
                      document: listOfIdsNControllers[i][tEItem.id]![1]
                          .controller
                          .document,
                      selection: listOfIdsNControllers[i][tEItem.id]![1]
                          .controller
                          .selection,
                      readOnly: false,
                      onSelectionChanged: (textSelection) {
                        setState(() {});
                      },
                      onSelectionCompleted: () {
                        setState(() {});
                      },
                      onDelete: (cursorPosition, forward) {
                        setState(() {});
                      },
                    ),
                  ));
            }
          }

          if (item.linkedTextEditors != null) {
            for (var i = 0; i < item.linkedTextEditors!.length; i++) {
              print(
                  "THIS other FOCUS: " + item.linkedTextEditors![i].toString());
              listOfIdsNControllers.add({
                item.linkedTextEditors![i]: [
                  tEItem.textEditorController,
                  tEItem.textEditorConfigurations
                ]
              });
            }
          }
          for (var i = 0; i < sheetList.sheetList.length; i++) {
            for (var v = 0; v < listOfIdsNControllers.length; v++) {
              if (listOfIdsNControllers[v]
                      .containsKey(sheetList.sheetList[i].id) &&
                  sheetList.sheetList[i] is TextEditorItem) {
                sheetList.sheetList[i] =
                    (sheetList.sheetList[i] as TextEditorItem).copyWith(
                  textEditorController: listOfIdsNControllers[v]
                      [sheetList.sheetList[i].id]![0],
                  textEditorConfigurations: QuillEditorConfigurations(
                    customStyleBuilder: (attribute) {
                      // Handle letter spacing
                      if (attribute.key == 'letterSpacing') {
                        String? letterSpacing = attribute.value as String?;
                        return TextStyle(
                          letterSpacing: double.parse(letterSpacing ?? '0'),
                        );
                      }
                      // Handle word spacing (custom attribute example)
                      if (attribute.key == 'wordSpacing') {
                        String? wordSpacing = attribute.value as String?;
                        return TextStyle(
                          wordSpacing: double.parse(wordSpacing ?? '0'),
                        );
                      }
                      // Handle line height (custom attribute example)
                      if (attribute.key == 'lineHeight') {
                        String? lineHeight = attribute.value as String?;
                        return TextStyle(
                          height: double.parse(lineHeight ?? '0'),
                        );
                      }
                      // Return default TextStyle if attribute not handled
                      return const TextStyle();
                    },
                    disableClipboard: false,
                    onTapDown: (sheetList.sheetList[i] as TextEditorItem)
                        .textEditorConfigurations
                        .onTapDown,
                    builder: (sheetList.sheetList[i] as TextEditorItem)
                        .textEditorConfigurations
                        .builder,
                    controller: QuillController(
                      document: listOfIdsNControllers[v]
                              [sheetList.sheetList[i].id]![1]
                          .controller
                          .document,
                      selection: listOfIdsNControllers[v]
                              [sheetList.sheetList[i].id]![1]
                          .controller
                          .selection,
                      readOnly: false,
                      onSelectionChanged: (textSelection) {
                        setState(() {});
                      },
                      onSelectionCompleted: () {
                        setState(() {});
                      },
                      onDelete: (cursorPosition, forward) {
                        setState(() {});
                      },
                    ),
                  ),
                );
              }
            }
          }

          sheetList.sheetList.add(tEItem);
        } else if (item is SheetListBox) {
          sheetList.sheetList.add(boxToSheetList(item, listOfIdsNControllers));
        }
      }

      listbox.add(sheetList);
    }

    // void link(SheetList sheetList) {
    //   for (var i = 0; i < sheetList.sheetList.length; i++) {
    //     if (sheetList.sheetList[i] is TextEditorItem &&
    //         ((sheetList.sheetList[i] as TextEditorItem).linkedTextEditors !=
    //                 null ||
    //             (sheetList.sheetList[i] as TextEditorItem).linkedTextEditors ==
    //                 [])) {
    //       TextEditorItem textEditorItem =
    //           sheetList.sheetList[i] as TextEditorItem;
    //       for (var j = 0; j < textEditorItem.linkedTextEditors!.length; j++) {
    //         TextEditorItem target = _sheetItemIterator(
    //                 textEditorItem.linkedTextEditors![j], sheetList)
    //             as TextEditorItem;
    //         target = target.copyWith(
    //             textEditorConfigurations: QuillEditorConfigurations(
    //           customStyleBuilder: (attribute) {
    //             // Handle letter spacing
    //             if (attribute.key == 'letterSpacing') {
    //               String? letterSpacing = attribute.value as String?;
    //               return TextStyle(
    //                 letterSpacing: double.parse(letterSpacing ?? '0'),
    //               );
    //             }
    //             // Handle word spacing (custom attribute example)
    //             if (attribute.key == 'wordSpacing') {
    //               String? wordSpacing = attribute.value as String?;
    //               return TextStyle(
    //                 wordSpacing: double.parse(wordSpacing ?? '0'),
    //               );
    //             }
    //             // Handle line height (custom attribute example)
    //             if (attribute.key == 'lineHeight') {
    //               String? lineHeight = attribute.value as String?;
    //               return TextStyle(
    //                 height: double.parse(lineHeight ?? '0'),
    //               );
    //             }
    //             // Return default TextStyle if attribute not handled
    //             return const TextStyle();
    //           },
    //           disableClipboard: false,
    //           onTapDown: target.textEditorConfigurations.onTapDown,
    //           builder: target.textEditorConfigurations.builder,
    //           controller: QuillController(
    //             document:
    //                 textEditorItem.textEditorConfigurations.controller.document,
    //             selection: textEditorItem
    //                 .textEditorConfigurations.controller.selection,
    //             readOnly: false,
    //             onSelectionChanged: (textSelection) {
    //               setState(() {});
    //             },
    //             onSelectionCompleted: () {
    //               setState(() {});
    //             },
    //             onDelete: (cursorPosition, forward) {
    //               setState(() {});
    //             },
    //           ),
    //         ));
    //       }
    //     } else if (sheetList.sheetList[i] is SheetList) {
    //       link(sheetList.sheetList[i] as SheetList);
    //     }
    //   }
    // }

    // for (var i = 0; i < listbox.length; i++) {
    //   link(listbox[i]);
    // }

    return listbox;
  }

  SheetList boxToSheetList(SheetListBox sheetListBox,
      List<Map<String, List<dynamic>>> listOfIdsNControllers) {
    SheetList sheetList = SheetList(
        direction: sheetListBox.direction ? Axis.vertical : Axis.horizontal,
        id: sheetListBox.id,
        parentId: sheetListBox.parentId,
        size: Size(sheetListBox.size[0], sheetListBox.size[1]),
        sheetList: []);
    for (var item in sheetListBox.sheetList) {
      if (item is TextEditorItemBox) {
        print('TextEditor Id: ' + item.id);
        print(item.linkedTextEditors);
        TextEditorItem tEItem = _addTextField(
            shouldReturn: true,
            docString: item.textEditorController,
            id: item.id,
            parentId: item.parentId);
        tEItem = tEItem.copyWith(
            id: item.id,
            parentId: item.parentId,
            linkedTextEditors: item.linkedTextEditors);
        for (var i = 0; i < listOfIdsNControllers.length; i++) {
          print("THIS THE FOCUS NOW: " + listOfIdsNControllers[i].toString());
          if (listOfIdsNControllers[i].containsKey(tEItem.id)) {
            tEItem = tEItem.copyWith(
                textEditorController: listOfIdsNControllers[i][tEItem.id]![0],
                textEditorConfigurations: QuillEditorConfigurations(
                  customStyleBuilder: (attribute) {
                    // Handle letter spacing
                    if (attribute.key == 'letterSpacing') {
                      String? letterSpacing = attribute.value as String?;
                      return TextStyle(
                        letterSpacing: double.parse(letterSpacing ?? '0'),
                      );
                    }
                    // Handle word spacing (custom attribute example)
                    if (attribute.key == 'wordSpacing') {
                      String? wordSpacing = attribute.value as String?;
                      return TextStyle(
                        wordSpacing: double.parse(wordSpacing ?? '0'),
                      );
                    }
                    // Handle line height (custom attribute example)
                    if (attribute.key == 'lineHeight') {
                      String? lineHeight = attribute.value as String?;
                      return TextStyle(
                        height: double.parse(lineHeight ?? '0'),
                      );
                    }
                    // Return default TextStyle if attribute not handled
                    return const TextStyle();
                  },
                  disableClipboard: false,
                  onTapDown: tEItem.textEditorConfigurations.onTapDown,
                  builder: tEItem.textEditorConfigurations.builder,
                  controller: QuillController(
                    document: listOfIdsNControllers[i][tEItem.id]![1]
                        .controller
                        .document,
                    selection: listOfIdsNControllers[i][tEItem.id]![1]
                        .controller
                        .selection,
                    readOnly: false,
                    onSelectionChanged: (textSelection) {
                      setState(() {});
                    },
                    onSelectionCompleted: () {
                      setState(() {});
                    },
                    onDelete: (cursorPosition, forward) {
                      setState(() {});
                    },
                  ),
                ));
          }
        }

        if (item.linkedTextEditors != null) {
          for (var i = 0; i < item.linkedTextEditors!.length; i++) {
            print("THIS other FOCUS: " + item.linkedTextEditors![i].toString());
            listOfIdsNControllers.add({
              item.linkedTextEditors![i]: [
                tEItem.textEditorController,
                tEItem.textEditorConfigurations
              ]
            });
          }
        }
        for (var i = 0; i < sheetList.sheetList.length; i++) {
          for (var v = 0; v < listOfIdsNControllers.length; v++) {
            if (listOfIdsNControllers[v]
                    .containsKey(sheetList.sheetList[i].id) &&
                sheetList.sheetList[i] is TextEditorItem) {
              sheetList.sheetList[i] =
                  (sheetList.sheetList[i] as TextEditorItem).copyWith(
                textEditorController: listOfIdsNControllers[v]
                    [sheetList.sheetList[i].id]![0],
                textEditorConfigurations: QuillEditorConfigurations(
                  customStyleBuilder: (attribute) {
                    // Handle letter spacing
                    if (attribute.key == 'letterSpacing') {
                      String? letterSpacing = attribute.value as String?;
                      return TextStyle(
                        letterSpacing: double.parse(letterSpacing ?? '0'),
                      );
                    }
                    // Handle word spacing (custom attribute example)
                    if (attribute.key == 'wordSpacing') {
                      String? wordSpacing = attribute.value as String?;
                      return TextStyle(
                        wordSpacing: double.parse(wordSpacing ?? '0'),
                      );
                    }
                    // Handle line height (custom attribute example)
                    if (attribute.key == 'lineHeight') {
                      String? lineHeight = attribute.value as String?;
                      return TextStyle(
                        height: double.parse(lineHeight ?? '0'),
                      );
                    }
                    // Return default TextStyle if attribute not handled
                    return const TextStyle();
                  },
                  disableClipboard: false,
                  onTapDown: (sheetList.sheetList[i] as TextEditorItem)
                      .textEditorConfigurations
                      .onTapDown,
                  builder: (sheetList.sheetList[i] as TextEditorItem)
                      .textEditorConfigurations
                      .builder,
                  controller: QuillController(
                    document: listOfIdsNControllers[v]
                            [sheetList.sheetList[i].id]![1]
                        .controller
                        .document,
                    selection: listOfIdsNControllers[v]
                            [sheetList.sheetList[i].id]![1]
                        .controller
                        .selection,
                    readOnly: false,
                    onSelectionChanged: (textSelection) {
                      setState(() {});
                    },
                    onSelectionCompleted: () {
                      setState(() {});
                    },
                    onDelete: (cursorPosition, forward) {
                      setState(() {});
                    },
                  ),
                ),
              );
            }
          }
        }

        sheetList.sheetList.add(tEItem);
      } else if (item is SheetListBox) {
        sheetList.sheetList.add(boxToSheetList(item, listOfIdsNControllers));
      }
    }
    return sheetList;
  }

  TextEditorItem _addTextField({
    String id = '',
    String parentId = '',
    bool shouldReturn = false,
    List<Map<String, dynamic>>?
        docString, // Use List<Map<String, dynamic>> directly
    List<String> linkedTextFields = const [],
  }) {
    Delta delta;
    print('DocString: $docString');

    try {
      if (docString != null && docString.isNotEmpty) {
        // Convert List<Map<String, dynamic>> to Delta
        delta = Delta.fromJson(docString);
        // Check if delta is empty or not
        if (delta.isEmpty) {
          delta = Delta(); // Fallback to an empty Delta
        }
      } else {
        delta =
            Delta(); // Default to an empty Delta if docString is null or empty
      }
      print('Decoded Delta: $delta');
    } catch (e) {
      // Handle error if any occurs
      print('Error converting to Delta: $e');
      delta = Delta(); // Default to an empty Delta in case of error
    }

    // Initialize QuillController with the appropriate Document
    QuillController textController;
    if (delta.isEmpty) {
      textController = QuillController(
        document: Document(), // Use an empty document if delta is empty
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
        },
        onSelectionCompleted: () {
          setState(() {});
        },
      );
    } else {
      textController = QuillController(
        document: Document.fromDelta(delta), // Use delta to create the document
        selection: const TextSelection.collapsed(offset: 0),
        onSelectionChanged: (textSelection) {
          setState(() {});
        },
        onDelete: (cursorPosition, forward) {
          setState(() {});
        },
        onSelectionCompleted: () {
          setState(() {});
        },
      );
    }

    String newId = id.isEmpty ? const Uuid().v4() : id;
    var textEditorConfigurations = QuillEditorConfigurations(
      enableScribble: true,
      enableSelectionToolbar: true,
      // textSelectionControls: NoMenuTextSelectionControls(),
      contextMenuBuilder: (context, rawEditorState) {
        return Container();
      },
      // padding: EdgeInsets.all(2),
      controller: textController,
      placeholder: 'Enter Text',
      // maxHeight: 50,
      customStyleBuilder: (attribute) {
        // Handle custom styles
        if (attribute.key == 'letterSpacing') {
          String? letterSpacing = attribute.value as String?;
          return TextStyle(letterSpacing: double.parse(letterSpacing ?? '0'));
        }

        if (attribute.key == 'wordSpacing') {
          String? wordSpacing = attribute.value as String?;
          return TextStyle(wordSpacing: double.parse(wordSpacing ?? '0'));
        }

        if (attribute.key == 'lineHeight') {
          String? lineHeight = attribute.value as String?;
          return TextStyle(height: double.parse(lineHeight ?? '0'));
        }

        return const TextStyle(); // Default style
      },
      builder: (context, rawEditor) {
        return Stack(
          children: [
            Transform.scale(
              scale: 1,
              alignment: Alignment.topLeft,
              child: Container(
                padding: const EdgeInsets.only(left: 8),
                decoration: BoxDecoration(
                    color: panelIndex.id == newId
                        ? const ui.Color(0xFFE2E2E2)
                        : const Color(0xffe0e0e0),
                    borderRadius: BorderRadius.circular(6)),
                child: rawEditor,
              ),
            ),
          ],
        );
      },
      onTapDown: (details, p1) {
        return textFieldTapDown(details, newId);
      },
    );

    if (!shouldReturn) {
      setState(() {
        spreadSheetList[currentPageIndex].add(TextEditorItem(
            textEditorController: textController,
            textEditorConfigurations: textEditorConfigurations,
            id: newId,
            parentId: spreadSheetList[currentPageIndex].id,
            linkedTextEditors: linkedTextFields));

        var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
        lm[keyIndex].spreadSheetList[currentPageIndex].sheetList.add(
            TextEditorItemBox(
                textEditorController:
                    textController.document.toDelta().toJson(),
                id: newId,
                parentId: spreadSheetList[currentPageIndex].id,
                linkedTextEditors: linkedTextFields));
        lm[keyIndex].save();
      });
    }

    return TextEditorItem(
      textEditorController: textController,
      textEditorConfigurations: textEditorConfigurations,
      id: newId,
      parentId:
          parentId.isNotEmpty ? parentId : spreadSheetList[currentPageIndex].id,
      linkedTextEditors: linkedTextFields, // Use parentId if not empty
    );
  }

  SheetList _sheetListIterator(String id, SheetList sheetList) {
    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        if (_listIterator(id, sheetList[i] as SheetList) != null) {
          return _listIterator(id, sheetList[i] as SheetList)!;
        }
      }
    }
    throw Exception('SheetList with id $id not found');
  }

  SheetList? _listIterator(String id, SheetList sheetList) {
    if (sheetList.id == id) {
      return sheetList;
    }
    for (var i = 0; i < sheetList.length; i++) {
      if (sheetList[i].id == id) {
        return sheetList[i] as SheetList;
      }
      if (sheetList[i] is SheetList) {
        try {
          return _sheetListIterator(id, sheetList[i] as SheetList);
        } catch (e) {
          // Continue searching in the remaining items
        }
      }
    }
    return null;
  }

  SheetItem _sheetItemIterator(String id, SheetList sheetList) {
    print('Length: ${sheetList.length}');
    print('id for search: $id');

    for (var i = 0; i < sheetList.length; i++) {
      print('item id in iterator: ${sheetList[i].id}');
      print('item in iterator: ${sheetList[i]}');

      if (sheetList[i] is TextEditorItem && sheetList[i].id == id) {
        print('Found TextEditorItem with matching id: ${sheetList[i].id}');
        return sheetList[i];
      }

      if (sheetList[i] is SheetList) {
        print('Descending into nested SheetList with id: ${sheetList[i].id}');
        try {
          var itemItered = _itemIterator(id, sheetList[i] as SheetList);
          if (itemItered != null) {
            return itemItered;
          }
        } catch (e) {
          print('Exception caught in nested SheetList: $e');
          continue; // Continue the loop to check the next item
        }
      }

      print('ItemIterationParent: $i');
    }

    // Throw if the item was not found after iterating through the entire list
    throw Exception('SheetItem with id $id not found');
  }

  SheetItem? _itemIterator(String id, SheetList sheetList) {
    print('id for search in sublist: $id');

    for (var i = 0; i < sheetList.length; i++) {
      print('item id in sublist iterator: ${sheetList[i].id}');
      print('item in sublist iterator: ${sheetList[i]}');

      if (sheetList[i] is TextEditorItem && sheetList[i].id == id) {
        print(
            'Found TextEditorItem in sublist with matching id: ${sheetList[i].id}');
        return sheetList[i];
      }

      if (sheetList[i] is SheetList) {
        print(
            'Descending further into nested SheetList with id: ${sheetList[i].id}');
        try {
          var itemItered = _sheetItemIterator(id, sheetList[i] as SheetList);
          if (itemItered != null) {
            return itemItered;
          }
        } catch (e) {
          print('Exception caught in deeper nested SheetList: $e');
          continue; // Continue the loop to check the next item
        }
      }

      print('ItemIterationChild: $i');
    }

    return null; // This should return null if nothing is found, letting the parent function decide what to do
  }

  void _updatehDividerPosition(double newPosition) {
    setState(() {
      hDividerPosition = newPosition;
    });
  }

  void _updatevDividerPosition(double newPosition) {
    setState(() {
      vDividerPosition = newPosition;
    });
  }

  void _selectTextField(int index) {
    setState(() {
      // selectedIndex[currentPageIndex] = index;/
    });
  }

  void _deselectTextField() {
    // setState(() {
    //   if (selectedIndex != []) {
    //     selectedIndex[currentPageIndex] = 9999999;
    //   }
    // });
  }

  void _confirmDeleteLayout({bool deletePage = false}) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Delete'),
        content:
            const Text('This will delete the current layout. Are you sure?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _deselectTextField();

                if (deletePage) {
                  if (pageCount == 1) {
                    spreadSheetList[currentPageIndex].sheetList = [];
                    panelIndex = PanelIndex(
                        id: panelIndex.id,
                        panelIndex: -1,
                        parentId: panelIndex.parentId);
                    return;
                  }

                  // Decrement page count and remove the current page
                  pageCount--;
                  documentPropertiesList.removeAt(currentPageIndex);
                  spreadSheetList.removeAt(currentPageIndex);

                  // Update currentPageIndex safely
                  currentPageIndex =
                      currentPageIndex > 0 ? currentPageIndex - 1 : 0;

                  // Update panelIndex for the new current page
                  panelIndex = PanelIndex(
                    id: spreadSheetList[currentPageIndex].id,
                    panelIndex: -1,
                    parentId: spreadSheetList[currentPageIndex].parentId,
                  );

                  // Reassign pageNumberController for the new sequence
                  for (int i = 0; i < documentPropertiesList.length; i++) {
                    documentPropertiesList[i].pageNumberController.text =
                        (i + 1).toString();
                  }

                  return;
                }

                // Clear the sheet list for the current page
                spreadSheetList[currentPageIndex].sheetList = [];
                panelIndex = PanelIndex(
                    id: panelIndex.id,
                    panelIndex: -1,
                    parentId: panelIndex.parentId);
              });

              Navigator.of(context).pop();
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );
  }

  void _duplicateTextField() {
    setState(() {
      var itemField = _addTextField(shouldReturn: true);
      var controller = QuillController(
        document: (spreadSheetList[currentPageIndex][panelIndex.panelIndex]
                as TextEditorItem)
            .textEditorController
            .document,
        selection: (spreadSheetList[currentPageIndex][panelIndex.panelIndex]
                as TextEditorItem)
            .textEditorController
            .selection,
        onDelete: itemField.textEditorController.onDelete,
        onReplaceText: itemField.textEditorController.onReplaceText,
        onSelectionChanged: itemField.textEditorController.onSelectionChanged,
        onSelectionCompleted:
            itemField.textEditorController.onSelectionCompleted,
      );
      var editorConfig = QuillEditorConfigurations(
        controller: controller,
        builder: itemField.textEditorConfigurations.builder,
        customStyles: itemField.textEditorConfigurations.customStyles,
        onTapDown: itemField.textEditorConfigurations.onTapDown,
        placeholder: itemField.textEditorConfigurations.placeholder,
      );
      if (panelIndex.panelIndex != -1) {
        spreadSheetList[currentPageIndex].insert(
            panelIndex.panelIndex + 1,
            TextEditorItem(
              id: itemField.id,
              parentId: itemField.parentId,
              focusNode: itemField.focusNode,
              scrollController: itemField.scrollController,
              textEditorConfigurations: editorConfig,
              textEditorController: controller,
            ));
      }
    });
  }

  void _removeTextField() {
    setState(() {
      spreadSheetList[currentPageIndex].removeAt(panelIndex.panelIndex);
      panelIndex = PanelIndex(id: '', panelIndex: -1, parentId: '');
    });
  }

  pw.Widget convertDeltaToPdfWidget(Delta delta) {
    print('________convertDELTA STARTED LD_________');
    PdfColor pdfColorFromHex(String hexColor) {
      final buffer = StringBuffer();
      if (hexColor.length == 6 || hexColor.length == 7) buffer.write('ff');
      buffer.write(hexColor.replaceFirst('#', ''));
      final color = int.parse(buffer.toString(), radix: 16);
      return PdfColor.fromInt(color);
    }

    pw.TextAlign? getAlign() {
      if (delta.toList()[0].attributes?.containsKey('align') ?? true) {
        switch (delta.toList()[0].attributes?['align']) {
          case 'center':
            return pw.TextAlign.center;
          // break;
          case 'right':
            return pw.TextAlign.right;
          // break;
          case 'justify':
            return pw.TextAlign.justify;
          // break;
          case 'left':
            return pw.TextAlign.left;
        }
      }
      print('returning lol');
      return null;
    }

    final List<pw.Widget> textWidgets = [];
    // pw.Widget checkbox = pw.Container();
    pw.TextAlign? textAlign = getAlign();
    pw.TextDirection textDirection = pw.TextDirection.ltr;
    // pw.Widget lastWidget = pw.Container();
    for (var op in delta.toList()) {
      if (op.value is String) {
        var text = op.value.toString();
        Map<String, dynamic>? attributes = op.attributes;
        // pw.EdgeInsets? padding;
        pw.TextStyle textStyle = const pw.TextStyle();
        PdfColor? backgroundColor;
        if (attributes != null) {
          if (attributes.containsKey('bold')) {
            print('bold');
            textStyle = textStyle.copyWith(fontWeight: pw.FontWeight.bold);
          }
          if (attributes.containsKey('italic')) {
            textStyle = textStyle.copyWith(fontStyle: pw.FontStyle.italic);
          }
          if (attributes.containsKey('underline')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.underline);
          }
          if (attributes.containsKey('strike')) {
            textStyle =
                textStyle.copyWith(decoration: pw.TextDecoration.lineThrough);
          }

          if (attributes.containsKey('color')) {
            textStyle =
                textStyle.copyWith(color: pdfColorFromHex(attributes['color']));
          }
          if (attributes.containsKey('background')) {
            backgroundColor = pdfColorFromHex(attributes['background']);
            textStyle = textStyle.copyWith(
                background: pw.BoxDecoration(color: backgroundColor));
          }
          if (attributes.containsKey('size')) {
            double fontSize = double.parse(attributes['size'].toString());
            textStyle = textStyle.copyWith(fontSize: fontSize);
          }
          if (attributes.containsKey('header')) {
            int level = attributes['header'];
            switch (level) {
              case 1:
                textStyle = textStyle.copyWith(
                    fontSize: 24, fontWeight: pw.FontWeight.bold);
                break;
              case 2:
                textStyle = textStyle.copyWith(
                    fontSize: 20, fontWeight: pw.FontWeight.bold);
                break;
              case 3:
                textStyle = textStyle.copyWith(
                    fontSize: 18, fontWeight: pw.FontWeight.bold);
                break;
              default:
                textStyle = textStyle.copyWith(
                    fontSize: 16, fontWeight: pw.FontWeight.bold);
            }
          }
          if (attributes.containsKey('indent')) {}

          if (attributes.containsKey('direction')) {
            print('direction yes');
            print(attributes['direction']);
            if (attributes['direction'] == 'rtl') {
              print('direction yes');
              textDirection = pw.TextDirection.rtl;
            } else {
              textDirection = pw.TextDirection.ltr;
            }
          }

          if (attributes.containsKey('link')) {
            continue;
          }
        }
        int currentIndex = delta.toList().indexOf(op);
        Operation? newOP;
        for (int j = currentIndex + 1; j < delta.toList().length; j++) {
          var nextOp = delta.toList()[j];
          if (nextOp.value is String &&
              (nextOp.value as String).startsWith('\n')) {
            newOP = nextOp;
            break;
          }
        }

        if (newOP != null &&
            (newOP.attributes?.containsKey('align') ?? false)) {
          switch (newOP.attributes?['align']) {
            case 'center':
              textAlign = pw.TextAlign.center;
              break;
            case 'right':
              textAlign = pw.TextAlign.right;
              break;
            case 'justify':
              textAlign = pw.TextAlign.justify;
              break;
            default:
              textAlign = pw.TextAlign.left;
          }
        } else if (newOP == null) {
          textAlign = pw.TextAlign.left;
        }
        // Check if text starts with '\n'
        bool startsWithNewLine = text.startsWith('\n');
        //
        if (delta.toList().indexOf(op) == 0) {
          startsWithNewLine = true;
        }
        if (startsWithNewLine) {
          print(
              '$startsWithNewLine texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          textWidgets.add(pw.Container(
              width: double.infinity,
              alignment: textAlign == pw.TextAlign.left
                  ? pw.Alignment.topLeft
                  : textAlign == pw.TextAlign.right
                      ? pw.Alignment.topRight
                      : pw.Alignment.center,
              child: pw.RichText(
                text: pw.TextSpan(children: [
                  pw.TextSpan(
                    text: text.substring(0,
                        text[text.length - 1] == '\n' ? text.length - 1 : null),
                    style: textStyle,
                  )
                ]),
                textAlign: textAlign,
                textDirection: textDirection,
              )));
        } else {
          print(
              'texalign: $textAlign. ${delta.toList().indexOf(op)}:${text.toString()}');
          (((textWidgets[textWidgets.length - 1] as pw.Container).child
                      as pw.RichText)
                  .text as pw.TextSpan)
              .children
              ?.add(pw.TextSpan(
                  text: text.substring(0,
                      text[text.length - 1] == '\n' ? text.length - 1 : null),
                  style: textStyle));
        }
      }
    }

    print('________END convertDELTA LD_________');
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start, // Adjust as necessary
      children: textWidgets,
    );
  }

// genWidget
  Widget _generateWid(sWidth, sHeight) {
    var width = (sWidth * (1 - vDividerPosition)) - 16;
    var doc = documentPropertiesList;
    var sheetList = spreadSheetList;
    return SingleChildScrollView(
      controller: pdfScrollController,
      child: Column(
        children: [
          for (int i = 0; i < pageCount; i++)
            Padding(
              padding:
                  const EdgeInsets.symmetric(vertical: 30.0, horizontal: 10),
              child: RepaintBoundary(
                key: globalKeys[i],
                child: Container(
                  width: doc[i].pageFormatController == PdfPageFormat.a4
                      ? 1 * 793.7007874
                      : doc[i].pageFormatController == PdfPageFormat.a3
                          ? 0.72 * 1122.519685
                          : doc[i].pageFormatController == PdfPageFormat.a5
                              ? 1 * 559.37007874
                              : doc[i].pageFormatController == PdfPageFormat.a6
                                  ? 1 * 396.8503937
                                  : doc[i].pageFormatController ==
                                          PdfPageFormat.letter
                                      ? 1 * 816
                                      : doc[i].pageFormatController ==
                                              PdfPageFormat.legal
                                          ? 1 * 816
                                          : 2480 / 2,
                  height: doc[i].pageFormatController == PdfPageFormat.a4
                      ? 1 * 1122.519685
                      : doc[i].pageFormatController == PdfPageFormat.a3
                          ? 0.72 * 1587.4015748
                          : doc[i].pageFormatController == PdfPageFormat.a5
                              ? 1 * 793.7007874
                              : doc[i].pageFormatController == PdfPageFormat.a6
                                  ? 1 * 559.37007874
                                  : doc[i].pageFormatController ==
                                          PdfPageFormat.letter
                                      ? 1 * 1056
                                      : doc[i].pageFormatController ==
                                              PdfPageFormat.legal
                                          ? 1 * 1344
                                          : 3508 / 2,
                  decoration:
                      const BoxDecoration(color: Colors.white, boxShadow: [
                    // BoxShadow(
                    //   blurRadius: 5,
                  ]),
                  padding: EdgeInsets.only(
                    top: double.parse(doc[i].marginTopController.text),
                    bottom: double.parse(doc[i].marginBottomController.text),
                    left: double.parse(doc[i].marginLeftController.text),
                    right: double.parse(doc[i].marginRightController.text),
                  ),
                  child: _buildSheetListWidget(
                      sheetList[i], sWidth * (1 - vDividerPosition)),
                ),
              ),
            )
        ],
      ),
    );
    //   itemCount: pageCount,
    //   itemBuilder: (context, i) {
    //   },
    // );
  }

  Widget _generateWidWin(
    sWidth,
    sHeight,
  ) {
    var width = (sWidth * (wH1DividerPosition - 0.04));
    var doc = documentPropertiesList;
    var sheetList = spreadSheetList;
    return SingleChildScrollView(
      controller: pdfScrollController,
      child: Column(
        children: [
          for (int i = 0; i < pageCount; i++)
            Padding(
              padding:
                  const EdgeInsets.symmetric(vertical: 30.0, horizontal: 10),
              child: GestureDetector(
                onTap: () {
                  setState(() {
                    currentPageIndex = i;
                    _renderPagePreviewOnProperties();
                  });
                },
                child: Container(
                  decoration: BoxDecoration(
                    border: currentPageIndex == i
                        ? Border.all(
                            color: defaultPalette.extras[0].withOpacity(0.5),
                            strokeAlign: BorderSide.strokeAlignOutside,
                            width: 6)
                        : null,
                  ),
                  child: RepaintBoundary(
                    key: globalKeys[i],
                    child: Container(
                      width: _getPageWidth(doc[i].pageFormatController,
                          doc[i].orientationController),
                      height: _getPageHeight(doc[i].pageFormatController,
                          doc[i].orientationController),
                      decoration: const BoxDecoration(
                          //
                          color: Colors.white,
                          boxShadow: [
                            // BoxShadow(
                            //   blurRadius: 5,
                          ]),
                      padding: EdgeInsets.only(
                        top: double.parse(doc[i].marginTopController.text),
                        bottom:
                            double.parse(doc[i].marginBottomController.text),
                        left: double.parse(doc[i].marginLeftController.text),
                        right: double.parse(doc[i].marginRightController.text),
                      ),
                      child: _buildSheetListWidget(
                        sheetList[i],
                        sWidth * (wH1DividerPosition),
                      ),
                    ),
                  ),
                ),
              ),
            )
        ],
      ),
    );
    //   itemCount: pageCount,
    //   itemBuilder: (context, i) {
    //   },
    // );
  }

  bool _getIsToggled(Map<String, Attribute> attrs, Attribute attribute) {
    if (attribute.key == Attribute.list.key ||
        attribute.key == Attribute.header.key ||
        attribute.key == Attribute.script.key ||
        attribute.key == Attribute.align.key) {
      final currentAttribute = attrs[attribute.key];
      if (currentAttribute == null) {
        // print('returning false');
        return false;
      }
      // print('returning ${currentAttribute.value == attribute.value}');
      return currentAttribute.value == attribute.value;
    }
    // print('returning ${attrs.containsKey(attribute.key)}');
    return attrs.containsKey(attribute.key);
  }

  Widget _buildSheetListWidget(SheetList sheetList, double width,
      {double? docWidth = null, double? docHeight = null}) {
    return IntrinsicHeight(
      child: sheetList.direction == Axis.vertical
          //For Columns in the pdf side of things
          ? IntrinsicWidth(
              child: Flex(
                direction: sheetList.direction,
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: List.generate(sheetList.sheetList.length, (index) {
                  final item = sheetList.sheetList[index];

                  if (item is TextEditorItem) {
                    // print('in buildSheetListWidget item is: $item');
                    Alignment containerAlignment = Alignment.topLeft;

                    // Get alignment based on current attributes
                    final currentAttributes = item.textEditorController
                        .getSelectionStyle()
                        .attributes;

                    // Determine alignment from `attributes`
                    if (_getIsToggled(
                        currentAttributes, Attribute.centerAlignment)) {
                      containerAlignment = Alignment.center;
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.rightAlignment)) {
                      containerAlignment = Alignment.topRight;
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.justifyAlignment)) {
                      containerAlignment =
                          Alignment.topLeft; // Adjust if you have other logic
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.leftAlignment)) {
                      containerAlignment = Alignment.topLeft;
                    }
                    // print('in buildSheetListWidget item is: $item');
                    return IgnorePointer(
                      key: ValueKey(item),
                      child: Container(
                        // width: docWidth,
                        alignment: containerAlignment,
                        // alignment: Alignment.center,
                        // decoration: BoxDecoration(
                        //   image: DecorationImage(
                        //     image: NetworkImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStND_j06Kvfw2Y-eBSOlOC060f8DIL5-gs8w&s',),fit: BoxFit.fitWidth)
                        //   ,
                        // ),

                        child: IntrinsicWidth(
                          child: QuillEditor(
                            key: ValueKey(item.id),
                            configurations: QuillEditorConfigurations(
                              scrollable: false,
                              showCursor: false,
                              enableInteractiveSelection: false,
                              enableSelectionToolbar: false,
                              requestKeyboardFocusOnCheckListChanged: false,
                              customStyleBuilder: (attribute) {
                                // Handle letter spacing
                                if (attribute.key == 'letterSpacing') {
                                  String? letterSpacing =
                                      attribute.value as String?;
                                  return TextStyle(
                                    letterSpacing:
                                        double.parse(letterSpacing ?? '0'),
                                  );
                                }
                                // Handle word spacing (custom attribute example)
                                if (attribute.key == 'wordSpacing') {
                                  String? wordSpacing =
                                      attribute.value as String?;
                                  return TextStyle(
                                    wordSpacing:
                                        double.parse(wordSpacing ?? '0'),
                                  );
                                }
                                // Handle line height (custom attribute example)
                                if (attribute.key == 'lineHeight') {
                                  String? lineHeight =
                                      attribute.value as String?;
                                  return TextStyle(
                                    height: double.parse(lineHeight ?? '0'),
                                  );
                                }
                                // Return default TextStyle if attribute not handled
                                return const TextStyle();
                              },
                              disableClipboard: true,
                              controller: QuillController(
                                document: item.textEditorController.document,
                                selection: item.textEditorController.selection,
                                readOnly: true,
                                onSelectionChanged: (textSelection) {
                                  setState(() {});
                                },
                                onReplaceText: (index, len, data) {
                                  setState(() {});
                                  return false;
                                },
                                onSelectionCompleted: () {
                                  setState(() {});
                                },
                                onDelete: (cursorPosition, forward) {
                                  setState(() {});
                                },
                              ),
                            ),
                            focusNode: FocusNode(),
                            scrollController: ScrollController(),
                          ),
                        ),
                      ),
                    );
                  } else if (item is SheetList) {
                    // print('in buildSheetListWidget item is: $item');
                    return _buildSheetListWidget(item, width);
                  }
                  return const SizedBox();
                }),
              ),
            )
          //For Rows in the pdf side of things
          : SizedBox(
              width: docWidth,
              child: Flex(
                direction: sheetList.direction,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: List.generate(sheetList.sheetList.length, (index) {
                  final item = sheetList.sheetList[index];

                  if (item is TextEditorItem) {
                    // print('in buildSheetListWidget item is: $item');
                    Alignment containerAlignment = Alignment.topLeft;

                    // Get alignment based on current attributes
                    final currentAttributes = item.textEditorController
                        .getSelectionStyle()
                        .attributes;

                    // Determine alignment from `attributes`
                    if (_getIsToggled(
                        currentAttributes, Attribute.centerAlignment)) {
                      containerAlignment = Alignment.center;
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.rightAlignment)) {
                      containerAlignment = Alignment.topRight;
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.justifyAlignment)) {
                      containerAlignment =
                          Alignment.topLeft; // Adjust if you have other logic
                    } else if (_getIsToggled(
                        currentAttributes, Attribute.leftAlignment)) {
                      containerAlignment = Alignment.topLeft;
                    }
                    // print('in buildSheetListWidget item is: $item');
                    return IgnorePointer(
                      key: ValueKey(item),
                      child: CustomBorder(
                        gradientBuilder: (progress) => LinearGradient(
                          colors: const [
                            Colors.green,
                            Colors.purple,
                            Colors.blue
                          ],
                          transform: GradientRotation(progress * 6),
                        ),
                        // animateBorder: true,
                        // animateDuration: Durations.short1,
                        // color: Colors.green,
                        // size: const Size(100, 100),
                        // radius: Radius.circular(50),
                        // dashPattern: [5.6,1],
                        // dashRadius: Radius.circular(2),
                        strokeCap: StrokeCap.round,
                        // style: PaintingStyle.stroke,
                        // pathStrategy: PathStrategy.aroundLine,
                        size: Size(100, 100),
                        dashPattern: [10, 15],
                        // dashRadius: Radius.circular(20),
                        // pathStrategy: PathStrategy.horizontalLine, // or PathStrategy.horizontalLine
                        strokeWidth: 3,

                        child: Container(
                          width: docWidth,
                          alignment: containerAlignment,
                          // alignment: Alignment.center,
                          // decoration: BoxDecoration(
                          //   image: DecorationImage(
                          //     image: NetworkImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStND_j06Kvfw2Y-eBSOlOC060f8DIL5-gs8w&s',),fit: BoxFit.fitWidth)
                          //   ,
                          //  ),

                          child: Padding(
                            padding: EdgeInsets.only(right: 20),
                            child: IntrinsicWidth(
                              child: QuillEditor(
                                key: ValueKey(item.id),
                                configurations: QuillEditorConfigurations(
                                  scrollable: false,
                                  showCursor: false,
                                  enableInteractiveSelection: false,
                                  enableSelectionToolbar: false,
                                  requestKeyboardFocusOnCheckListChanged: false,
                                  customStyleBuilder: (attribute) {
                                    // Handle letter spacing
                                    if (attribute.key == 'letterSpacing') {
                                      String? letterSpacing =
                                          attribute.value as String?;
                                      return TextStyle(
                                        letterSpacing:
                                            double.parse(letterSpacing ?? '0'),
                                      );
                                    }
                                    // Handle word spacing (custom attribute example)
                                    if (attribute.key == 'wordSpacing') {
                                      String? wordSpacing =
                                          attribute.value as String?;
                                      return TextStyle(
                                        wordSpacing:
                                            double.parse(wordSpacing ?? '0'),
                                      );
                                    }
                                    // Handle line height (custom attribute example)
                                    if (attribute.key == 'lineHeight') {
                                      String? lineHeight =
                                          attribute.value as String?;
                                      return TextStyle(
                                        height: double.parse(lineHeight ?? '0'),
                                      );
                                    }
                                    // Return default TextStyle if attribute not handled
                                    return const TextStyle();
                                  },
                                  disableClipboard: true,
                                  controller: QuillController(
                                    document:
                                        item.textEditorController.document,
                                    selection:
                                        item.textEditorController.selection,
                                    readOnly: true,
                                    onSelectionChanged: (textSelection) {
                                      setState(() {});
                                    },
                                    onReplaceText: (index, len, data) {
                                      setState(() {});
                                      return false;
                                    },
                                    onSelectionCompleted: () {
                                      setState(() {});
                                    },
                                    onDelete: (cursorPosition, forward) {
                                      setState(() {});
                                    },
                                  ),
                                ),
                                focusNode: FocusNode(),
                                scrollController: ScrollController(),
                              ),
                            ),
                          ),
                        ),
                      ),
                    );
                  } else if (item is SheetList) {
                    // print('in buildSheetListWidget item is: $item');
                    return _buildSheetListWidget(item, width);
                  }
                  return const SizedBox();
                }),
              ),
            ),
    );
  }

  double _getPageWidth(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      case PdfPageFormat.a4:
        width = 793.7007874;
        height = 1122.519685;
        break;
      case PdfPageFormat.a3:
        width = 1122.519685;
        height = 1587.4015748;
        break;
      case PdfPageFormat.a5:
        width = 559.37007874;
        height = 793.7007874;
        break;
      case PdfPageFormat.a6:
        width = 396.8503937;
        height = 559.37007874;
        break;
      case PdfPageFormat.letter:
        width = 816;
        height = 1056;
        break;
      case PdfPageFormat.legal:
        width = 816;
        height = 1344;
        break;
      default:
        width = 1240; // 2480 / 2
        height = 1754; // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? height : width;
  }

  double _getPageHeight(
      PdfPageFormat format, pw.PageOrientation pageOrientation) {
    double width;
    double height;

    switch (format) {
      case PdfPageFormat.a4:
        width = 793.7007874;
        height = 1122.519685;
        break;
      case PdfPageFormat.a3:
        width = 1122.519685;
        height = 1587.4015748;
        break;
      case PdfPageFormat.a5:
        width = 559.37007874;
        height = 793.7007874;
        break;
      case PdfPageFormat.a6:
        width = 396.8503937;
        height = 559.37007874;
        break;
      case PdfPageFormat.letter:
        width = 816;
        height = 1056;
        break;
      case PdfPageFormat.legal:
        width = 816;
        height = 1344;
        break;
      default:
        width = 1240; // 2480 / 2
        height = 1754; // 3508 / 2
        break;
    }

    // Swap width and height if orientation is landscape
    return pageOrientation == pw.PageOrientation.landscape ? width : height;
  }

  void _addPdfPage() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    var id = const Uuid().v4();

    print('pageCount in addpage: $pageCount');
    DocumentProperties newdoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );
    setState(() {
      documentPropertiesList.add(newdoc);
    });
    print('in addpage newdoc: $newdoc');
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].save();
    print('inaddpage after addinbox docprop: ${lm[keyIndex].docPropsList}');
    SheetList newsheetlist =
        SheetList(id: id, parentId: parentId, sheetList: []);

    setState(() {
      spreadSheetList.add(newsheetlist);
    });
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex]
        .save(); // Boxes.getLayouts().update(LayoutModel(docPropsList: newdoc, spreadSheetList: newsheetlist.toSheetListBox(), id: id));
    setState(() {
      print('pageCount in addpage after: $pageCount');
      selectedIndex.add(SelectedIndex(id: id, selectedIndexes: []));
      print('id : $id');
      print(selectedIndex);
      // pageCount++;
    });
  }

  void _addPdfPageAtIndex(int index) {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    var id = const Uuid().v4();

    print('pageCount in addPage: $pageCount');

    // Create a new DocumentProperties instance
    DocumentProperties newDoc = DocumentProperties(
      pageNumberController:
          TextEditingController(text: (++pageCount).toString()),
      marginAllController: TextEditingController(text: '10'),
      marginLeftController: TextEditingController(text: '10'),
      marginRightController: TextEditingController(text: '10'),
      marginBottomController: TextEditingController(text: '10'),
      marginTopController: TextEditingController(text: '10'),
      orientationController: pw.PageOrientation.portrait,
      pageFormatController: PdfPageFormat.a4,
    );

    // Add the new DocumentProperties at the specified index
    setState(() {
      documentPropertiesList.insert(index, newDoc);

      // Update the pageNumberController for the entire list to match the new sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }
    });

    print('Updated documentPropertiesList: $documentPropertiesList');

    // Update the LayoutModel and save the new list
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].save();
    print('in addPage after adding to box: ${lm[keyIndex].docPropsList}');

    // Create a new SheetList instance
    SheetList newSheetList = SheetList(
      id: id,
      parentId: parentId,
      sheetList: [],
    );

    // Add the new SheetList at the specified index
    setState(() {
      spreadSheetList.insert(index, newSheetList);
    });

    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();

    // Update the selectedIndex list at the specified index
    setState(() {
      print('pageCount in addPage after: $pageCount');
      selectedIndex.insert(index, SelectedIndex(id: id, selectedIndexes: []));
      print('id: $id');
      print(selectedIndex);
    });
  }

  void _movePage(int currentIndex, int targetIndex) {
    setState(() {
      if (currentIndex < 0 ||
          currentIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex >= documentPropertiesList.length ||
          currentIndex == targetIndex) {
        return;
      }

      final movedDocument = documentPropertiesList.removeAt(currentIndex);
      documentPropertiesList.insert(targetIndex, movedDocument);

      final movedSheet = spreadSheetList.removeAt(currentIndex);
      spreadSheetList.insert(targetIndex, movedSheet);

      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      currentPageIndex = targetIndex;

      panelIndex = PanelIndex(
        id: spreadSheetList[currentPageIndex].id,
        panelIndex: panelIndex.panelIndex,
        parentId: spreadSheetList[currentPageIndex].parentId,
      );
    });
  }

  void _duplicatePage(int sourceIndex, int targetIndex) {
    setState(() {
      if (sourceIndex < 0 ||
          sourceIndex >= documentPropertiesList.length ||
          targetIndex < 0 ||
          targetIndex > documentPropertiesList.length) {
        return; // Invalid operation
      }

      // Duplicate documentProperties
      DocumentProperties duplicatedDocument = DocumentProperties(
        pageNumberController: TextEditingController(
            text: (targetIndex + 1).toString()), // Set initial number
        marginAllController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginAllController.text),
        marginLeftController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginLeftController.text),
        marginRightController: TextEditingController(
            text:
                documentPropertiesList[sourceIndex].marginRightController.text),
        marginBottomController: TextEditingController(
            text: documentPropertiesList[sourceIndex]
                .marginBottomController
                .text),
        marginTopController: TextEditingController(
            text: documentPropertiesList[sourceIndex].marginTopController.text),
        orientationController:
            documentPropertiesList[sourceIndex].orientationController,
        pageFormatController:
            documentPropertiesList[sourceIndex].pageFormatController,
      );

      // Insert the duplicated document at the target index
      documentPropertiesList.insert(targetIndex, duplicatedDocument);

      // Duplicate spreadSheet data
      SheetList duplicatedSheetList = SheetList(
        id: const Uuid().v4(), // Assign a new unique ID
        parentId: spreadSheetList[sourceIndex].parentId,
        sheetList: List.from(spreadSheetList[sourceIndex].sheetList),
      );

      // Insert the duplicated sheet at the target index
      spreadSheetList.insert(targetIndex, duplicatedSheetList);

      // Increment page count
      pageCount++;

      // Reassign pageNumberController.text to reflect the updated sequence
      for (int i = 0; i < documentPropertiesList.length; i++) {
        documentPropertiesList[i].pageNumberController.text =
            (i + 1).toString();
      }

      // Update currentPageIndex to the new duplicate's location
      currentPageIndex = targetIndex;

      // Update panelIndex for the newly duplicated page
      panelIndex = PanelIndex(
        id: spreadSheetList[currentPageIndex].id,
        panelIndex: -1,
        parentId: spreadSheetList[currentPageIndex].parentId,
      );
    });
  }

  void animateToPage(int page) {
    var duration = const Duration(milliseconds: 300);
    var curve = Curves.easeIn;
    pageViewIndicatorController.animateToPage(page,
        duration: duration, curve: curve);
  }

  Future<void> _capturePng() async {
    setState(() {
      _images = [];
    });
    try {
      for (var v = 0; v < globalKeys.length; v++) {
        print(globalKeys[v].toString());
        RenderRepaintBoundary? boundary = globalKeys[v]
            .currentContext
            ?.findRenderObject() as RenderRepaintBoundary?;
        if (boundary == null) {
          print("Boundary is null");
          return;
        }
        ui.Image image = await boundary.toImage(pixelRatio: 7.0);
        ByteData? byteData =
            await image.toByteData(format: ui.ImageByteFormat.png);
        if (byteData == null) {
          print("ByteData is null");
          return;
        }
        Uint8List pngBytes = byteData.buffer.asUint8List();
        // _images.clear();
        setState(() {
          _images.add(pngBytes);
        });
        print('image added');
      }
      // WidgetsBinding.instance.addPostFrameCallback((_) async {

      // });
      // _genPdf();
    } catch (e) {
      print(e);
    }
  }

  Future<Uint8List?> captureImageAsPng(int index) async {
    try {
      RenderRepaintBoundary? boundary = globalKeys[index]
          .currentContext
          ?.findRenderObject() as RenderRepaintBoundary?;

      if (boundary == null) {
        print("Boundary is null");
        return null;
      }

      ui.Image image = await boundary.toImage(pixelRatio: 1.0);
      ByteData? byteData =
          await image.toByteData(format: ui.ImageByteFormat.png);

      if (byteData == null) {
        print("ByteData is null");
        return null;
      }

      Uint8List pngBytes = byteData.buffer.asUint8List();
      return pngBytes;
    } catch (e) {
      print("Error capturing image: $e");
      return null;
    }
  }

  Future<void> _renderPagePreviewOnProperties() async {
    try {
      Uint8List? newImage = await captureImageAsPng(currentPageIndex);
      if (newImage != null) {
        setState(() {
          cachedImageData = newImage;
          hasRenderedOnce = true; // Mark as rendered
        });
      }
    } catch (e) {
      debugPrint("Error capturing image: $e");
    }
  }

  Future<void> _genPdf() async {
    final pdf = pw.Document();
    print(_images.length);
    for (var img in _images) {
      final image = pw.MemoryImage(img);
      print(img.length);
      print(documentPropertiesList[_images.indexOf(img)].orientationController);
      pdf.addPage(
        pw.Page(
          margin: const pw.EdgeInsets.all(0),
          orientation: documentPropertiesList[_images.indexOf(img)]
              .orientationController,
          pageFormat:
              documentPropertiesList[_images.indexOf(img)].pageFormatController,
          build: (pw.Context context) {
            return pw.Center(
              child: pw.Image(image),
            );
          },
        ),
      );
    }

    final output = await getApplicationDocumentsDirectory();
    final file = File("${output.path}\\example.pdf");
    await file.writeAsBytes(await pdf.save());
    // await Printing.sharePdf(bytes: await pdf.save());
    print("PDF saved to: ${file.path}");
  }

  void updateBox() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();
  }

  void _checkLayoutName() {
    var layouts =
        Boxes.getLayouts().values.map((layout) => layout.name).toList();
    setState(() {
      nameExists = layouts.contains(layoutName.text);
    });
  }

  void _onFieldFocusChange(bool hasFocus) {
    if (!hasFocus && nameExists) {
      layoutName.text = initialLayoutName;
      setState(() {
        nameExists = false;
      });
    } else {
      Boxes.getLayouts().values.toList()[keyIndex].name = layoutName.text;
      Boxes.getLayouts().values.toList()[keyIndex].save();
    }
  }

  @override
  Widget build(BuildContext context) {
    // print('________BUILD LAYOUT STARTED LD_________');
    double sHeight = MediaQuery.of(context).size.height;
    double sWidth = MediaQuery.of(context).size.width;
    Duration sideBarPosDuration = const Duration(milliseconds: 300);
    Duration defaultDuration = const Duration(milliseconds: 300);
    double topPadPosDistance = sHeight / 13;
    double leftPadPosDistance = sWidth / 15;
    double titleFontSize = sHeight / 11;
    if (sWidth > sHeight) {
      //Desktop WEB
      return Scaffold(
          resizeToAvoidBottomInset: false,
          body: SafeArea(
            child: Container(
              color: defaultPalette.white,
              child: Stack(
                children: [
                  Container(
                    height: sHeight,
                    width: sWidth,
                    color: Colors.transparent,
                  ),
                  Positioned(
                    // duration: Duration(milliseconds: 300),
                    width: sWidth,
                    height: sHeight,
                    child: Stack(
                      children: [
                        // Graph //Desktop Behind the emulating preview
                        IgnorePointer(
                          ignoring: true,
                          child: AnimatedContainer(
                            duration: Durations.extralong1,
                            height: sHeight,
                            width: sWidth,
                            alignment: Alignment.centerRight,
                            decoration: BoxDecoration(
                              color: Colors.grey.withOpacity(0.2),
                            ),
                            padding: const EdgeInsets.only(
                              top: 0,
                            ),
                            //layGraph
                            child: Opacity(
                              opacity: 0.35,
                              child: LineChart(LineChartData(
                                  lineBarsData: [LineChartBarData()],
                                  titlesData: const FlTitlesData(show: false),
                                  gridData: FlGridData(
                                      show: true,
                                      getDrawingVerticalLine: (value) => FlLine(
                                          color: defaultPalette.extras[0]
                                              .withOpacity(0.5),
                                          dashArray: [5, 5],
                                          strokeWidth: 1),
                                      getDrawingHorizontalLine: (value) => FlLine(
                                          color: defaultPalette.extras[0]
                                              .withOpacity(0.5),
                                          dashArray: [5, 5],
                                          strokeWidth: 1),
                                      horizontalInterval: 10,
                                      verticalInterval: 30),
                                  borderData: FlBorderData(show: false),
                                  minY: 0,
                                  maxY: 50,
                                  maxX: dateTimeNow.millisecondsSinceEpoch
                                              .ceilToDouble() /
                                          500 +
                                      250,
                                  minX: dateTimeNow.millisecondsSinceEpoch
                                          .ceilToDouble() /
                                      500)),
                            ),
                          ),
                        ),
                        //sidebar tools //Desktop WEB
                        Positioned(
                          top: Platform.isWindows ? 0 : 30,
                          width: sWidth,
                          height: sHeight,
                          child: Row(
                            children: [
                              ///////Side TOOL BAR
                              Container(
                                height: sHeight,
                                width: Platform.isWindows ? 45 : 30,
                                color: defaultPalette.white,
                                ///////Side TOOL BAR
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    ///Resize handle
                                    Container(
                                      padding: const EdgeInsets.all(5),
                                      decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(8),
                                          color: defaultPalette.black
                                              .withOpacity(0)),
                                      child: Icon(
                                        TablerIcons.grip_horizontal,
                                        color:
                                            defaultPalette.white.withOpacity(0),
                                        size: 20,
                                      ),
                                    ),

                                    ///clearLayout Button
                                    IconButton(
                                        onPressed: () {
                                          FocusScope.of(context).unfocus();
                                          if (panelIndex.panelIndex != -1) {
                                            final TextEditorItem
                                                textEditorItem =
                                                _sheetItemIterator(
                                                        panelIndex.id,
                                                        spreadSheetList[
                                                            currentPageIndex])
                                                    as TextEditorItem;
                                            textEditorItem.focusNode.unfocus();
                                          }
                                          _confirmDeleteLayout(
                                              deletePage: false);
                                        },
                                        icon: Transform.rotate(
                                          angle: math.pi / 4,
                                          child: Icon(
                                            IconsaxPlusLinear.add,
                                            size:
                                                Platform.isWindows ? null : 20,
                                            color: defaultPalette.black,
                                          ),
                                        )),
                                    //ADD TEXT
                                    IconButton(
                                        onPressed: () {
                                          print(
                                              '________addText pressed LD_________');
                                          // print(
                                          //     'panelId from addtextfield: ${panelIndex.id}');
                                          _addTextField();
                                        },
                                        icon: Icon(
                                          CupertinoIcons.plus_bubble,
                                          size: Platform.isWindows ? null : 15,
                                          color: defaultPalette.black,
                                        )),
                                    //Add Image
                                    IconButton(
                                        onPressed: () async {
                                          await _capturePng().then((onValue) {
                                            _genPdf();
                                          });
                                        },
                                        icon: Icon(
                                          IconsaxPlusLinear.gallery_add,
                                          size: Platform.isWindows ? null : 15,
                                          color: defaultPalette.black,
                                        )),
                                    //Add table
                                    IconButton(
                                        onPressed: () {},
                                        icon: Icon(
                                          CupertinoIcons.table,
                                          size: Platform.isWindows ? null : 15,
                                          color: defaultPalette.black,
                                        )),
                                    //Duplpicate
                                    IconButton(
                                        onPressed: () => _duplicateTextField(),
                                        icon: Icon(
                                          CupertinoIcons.plus_square_on_square,
                                          size: Platform.isWindows ? null : 15,
                                          color: defaultPalette.black,
                                        )),
                                    IconButton(
                                        onPressed: () => _removeTextField(),
                                        icon: Icon(
                                          Icons.delete,
                                          size: Platform.isWindows ? null : 15,
                                          color: defaultPalette.black,
                                        )),
                                  ],
                                ),
                              ),
                              //emulating the pdf preview //Desktop WEB
                              Expanded(
                                flex: (20000).round(),
                                child: Container(
                                  height: sHeight,
                                  child: zz.Zoom(
                                    centerOnScale: false,
                                    initTotalZoomOut: true,
                                    maxScale: 5,
                                    zoomSensibility: 2,
                                    // key: ValueKey(currentPageIndex),
                                    backgroundColor: defaultPalette.transparent,
                                    canvasColor: defaultPalette.transparent,
                                    transformationController:
                                        transformationcontroller,
                                    opacityScrollBars: 0,
                                    onScaleUpdate: (p0, p1) {
                                      setState(() {
                                        pdfPreviewPaddingScaleFactor = p1;
                                        print(pdfPreviewPaddingScaleFactor);
                                      });
                                    },
                                    initScale: 0.01,
                                    child: Transform.scale(
                                      scale: 0.8,
                                      // scale: 1,
                                      alignment: Alignment.topLeft,
                                      child: Container(
                                        padding: EdgeInsets.only(
                                            bottom: 500,
                                            top: 50 *
                                                (1 /
                                                    pdfPreviewPaddingScaleFactor),
                                            left: 40,
                                            right: 5000),
                                        decoration: BoxDecoration(
                                            color: defaultPalette.transparent),
                                        // alignment: Alignment.center,
                                        child: _generateWidWin(
                                            sWidth, sHeight * 0.9),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        // coloredcontainer fill on right side of the screen
                        Positioned(
                          left: sWidth / 2,
                          top: 0,
                          child: Container(
                            width: sWidth / 2,
                            height: sHeight,
                            color: defaultPalette.tertiary,
                            child: IgnorePointer(
                              ignoring: true,
                              child: AnimatedContainer(
                                duration: Durations.extralong1,
                                height: sHeight,
                                width: sWidth,
                                alignment: Alignment.centerRight,
                                decoration: BoxDecoration(),
                                //layGraph
                                child: Opacity(
                                  opacity: 0.35,
                                  child: LineChart(LineChartData(
                                      lineBarsData: [LineChartBarData()],
                                      titlesData:
                                          const FlTitlesData(show: false),
                                      gridData: FlGridData(
                                          getDrawingVerticalLine: (value) => FlLine(
                                              color: defaultPalette.primary
                                                  .withOpacity(0.8),
                                              dashArray: [5, 5],
                                              strokeWidth: 1),
                                          getDrawingHorizontalLine: (value) =>
                                              FlLine(
                                                  color: defaultPalette.primary
                                                      .withOpacity(0.8),
                                                  dashArray: [5, 5],
                                                  strokeWidth: 1),
                                          show: true,
                                          horizontalInterval: 5,
                                          verticalInterval: 30),
                                      borderData: FlBorderData(show: false),
                                      minY: 0,
                                      maxY: 50,
                                      maxX: dateTimeNow.millisecondsSinceEpoch
                                                  .ceilToDouble() /
                                              500 +
                                          250,
                                      minX: dateTimeNow.millisecondsSinceEpoch
                                              .ceilToDouble() /
                                          500)),
                                ),
                              ),
                            ),
                          ),
                        ),
                        //
                        //////////Spread SHEET Layout //Desktop WEB
                        Positioned(
                          left: sWidth * wH1DividerPosition,
                          width: sWidth *
                              (1 - wH1DividerPosition - wH2DividerPosition),
                          // flex: ((1 - wH1DividerPosition - wH2DividerPosition) *
                          //         10000)
                          //     .round(),
                          top: Platform.isAndroid ? 35 : 40,
                          height: Platform.isAndroid
                              ? sHeight * 0.85
                              : sHeight - 50,
                          child: GestureDetector(
                            onTap: () {
                              setState(() {
                                panelIndex.panelIndex = -1;
                                panelIndex.parentId = '';
                                panelIndex.id = '';
                                whichPropertyTabIsClicked = 1;
                              });
                            },
                            onSecondaryTap: () {
                              print("YUHUUUUUUUU");
                            },
                            child: CustomBorder(
                              color: defaultPalette.extras[0],
                              radius: Radius.circular(20),
                              strokeWidth: 2,
                              dashPattern: [30, 10],
                              strokeCap: StrokeCap.butt,
                              animateBorder: true,
                              dashRadius: Radius.circular(50),
                              animateDuration: Duration(milliseconds: 5500),
                              child: Container(
                                decoration: BoxDecoration(
                                  color: defaultPalette.extras[0],
                                  borderRadius: BorderRadius.circular(20),
                                  // border: Border.all(color: defaultPalette.tertiary,strokeAlign: BorderSide.strokeAlignOutside,width: 4)
                                ),
                                padding: EdgeInsets.symmetric(
                                    vertical: 5, horizontal: 2),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(20),
                                  child: Stack(
                                    children: [
                                      // Graph //Desktop WEB
                                      IgnorePointer(
                                        ignoring: true,
                                        child: AnimatedContainer(
                                          duration: Durations.extralong1,
                                          height: sHeight,
                                          width: sWidth,
                                          alignment: Alignment.centerRight,

                                          padding: const EdgeInsets.only(
                                            top: 0,
                                          ),
                                          //layGraph
                                          child: Opacity(
                                            opacity: 0.35,
                                            child: LineChart(LineChartData(
                                                lineBarsData: [
                                                  LineChartBarData()
                                                ],
                                                titlesData: const FlTitlesData(
                                                    show: false),
                                                gridData: FlGridData(
                                                    getDrawingVerticalLine: (value) => FlLine(
                                                        color: defaultPalette
                                                            .primary
                                                            .withOpacity(0.2),
                                                        dashArray: [5, 5]),
                                                    getDrawingHorizontalLine:
                                                        (value) => FlLine(
                                                            color: defaultPalette
                                                                .primary
                                                                .withOpacity(0.2),
                                                            dashArray: [5, 5]),
                                                    show: true,
                                                    horizontalInterval: 10,
                                                    verticalInterval: 30),
                                                borderData: FlBorderData(show: false),
                                                minY: 0,
                                                maxY: 50,
                                                maxX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500 + 250,
                                                minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                          ),
                                        ),
                                      ),
                                      //Main SpreadSheet //Desktop WEB
                                      ReorderableListView.builder(
                                        buildDefaultDragHandles: false,
                                        // scrollController: annoyingController,
                                        proxyDecorator:
                                            (child, index, animation) {
                                          return PieCanvas(child: child);
                                        },
                                        padding: const EdgeInsets.all(0),
                                        onReorder:
                                            (int oldIndex, int newIndex) {
                                          setState(() {
                                            if (newIndex > oldIndex) {
                                              newIndex -= 1;
                                            }
                                            final item = spreadSheetList[
                                                    currentPageIndex]
                                                .removeAt(oldIndex);
                                            spreadSheetList[currentPageIndex]
                                                .insert(newIndex, item);
                                          });
                                        },
                                        itemCount:
                                            spreadSheetList[currentPageIndex]
                                                .length,
                                        itemBuilder: (context, index) {
                                          // print(
                                          //     'hello hello sprdsheetBuilding: ${spreadSheetList[currentPageIndex][index]}');

                                          if (spreadSheetList[currentPageIndex]
                                              [index] is TextEditorItem) {
                                            var textEditorItem =
                                                spreadSheetList[
                                                        currentPageIndex][index]
                                                    as TextEditorItem;

                                            //check if the linkeditems list is nul or not
                                            if (textEditorItem
                                                    .linkedTextEditors !=
                                                null) {
                                              //if not null then iterate throught the list and assign configurations to it.
                                              for (var i = 0;
                                                  i <
                                                      textEditorItem
                                                          .linkedTextEditors!
                                                          .length;
                                                  i++) {
                                                (_sheetItemIterator(
                                                            textEditorItem
                                                                    .linkedTextEditors![
                                                                i],
                                                            spreadSheetList[
                                                                currentPageIndex])
                                                        as TextEditorItem)
                                                    .copyWith(
                                                  textEditorConfigurations:
                                                      QuillEditorConfigurations(
                                                    scrollable: false,
                                                    showCursor: false,
                                                    enableInteractiveSelection:
                                                        false,
                                                    enableSelectionToolbar:
                                                        false,
                                                    requestKeyboardFocusOnCheckListChanged:
                                                        false,
                                                    customStyleBuilder:
                                                        (attribute) {
                                                      // Handle letter spacing
                                                      if (attribute.key ==
                                                          'letterSpacing') {
                                                        String? letterSpacing =
                                                            attribute.value
                                                                as String?;
                                                        return TextStyle(
                                                          letterSpacing:
                                                              double.parse(
                                                                  letterSpacing ??
                                                                      '0'),
                                                        );
                                                      }
                                                      // Handle word spacing (custom attribute example)
                                                      if (attribute.key ==
                                                          'wordSpacing') {
                                                        String? wordSpacing =
                                                            attribute.value
                                                                as String?;
                                                        return TextStyle(
                                                          wordSpacing:
                                                              double.parse(
                                                                  wordSpacing ??
                                                                      '0'),
                                                        );
                                                      }
                                                      // Handle line height (custom attribute example)
                                                      if (attribute.key ==
                                                          'lineHeight') {
                                                        String? lineHeight =
                                                            attribute.value
                                                                as String?;
                                                        return TextStyle(
                                                          height: double.parse(
                                                              lineHeight ??
                                                                  '0'),
                                                        );
                                                      }
                                                      // Return default TextStyle if attribute not handled
                                                      return const TextStyle();
                                                    },
                                                    disableClipboard: true,
                                                    controller: QuillController(
                                                      document: textEditorItem
                                                          .textEditorController
                                                          .document,
                                                      selection: textEditorItem
                                                          .textEditorController
                                                          .selection,
                                                      readOnly: true,
                                                      onSelectionChanged:
                                                          (textSelection) {
                                                        setState(() {});
                                                      },
                                                      onReplaceText:
                                                          (index, len, data) {
                                                        setState(() {});
                                                        return false;
                                                      },
                                                      onSelectionCompleted: () {
                                                        setState(() {});
                                                      },
                                                      onDelete: (cursorPosition,
                                                          forward) {
                                                        setState(() {});
                                                      },
                                                    ),
                                                  ),
                                                );
                                              }
                                            }
                                            return ReorderableDelayedDragStartListener(
                                              index: index,
                                              key: ValueKey(textEditorItem.id),
                                              child: GestureDetector(
                                                onTap: () {
                                                  FocusScope.of(context)
                                                      .unfocus();

                                                  var isTrue = false;
                                                  SheetItem? itemE;
                                                  if (panelIndex.id ==
                                                      textEditorItem.id) {
                                                    isTrue = true;
                                                  }
                                                  setState(() {
                                                    itemE = _sheetItemIterator(
                                                        textEditorItem.id,
                                                        spreadSheetList[
                                                            currentPageIndex]);

                                                    if (itemE != null) {
                                                      index = _sheetListIterator(
                                                              itemE!.parentId,
                                                              spreadSheetList[
                                                                  currentPageIndex])
                                                          .indexOf(itemE!);
                                                      panelIndex = PanelIndex(
                                                          id: itemE!.id,
                                                          panelIndex: index,
                                                          parentId:
                                                              itemE?.parentId ??
                                                                  '');
                                                    } else {
                                                      panelIndex = PanelIndex(
                                                          id: textEditorItem.id,
                                                          panelIndex: index,
                                                          parentId:
                                                              textEditorItem
                                                                  .parentId);
                                                    }
                                                  });

                                                  print('clicked');

                                                  print(panelIndex);
                                                },
                                                //
                                                //
                                                onSecondaryLongPressDown: (d) {
                                                  setState(() {
                                                    panelIndex.id =
                                                        textEditorItem.id;
                                                  });
                                                  print('secondaryyyTapppppp');
                                                  bool hasSelection(
                                                      textEditorController) {
                                                    var selection =
                                                        textEditorController
                                                            .selection;
                                                    return selection != null &&
                                                        !selection.isCollapsed;
                                                  }

                                                  Future<bool>
                                                      hasClipboardData() async {
                                                    var data =
                                                        await Clipboard.getData(
                                                            'text/plain');
                                                    return data != null &&
                                                        data.text!.isNotEmpty;
                                                  }

                                                  bool canUndo(
                                                      textEditorController) {
                                                    return textEditorController
                                                        .hasUndo;
                                                  }

                                                  bool canRedo(
                                                      textEditorController) {
                                                    return textEditorController
                                                        .hasRedo;
                                                  }

                                                  List<ContextMenuEntry>
                                                      buildContextMenuEntries(
                                                          QuillController
                                                              textEditorController) {
                                                    var entries =
                                                        <ContextMenuEntry>[];

                                                    bool hasSelection =
                                                        textEditorController
                                                                .selection
                                                                .start !=
                                                            textEditorController
                                                                .selection.end;

                                                    // Cut
                                                    if (hasSelection) {
                                                      entries.add(MenuItem(
                                                        label: 'Cut',
                                                        icon: TablerIcons.cut,
                                                        onSelected: () {
                                                          var selectedText =
                                                              textEditorController
                                                                  .document
                                                                  .getPlainText(
                                                            textEditorController
                                                                .selection
                                                                .start,
                                                            textEditorController
                                                                .selection.end,
                                                          );
                                                          Clipboard.setData(
                                                              ClipboardData(
                                                                  text:
                                                                      selectedText));
                                                          textEditorController
                                                              .replaceText(
                                                            textEditorController
                                                                .selection
                                                                .start,
                                                            textEditorController
                                                                    .selection
                                                                    .end -
                                                                textEditorController
                                                                    .selection
                                                                    .start,
                                                            '',
                                                            null,
                                                          );
                                                        },
                                                      ));
                                                    }

                                                    // Copy
                                                    if (hasSelection) {
                                                      entries.add(MenuItem(
                                                        label: 'Copy',
                                                        icon: TablerIcons.copy,
                                                        onSelected: () {
                                                          var selectedText =
                                                              textEditorController
                                                                  .document
                                                                  .getPlainText(
                                                            textEditorController
                                                                .selection
                                                                .start,
                                                            textEditorController
                                                                .selection.end,
                                                          );
                                                          Clipboard.setData(
                                                              ClipboardData(
                                                                  text:
                                                                      selectedText));
                                                        },
                                                      ));
                                                    }

                                                    // Paste
                                                    entries.add(MenuItem(
                                                      label: 'Paste',
                                                      icon:
                                                          TablerIcons.clipboard,
                                                      onSelected: () async {
                                                        var data = await Clipboard
                                                            .getData(
                                                                'text/plain');
                                                        if (data != null) {
                                                          int baseOffset =
                                                              textEditorController
                                                                  .selection
                                                                  .baseOffset;
                                                          if (textEditorController
                                                              .selection
                                                              .isCollapsed) {
                                                            textEditorController
                                                                .replaceText(
                                                              baseOffset,
                                                              0, // No text to replace
                                                              data.text!,
                                                              null,
                                                            );
                                                          } else {
                                                            textEditorController
                                                                .replaceText(
                                                              baseOffset,
                                                              textEditorController
                                                                      .selection
                                                                      .extentOffset -
                                                                  baseOffset,
                                                              data.text!,
                                                              null,
                                                            );
                                                          }
                                                        }
                                                      },
                                                    ));

                                                    // Select All
                                                    entries.add(MenuItem(
                                                      label: 'Select All',
                                                      icon: TablerIcons
                                                          .select_all,
                                                      onSelected: () {
                                                        textEditorController
                                                            .updateSelection(
                                                                TextSelection(
                                                                  baseOffset: 0,
                                                                  extentOffset:
                                                                      textEditorController
                                                                          .document
                                                                          .length,
                                                                ),
                                                                ChangeSource
                                                                    .local);
                                                      },
                                                    ));

                                                    entries.add(
                                                        const MenuDivider());

                                                    // Undo
                                                    if (textEditorController
                                                        .hasUndo) {
                                                      entries.add(MenuItem(
                                                        label: 'Undo',
                                                        icon: TablerIcons
                                                            .corner_up_left,
                                                        onSelected: () {
                                                          textEditorController
                                                              .undo();
                                                        },
                                                      ));
                                                    } else {
                                                      entries
                                                          .add(const MenuItem(
                                                        label: 'Undo',
                                                        icon: TablerIcons
                                                            .corner_up_left,
                                                        onSelected: null,
                                                      ));
                                                    }

                                                    // Redo
                                                    if (textEditorController
                                                        .hasRedo) {
                                                      entries.add(MenuItem(
                                                        label: 'Redo',
                                                        icon: TablerIcons
                                                            .corner_down_right,
                                                        onSelected: () {
                                                          textEditorController
                                                              .redo();
                                                        },
                                                      ));
                                                    } else {
                                                      entries
                                                          .add(const MenuItem(
                                                        label: 'Redo',
                                                        icon: TablerIcons
                                                            .corner_down_right,
                                                        onSelected: null,
                                                      ));
                                                    }
                                                    entries.addAll([
                                                      const MenuHeader(
                                                          text: 'ops'),
                                                      //ADD ITEMS
                                                      MenuItem.submenu(
                                                          label: 'Add',
                                                          icon: TablerIcons
                                                              .new_section,
                                                          items: [
                                                            MenuItem.submenu(
                                                                label: 'Text',
                                                                icon: TablerIcons
                                                                    .text_recognition,
                                                                items: [
                                                                  MenuItem(
                                                                    label:
                                                                        'Above',
                                                                    icon: TablerIcons
                                                                        .border_top_plus,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        var newItem =
                                                                            _addTextField(shouldReturn: true);
                                                                        spreadSheetList[currentPageIndex].insert(
                                                                            index,
                                                                            newItem);
                                                                        index++;
                                                                      });
                                                                    },
                                                                  ),
                                                                  MenuItem(
                                                                    label:
                                                                        'Below',
                                                                    icon: TablerIcons
                                                                        .border_bottom_plus,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        var newItem =
                                                                            _addTextField(shouldReturn: true);
                                                                        spreadSheetList[currentPageIndex].insert(
                                                                            index +
                                                                                1,
                                                                            newItem);
                                                                      });
                                                                    },
                                                                  ),
                                                                  MenuItem(
                                                                    label:
                                                                        'Left',
                                                                    icon: TablerIcons
                                                                        .border_left_plus,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        var newId =
                                                                            Uuid().v4();
                                                                        var item =
                                                                            spreadSheetList[currentPageIndex].removeAt(index);
                                                                        spreadSheetList[currentPageIndex].insert(
                                                                            index,
                                                                            SheetList(direction: Axis.horizontal, id: newId, parentId: spreadSheetList[currentPageIndex].id, sheetList: [
                                                                              _addTextField(shouldReturn: true),
                                                                              item
                                                                            ]));
                                                                      });
                                                                    },
                                                                  ),
                                                                  MenuItem(
                                                                    label:
                                                                        'Right',
                                                                    icon: TablerIcons
                                                                        .border_right_plus,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        var newId =
                                                                            Uuid().v4();
                                                                        var item =
                                                                            spreadSheetList[currentPageIndex].removeAt(index);
                                                                        spreadSheetList[currentPageIndex].insert(
                                                                            index,
                                                                            SheetList(direction: Axis.horizontal, id: newId, parentId: spreadSheetList[currentPageIndex].id, sheetList: [
                                                                              item,
                                                                              _addTextField(shouldReturn: true),
                                                                            ]));
                                                                      });
                                                                    },
                                                                  )
                                                                ])
                                                          ]),
                                                      //MOVE ITEMS
                                                      MenuItem.submenu(
                                                          label: 'Move',
                                                          icon: TablerIcons
                                                              .arrows_move,
                                                          items: [
                                                            MenuItem.submenu(
                                                                label: 'Text',
                                                                icon: TablerIcons
                                                                    .text_resize,
                                                                items: [
                                                                  MenuItem(
                                                                    label: 'Up',
                                                                    icon: TablerIcons
                                                                        .arrow_up_square,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        if (index !=
                                                                            0) {
                                                                          var item =
                                                                              spreadSheetList[currentPageIndex].removeAt(index);
                                                                          spreadSheetList[currentPageIndex].insert(
                                                                              index - 1,
                                                                              item);

                                                                          index--;
                                                                          panelIndex = PanelIndex(
                                                                              id: panelIndex.id,
                                                                              panelIndex: panelIndex.panelIndex + 1,
                                                                              parentId: panelIndex.parentId);
                                                                          print(
                                                                              'Updated index of text editor: $index');
                                                                        }
                                                                        print(
                                                                            'Current index of text editor: $index');
                                                                      });
                                                                    },
                                                                  ),
                                                                  MenuItem(
                                                                    label:
                                                                        'Down',
                                                                    icon: TablerIcons
                                                                        .arrow_down_square,
                                                                    onSelected:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        if (index !=
                                                                            spreadSheetList[currentPageIndex].length -
                                                                                1) {
                                                                          var item =
                                                                              spreadSheetList[currentPageIndex].removeAt(index);
                                                                          spreadSheetList[currentPageIndex].insert(
                                                                              index + 1,
                                                                              item);
                                                                          index++;
                                                                          print(
                                                                              'index of texteditor DT: $index');
                                                                        }
                                                                      });
                                                                    },
                                                                  ),
                                                                ])
                                                          ]),
                                                      //Export
                                                      MenuItem(
                                                        label:
                                                            'Export Field As..',
                                                        icon: TablerIcons
                                                            .message_forward,
                                                        onSelected: () async {
                                                          await pushExportField(
                                                              context,
                                                              textEditorItem,
                                                              documentPropertiesList,
                                                              currentPageIndex);
                                                        },
                                                      ),
                                                      //Clear Field
                                                      MenuItem(
                                                        label: 'Clear',
                                                        icon: TablerIcons
                                                            .square_rounded_x,
                                                        onSelected: () async {
                                                          await showAdaptiveDialog(
                                                            context: context,
                                                            builder: (context) {
                                                              return AlertDialog(
                                                                title: Text(
                                                                    'Confirm Clear'),
                                                                content: Text(
                                                                    'This will clear the text from current Text Field. Are you sure?'),
                                                                actions: [
                                                                  TextButton(
                                                                      onPressed:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          textEditorItem
                                                                              .textEditorController
                                                                              .document = Document();
                                                                        });
                                                                        Navigator.pop(
                                                                            context);
                                                                      },
                                                                      child: Text(
                                                                          'Yes')),
                                                                  TextButton(
                                                                      onPressed:
                                                                          () {
                                                                        Navigator.pop(
                                                                            context);
                                                                      },
                                                                      child: Text(
                                                                          'No')),
                                                                ],
                                                              );
                                                            },
                                                          );
                                                        },
                                                      ),
                                                      //Delete
                                                      MenuItem(
                                                        label: 'Delete',
                                                        icon: TablerIcons.trash,
                                                        onSelected: () async {
                                                          await showAdaptiveDialog(
                                                            context: context,
                                                            builder: (context) {
                                                              return AlertDialog(
                                                                title: Text(
                                                                    'Confirm Delete'),
                                                                content: Text(
                                                                    'This will DELETE the current Text Field with its contents. Are you sure?'),
                                                                actions: [
                                                                  TextButton(
                                                                      onPressed:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          spreadSheetList[currentPageIndex]
                                                                              .removeAt(index);
                                                                          panelIndex.id =
                                                                              '';
                                                                          panelIndex.panelIndex =
                                                                              -1;
                                                                        });
                                                                        Navigator.pop(
                                                                            context);
                                                                      },
                                                                      child: Text(
                                                                          'Yes')),
                                                                  TextButton(
                                                                      onPressed:
                                                                          () {
                                                                        Navigator.pop(
                                                                            context);
                                                                      },
                                                                      child: Text(
                                                                          'No')),
                                                                ],
                                                              );
                                                            },
                                                          );
                                                        },
                                                      )
                                                    ]);

                                                    return entries;
                                                  }

                                                  final entries =
                                                      buildContextMenuEntries(
                                                          textEditorItem
                                                              .textEditorController);
                                                  ContextMenu(
                                                          entries: entries,
                                                          boxDecoration: BoxDecoration(
                                                              boxShadow: [
                                                                BoxShadow(
                                                                  color: defaultPalette
                                                                      .black
                                                                      .withOpacity(
                                                                          0.3),
                                                                  blurRadius: 2,
                                                                  // spreadRadius: 10
                                                                )
                                                              ],
                                                              color:
                                                                  defaultPalette
                                                                      .primary,
                                                              borderRadius:
                                                                  BorderRadius
                                                                      .circular(
                                                                          10)),
                                                          position: Offset(
                                                              d.globalPosition
                                                                  .dx,
                                                              d.globalPosition
                                                                  .dy))
                                                      .show(context);
                                                },
                                                child: Stack(
                                                  children: [
                                                    GestureDetector(
                                                      child: Padding(
                                                        padding: EdgeInsets.only(
                                                            bottom: (index ==
                                                                    (spreadSheetList[currentPageIndex]
                                                                                as SheetList)
                                                                            .length -
                                                                        1)
                                                                ? 9
                                                                : 0,
                                                            left: 2,
                                                            top: 3,
                                                            right: 3),
                                                        child: CustomBorder(
                                                          color: panelIndex
                                                                      .id ==
                                                                  textEditorItem
                                                                      .id
                                                              ? defaultPalette
                                                                  .tertiary
                                                              : defaultPalette
                                                                  .black,
                                                          animateDuration:
                                                              const Duration(
                                                                  seconds: 10),
                                                          animateBorder: true,
                                                          radius: const Radius
                                                              .circular(10),
                                                          dashPattern: [10, 3],
                                                          strokeWidth: panelIndex
                                                                      .id ==
                                                                  textEditorItem
                                                                      .id
                                                              ? 2
                                                              : 1.2,
                                                          strokeCap:
                                                              StrokeCap.square,
                                                          child: Container(
                                                            height: null,
                                                            width: sWidth,
                                                            padding:
                                                                const EdgeInsets
                                                                    .only(
                                                                    top: 4,
                                                                    bottom: 4,
                                                                    left: 0,
                                                                    right: 4),
                                                            decoration:
                                                                BoxDecoration(
                                                              color:
                                                                  defaultPalette
                                                                      .primary,
                                                              border:
                                                                  Border.all(
                                                                strokeAlign:
                                                                    BorderSide
                                                                        .strokeAlignInside,
                                                                width: panelIndex
                                                                            .id ==
                                                                        textEditorItem
                                                                            .id
                                                                    ? 2
                                                                    : 1.2,
                                                                color: panelIndex
                                                                            .id ==
                                                                        textEditorItem
                                                                            .id
                                                                    ? defaultPalette
                                                                        .tertiary
                                                                    : defaultPalette
                                                                        .black,
                                                              ),
                                                              borderRadius:
                                                                  BorderRadius
                                                                      .circular(
                                                                          10),
                                                            ),
                                                            child:
                                                                AnimatedOpacity(
                                                              duration:
                                                                  Durations
                                                                      .short2,
                                                              opacity: 1,
                                                              child: Row(
                                                                children: [
                                                                  Container(
                                                                    child:
                                                                        const Icon(
                                                                      TablerIcons
                                                                          .cursor_text,
                                                                      size: 15,
                                                                    ),
                                                                  ),
                                                                  Expanded(
                                                                    child:
                                                                        QuillEditor(
                                                                      configurations:
                                                                          textEditorItem
                                                                              .textEditorConfigurations,
                                                                      focusNode:
                                                                          textEditorItem
                                                                              .focusNode,
                                                                      scrollController:
                                                                          ScrollController(),
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                    //
                                                    Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                              top: 8,
                                                              left: 4,
                                                              right: 8,
                                                              bottom: 4),
                                                      child: Row(
                                                        children: [
                                                          IgnorePointer(
                                                            child: Container(
                                                              padding:
                                                                  const EdgeInsets
                                                                      .all(0),
                                                              decoration:
                                                                  const BoxDecoration(),
                                                              child: Icon(
                                                                TablerIcons
                                                                    .cursor_text,
                                                                size: 15,
                                                                color: defaultPalette
                                                                    .transparent,
                                                              ),
                                                            ),
                                                          ),
                                                          Expanded(
                                                            child: QuillEditor(
                                                              configurations:
                                                                  textEditorItem
                                                                      .textEditorConfigurations,
                                                              focusNode:
                                                                  textEditorItem
                                                                      .focusNode,
                                                              scrollController:
                                                                  ScrollController(),
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            );
                                          } else if (spreadSheetList[
                                                  currentPageIndex][index]
                                              is SheetList) {
                                            return ReorderableDelayedDragStartListener(
                                              index: index,
                                              key: ValueKey(spreadSheetList[
                                                      currentPageIndex][index]
                                                  .id),
                                              child: Container(
                                                margin: EdgeInsets.only(
                                                    top: 6, left: 2, right: 5),
                                                // height: findSheetListBuildHeight(spreadSheetList[
                                                //             currentPageIndex][index] as SheetList),
                                                child: _buildListWidget(
                                                    spreadSheetList[
                                                            currentPageIndex]
                                                        [index] as SheetList),
                                              ),
                                            );
                                          }
                                          return Container(
                                              key: ValueKey(const Uuid().v4()),
                                              color: Colors.amberAccent,
                                              height: 12,
                                              width: 12);
                                        },
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        //

                        //prppos
                        Positioned(
                          width: sWidth * (wH2DividerPosition),
                          top: Platform.isAndroid ? 35 : 0,
                          height: Platform.isAndroid ? sHeight * 0.85 : sHeight,
                          left: sWidth * (1 - wH2DividerPosition),
                          child: Opacity(
                            opacity: 0,
                            child: GestureDetector(
                              onTap: () {
                                transformationcontroller
                                    .toScene(const Offset(200, 300));
                              },
                              onPanUpdate: (details) {
                                if (_cursor ==
                                    SystemMouseCursors.resizeColumn) {
                                  double newPosition = ((0.9 -
                                              wH2DividerPosition -
                                              wH1DividerPosition) +
                                          details.delta.dx /
                                              context.size!.width)
                                      .clamp(0.1, 0.6);
                                  setState(() {
                                    wH2DividerPosition =
                                        (newPosition - .9 + wH1DividerPosition)
                                            .abs()
                                            .clamp(0.2, 0.9);
                                    _cursor = SystemMouseCursors.basic;
                                  });
                                }
                              },
                              onPanEnd: (details) {
                                setState(() {
                                  _cursor = SystemMouseCursors.basic;
                                });
                              },
                              child: Container(
                                margin:
                                    const EdgeInsets.only(right: 6, left: 6),
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(0),
                                  color: Colors.black.withOpacity(0.00),
                                ),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(0),
                                  child:
                                      //prppos Stack
                                      Consumer(builder: (context, ref, c) {
                                    return Stack(
                                      children: [
                                        //Properties botomTool Bar parent
                                        if (ref.watch(pgPropsEnableProvider))
                                          Positioned(
                                              top: sHeight * wVDividerPosition -
                                                  (Platform.isAndroid
                                                      ? 40
                                                      : 30),
                                              height: (Platform.isAndroid
                                                  ? 35
                                                  : 32),
                                              width:
                                                  sWidth * wH2DividerPosition -
                                                      12,
                                              child: Container(
                                                  decoration: BoxDecoration(
                                                    color: defaultPalette
                                                        .extras[1],
                                                    borderRadius: BorderRadius.only(
                                                        bottomLeft: Radius
                                                            .circular(Platform
                                                                    .isAndroid
                                                                ? 26
                                                                : 30),
                                                        bottomRight:
                                                            const Radius
                                                                .circular(26)),
                                                  ),
                                                  padding:
                                                      const EdgeInsets.only(
                                                          top: 8,
                                                          left: 20,
                                                          bottom: 10),
                                                  child: Row(children: [
                                                    //nextprev buittons
                                                    Container(
                                                      decoration: BoxDecoration(
                                                          color: defaultPalette
                                                              .transparent,
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(8)),

                                                      // height: 30,
                                                      // width: 50,
                                                      child: Row(
                                                        mainAxisAlignment:
                                                            MainAxisAlignment
                                                                .spaceAround,
                                                        children: [
                                                          GestureDetector(
                                                            child: Icon(
                                                              Icons
                                                                  .keyboard_arrow_left_sharp,
                                                              color:
                                                                  defaultPalette
                                                                      .black,
                                                              size: 20,
                                                            ),
                                                            onTap: () {
                                                              setState(() {
                                                                print(
                                                                    '________PREV PAGE STARTED LD_________');
                                                                if (currentPageIndex ==
                                                                    0) {
                                                                  pdfScrollController.animateTo(
                                                                      currentPageIndex *
                                                                          ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) +
                                                                              16),
                                                                      duration: const Duration(
                                                                          milliseconds:
                                                                              100),
                                                                      curve: Curves
                                                                          .easeIn);
                                                                  return;
                                                                }
                                                                currentPageIndex--;

                                                                pdfScrollController.animateTo(
                                                                    currentPageIndex *
                                                                        ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) +
                                                                            16),
                                                                    duration: const Duration(
                                                                        milliseconds:
                                                                            100),
                                                                    curve: Curves
                                                                        .easeIn);
                                                              });
                                                              print(
                                                                  '________END PREV PAGE LD_________');
                                                            },
                                                          ),
                                                          const SizedBox(
                                                            width: 10,
                                                          ),
                                                          GestureDetector(
                                                            child: Icon(
                                                              Icons
                                                                  .keyboard_arrow_right_sharp,
                                                              color:
                                                                  defaultPalette
                                                                      .black,
                                                              size: 20,
                                                            ),
                                                            onTap: () {
                                                              setState(() {
                                                                print(
                                                                    '________NEXT PAGE STARTED LD_________');
                                                                if (pageCount ==
                                                                    (currentPageIndex +
                                                                        1)) {
                                                                  _addPdfPage();

                                                                  currentPageIndex++;
                                                                  pdfScrollController.animateTo(
                                                                      currentPageIndex *
                                                                          ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) +
                                                                              6),
                                                                      duration: const Duration(
                                                                          milliseconds:
                                                                              100),
                                                                      curve: Curves
                                                                          .easeIn);

                                                                  print(
                                                                      '________END NEXT PAGE LD_________');
                                                                  return;
                                                                }

                                                                currentPageIndex++;

                                                                pdfScrollController.animateTo(
                                                                    currentPageIndex *
                                                                        ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) +
                                                                            6),
                                                                    duration: const Duration(
                                                                        milliseconds:
                                                                            100),
                                                                    curve: Curves
                                                                        .easeIn);
                                                                print(
                                                                    '________END NEXT PAGE LD_________');
                                                              });
                                                            },
                                                          )
                                                        ],
                                                      ),
                                                    ),
                                                    //RightSide Close Icon Properties Tab Web
                                                    if (ref.watch(
                                                        pgPropsEnableProvider))
                                                      GestureDetector(
                                                        onTap: () {
                                                          ref
                                                              .read(
                                                                  pgPropsEnableProvider
                                                                      .notifier)
                                                              .update((cb) {
                                                            return false;
                                                          });
                                                          setState(() {
                                                            wVDividerPosition =
                                                                20 / sHeight;
                                                          });
                                                          print(
                                                              'Close page props clicked.');
                                                        },
                                                        child: const Padding(
                                                          padding:
                                                              EdgeInsets.only(
                                                                  top: 2.0,
                                                                  left: 5),
                                                          child: Icon(
                                                              TablerIcons.x,
                                                              size: 15),
                                                        ),
                                                      ),
                                                    //DELETE ICON
                                                    Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                              left: 5.0,
                                                              top: 2),
                                                      child: GestureDetector(
                                                        onTap: () {
                                                          _confirmDeleteLayout(
                                                              deletePage: true);
                                                          pdfScrollController.animateTo(
                                                              currentPageIndex *
                                                                  ((1.41428571429 *
                                                                          ((sWidth *
                                                                              (1 -
                                                                                  vDividerPosition)))) +
                                                                      16),
                                                              duration:
                                                                  const Duration(
                                                                      milliseconds:
                                                                          100),
                                                              curve: Curves
                                                                  .easeIn);
                                                        },
                                                        child: Icon(
                                                          TablerIcons.trash,
                                                          color: defaultPalette
                                                              .black,
                                                          size: 15,
                                                        ),
                                                      ),
                                                    ),
                                                  ]))),

                                        // porperties Tab Parent
                                        Positioned(
                                          top: 0,
                                          height: Platform.isAndroid
                                              ? ref.watch(pgPropsEnableProvider)
                                                  ? (sHeight *
                                                          wVDividerPosition) -
                                                      20
                                                  : 25
                                              : (sHeight * wVDividerPosition) -
                                                  20,
                                          width:
                                              sWidth * wH2DividerPosition - 10,
                                          child: Container(
                                            padding: EdgeInsets.only(
                                                top: Platform.isAndroid
                                                    ? 20
                                                    : 40,
                                                left: 5,
                                                right: 5,
                                                bottom: 0),
                                            decoration: BoxDecoration(
                                                borderRadius: BorderRadius.only(
                                                    bottomLeft: Radius.circular(
                                                      Platform.isAndroid
                                                          ? ref.watch(
                                                                  pgPropsEnableProvider)
                                                              ? 25
                                                              : 0
                                                          : 5,
                                                    ),
                                                    bottomRight:
                                                        Radius.circular(
                                                      Platform.isAndroid
                                                          ? ref.watch(
                                                                  pgPropsEnableProvider)
                                                              ? 30
                                                              : 0
                                                          : 5,
                                                    )),
                                                color: defaultPalette.extras[1],
                                                border: Border.all(
                                                    width: 5,
                                                    color: defaultPalette
                                                        .extras[1])),
                                            child:

                                                ///RIGHT TITLE PAGE PROPS //Desktop WEB
                                                ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(20),
                                              child: Container(
                                                padding: EdgeInsets.only(
                                                    top: Platform.isAndroid
                                                        ? 0
                                                        : 0,
                                                    left: 5,
                                                    right: 5,
                                                    bottom: 0),
                                                color: defaultPalette.primary,
                                                child: SingleChildScrollView(
                                                  physics:
                                                      const CustomScrollPhysics(
                                                          scrollFactor: 0.05),
                                                  child: Column(
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .start,
                                                    children: [
                                                      const SizedBox(
                                                        height: 20,
                                                      ),
                                                      //pageNumber //delete //potrtait landscape aNCESTOR
                                                      SizedBox(
                                                        height: Platform
                                                                .isAndroid
                                                            ? textFieldHeight /
                                                                2
                                                            : textFieldHeight /
                                                                2,
                                                        width: sWidth *
                                                                wH2DividerPosition -
                                                            10,

                                                        ///Stack For title, field, delete, portrait, landscape
                                                        child: Stack(
                                                          children: [
                                                            Positioned(
                                                                height: Platform
                                                                        .isAndroid
                                                                    ? textFieldHeight /
                                                                        2
                                                                    : textFieldHeight /
                                                                        2,
                                                                width: (sWidth *
                                                                            wH2DividerPosition -
                                                                        10) *
                                                                    0.2,
                                                                child: Text(
                                                                  'Page',
                                                                  style: GoogleFonts
                                                                      .bungee(),
                                                                )),

                                                            ///PAGE COUNT TEXT Field
                                                            Positioned(
                                                              height: Platform
                                                                      .isAndroid
                                                                  ? textFieldHeight /
                                                                      2
                                                                  : textFieldHeight /
                                                                      2,
                                                              left: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.2,
                                                              width: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.3,
                                                              child:
                                                                  TextFormField(
                                                                cursorColor:
                                                                    defaultPalette
                                                                        .tertiary,
                                                                controller: documentPropertiesList[
                                                                        currentPageIndex]
                                                                    .pageNumberController,
                                                                inputFormatters: [
                                                                  FilteringTextInputFormatter
                                                                      .allow(RegExp(
                                                                          r'^\d*\.?\d*$'))
                                                                ],
                                                                textAlignVertical:
                                                                    TextAlignVertical
                                                                        .top,
                                                                textAlign:
                                                                    TextAlign
                                                                        .center,
                                                                decoration:
                                                                    InputDecoration(
                                                                  contentPadding:
                                                                      const EdgeInsets
                                                                          .all(
                                                                          0),
                                                                  filled: true,
                                                                  fillColor:
                                                                      defaultPalette
                                                                          .primary,
                                                                  border:
                                                                      OutlineInputBorder(
                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            5), // Replace with your desired radius
                                                                  ),
                                                                  enabledBorder:
                                                                      OutlineInputBorder(
                                                                    borderSide: BorderSide(
                                                                        width:
                                                                            2,
                                                                        color: defaultPalette
                                                                            .black),
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            5), // Same as border
                                                                  ),
                                                                  disabledBorder:
                                                                      OutlineInputBorder(
                                                                    borderSide: BorderSide(
                                                                        width:
                                                                            1.2,
                                                                        color: defaultPalette
                                                                            .black),
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            6), // Same as border
                                                                  ),
                                                                  focusedBorder:
                                                                      OutlineInputBorder(
                                                                    borderSide: BorderSide(
                                                                        width:
                                                                            3,
                                                                        color: defaultPalette
                                                                            .tertiary),
                                                                    borderRadius:
                                                                        BorderRadius.circular(
                                                                            5), // Same as border
                                                                  ),
                                                                ),
                                                                keyboardType:
                                                                    TextInputType
                                                                        .number,
                                                                style: GoogleFonts.bungee(
                                                                    color: defaultPalette
                                                                        .black,
                                                                    fontSize:
                                                                        12),
                                                                enabled: false,
                                                              ),
                                                            ),
                                                            //DELETE ICON
                                                            Positioned(
                                                              left: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.5,
                                                              width: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.1,
                                                              child:
                                                                  GestureDetector(
                                                                onTap: () {
                                                                  _confirmDeleteLayout(
                                                                      deletePage:
                                                                          true);
                                                                  pdfScrollController.animateTo(
                                                                      currentPageIndex *
                                                                          ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) +
                                                                              16),
                                                                      duration: const Duration(
                                                                          milliseconds:
                                                                              100),
                                                                      curve: Curves
                                                                          .easeIn);
                                                                },
                                                                child: Icon(
                                                                  TablerIcons
                                                                      .trash,
                                                                  color:
                                                                      defaultPalette
                                                                          .black,
                                                                  size: 20,
                                                                ),
                                                              ),
                                                            ),
                                                            //portrait button
                                                            Positioned(
                                                              left: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.63,
                                                              width: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.1,
                                                              child:
                                                                  GestureDetector(
                                                                onTap: () {
                                                                  setState(() {
                                                                    documentPropertiesList[currentPageIndex]
                                                                            .orientationController =
                                                                        pw.PageOrientation
                                                                            .portrait;
                                                                  });
                                                                },
                                                                child:
                                                                    AnimatedContainer(
                                                                  duration:
                                                                      Durations
                                                                          .medium4,
                                                                  decoration: BoxDecoration(
                                                                      color: !(documentPropertiesList[currentPageIndex].orientationController ==
                                                                              pw
                                                                                  .PageOrientation.portrait)
                                                                          ? Colors
                                                                              .white
                                                                          : defaultPalette.extras[
                                                                              1],
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              5)),
                                                                  child: Icon(
                                                                    TablerIcons
                                                                        .crop_portrait,
                                                                    color: defaultPalette
                                                                        .black,
                                                                    size: 20,
                                                                  ),
                                                                ),
                                                              ),
                                                            ),

                                                            //landscape button filled
                                                            Positioned(
                                                              left: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.73,
                                                              width: (sWidth *
                                                                          wH2DividerPosition -
                                                                      10) *
                                                                  0.1,
                                                              child:
                                                                  GestureDetector(
                                                                onTap: () {
                                                                  setState(() {
                                                                    documentPropertiesList[currentPageIndex]
                                                                            .orientationController =
                                                                        pw.PageOrientation
                                                                            .landscape;
                                                                  });
                                                                },
                                                                child:
                                                                    AnimatedContainer(
                                                                  duration:
                                                                      Durations
                                                                          .medium4,
                                                                  decoration: BoxDecoration(
                                                                      color: !(documentPropertiesList[currentPageIndex].orientationController ==
                                                                              pw
                                                                                  .PageOrientation.landscape)
                                                                          ? Colors
                                                                              .white
                                                                          : defaultPalette.extras[
                                                                              1],
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              5)),
                                                                  child: Icon(
                                                                    TablerIcons
                                                                        .crop_landscape,
                                                                    color: defaultPalette
                                                                        .black,
                                                                    size: 20,
                                                                  ),
                                                                ),
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      //Space
                                                      const SizedBox(
                                                        height: 10,
                                                      ),
                                                      // MARGIN Main, ORIENTATION, FORMAT
                                                      Column(
                                                        children: [
                                                          //Margin TiTle
                                                          SizedBox(
                                                            height:
                                                                textFieldHeight /
                                                                    2,
                                                            child: Row(
                                                              children: [
                                                                Expanded(
                                                                  child: Text(
                                                                    'Margin',
                                                                    style: GoogleFonts
                                                                        .bungee(),
                                                                  ),
                                                                ),

                                                                const SizedBox(
                                                                  width: 5,
                                                                ),
                                                                //Margin ONE Field
                                                                Expanded(
                                                                  child:
                                                                      TextFormField(
                                                                    onTapOutside:
                                                                        (event) {
                                                                      marginAllFocus
                                                                          .unfocus();
                                                                    },
                                                                    obscureText:
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins,
                                                                    focusNode:
                                                                        marginAllFocus,
                                                                    controller:
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .marginAllController,
                                                                    inputFormatters: [
                                                                      NumericInputFormatter(
                                                                          maxValue:
                                                                              documentPropertiesList[currentPageIndex].pageFormatController.width / 2.001)
                                                                    ],
                                                                    textAlignVertical:
                                                                        TextAlignVertical
                                                                            .top,
                                                                    textAlign:
                                                                        TextAlign
                                                                            .center,
                                                                    decoration:
                                                                        InputDecoration(
                                                                      contentPadding:
                                                                          const EdgeInsets
                                                                              .all(
                                                                              0),
                                                                      floatingLabelAlignment:
                                                                          FloatingLabelAlignment
                                                                              .center,
                                                                      labelStyle:
                                                                          GoogleFonts.lexend(
                                                                              color: defaultPalette.black),
                                                                      filled:
                                                                          true,
                                                                      fillColor: !documentPropertiesList[currentPageIndex].useIndividualMargins
                                                                          ? defaultPalette
                                                                              .primary
                                                                          : defaultPalette
                                                                              .primary
                                                                              .withOpacity(0.5),
                                                                      border:
                                                                          OutlineInputBorder(
                                                                        // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Replace with your desired radius
                                                                      ),
                                                                      enabledBorder:
                                                                          OutlineInputBorder(
                                                                        borderSide: BorderSide(
                                                                            width:
                                                                                1.2,
                                                                            color:
                                                                                defaultPalette.black),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Same as border
                                                                      ),
                                                                      focusedBorder:
                                                                          OutlineInputBorder(
                                                                        borderSide: BorderSide(
                                                                            width:
                                                                                1.5,
                                                                            color:
                                                                                defaultPalette.tertiary),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Same as border
                                                                      ),
                                                                    ),
                                                                    keyboardType:
                                                                        TextInputType
                                                                            .number,
                                                                    style: GoogleFonts.bungee(
                                                                        // fontStyle: FontStyle.italic,
                                                                        fontSize: 12,
                                                                        color: defaultPalette.black),
                                                                    onChanged:
                                                                        (value) {
                                                                      // setState(() {

                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginTopController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginBottomController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginLeftController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginRightController
                                                                          .text = value;
                                                                      // _updatePdfPreview(
                                                                      //     '');
                                                                      // });
                                                                    },
                                                                    enabled: !documentPropertiesList[
                                                                            currentPageIndex]
                                                                        .useIndividualMargins,
                                                                  ),
                                                                ),

                                                                const SizedBox(
                                                                  width: 5,
                                                                ),
                                                                //Increase Decrease
                                                                Column(
                                                                  children: [
                                                                    //Margin increment button
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text = (double.parse(documentPropertiesList[currentPageIndex].marginAllController.text) +
                                                                                  1)
                                                                              .toString();
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        });

                                                                        // _updatePdfPreview('');
                                                                      },
                                                                      child:
                                                                          const Icon(
                                                                        IconsaxPlusLinear
                                                                            .arrow_up_1,
                                                                        size:
                                                                            10,
                                                                      ),
                                                                    ),
                                                                    //Margin decrement button
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          var value = documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text = (double.parse(value) -
                                                                                  1)
                                                                              .abs()
                                                                              .toString();
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        });
                                                                        // _updatePdfPreview('');
                                                                      },
                                                                      child:
                                                                          const Icon(
                                                                        IconsaxPlusLinear
                                                                            .arrow_down,
                                                                        size:
                                                                            10,
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                ////INDIVIDUAL MARGINS BUTTON
                                                                IconButton(
                                                                    padding:
                                                                        const EdgeInsets
                                                                            .all(
                                                                            0),
                                                                    onPressed:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins = !documentPropertiesList[
                                                                                currentPageIndex]
                                                                            .useIndividualMargins;
                                                                        if (documentPropertiesList[currentPageIndex].useIndividualMargins ==
                                                                            false) {
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        }
                                                                      });
                                                                    },
                                                                    icon: documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins
                                                                        ? const Icon(
                                                                            IconsaxPlusBold.maximize_1,
                                                                            size:
                                                                                20,
                                                                          )
                                                                        : const Icon(
                                                                            IconsaxPlusLinear.maximize_2,
                                                                            size:
                                                                                20,
                                                                          ))
                                                                // Text(
                                                                //     'Use Individual Margins'),
                                                              ],
                                                            ),
                                                          ),

                                                          if (documentPropertiesList[
                                                                  currentPageIndex]
                                                              .useIndividualMargins)
                                                            Column(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 10,
                                                                ),
                                                                //TOP AND BOTTOM Margin TiTle

                                                                Row(
                                                                  children: [
                                                                    //Top Margin text
                                                                    Expanded(
                                                                      flex: 2,
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 1,
                                                                              child: Text(
                                                                                'Top',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //TOP Margin ONE Field
                                                                            Expanded(
                                                                              flex: 1,
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginTopFocus.unfocus();
                                                                                },
                                                                                focusNode: marginTopFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginTopController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginTopController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),

                                                                    const SizedBox(
                                                                      width: 10,
                                                                    ),
                                                                    //Bottom Margin text
                                                                    Expanded(
                                                                      flex: 3,
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 3,
                                                                              child: Text(
                                                                                'Bottom',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Bottom Margin ONE Field
                                                                            Expanded(
                                                                              flex: 2,
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginBottomFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginBottomController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginTopController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginBottomController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                const SizedBox(
                                                                  height: 10,
                                                                ),
                                                                // LEFT AND RIGHT Margin Title
                                                                Row(
                                                                  children: [
                                                                    //Left Margin text
                                                                    Expanded(
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              child: Text(
                                                                                'Left',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Left Margin ONE Field
                                                                            Expanded(
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginLeftFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginLeftController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginRightController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginLeftController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 10,
                                                                    ),
                                                                    //Right Margin text
                                                                    Expanded(
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 2,
                                                                              child: Text(
                                                                                'Right',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Right Margin ONE Field
                                                                            Expanded(
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginRightFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginRightController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginRightController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease (Right Margin)
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                const SizedBox(
                                                                  height: 0,
                                                                )
                                                              ],
                                                            ),
                                                          // Divider(),
                                                        ],
                                                      ),
                                                      //Orientation
                                                      SizedBox(
                                                        height:
                                                            textFieldHeight /
                                                                1.5,
                                                        child: CustomDropdown(
                                                          hintText:
                                                              'Orientation',
                                                          items: [
                                                            'Portrait',
                                                            'Landscape'
                                                          ],
                                                          closedHeaderPadding:
                                                              const EdgeInsets
                                                                  .all(0),
                                                          initialItem: documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .orientationController ==
                                                                  pw.PageOrientation
                                                                      .portrait
                                                              ? 'Portrait'
                                                              : 'Landscape',
                                                          onChanged: (value) {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .orientationController = value ==
                                                                      'Portrait'
                                                                  ? pw.PageOrientation
                                                                      .portrait
                                                                  : pw.PageOrientation
                                                                      .landscape;
                                                            });
                                                            // _updatePdfPreview(
                                                            //     '');
                                                          },
                                                          listItemBuilder:
                                                              (context,
                                                                  item,
                                                                  isSelected,
                                                                  onItemSelect) {
                                                            return Row(
                                                              children: [
                                                                Icon(
                                                                  item == 'Portrait'
                                                                      ? Icons
                                                                          .crop_portrait
                                                                      : Icons
                                                                          .crop_3_2_sharp,
                                                                  size: 20,
                                                                ),
                                                                const SizedBox(
                                                                  width: 10,
                                                                ),
                                                                Text(
                                                                  item,
                                                                  style: GoogleFonts
                                                                      .bungee(),
                                                                )
                                                              ],
                                                            );
                                                          },
                                                          decoration:
                                                              CustomDropdownDecoration(
                                                            prefixIcon: Icon(
                                                              documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .orientationController ==
                                                                      pw.PageOrientation
                                                                          .portrait
                                                                  ? Icons
                                                                      .crop_portrait_outlined
                                                                  : Icons
                                                                      .crop_3_2_sharp,
                                                              size: 20,
                                                            ),
                                                            expandedBorderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5),
                                                            closedBorderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5),
                                                            closedBorder: Border.all(
                                                                color:
                                                                    defaultPalette
                                                                        .black,
                                                                width: 1.2),
                                                            expandedBorder: Border.all(
                                                                color:
                                                                    defaultPalette
                                                                        .tertiary,
                                                                width: 3),
                                                            closedFillColor:
                                                                defaultPalette
                                                                    .primary,
                                                            hintStyle:
                                                                TextStyle(
                                                              color:
                                                                  defaultPalette
                                                                      .black,
                                                            ),
                                                            headerStyle:
                                                                GoogleFonts
                                                                    .bungee(
                                                              color:
                                                                  defaultPalette
                                                                      .black,
                                                            ),
                                                          ),
                                                        ),
                                                      ),
                                                      const SizedBox(
                                                          height: 10),
                                                      //Page Format
                                                      SizedBox(
                                                        height:
                                                            textFieldHeight /
                                                                1.5,
                                                        child: CustomDropdown
                                                            .search(
                                                          hintText:
                                                              'Page Format',
                                                          items: [
                                                            'A4',
                                                            'A3',
                                                            'A5',
                                                            'A6',
                                                            'Letter',
                                                            'Legal',
                                                            'Standard',
                                                          ],
                                                          initialItem: getPageFormatString(
                                                              documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .pageFormatController),
                                                          onChanged: (value) {
                                                            setState(() {
                                                              documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .pageFormatController =
                                                                  getPageFormatFromString(
                                                                      value ??
                                                                          '');
                                                            });
                                                            // _updatePdfPreview(
                                                            //     '');
                                                          },
                                                          closedHeaderPadding:
                                                              const EdgeInsets
                                                                  .only(
                                                                  left: 5),
                                                          listItemBuilder:
                                                              (context,
                                                                  item,
                                                                  isSelected,
                                                                  onItemSelect) {
                                                            return Row(
                                                              children: [
                                                                const SizedBox(
                                                                  width: 10,
                                                                ),
                                                                Text(
                                                                  item,
                                                                  style: GoogleFonts
                                                                      .bungee(),
                                                                )
                                                              ],
                                                            );
                                                          },
                                                          decoration:
                                                              CustomDropdownDecoration(
                                                            expandedBorderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5),
                                                            closedBorderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        5),
                                                            closedBorder: Border.all(
                                                                color:
                                                                    defaultPalette
                                                                        .black,
                                                                width: 1.2),
                                                            expandedBorder: Border.all(
                                                                color:
                                                                    defaultPalette
                                                                        .tertiary,
                                                                width: 3),
                                                            closedFillColor:
                                                                defaultPalette
                                                                    .primary,
                                                            hintStyle: TextStyle(
                                                                color:
                                                                    defaultPalette
                                                                        .black),
                                                            headerStyle:
                                                                GoogleFonts.bungee(
                                                                    color: defaultPalette
                                                                        .black),
                                                          ),
                                                        ),
                                                      ),

                                                      const SizedBox(
                                                        height: 30,
                                                      )
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ),
                                        //Properties Title Parent
                                        Positioned(
                                          //Tap for reopening tab
                                          child: GestureDetector(
                                            onTap: () {
                                              ref
                                                  .read(pgPropsEnableProvider
                                                      .notifier)
                                                  .update((cb) {
                                                return true;
                                              });
                                              setState(() {
                                                wVDividerPosition = 0.4;
                                              });
                                            },
                                            child: Stack(
                                              children: [
                                                Container(
                                                  height: Platform.isAndroid
                                                      ? 20
                                                      : 45,
                                                  color:
                                                      defaultPalette.extras[1],
                                                ),
                                                //LeftScreen tilte
                                                Positioned(
                                                  left: Platform.isAndroid
                                                      ? 5
                                                      : 12,
                                                  child: Container(
                                                    height: 55,
                                                    margin: EdgeInsets.only(
                                                        left: 10,
                                                        top: Platform.isAndroid
                                                            ? 5
                                                            : 8,
                                                        bottom: 5),
                                                    width:
                                                        ((wH2DividerPosition) *
                                                            sWidth),
                                                    child: Text(
                                                        Platform.isAndroid
                                                            ? 'Page Properties'
                                                            : 'Page \nProps',
                                                        maxLines: 2,
                                                        overflow:
                                                            TextOverflow.fade,
                                                        style:
                                                            GoogleFonts.bungee(
                                                          color: defaultPalette
                                                              .black,
                                                          fontSize:
                                                              Platform.isAndroid
                                                                  ? 10
                                                                  : 12,
                                                        )),
                                                  ),
                                                ),
                                                //LeftSide Icon
                                                Positioned(
                                                    top: 5,
                                                    left: Platform.isAndroid
                                                        ? -10
                                                        : -20,
                                                    child: Icon(
                                                        TablerIcons
                                                            .list_details,
                                                        size: Platform.isAndroid
                                                            ? 20
                                                            : 40)),
                                              ],
                                            ),
                                          ),
                                        ),

                                        //Text Styling //Desktop WEB
                                        Positioned(
                                            //Text Styling //Desktop WEB
                                            top: sHeight * wVDividerPosition,
                                            height: (sHeight *
                                                (1 - wVDividerPosition)),
                                            width: sWidth * wH2DividerPosition -
                                                10,
                                            child: Container(
                                              padding:
                                                  const EdgeInsets.only(top: 8),
                                              height: sHeight * 0.55,
                                              width:
                                                  (sWidth * wH2DividerPosition),
                                              child: ClipRRect(
                                                borderRadius:
                                                    const BorderRadius.only(
                                                        topLeft:
                                                            Radius.circular(30),
                                                        topRight:
                                                            Radius.circular(
                                                                30)),
                                                child: Stack(
                                                  children: [
                                                    AnimatedPositioned(
                                                      duration:
                                                          Durations.medium3,
                                                      left: panelIndex
                                                                  .panelIndex ==
                                                              -1
                                                          ? 10
                                                          : 44,
                                                      child: Container(
                                                        height: sHeight * 0.55,
                                                        width: (sWidth *
                                                            wH2DividerPosition),
                                                        decoration:
                                                            BoxDecoration(
                                                                color: Colors
                                                                    .black
                                                                    .withOpacity(
                                                                        0.2)),
                                                        child: Column(
                                                          // direction: Axis.vertical,
                                                          children: [
                                                            Container(
                                                              height: 50,
                                                              decoration: BoxDecoration(
                                                                  color: Colors
                                                                      .white
                                                                      .withOpacity(
                                                                          1)),
                                                              alignment: Alignment
                                                                  .centerLeft,
                                                              padding:
                                                                  const EdgeInsets
                                                                      .only(
                                                                      left: 5,
                                                                      top: 5),
                                                              child: Column(
                                                                mainAxisAlignment:
                                                                    MainAxisAlignment
                                                                        .spaceEvenly,
                                                                crossAxisAlignment:
                                                                    CrossAxisAlignment
                                                                        .start,
                                                                children: [
                                                                  //heading //Desktop WEB
                                                                  Text(
                                                                    'TEXT STYLE',
                                                                    style: GoogleFonts.bungee(
                                                                        fontSize:
                                                                            18,
                                                                        letterSpacing:
                                                                            0,
                                                                        height:
                                                                            1),
                                                                  ),
                                                                  //id //Desktop WEB
                                                                  Text(
                                                                    panelIndex
                                                                        .id,
                                                                    maxLines: 1,
                                                                    overflow:
                                                                        TextOverflow
                                                                            .ellipsis,
                                                                    style: GoogleFonts.lexend(
                                                                        fontSize:
                                                                            8,
                                                                        letterSpacing:
                                                                            0,
                                                                        height:
                                                                            0.9),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            panelIndex.panelIndex ==
                                                                    -1
                                                                ? Container(
                                                                    color: Colors
                                                                        .transparent,
                                                                    height: 10,
                                                                    width: 5,
                                                                  )
                                                                : Expanded(
                                                                    child:
                                                                        Container(
                                                                      padding:
                                                                          const EdgeInsets
                                                                              .all(
                                                                              5),
                                                                      child:
                                                                          Builder(
                                                                        builder:
                                                                            (context) {
                                                                          var item;
                                                                          try {
                                                                            item =
                                                                                _sheetItemIterator(panelIndex.id, spreadSheetList[currentPageIndex]) as TextEditorItem;
                                                                          } on Exception catch (e) {
                                                                            item =
                                                                                TextEditorItem(id: '', parentId: '');
                                                                          }

                                                                          bool _getIsToggled(
                                                                              Map<String, Attribute> attrs,
                                                                              Attribute attribute) {
                                                                            if (attribute.key == Attribute.list.key ||
                                                                                attribute.key == Attribute.header.key ||
                                                                                attribute.key == Attribute.script.key ||
                                                                                attribute.key == Attribute.align.key) {
                                                                              final currentAttribute = attrs[attribute.key];
                                                                              if (currentAttribute == null) {
                                                                                // print('returning false');
                                                                                return false;
                                                                              }
                                                                              // print('returning ${currentAttribute.value == attribute.value}');
                                                                              return currentAttribute.value == attribute.value;
                                                                            }
                                                                            // print(
                                                                            //     'returning ${attrs.containsKey(attribute.key)}');
                                                                            return attrs.containsKey(attribute.key);
                                                                          }

                                                                          Widget
                                                                              buildElevatedLayerButton({
                                                                            required double
                                                                                buttonHeight,
                                                                            required double
                                                                                buttonWidth,
                                                                            required Duration
                                                                                animationDuration,
                                                                            required Curve
                                                                                animationCurve,
                                                                            required void Function()
                                                                                onClick,
                                                                            required BoxDecoration
                                                                                baseDecoration,
                                                                            required BoxDecoration
                                                                                topDecoration,
                                                                            required Widget
                                                                                topLayerChild,
                                                                            required BorderRadius
                                                                                borderRadius,
                                                                            bool toggleOnTap =
                                                                                false,
                                                                            bool isTapped =
                                                                                false,
                                                                          }) {
                                                                            var down =
                                                                                isTapped;
                                                                            void
                                                                                _handleTapDown(TapDownDetails details) {
                                                                              onClick();

                                                                              setState(() {
                                                                                down = true;
                                                                                print(down);
                                                                              });
                                                                            }

                                                                            void
                                                                                _handleTapUp(TapUpDetails details) {
                                                                              if (!toggleOnTap && down) {
                                                                                setState(() {
                                                                                  down = !down;
                                                                                });
                                                                              }
                                                                            }

                                                                            void
                                                                                _handleTapCancel() {}

                                                                            return GestureDetector(
                                                                              onTap: () {},
                                                                              onTapDown: _handleTapDown,
                                                                              onTapUp: _handleTapUp,
                                                                              onTapCancel: _handleTapCancel,
                                                                              child: SizedBox(
                                                                                height: buttonHeight,
                                                                                width: buttonWidth,
                                                                                child: Stack(
                                                                                  alignment: Alignment.bottomRight,
                                                                                  children: [
                                                                                    Positioned(
                                                                                      bottom: 0,
                                                                                      right: 0,
                                                                                      child: Container(
                                                                                        width: buttonWidth - 10,
                                                                                        height: buttonHeight - 10,
                                                                                        decoration: baseDecoration.copyWith(
                                                                                          borderRadius: borderRadius,
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                    AnimatedPositioned(
                                                                                      duration: animationDuration,
                                                                                      curve: animationCurve,
                                                                                      bottom: !down ? 4 : 0,
                                                                                      right: !down ? 4 : 0,
                                                                                      child: Container(
                                                                                        width: buttonWidth - 10,
                                                                                        height: buttonHeight - 10,
                                                                                        alignment: Alignment.center,
                                                                                        decoration: topDecoration.copyWith(
                                                                                          borderRadius: borderRadius,
                                                                                        ),
                                                                                        child: topLayerChild,
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                              ),
                                                                            );
                                                                          }

                                                                          var width =
                                                                              (sWidth * wH2DividerPosition * 0.92) - 44;

                                                                          TextEditingController
                                                                              hexController =
                                                                              TextEditingController()..text = '${item.textEditorController.getSelectionStyle().attributes['color']?.value ?? '#00000000'}';
                                                                          TextEditingController
                                                                              bghexController =
                                                                              TextEditingController()..text = '${(item.textEditorController.getSelectionStyle().attributes['background']?.value ?? '#00000000')}';
                                                                          TextEditingController
                                                                              fontSizeController =
                                                                              TextEditingController()..text = '${double.parse(item.textEditorController.getSelectionStyle().attributes['size']?.value ?? '0')}';
                                                                          if (fontSizeController
                                                                              .text
                                                                              .endsWith('.0')) {
                                                                            fontSizeController.text =
                                                                                '${double.parse(item.textEditorController.getSelectionStyle().attributes['size']?.value ?? '0').ceil()}';
                                                                          }
                                                                          TextEditingController
                                                                              letterSpaceController =
                                                                              TextEditingController()..text = '${double.parse(item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value ?? '0')}';
                                                                          if (letterSpaceController
                                                                              .text
                                                                              .endsWith('.0')) {
                                                                            letterSpaceController.text =
                                                                                letterSpaceController.text.replaceAll('.0', '');
                                                                          }
                                                                          TextEditingController
                                                                              wordSpaceController =
                                                                              TextEditingController()..text = '${double.parse(item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value ?? '0')}';
                                                                          if (wordSpaceController
                                                                              .text
                                                                              .endsWith('.0')) {
                                                                            wordSpaceController.text =
                                                                                wordSpaceController.text.replaceAll('.0', '');
                                                                          }
                                                                          TextEditingController
                                                                              lineSpaceController =
                                                                              TextEditingController()..text = '${double.parse(item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value ?? '0')}';
                                                                          if (lineSpaceController
                                                                              .text
                                                                              .endsWith('.0')) {
                                                                            lineSpaceController.text =
                                                                                lineSpaceController.text.replaceAll('.0', '');
                                                                          }
                                                                          int crossAxisCount = width < (width / vDividerPosition) / 1.75
                                                                              ? 2
                                                                              : 4;
                                                                          var iconWidth = width /
                                                                              crossAxisCount /
                                                                              1.05;
                                                                          var iconHeight =
                                                                              // 50.0;
                                                                              width < (width / vDividerPosition) / 2.2
                                                                                  ? iconWidth
                                                                                  : width < (width / vDividerPosition) / 1.75
                                                                                      ? iconWidth / 1.3
                                                                                      : iconWidth;
                                                                          var fCrossAxisCount = width < (sWidth) / 3
                                                                              ? 1
                                                                              : width < (sWidth) / 1.7
                                                                                  ? 2
                                                                                  : 3;
                                                                          var fButtonWidth = width /
                                                                              fCrossAxisCount /
                                                                              1.05;
                                                                          var fButtonHeight =
                                                                              fButtonWidth * 0.5;
                                                                          return PageView(
                                                                            controller:
                                                                                textStyleTabControler,
                                                                            scrollDirection:
                                                                                Axis.vertical,
                                                                            physics:
                                                                                const NeverScrollableScrollPhysics(),
                                                                            onPageChanged:
                                                                                (value) {
                                                                              print(value);
                                                                            },
                                                                            children: [
                                                                              if (item.id != '') ...[
                                                                                //FONTS //Desktop WEB
                                                                                Stack(
                                                                                  children: [
                                                                                    Positioned(
                                                                                      top: 0,
                                                                                      height: sHeight * 0.4,
                                                                                      width: width - 10,
                                                                                      child: GridView.builder(
                                                                                        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: fCrossAxisCount, childAspectRatio: 2),
                                                                                        itemCount: fonts.length,
                                                                                        itemBuilder: (context, index) {
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: fButtonHeight,
                                                                                            buttonWidth: fButtonWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: item.textEditorController.getSelectionStyle().attributes[Attribute.font.key]?.value == fonts[index],
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              item.textEditorController.formatSelection(Attribute.fromKeyValue(
                                                                                                Attribute.font.key,
                                                                                                fonts[index] == 'Clear' ? null : fonts[index],
                                                                                              ));
                                                                                              setState(() {});
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: Text(
                                                                                              fonts[index],
                                                                                              style: TextStyle(fontFamily: fonts[index], fontSize: fButtonWidth / 7),
                                                                                              maxLines: 1,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(8),
                                                                                          );
                                                                                        },
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                //FORMATTING ALL THAT PAGE  //Desktop WEB
                                                                                SingleChildScrollView(
                                                                                  child: SizedBox(
                                                                                    width: width,
                                                                                    height: width < (width / vDividerPosition) / 2.2
                                                                                        ? iconWidth * 7
                                                                                        : width < (width / vDividerPosition) / 1.75
                                                                                            ? (iconWidth / 1.3) * 7
                                                                                            : iconWidth * 5,
                                                                                    child: Stack(
                                                                                      children: [
                                                                                        // BOLD ITALIC UNDERLINE STRIKETHRU
                                                                                        Positioned(
                                                                                          left: 0,
                                                                                          top: 0,
                                                                                          width: width - 10,
                                                                                          height: iconHeight * 3,
                                                                                          child: GridView.builder(
                                                                                            physics: const NeverScrollableScrollPhysics(),
                                                                                            itemCount: 4,
                                                                                            padding: const EdgeInsets.all(0),
                                                                                            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                                crossAxisCount: crossAxisCount,
                                                                                                crossAxisSpacing: 0,
                                                                                                mainAxisSpacing: 0,
                                                                                                // mainAxisExtent: width/3
                                                                                                childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                                    ? 1
                                                                                                    : width < (width / vDividerPosition) / 1.75
                                                                                                        ? 1.3
                                                                                                        : 1),
                                                                                            itemBuilder: (BuildContext context, int index) {
                                                                                              switch (index) {
                                                                                                case 0:
                                                                                                  // BOLD
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.bold),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.bold.key);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.bold, null) : Attribute.bold,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.bold,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 1:
                                                                                                  //ITALIC
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.italic),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.italic.key);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.italic, null) : Attribute.italic,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.italic,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 2:
                                                                                                  //UNDERLINE
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.underline),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.underline.key);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.underline, null) : Attribute.underline,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.underline,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 3:
                                                                                                  //STRIKETHRU
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.strikeThrough),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.strikeThrough.key);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.strikeThrough, null) : Attribute.strikeThrough,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.strikethrough,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                default:
                                                                                                  return Container();
                                                                                              }
                                                                                            },
                                                                                          ),
                                                                                        ),
                                                                                        // SUPER, SUBS, LTR, RTL
                                                                                        Positioned(
                                                                                          top: width < (width / vDividerPosition) / 2.2
                                                                                              ? iconWidth * 2.2
                                                                                              : width < (width / vDividerPosition) / 1.75
                                                                                                  ? (iconWidth / 1.3) * 2.2
                                                                                                  : iconWidth * 1.2,
                                                                                          left: 0,
                                                                                          width: width - 10,
                                                                                          height: iconHeight * 2,
                                                                                          child: GridView.builder(
                                                                                            physics: const NeverScrollableScrollPhysics(),
                                                                                            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                              crossAxisCount: crossAxisCount,
                                                                                              crossAxisSpacing: 0,
                                                                                              mainAxisSpacing: 0,
                                                                                              childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                                  ? 1
                                                                                                  : width < (width / vDividerPosition) / 1.75
                                                                                                      ? 1.3
                                                                                                      : 1,
                                                                                            ),
                                                                                            itemCount: 4,
                                                                                            itemBuilder: (BuildContext context, int index) {
                                                                                              switch (index) {
                                                                                                case 0:
                                                                                                  //SUBSCRIPT
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.subscript, null) : Attribute.subscript,
                                                                                                      );
                                                                                                      final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.superscript.key);
                                                                                                      if (uncurrentValue && currentValue) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.clone(Attribute.subscript, null),
                                                                                                        );
                                                                                                        currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                                      }
                                                                                                      print('$uncurrentValue && $currentValue');
                                                                                                      if (uncurrentValue && !currentValue) {
                                                                                                        print('un');
                                                                                                        print(uncurrentValue);
                                                                                                        item.textEditorController.formatSelection(Attribute.clone(Attribute.superscript, null));
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.subscript,
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                                        });
                                                                                                        print('cu');
                                                                                                        print(currentValue);
                                                                                                        return;
                                                                                                      }
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.subscript, null) : Attribute.subscript,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.subscript,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 1:
                                                                                                  //SUPERSCIPT
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.superscript, null) : Attribute.superscript,
                                                                                                      );
                                                                                                      final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.subscript.key);
                                                                                                      if (uncurrentValue && currentValue) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.clone(Attribute.superscript, null),
                                                                                                        );
                                                                                                        currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                                      }
                                                                                                      // print('$uncurrentValue && $currentValue');
                                                                                                      if (uncurrentValue && !currentValue) {
                                                                                                        // print('un');
                                                                                                        // print(uncurrentValue);
                                                                                                        item.textEditorController.formatSelection(Attribute.clone(Attribute.subscript, null));
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.superscript,
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                                        });
                                                                                                        // print('cu');
                                                                                                        // print(currentValue);
                                                                                                        return;
                                                                                                      }
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.superscript, null) : Attribute.superscript,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.superscript,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 2:
                                                                                                  //DIRECTION LTR
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: !_getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.rtl, null) : Attribute.rtl,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.text_direction_ltr,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 3:
                                                                                                  //DIRECTION RTL
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.rtl, null) : Attribute.rtl,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.text_direction_rtl,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );

                                                                                                default:
                                                                                                  return Container();
                                                                                              }
                                                                                            },
                                                                                          ),
                                                                                        ),
                                                                                        // LEFT RIGHT CENTER JUSTIFY
                                                                                        Positioned(
                                                                                          top: width < (width / vDividerPosition) / 2.2
                                                                                              ? iconWidth * 2.2
                                                                                                  //height of the previous wdiget
                                                                                                  +
                                                                                                  iconHeight * 2.2
                                                                                              : width < (width / vDividerPosition) / 1.75
                                                                                                  ? (iconWidth / 1.3) * 2.2
                                                                                                      //height of the previous wdiget
                                                                                                      +
                                                                                                      iconHeight * 2.2
                                                                                                  : iconWidth * 1.2
                                                                                                      //height of the previous wdiget
                                                                                                      +
                                                                                                      iconHeight * 1.2,
                                                                                          left: 0,
                                                                                          width: width - 10,
                                                                                          height: iconHeight * 2,
                                                                                          child: GridView.builder(
                                                                                            physics: const NeverScrollableScrollPhysics(),
                                                                                            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                              crossAxisCount: crossAxisCount,
                                                                                              crossAxisSpacing: 0,
                                                                                              mainAxisSpacing: 0,
                                                                                              childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                                  ? 1
                                                                                                  : width < (width / vDividerPosition) / 1.75
                                                                                                      ? 1.3
                                                                                                      : 1,
                                                                                            ),
                                                                                            itemCount: 4,
                                                                                            itemBuilder: (BuildContext context, int index) {
                                                                                              switch (index) {
                                                                                                case 0:
                                                                                                  //LEFT ALIGN
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.leftAlignment, null) : Attribute.leftAlignment,
                                                                                                      );
                                                                                                      final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.rightAlignment.key);
                                                                                                      if (uncurrentValue && currentValue) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.clone(Attribute.leftAlignment, null),
                                                                                                        );
                                                                                                        currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                                      }
                                                                                                      // print('$uncurrentValue && $currentValue');
                                                                                                      if (uncurrentValue && !currentValue) {
                                                                                                        // print('un');
                                                                                                        // print(uncurrentValue);
                                                                                                        item.textEditorController.formatSelection(Attribute.clone(Attribute.rightAlignment, null));
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.leftAlignment,
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                                        });
                                                                                                        // print('cu');
                                                                                                        // print(currentValue);
                                                                                                        return;
                                                                                                      }
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.leftAlignment, null) : Attribute.leftAlignment,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.align_left,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 1:
                                                                                                  //RIGHT ALIGN
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.rightAlignment, null) : Attribute.rightAlignment,
                                                                                                      );
                                                                                                      final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.leftAlignment.key);
                                                                                                      if (uncurrentValue && currentValue) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.clone(Attribute.rightAlignment, null),
                                                                                                        );
                                                                                                        currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                                      }
                                                                                                      // print('$uncurrentValue && $currentValue');
                                                                                                      if (uncurrentValue && !currentValue) {
                                                                                                        // print('un');
                                                                                                        // print(uncurrentValue);
                                                                                                        item.textEditorController.formatSelection(Attribute.clone(Attribute.leftAlignment, null));
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.rightAlignment,
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                                        });
                                                                                                        // print('cu');
                                                                                                        // print(currentValue);
                                                                                                        return;
                                                                                                      }
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.rightAlignment, null) : Attribute.rightAlignment,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.align_right,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 2:
                                                                                                  //CENTER ALIGN
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.centerAlignment),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.centerAlignment);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.centerAlignment, null) : Attribute.centerAlignment,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.align_center,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );
                                                                                                case 3:
                                                                                                  //JUSTIFY ALIGN
                                                                                                  return buildElevatedLayerButton(
                                                                                                    buttonHeight: iconHeight,
                                                                                                    buttonWidth: iconWidth,
                                                                                                    toggleOnTap: true,
                                                                                                    isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.justifyAlignment),
                                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                                    animationCurve: Curves.ease,
                                                                                                    onClick: () {
                                                                                                      var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.justifyAlignment);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        currentValue ? Attribute.clone(Attribute.justifyAlignment, null) : Attribute.justifyAlignment,
                                                                                                      );
                                                                                                    },
                                                                                                    baseDecoration: BoxDecoration(
                                                                                                      color: Colors.green,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topDecoration: BoxDecoration(
                                                                                                      color: Colors.white,
                                                                                                      border: Border.all(),
                                                                                                    ),
                                                                                                    topLayerChild: const Icon(
                                                                                                      TablerIcons.align_justified,
                                                                                                      color: Colors.black,
                                                                                                      size: 20,
                                                                                                    ),
                                                                                                    borderRadius: BorderRadius.circular(10),
                                                                                                  );

                                                                                                default:
                                                                                                  return Container();
                                                                                              }
                                                                                            },
                                                                                          ),
                                                                                        ),
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //Font Size, Word Spacing, Letter Spacing, Line Spacing //Desktop WEB
                                                                                SingleChildScrollView(
                                                                                  child:
                                                                                      //SIZE SPACE PARENT //Desktop WEB
                                                                                      Container(
                                                                                    padding: const EdgeInsets.only(left: 5),
                                                                                    width: width,
                                                                                    height: 70 * 6,
                                                                                    child: Column(
                                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                                      children: [
                                                                                        //Font Size TEXT FIELD PARENT
                                                                                        ClipRRect(
                                                                                          borderRadius: BorderRadius.circular(10),
                                                                                          child: Container(
                                                                                            decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                            height: 70,
                                                                                            width: width,
                                                                                            child: Row(
                                                                                              children: [
                                                                                                //Icon title slider field
                                                                                                Expanded(
                                                                                                  flex: (1600 * vDividerPosition).ceil(),
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      //Row font and title
                                                                                                      GestureDetector(
                                                                                                        onTap: () {
                                                                                                          // fontSizeFocus.unfocus();
                                                                                                          fontSizeFocus.requestFocus();
                                                                                                        },
                                                                                                        child: Padding(
                                                                                                          padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                          child: Row(
                                                                                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                            children: [
                                                                                                              const Expanded(
                                                                                                                  flex: 100,
                                                                                                                  child: Icon(
                                                                                                                    TablerIcons.text_size,
                                                                                                                    size: 18,
                                                                                                                  )),
                                                                                                              vDividerPosition > 0.45
                                                                                                                  ? Expanded(
                                                                                                                      flex: 700,
                                                                                                                      child: Container(
                                                                                                                        height: 18,
                                                                                                                        alignment: Alignment.bottomLeft,
                                                                                                                        child: const Text(
                                                                                                                          '  Font Size',
                                                                                                                          style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                        ),
                                                                                                                      ))
                                                                                                                  : Container(),
                                                                                                            ],
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      //TextField
                                                                                                      TextField(
                                                                                                        onTapOutside: (event) {
                                                                                                          // fontSizeFocus.unfocus();
                                                                                                        },
                                                                                                        onSubmitted: (value) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            Attribute.clone(Attribute.size, value.toString()),
                                                                                                          );
                                                                                                        },
                                                                                                        focusNode: fontSizeFocus,
                                                                                                        controller: fontSizeController,
                                                                                                        inputFormatters: [
                                                                                                          NumericInputFormatter(maxValue: 100),
                                                                                                        ],
                                                                                                        style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                        cursorColor: defaultPalette.black,
                                                                                                        // selectionControls: MaterialTextSelectionControls(),
                                                                                                        textAlign: TextAlign.right,
                                                                                                        scrollPadding: const EdgeInsets.all(0),
                                                                                                        textAlignVertical: TextAlignVertical.top,
                                                                                                        decoration: InputDecoration(
                                                                                                          contentPadding: const EdgeInsets.all(0),

                                                                                                          // filled: true,
                                                                                                          // fillColor: defaultPalette.primary,
                                                                                                          enabledBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                          focusedBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                        ),
                                                                                                        keyboardType: TextInputType.number,
                                                                                                      ),

                                                                                                      //Balloon Slider
                                                                                                      Positioned(
                                                                                                        bottom: 0,
                                                                                                        width: width * 0.6,
                                                                                                        child: BalloonSlider(
                                                                                                            trackHeight: 15,
                                                                                                            thumbRadius: 7.5,
                                                                                                            showRope: true,
                                                                                                            color: defaultPalette.tertiary,
                                                                                                            ropeLength: 300 / 8,
                                                                                                            value: double.parse((item.textEditorController.getSelectionStyle().attributes[Attribute.size.key]?.value) ?? 20.toString()) / 100,
                                                                                                            onChanged: (val) {
                                                                                                              setState(() {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  Attribute.clone(Attribute.size, (val * 100).toStringAsFixed(0)),
                                                                                                                );
                                                                                                              });
                                                                                                            }),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                                //+ -
                                                                                                Expanded(
                                                                                                  flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                                  child: Stack(
                                                                                                    // mainAxisAlignment: MainAxisAlignment.start,
                                                                                                    children: [
                                                                                                      Positioned(
                                                                                                        top: -4,
                                                                                                        right: 4,
                                                                                                        height: 35,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          // isTapped: false,
                                                                                                          // toggleOnTap: true,
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = int.parse(fontSizeController.text) + 1;
                                                                                                              item.textEditorController.formatSelection(
                                                                                                                Attribute.clone(Attribute.size, val.toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.add,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      Positioned(
                                                                                                        bottom: 5,
                                                                                                        right: 4,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          // isTapped: false,
                                                                                                          // toggleOnTap: true,
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = (int.parse(fontSizeController.text) - 1).clamp(0, 100);
                                                                                                              item.textEditorController.formatSelection(
                                                                                                                Attribute.clone(Attribute.size, val.toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.minus,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                )
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                        ),
                                                                                        //
                                                                                        //
                                                                                        const SizedBox(
                                                                                          height: 20,
                                                                                        ),
                                                                                        //LetterSpacing Parentt
                                                                                        ClipRRect(
                                                                                          borderRadius: BorderRadius.circular(10),
                                                                                          child: Container(
                                                                                            decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                            height: 70,
                                                                                            width: width,
                                                                                            child: Row(
                                                                                              children: [
                                                                                                //LetterSpacing
                                                                                                //Icon title slider field
                                                                                                Expanded(
                                                                                                  flex: (1600 * vDividerPosition).ceil(),
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      //LetterSpacing
                                                                                                      //Row font and title
                                                                                                      GestureDetector(
                                                                                                        onTap: () {
                                                                                                          letterSpaceFocus.requestFocus();
                                                                                                        },
                                                                                                        //LetterSpacing
                                                                                                        //Row font and title
                                                                                                        child: Padding(
                                                                                                          padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                          //LetterSpacing
                                                                                                          //Row font and title
                                                                                                          child: Row(
                                                                                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                            children: [
                                                                                                              //LetterSpacing
                                                                                                              //icon
                                                                                                              const Expanded(
                                                                                                                  flex: 100,
                                                                                                                  child: Icon(
                                                                                                                    TablerIcons.letter_spacing,
                                                                                                                    size: 18,
                                                                                                                  )),
                                                                                                              //LetterSpacing
                                                                                                              //title
                                                                                                              vDividerPosition > 0.45
                                                                                                                  ? Expanded(
                                                                                                                      flex: 700,
                                                                                                                      child: Container(
                                                                                                                        height: 18,
                                                                                                                        alignment: Alignment.bottomLeft,
                                                                                                                        child: const Text(
                                                                                                                          '  Letter Space',
                                                                                                                          style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                        ),
                                                                                                                      ))
                                                                                                                  : Container(),
                                                                                                            ],
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      //LetterSpacing
                                                                                                      //TextField
                                                                                                      TextField(
                                                                                                        onTapOutside: (event) {
                                                                                                          // fontSizeFocus.unfocus();
                                                                                                        },
                                                                                                        onSubmitted: (value) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            LetterSpacingAttribute((value).toString()),
                                                                                                          );
                                                                                                        },
                                                                                                        focusNode: letterSpaceFocus,
                                                                                                        controller: letterSpaceController,
                                                                                                        inputFormatters: [
                                                                                                          NumericInputFormatter(maxValue: 100),
                                                                                                        ],
                                                                                                        style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                        cursorColor: defaultPalette.black,
                                                                                                        // selectionControls: MaterialTextSelectionControls(),
                                                                                                        textAlign: TextAlign.right,
                                                                                                        scrollPadding: const EdgeInsets.all(0),
                                                                                                        textAlignVertical: TextAlignVertical.top,
                                                                                                        decoration: InputDecoration(
                                                                                                          contentPadding: const EdgeInsets.all(0),

                                                                                                          // filled: true,
                                                                                                          // fillColor: defaultPalette.primary,
                                                                                                          enabledBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                          focusedBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                        ),
                                                                                                        keyboardType: TextInputType.number,
                                                                                                      ),
                                                                                                      //LetterSpacing
                                                                                                      //Balloon Slider
                                                                                                      Positioned(
                                                                                                        bottom: 0,
                                                                                                        width: width * 0.6,
                                                                                                        child: BalloonSlider(
                                                                                                            trackHeight: 15,
                                                                                                            thumbRadius: 7.5,
                                                                                                            showRope: true,
                                                                                                            color: defaultPalette.tertiary,
                                                                                                            ropeLength: 300 / 8,
                                                                                                            value: double.parse((item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                            onChanged: (val) {
                                                                                                              setState(() {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  LetterSpacingAttribute((val * 100).ceil().toString()),
                                                                                                                );
                                                                                                              });
                                                                                                            }),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                                //LetterSpacing
                                                                                                //+ -
                                                                                                Expanded(
                                                                                                  flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      Positioned(
                                                                                                        top: -4,
                                                                                                        right: 4,
                                                                                                        height: 35,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = int.parse(letterSpaceController.text) + 1;

                                                                                                              item.textEditorController.formatSelection(
                                                                                                                LetterSpacingAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.add,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      Positioned(
                                                                                                        bottom: 5,
                                                                                                        right: 4,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          // isTapped: false,
                                                                                                          // toggleOnTap: true,
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = (int.parse(letterSpaceController.text) - 1).clamp(0, 100);
                                                                                                              item.textEditorController.formatSelection(
                                                                                                                LetterSpacingAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.minus,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                )
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                        ),

                                                                                        const SizedBox(
                                                                                          height: 20,
                                                                                        ),
                                                                                        //WordSpacing
                                                                                        ClipRRect(
                                                                                          borderRadius: BorderRadius.circular(10),
                                                                                          child: Container(
                                                                                            decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                            height: 70,
                                                                                            width: width,
                                                                                            child: Row(
                                                                                              children: [
                                                                                                //WordSpacing
                                                                                                //Icon title slider field
                                                                                                Expanded(
                                                                                                  flex: (1600 * vDividerPosition).ceil(),
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      //WordSpacing
                                                                                                      //Row font and title
                                                                                                      GestureDetector(
                                                                                                        onTap: () {
                                                                                                          wordSpaceFocus.requestFocus();
                                                                                                        },
                                                                                                        //WordSpacing
                                                                                                        //Row font and title
                                                                                                        child: Padding(
                                                                                                          padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                          //WordSpacing
                                                                                                          //Row font and title
                                                                                                          child: Row(
                                                                                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                            children: [
                                                                                                              //WordSpacing
                                                                                                              //icon
                                                                                                              const Expanded(
                                                                                                                  flex: 100,
                                                                                                                  child: Icon(
                                                                                                                    TablerIcons.spacing_horizontal,
                                                                                                                    size: 18,
                                                                                                                  )),
                                                                                                              //WordSpacing
                                                                                                              //title
                                                                                                              vDividerPosition > 0.45
                                                                                                                  ? Expanded(
                                                                                                                      flex: 700,
                                                                                                                      child: Container(
                                                                                                                        height: 18,
                                                                                                                        alignment: Alignment.bottomLeft,
                                                                                                                        child: const Text(
                                                                                                                          '  Word Space',
                                                                                                                          style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                        ),
                                                                                                                      ))
                                                                                                                  : Container(),
                                                                                                            ],
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      //WordSpacing
                                                                                                      //TextField
                                                                                                      TextField(
                                                                                                        onTapOutside: (event) {
                                                                                                          // fontSizeFocus.unfocus();
                                                                                                        },
                                                                                                        onSubmitted: (value) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            WordSpacingAttribute((value).toString()),
                                                                                                          );
                                                                                                        },
                                                                                                        focusNode: wordSpaceFocus,
                                                                                                        controller: wordSpaceController,
                                                                                                        inputFormatters: [
                                                                                                          NumericInputFormatter(maxValue: 100),
                                                                                                        ],
                                                                                                        style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                        cursorColor: defaultPalette.black,
                                                                                                        // selectionControls: MaterialTextSelectionControls(),
                                                                                                        textAlign: TextAlign.right,
                                                                                                        scrollPadding: const EdgeInsets.all(0),
                                                                                                        textAlignVertical: TextAlignVertical.top,
                                                                                                        decoration: InputDecoration(
                                                                                                          contentPadding: const EdgeInsets.all(0),

                                                                                                          // filled: true,
                                                                                                          // fillColor: defaultPalette.primary,
                                                                                                          enabledBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                          focusedBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                        ),
                                                                                                        keyboardType: TextInputType.number,
                                                                                                      ),
                                                                                                      //WordSpacing
                                                                                                      //Balloon Slider
                                                                                                      Positioned(
                                                                                                        bottom: 0,
                                                                                                        width: width * 0.6,
                                                                                                        child: BalloonSlider(
                                                                                                            trackHeight: 15,
                                                                                                            thumbRadius: 7.5,
                                                                                                            showRope: true,
                                                                                                            color: defaultPalette.tertiary,
                                                                                                            ropeLength: 300 / 8,
                                                                                                            value: double.parse((item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                            onChanged: (val) {
                                                                                                              setState(() {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  WordSpacingAttribute((val * 100).ceil().toString()),
                                                                                                                );
                                                                                                              });
                                                                                                            }),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                                //WordSpacing
                                                                                                //+ -
                                                                                                Expanded(
                                                                                                  flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      Positioned(
                                                                                                        top: -4,
                                                                                                        right: 4,
                                                                                                        height: 35,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = int.parse(wordSpaceController.text) + 1;

                                                                                                              item.textEditorController.formatSelection(
                                                                                                                WordSpacingAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.add,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      Positioned(
                                                                                                        bottom: 5,
                                                                                                        right: 4,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          // isTapped: false,
                                                                                                          // toggleOnTap: true,
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = (int.parse(wordSpaceController.text) - 1).clamp(0, 100);
                                                                                                              item.textEditorController.formatSelection(
                                                                                                                WordSpacingAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.minus,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                )
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                        ),
                                                                                        //
                                                                                        const SizedBox(
                                                                                          height: 20,
                                                                                        ),
                                                                                        //LineHeight
                                                                                        ClipRRect(
                                                                                          borderRadius: BorderRadius.circular(10),
                                                                                          child: Container(
                                                                                            decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                            height: 70,
                                                                                            width: width,
                                                                                            child: Row(
                                                                                              children: [
                                                                                                //LineHeight
                                                                                                //Icon title slider field
                                                                                                Expanded(
                                                                                                  flex: (1600 * vDividerPosition).ceil(),
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      //LineHeight
                                                                                                      //Row font and title
                                                                                                      GestureDetector(
                                                                                                        onTap: () {
                                                                                                          lineSpaceFocus.requestFocus();
                                                                                                        },
                                                                                                        //LineHeight
                                                                                                        //Row font and title
                                                                                                        child: Padding(
                                                                                                          padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                          //LineHeight
                                                                                                          //Row font and title
                                                                                                          child: Row(
                                                                                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                            children: [
                                                                                                              //LineHeight
                                                                                                              //icon
                                                                                                              const Expanded(
                                                                                                                  flex: 100,
                                                                                                                  child: Icon(
                                                                                                                    TablerIcons.spacing_vertical,
                                                                                                                    size: 18,
                                                                                                                  )),
                                                                                                              //LineHeight
                                                                                                              //title
                                                                                                              vDividerPosition > 0.45
                                                                                                                  ? Expanded(
                                                                                                                      flex: 700,
                                                                                                                      child: Container(
                                                                                                                        height: 18,
                                                                                                                        alignment: Alignment.bottomLeft,
                                                                                                                        child: const Text(
                                                                                                                          '  Line Space',
                                                                                                                          style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                        ),
                                                                                                                      ))
                                                                                                                  : Container(),
                                                                                                            ],
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      //LineHeight
                                                                                                      //TextField
                                                                                                      TextField(
                                                                                                        onTapOutside: (event) {
                                                                                                          // fontSizeFocus.unfocus();
                                                                                                        },
                                                                                                        onSubmitted: (value) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            LineHeightAttribute((value).toString()),
                                                                                                          );
                                                                                                        },
                                                                                                        focusNode: lineSpaceFocus,
                                                                                                        controller: lineSpaceController,
                                                                                                        inputFormatters: [
                                                                                                          NumericInputFormatter(maxValue: 100),
                                                                                                        ],
                                                                                                        style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                        cursorColor: defaultPalette.black,
                                                                                                        // selectionControls: MaterialTextSelectionControls(),
                                                                                                        textAlign: TextAlign.right,
                                                                                                        scrollPadding: const EdgeInsets.all(0),
                                                                                                        textAlignVertical: TextAlignVertical.top,
                                                                                                        decoration: InputDecoration(
                                                                                                          contentPadding: const EdgeInsets.all(0),

                                                                                                          // filled: true,
                                                                                                          // fillColor: defaultPalette.primary,
                                                                                                          enabledBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                          focusedBorder: OutlineInputBorder(
                                                                                                            borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                            borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                          ),
                                                                                                        ),
                                                                                                        keyboardType: TextInputType.number,
                                                                                                      ),
                                                                                                      //LineHeight
                                                                                                      //Balloon Slider
                                                                                                      Positioned(
                                                                                                        bottom: 0,
                                                                                                        width: width * 0.6,
                                                                                                        child: BalloonSlider(
                                                                                                            trackHeight: 15,
                                                                                                            thumbRadius: 7.5,
                                                                                                            showRope: true,
                                                                                                            color: defaultPalette.tertiary,
                                                                                                            ropeLength: 300 / 8,
                                                                                                            value: double.parse((item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                            onChanged: (val) {
                                                                                                              setState(() {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  LineHeightAttribute((val * 100).ceil().toString()),
                                                                                                                );
                                                                                                              });
                                                                                                            }),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                                //LineHeight
                                                                                                //+ -
                                                                                                Expanded(
                                                                                                  flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                                  child: Stack(
                                                                                                    children: [
                                                                                                      Positioned(
                                                                                                        top: -4,
                                                                                                        right: 4,
                                                                                                        height: 35,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = int.parse(lineSpaceController.text) + 1;

                                                                                                              item.textEditorController.formatSelection(
                                                                                                                LineHeightAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.add,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                      Positioned(
                                                                                                        bottom: 5,
                                                                                                        right: 4,
                                                                                                        child: ElevatedLayerButton(
                                                                                                          // isTapped: false,
                                                                                                          // toggleOnTap: true,
                                                                                                          onClick: () {
                                                                                                            setState(() {
                                                                                                              var val = (int.parse(lineSpaceController.text) - 1).clamp(0, 100);
                                                                                                              item.textEditorController.formatSelection(
                                                                                                                LineHeightAttribute((val).toString()),
                                                                                                              );
                                                                                                            });
                                                                                                          },
                                                                                                          buttonHeight: 32,
                                                                                                          buttonWidth: 65 * vDividerPosition,
                                                                                                          borderRadius: BorderRadius.circular(100),
                                                                                                          animationDuration: const Duration(milliseconds: 100),
                                                                                                          animationCurve: Curves.ease,
                                                                                                          topDecoration: BoxDecoration(
                                                                                                            color: Colors.white,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                          topLayerChild: const Icon(
                                                                                                            IconsaxPlusLinear.minus,
                                                                                                            size: 20,
                                                                                                          ),
                                                                                                          baseDecoration: BoxDecoration(
                                                                                                            color: Colors.green,
                                                                                                            border: Border.all(),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ],
                                                                                                  ),
                                                                                                )
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                        ),
                                                                                        //
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //Colors //Desktop WEB
                                                                                SingleChildScrollView(
                                                                                  child: Container(
                                                                                    width: 30,
                                                                                    height: sHeight * 0.4,

                                                                                    child: TabContainer(
                                                                                        controller: tabcunt,
                                                                                        tabEdge: TabEdge.top,
                                                                                        tabsStart: 0,
                                                                                        tabExtent: 30,
                                                                                        childPadding: const EdgeInsets.symmetric(vertical: 0),
                                                                                        colors: [
                                                                                          Colors.grey.withOpacity(.4),
                                                                                          Colors.grey.withOpacity(.4)
                                                                                          // hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                          // hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                        ],
                                                                                        selectedTextStyle: TextStyle(
                                                                                          color: defaultPalette.black,
                                                                                          fontSize: 14,
                                                                                        ),
                                                                                        unselectedTextStyle: const TextStyle(
                                                                                          color: Colors.black,
                                                                                          fontSize: 13.0,
                                                                                        ),
                                                                                        // borderRadius: BorderRadius.circular(20),
                                                                                        // tabBorderRadius: BorderRadius.circular(20),
                                                                                        tabs: [
                                                                                          const Text(
                                                                                            'Font',
                                                                                          ),
                                                                                          const Text('Bg')
                                                                                        ],
                                                                                        children: [
                                                                                          //FONT COLOR
                                                                                          DefaultTabController(
                                                                                            length: 2,
                                                                                            child: ClipRRect(
                                                                                              borderRadius: BorderRadius.circular(8),
                                                                                              child: Column(
                                                                                                children: [
                                                                                                  //FONT COLOR
                                                                                                  //HEX TEXT FIEKLD
                                                                                                  Container(
                                                                                                    height: hDividerPosition < 0.25 ? textFieldHeight * 1.5 : textFieldHeight * 1.3,
                                                                                                    margin: const EdgeInsets.only(top: 0),
                                                                                                    padding: const EdgeInsets.all(5),
                                                                                                    child: Stack(
                                                                                                      children: [
                                                                                                        TextFormField(
                                                                                                          onTapOutside: (event) {},
                                                                                                          controller: hexController,
                                                                                                          inputFormatters: [HexColorInputFormatter()],
                                                                                                          onFieldSubmitted: (value) {
                                                                                                            item.textEditorController.formatSelection(
                                                                                                              ColorAttribute('#${value}'),
                                                                                                            );
                                                                                                          },
                                                                                                          style: TextStyle(color: defaultPalette.black),
                                                                                                          cursorColor: defaultPalette.secondary,
                                                                                                          textAlign: TextAlign.center,
                                                                                                          textAlignVertical: TextAlignVertical.center,
                                                                                                          decoration: InputDecoration(
                                                                                                            contentPadding: const EdgeInsets.all(0),
                                                                                                            prefixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                            suffixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                            filled: true,
                                                                                                            fillColor: defaultPalette.primary,
                                                                                                            border: OutlineInputBorder(
                                                                                                              borderRadius: BorderRadius.circular(10.0),
                                                                                                            ),
                                                                                                            enabledBorder: OutlineInputBorder(
                                                                                                              borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                              borderRadius: BorderRadius.circular(12.0),
                                                                                                            ),
                                                                                                            focusedBorder: OutlineInputBorder(
                                                                                                              borderSide: BorderSide(width: 3, color: defaultPalette.transparent),
                                                                                                              borderRadius: BorderRadius.circular(10.0),
                                                                                                            ),
                                                                                                          ),
                                                                                                          keyboardType: TextInputType.number,
                                                                                                        ),
                                                                                                        ...[
                                                                                                          Positioned(
                                                                                                            top: (textFieldHeight / 2) - 10,
                                                                                                            left: 10,
                                                                                                            child: GestureDetector(
                                                                                                              child: Icon(
                                                                                                                IconsaxPlusLinear.text,
                                                                                                                size: 20,
                                                                                                                color: hexToColor(hexController.text),
                                                                                                              ),
                                                                                                            ),
                                                                                                          ),
                                                                                                        ]
                                                                                                      ],
                                                                                                    ),
                                                                                                  ),
                                                                                                  //
                                                                                                  ...[
                                                                                                    //FONT COLOR
                                                                                                    //PICKER ND EVERYHTING
                                                                                                    Expanded(
                                                                                                      child: TabBarView(
                                                                                                        physics: const NeverScrollableScrollPhysics(),
                                                                                                        children: [
                                                                                                          SingleChildScrollView(
                                                                                                            child: Padding(
                                                                                                              padding: const EdgeInsets.all(10),
                                                                                                              child: ColorPicker(
                                                                                                                displayThumbColor: true,
                                                                                                                portraitOnly: true,
                                                                                                                pickerAreaBorderRadius: BorderRadius.circular(5),
                                                                                                                colorPickerWidth: 500 * hDividerPosition,
                                                                                                                labelTypes: [],
                                                                                                                pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                                                onColorChanged: (color) {
                                                                                                                  item.textEditorController.formatSelection(
                                                                                                                    ColorAttribute('#${colorToHex(color)}'),
                                                                                                                  );
                                                                                                                  setState(() {
                                                                                                                    hexController.text = '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                                                                                  });
                                                                                                                },
                                                                                                                pickerAreaHeightPercent: 0.4,
                                                                                                              ),
                                                                                                            ),
                                                                                                          ), //FONT COLOR
                                                                                                          Padding(
                                                                                                            padding: const EdgeInsets.all(8.0),
                                                                                                            child: MaterialPicker(
                                                                                                              pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                                              onColorChanged: (color) {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  ColorAttribute('#${colorToHex(color)}'),
                                                                                                                );
                                                                                                                setState(() {
                                                                                                                  hexController.text = '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                                                                                });
                                                                                                              },
                                                                                                            ),
                                                                                                          ),
                                                                                                        ],
                                                                                                      ),
                                                                                                    ),
                                                                                                    if (hDividerPosition > 0.25)
                                                                                                      TabBar(
                                                                                                        dividerHeight: 0,
                                                                                                        indicatorSize: TabBarIndicatorSize.label,
                                                                                                        indicatorColor: defaultPalette.tertiary,
                                                                                                        labelColor: defaultPalette.tertiary,
                                                                                                        labelPadding: const EdgeInsets.all(0),
                                                                                                        tabs: [
                                                                                                          //FONT COLOR
                                                                                                          Tab(
                                                                                                            height: 30,
                                                                                                            child: Container(
                                                                                                              padding: const EdgeInsets.all(2),
                                                                                                              // margin: EdgeInsets.only(left: 5, right: 5),
                                                                                                              height: 30,
                                                                                                              width: width,
                                                                                                              alignment: Alignment.center,
                                                                                                              decoration: BoxDecoration(color: defaultPalette.primary.withOpacity(0.7), borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(8))),
                                                                                                              child: Text(
                                                                                                                'Picker',
                                                                                                                style: GoogleFonts.lexend(fontSize: 12),
                                                                                                              ),
                                                                                                            ),
                                                                                                          ), //FONT COLOR
                                                                                                          Tab(
                                                                                                            height: 30,
                                                                                                            child: Container(
                                                                                                              padding: const EdgeInsets.all(2),
                                                                                                              // margin: EdgeInsets.only(right: 5, left: 5),
                                                                                                              alignment: Alignment.center,
                                                                                                              height: 30,
                                                                                                              width: width,
                                                                                                              decoration: BoxDecoration(color: defaultPalette.primary.withOpacity(0.7), borderRadius: const BorderRadius.only(bottomRight: Radius.circular(8))),
                                                                                                              child: Text(
                                                                                                                'Palette',
                                                                                                                style: GoogleFonts.lexend(fontSize: 12),
                                                                                                              ),
                                                                                                            ),
                                                                                                          ),
                                                                                                        ],
                                                                                                      ),
                                                                                                  ] //
                                                                                                ],
                                                                                              ),
                                                                                            ),
                                                                                          ),
                                                                                          //BG COLORRR
                                                                                          DefaultTabController(
                                                                                            length: 2,
                                                                                            child: ClipRRect(
                                                                                              borderRadius: BorderRadius.circular(8),
                                                                                              child: Column(
                                                                                                children: [
                                                                                                  //Background color
                                                                                                  //HEX TEXT FIEKLD
                                                                                                  Container(
                                                                                                    height: hDividerPosition < 0.25 ? textFieldHeight * 1.5 : textFieldHeight * 1.3,
                                                                                                    margin: EdgeInsets.only(top: hDividerPosition < 0.25 ? 10 : 0),
                                                                                                    padding: const EdgeInsets.all(5),
                                                                                                    child: Stack(
                                                                                                      children: [
                                                                                                        TextFormField(
                                                                                                          onTapOutside: (event) {
                                                                                                            // Focus.unfocus();
                                                                                                          },
                                                                                                          // focusNode: marginTopFocus,
                                                                                                          controller: bghexController,
                                                                                                          inputFormatters: [
                                                                                                            HexColorInputFormatter()
                                                                                                            // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                                            // NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text))),
                                                                                                          ],
                                                                                                          onFieldSubmitted: (value) {
                                                                                                            item.textEditorController.formatSelection(
                                                                                                              BackgroundAttribute('${value}'),
                                                                                                            );
                                                                                                            FocusScope.of(context).previousFocus();
                                                                                                          },
                                                                                                          style: TextStyle(color: defaultPalette.black),
                                                                                                          cursorColor: defaultPalette.secondary,
                                                                                                          textAlign: TextAlign.center,
                                                                                                          textAlignVertical: TextAlignVertical.center,
                                                                                                          decoration: InputDecoration(
                                                                                                            contentPadding: const EdgeInsets.all(0),
                                                                                                            prefixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                            suffixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                            filled: true,
                                                                                                            fillColor: defaultPalette.primary,
                                                                                                            border: OutlineInputBorder(
                                                                                                              // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                                              borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                                            ),
                                                                                                            enabledBorder: OutlineInputBorder(
                                                                                                              borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                              borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                                            ),
                                                                                                            focusedBorder: OutlineInputBorder(
                                                                                                              borderSide: BorderSide(width: 3, color: defaultPalette.transparent),
                                                                                                              borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                                            ),
                                                                                                          ),
                                                                                                          keyboardType: TextInputType.number,
                                                                                                          // onChanged: (value) => _updatePdfPreview(''),
                                                                                                        ),
                                                                                                        if (vDividerPosition > 0.45) ...[
                                                                                                          if (vDividerPosition > 0.48)
                                                                                                            Positioned(
                                                                                                              top: (textFieldHeight / 2) - 14,
                                                                                                              left: 6,
                                                                                                              child: GestureDetector(
                                                                                                                child: Icon(
                                                                                                                  IconsaxPlusBold.text,
                                                                                                                  size: 28,
                                                                                                                  color: hexToColor(bghexController.text),
                                                                                                                ),
                                                                                                              ),
                                                                                                            ),
                                                                                                        ]
                                                                                                      ],
                                                                                                    ),
                                                                                                  ),
                                                                                                  //
                                                                                                  if (hDividerPosition > 0.2) ...[
                                                                                                    //Background color
                                                                                                    //PICKER ND EVERYHTING
                                                                                                    Expanded(
                                                                                                      child: TabBarView(
                                                                                                        physics: const NeverScrollableScrollPhysics(),
                                                                                                        children: [
                                                                                                          SingleChildScrollView(
                                                                                                            child: Padding(
                                                                                                              padding: const EdgeInsets.all(10),
                                                                                                              child: ColorPicker(
                                                                                                                displayThumbColor: true,
                                                                                                                portraitOnly: true,
                                                                                                                pickerAreaBorderRadius: BorderRadius.circular(5),
                                                                                                                colorPickerWidth: 500 * hDividerPosition,
                                                                                                                labelTypes: [],
                                                                                                                pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                                                onColorChanged: (color) {
                                                                                                                  item.textEditorController.formatSelection(
                                                                                                                    BackgroundAttribute('#${colorToHex(color)}'),
                                                                                                                  );
                                                                                                                  setState(() {
                                                                                                                    bghexController.text = '${item.textEditorController.getSelectionStyle().attributes['background']?.value}';
                                                                                                                  });
                                                                                                                },
                                                                                                                pickerAreaHeightPercent: 0.4,
                                                                                                              ),
                                                                                                            ),
                                                                                                          ), //FONT COLOR
                                                                                                          Padding(
                                                                                                            padding: const EdgeInsets.all(8.0),
                                                                                                            child: MaterialPicker(
                                                                                                              pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                                              onColorChanged: (color) {
                                                                                                                item.textEditorController.formatSelection(
                                                                                                                  BackgroundAttribute('#${colorToHex(color)}'),
                                                                                                                );
                                                                                                                setState(() {
                                                                                                                  bghexController.text = '${item.textEditorController.getSelectionStyle().attributes['background']?.value}';
                                                                                                                });
                                                                                                              },
                                                                                                            ),
                                                                                                          ),
                                                                                                        ],
                                                                                                      ),
                                                                                                    ),
                                                                                                    if (hDividerPosition > 0.25)
                                                                                                      TabBar(
                                                                                                        dividerHeight: 0,
                                                                                                        indicatorSize: TabBarIndicatorSize.label,
                                                                                                        indicatorColor: defaultPalette.tertiary,
                                                                                                        labelColor: defaultPalette.tertiary,
                                                                                                        labelPadding: const EdgeInsets.all(0),
                                                                                                        tabs: [
                                                                                                          //FONT COLOR
                                                                                                          Tab(
                                                                                                            height: 30,
                                                                                                            child: Container(
                                                                                                              padding: const EdgeInsets.all(2),
                                                                                                              // margin: EdgeInsets.only(left: 5, right: 5),
                                                                                                              height: 30,
                                                                                                              width: width,
                                                                                                              alignment: Alignment.center,
                                                                                                              decoration: BoxDecoration(
                                                                                                                color: defaultPalette.primary.withOpacity(0.7),
                                                                                                              ),
                                                                                                              child: Text(
                                                                                                                'Picker',
                                                                                                                style: GoogleFonts.lexend(fontSize: 12),
                                                                                                              ),
                                                                                                            ),
                                                                                                          ), //FONT COLOR
                                                                                                          Tab(
                                                                                                            height: 30,
                                                                                                            child: Container(
                                                                                                              padding: const EdgeInsets.all(2),
                                                                                                              alignment: Alignment.center,
                                                                                                              height: 30,
                                                                                                              width: width,
                                                                                                              decoration: BoxDecoration(
                                                                                                                color: defaultPalette.primary.withOpacity(0.7),
                                                                                                              ),
                                                                                                              child: Text(
                                                                                                                'Palette',
                                                                                                                style: GoogleFonts.lexend(fontSize: 12),
                                                                                                              ),
                                                                                                            ),
                                                                                                          ),
                                                                                                        ],
                                                                                                      ),
                                                                                                  ] //
                                                                                                ],
                                                                                              ),
                                                                                            ),
                                                                                          ),
                                                                                        ]),
                                                                                    //
                                                                                  ),
                                                                                )
                                                                              ]
                                                                            ],
                                                                          );
                                                                        },
                                                                      ),
                                                                    ),
                                                                  ),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                    //Text SIDEBAR //Desktop WEB
                                                    AnimatedPositioned(
                                                        left: panelIndex
                                                                    .panelIndex ==
                                                                -1
                                                            ? -35
                                                            : 0,
                                                        top: 0,
                                                        duration:
                                                            Durations.long4,
                                                        child: PlayableToolbarWidget(
                                                            itemsGutter: 0,
                                                            toolbarBackgroundRadius:
                                                                0,
                                                            toolbarWidth: 44,
                                                            toolbarShadow:
                                                                defaultPalette
                                                                    .black
                                                                    .withOpacity(
                                                                        0.05),
                                                            toolbarHorizontalPadding:
                                                                0,
                                                            toolbarHeight:
                                                                sHeight * 0.9,
                                                            itemsOffset: 0,
                                                            toolbarItems: [
                                                              ListItemModel(
                                                                isTapped:
                                                                    isTapped[0],
                                                                onTap: () {
                                                                  var item;
                                                                  try {
                                                                    item = _sheetItemIterator(
                                                                        panelIndex
                                                                            .id,
                                                                        spreadSheetList[
                                                                            currentPageIndex]) as TextEditorItem;
                                                                  } on Exception catch (e) {
                                                                    // TODO
                                                                    item = TextEditorItem(
                                                                        id: '',
                                                                        parentId:
                                                                            '');
                                                                  }
                                                                  item.focusNode
                                                                      .unfocus();
                                                                  setState(() {
                                                                    panelIndex = PanelIndex(
                                                                        id: '',
                                                                        panelIndex:
                                                                            -1);
                                                                  });
                                                                  for (var i =
                                                                          0;
                                                                      i <
                                                                          isTapped
                                                                              .length;
                                                                      i++) {
                                                                    setState(
                                                                        () {
                                                                      isTapped[
                                                                              i] =
                                                                          false;
                                                                    });
                                                                  }
                                                                  setState(() {
                                                                    isTapped[
                                                                            1] =
                                                                        true;
                                                                  });
                                                                },
                                                                title: 'Duh',
                                                                color:
                                                                    defaultPalette
                                                                        .tertiary,
                                                                icon:
                                                                    TablerIcons
                                                                        .x,
                                                              ),
                                                              ListItemModel(
                                                                isTapped:
                                                                    isTapped[1],
                                                                onTap: () {
                                                                  for (var i =
                                                                          0;
                                                                      i <
                                                                          isTapped
                                                                              .length;
                                                                      i++) {
                                                                    setState(
                                                                        () {
                                                                      isTapped[
                                                                              i] =
                                                                          false;
                                                                    });
                                                                  }
                                                                  setState(() {
                                                                    isTapped[
                                                                            1] =
                                                                        true;
                                                                    textStyleTabControler.animateToPage(
                                                                        0,
                                                                        duration:
                                                                            Durations
                                                                                .medium1,
                                                                        curve: Curves
                                                                            .easeIn);
                                                                  });
                                                                },
                                                                title: 'Font',
                                                                color:
                                                                    defaultPalette
                                                                        .primary,
                                                                icon: TablerIcons
                                                                    .typography,
                                                              ),
                                                              ListItemModel(
                                                                isTapped:
                                                                    isTapped[2],
                                                                onTap: () {
                                                                  for (var i =
                                                                          0;
                                                                      i <
                                                                          isTapped
                                                                              .length;
                                                                      i++) {
                                                                    setState(
                                                                        () {
                                                                      isTapped[
                                                                              i] =
                                                                          false;
                                                                    });
                                                                  }
                                                                  setState(() {
                                                                    isTapped[
                                                                            2] =
                                                                        true;
                                                                    textStyleTabControler.animateToPage(
                                                                        1,
                                                                        duration:
                                                                            Durations
                                                                                .medium1,
                                                                        curve: Curves
                                                                            .easeIn);
                                                                  });
                                                                },
                                                                title: 'Format',
                                                                color:
                                                                    defaultPalette
                                                                        .primary,
                                                                icon:
                                                                    TablerIcons
                                                                        .bold,
                                                              ),
                                                              //sizespace
                                                              ListItemModel(
                                                                isTapped:
                                                                    isTapped[3],
                                                                onTap: () {
                                                                  for (var i =
                                                                          0;
                                                                      i <
                                                                          isTapped
                                                                              .length;
                                                                      i++) {
                                                                    setState(
                                                                        () {
                                                                      isTapped[
                                                                              i] =
                                                                          false;
                                                                    });
                                                                  }
                                                                  setState(() {
                                                                    isTapped[
                                                                            3] =
                                                                        true;
                                                                    textStyleTabControler.animateToPage(
                                                                        2,
                                                                        duration:
                                                                            Durations
                                                                                .medium1,
                                                                        curve: Curves
                                                                            .easeIn);
                                                                  });
                                                                },
                                                                title: 'Size',
                                                                color:
                                                                    defaultPalette
                                                                        .primary,
                                                                icon: TablerIcons
                                                                    .text_size,
                                                              ),
                                                              //paint
                                                              ListItemModel(
                                                                isTapped:
                                                                    isTapped[4],
                                                                onTap: () {
                                                                  for (var i =
                                                                          0;
                                                                      i <
                                                                          isTapped
                                                                              .length;
                                                                      i++) {
                                                                    setState(
                                                                        () {
                                                                      isTapped[
                                                                              i] =
                                                                          false;
                                                                    });
                                                                  }
                                                                  setState(() {
                                                                    isTapped[
                                                                            4] =
                                                                        true;
                                                                    textStyleTabControler.animateToPage(
                                                                        3,
                                                                        duration:
                                                                            Durations
                                                                                .medium1,
                                                                        curve: Curves
                                                                            .easeIn);
                                                                  });
                                                                },
                                                                title: 'Color',
                                                                color:
                                                                    defaultPalette
                                                                        .primary,
                                                                icon:
                                                                    TablerIcons
                                                                        .paint,
                                                              ),
                                                            ])),
                                                  ],
                                                ),
                                              ),
                                            ))
                                      ],
                                    );
                                  }),
                                ),
                              ),
                            ),
                          ),
                        ),
                        //
                        //
                        //
                        //prppos redone
                        Positioned(
                          width: sWidth * (wH2DividerPosition),
                          top: Platform.isAndroid ? 35 : 0,
                          height: Platform.isAndroid
                              ? sHeight * 0.85
                              : sHeight * 0.9,
                          left: sWidth * (1 - wH2DividerPosition),
                          child: Stack(
                            children: [
                              //Properties page, text, list tab animatedborders
                              Container(
                                height: (50),
                                margin: EdgeInsets.only(
                                    top: 45, left: 15, right: 10),
                                padding: EdgeInsets.only(bottom: 0),
                                decoration: BoxDecoration(
                                  color: defaultPalette.transparent,
                                  borderRadius: BorderRadius.circular(25),
                                ),
                                child: Row(
                                  children: [
                                    Expanded(
                                        flex: 1,
                                        child: Padding(
                                          padding: EdgeInsets.only(left: 5),
                                          child: CustomBorder(
                                            color: whichPropertyTabIsClicked ==
                                                    1
                                                ? defaultPalette.primary
                                                : defaultPalette.transparent,
                                            animateDuration:
                                                const Duration(seconds: 1),
                                            animateBorder: true,
                                            radius: const Radius.circular(10),
                                            dashPattern: const [15, 10],
                                            strokeWidth: 3,
                                            child: SizedBox(
                                              height: 40,
                                              width: _getPropertiesButtonWidth(
                                                  'page'),
                                            ),
                                          ),
                                        )),
                                    //text field properties button border
                                    if (panelIndex.id != '')
                                      Expanded(
                                          flex: 2,
                                          child: Padding(
                                            padding: EdgeInsets.only(left: 5),
                                            child: CustomBorder(
                                              color:
                                                  whichPropertyTabIsClicked == 2
                                                      ? defaultPalette.primary
                                                      : defaultPalette
                                                          .transparent,
                                              animateDuration:
                                                  const Duration(seconds: 1),
                                              animateBorder: true,
                                              radius: const Radius.circular(10),
                                              dashPattern: const [15, 10],
                                              strokeWidth: 3,
                                              child: SizedBox(
                                                height: 40,
                                                width: (2 *
                                                    (sWidth *
                                                        (wH2DividerPosition)) /
                                                    5),
                                              ),
                                            ),
                                          )),
                                    //sheet list properties button border
                                    if (panelIndex.parentId != '')
                                      Expanded(
                                          flex: 2,
                                          child: Padding(
                                            padding: EdgeInsets.only(left: 5),
                                            child: CustomBorder(
                                              color:
                                                  whichPropertyTabIsClicked == 3
                                                      ? defaultPalette.primary
                                                      : defaultPalette
                                                          .transparent,
                                              animateDuration:
                                                  const Duration(seconds: 1),
                                              animateBorder: true,
                                              radius: const Radius.circular(10),
                                              dashPattern: const [15, 10],
                                              strokeWidth: 3,
                                              child: SizedBox(
                                                height: 40,
                                                width: 2 *
                                                    (sWidth *
                                                        (wH2DividerPosition)) /
                                                    5,
                                              ),
                                            ),
                                          )),
                                  ],
                                ),
                              ),
                              //Properties page, text, list tab browser buttons
                              Container(
                                height: (50),
                                margin: EdgeInsets.only(
                                    top: 40, left: 15, right: 10),
                                padding: EdgeInsets.only(bottom: 0),
                                decoration: BoxDecoration(
                                  color: defaultPalette.transparent,
                                  borderRadius: BorderRadius.circular(25),
                                ),
                                child: Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    //page properties button button
                                    Expanded(
                                      flex: 1,
                                      child: ElevatedLayerButton(
                                        // isTapped: false,t
                                        onClick: () {
                                          setState(() {
                                            whichPropertyTabIsClicked = 1;
                                          });
                                        },
                                        buttonHeight: 50,
                                        buttonWidth:
                                            _getPropertiesButtonWidth('page'),
                                        borderRadius: BorderRadius.circular(10),
                                        animationDuration:
                                            const Duration(milliseconds: 100),
                                        animationCurve: Curves.ease,
                                        topDecoration: BoxDecoration(
                                          color: Colors.white,
                                          border: Border.all(),
                                        ),
                                        topLayerChild: const Icon(
                                          TablerIcons.script,
                                          size: 20,
                                          // color: Colors.blue,
                                        ),
                                        subfac: 10,
                                        baseDecoration: BoxDecoration(
                                          color: defaultPalette.extras[0],
                                          border: Border.all(),
                                        ),
                                      ),
                                    ),
                                    //text field properties button button
                                    if (panelIndex.id != '')
                                      Expanded(
                                        flex: 2,
                                        child: Stack(
                                          children: [
                                            Container(
                                              margin: EdgeInsets.only(
                                                  top: 9, left: 5),
                                              decoration: BoxDecoration(
                                                color: defaultPalette.tertiary,
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                border: Border.all(),
                                              ),
                                            ),
                                            ElevatedLayerButton(
                                              // isTapped: false,0
                                              onClick: () {
                                                setState(() {
                                                  whichPropertyTabIsClicked = 2;
                                                });
                                              },
                                              buttonHeight: 30,
                                              buttonWidth:
                                                  _getPropertiesButtonWidth(
                                                      'text-field'),
                                              borderRadius:
                                                  BorderRadius.circular(10),
                                              animationDuration: const Duration(
                                                  milliseconds: 100),
                                              animationCurve: Curves.ease,
                                              topDecoration: BoxDecoration(
                                                color: Colors.white,
                                                border: Border.all(),
                                              ),
                                              topLayerChild: Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceAround,
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  const Icon(
                                                    TablerIcons
                                                        .text_recognition,
                                                    size: 15,
                                                    // color: Colors.blue,
                                                  ),
                                                  Text(
                                                    'text',
                                                    style: GoogleFonts.bungee(
                                                        color: defaultPalette
                                                            .black,
                                                        fontSize: 12),
                                                  )
                                                ],
                                              ),
                                              subfac: 10,
                                              baseDecoration: BoxDecoration(
                                                color: defaultPalette.extras[0]
                                                    .withOpacity(0.3),
                                                // border: Border.all(),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    //sheetlist properties button button
                                    if (panelIndex.parentId != '')
                                      Expanded(
                                        flex: 2,
                                        child: Stack(
                                          children: [
                                            Container(
                                              margin: EdgeInsets.only(
                                                  top: 9, left: 5),
                                              decoration: BoxDecoration(
                                                color: defaultPalette.extras[1],
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                                border: Border.all(),
                                              ),
                                            ),
                                            ElevatedLayerButton(
                                              // isTapped: false,
                                              // toggleOnTap: true,
                                              onClick: () {
                                                setState(() {
                                                  whichPropertyTabIsClicked = 3;
                                                });
                                              },
                                              buttonHeight: 30,
                                              buttonWidth:
                                                  _getPropertiesButtonWidth(
                                                      'sheet-list'),
                                              borderRadius:
                                                  BorderRadius.circular(10),
                                              animationDuration: const Duration(
                                                  milliseconds: 100),
                                              animationCurve: Curves.ease,
                                              topDecoration: BoxDecoration(
                                                color: Colors.white,
                                                border: Border.all(),
                                              ),
                                              topLayerChild: Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceAround,
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  const Icon(
                                                    TablerIcons
                                                        .brackets_contain,
                                                    size: 15,
                                                    // color: Colors.blue,
                                                  ),
                                                  Text(
                                                    'List',
                                                    style: GoogleFonts.bungee(
                                                        color: defaultPalette
                                                            .black,
                                                        fontSize: 12),
                                                  )
                                                ],
                                              ),
                                              subfac: 10,
                                              baseDecoration: BoxDecoration(
                                                color: defaultPalette.extras[0]
                                                    .withOpacity(0.3),
                                                // border: Border.all(),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                              //Content inside properties CARDS Main Parent
                              Container(
                                padding: EdgeInsets.only(top: 85),
                                child: AppinioSwiper(
                                  backgroundCardCount: 1,
                                  backgroundCardOffset: Offset(5, 5),
                                  duration: Duration(milliseconds: 150),
                                  backgroundCardScale: 1,
                                  loop: true,
                                  cardCount: 2,
                                  allowUnSwipe: true,
                                  controller: propertyCardsController,
                                  onCardPositionChanged: (position) {
                                    setState(() {
                                      _cardPosition = position.offset.dx.abs() +
                                          position.offset.dy.abs();
                                    });
                                  },
                                  onSwipeEnd: (a, b, direction) {
                                    // print(direction.toString());
                                    setState(() {
                                      ref
                                          .read(propertyCardIndexProvider
                                              .notifier)
                                          .update((s) => s = b);
                                      // _currentCardIndex = b;
                                      _cardPosition = 0;
                                      currentPageIndex =
                                          (currentPageIndex + 1) % pageCount;
                                    });
                                  },
                                  onSwipeCancelled: (activity) {
                                    setState(() {
                                      currentPageIndex =
                                          (currentPageIndex - 1) % pageCount;
                                    });
                                  },
                                  cardBuilder:
                                      (BuildContext context, int index) {
                                    int currentCardIndex =
                                        ref.watch(propertyCardIndexProvider);
                                    return Stack(
                                      children: [
                                        Positioned.fill(
                                          child: AnimatedContainer(
                                            duration: defaultDuration,
                                            margin: EdgeInsets.all(15),
                                            alignment: Alignment.center,
                                            decoration: BoxDecoration(
                                              color: Colors.white,
                                              border: Border.all(width: 2),
                                              borderRadius:
                                                  BorderRadius.circular(25),
                                            ),
                                          ),
                                        ),

                                        Positioned.fill(
                                          child: AnimatedOpacity(
                                            opacity: currentCardIndex == index
                                                ? 0
                                                : index >=
                                                        (currentCardIndex + 2) %
                                                            10
                                                    ? 1
                                                    : (1 -
                                                        (_cardPosition / 200)
                                                            .clamp(0.0, 1.0)),
                                            duration:
                                                Duration(milliseconds: 300),
                                            child: AnimatedContainer(
                                              duration:
                                                  Duration(milliseconds: 300),
                                              margin: EdgeInsets.all(15),
                                              alignment: Alignment.center,
                                              decoration: BoxDecoration(
                                                color: index ==
                                                        (currentCardIndex + 1) %
                                                            10
                                                    ? defaultPalette.extras[0]
                                                    : index ==
                                                            (currentCardIndex +
                                                                    2) %
                                                                10
                                                        ? defaultPalette
                                                            .extras[0]
                                                        : defaultPalette
                                                            .extras[0],
                                                border: Border.all(width: 2),
                                                borderRadius:
                                                    BorderRadius.circular(25),
                                              ),
                                            ),
                                          ),
                                        ),

                                        // PROPERTIES Tab Parent
                                        Positioned(
                                          top: 0,
                                          height: (sHeight * 0.9) - 20,
                                          width: sWidth * wH2DividerPosition,
                                          child: Container(
                                            padding: EdgeInsets.only(
                                                top: 10,
                                                left: 10,
                                                right: 5,
                                                bottom: 75),
                                            decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(25),
                                              color: defaultPalette.transparent,
                                            ),
                                            margin: EdgeInsets.all(15),
                                            child: PieCanvas(
                                              child: ClipRRect(
                                                borderRadius:
                                                    BorderRadius.circular(15),
                                                child: SingleChildScrollView(
                                                  physics:
                                                      const CustomScrollPhysics(
                                                          scrollFactor: 0.01),
                                                  child: Column(
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .center,
                                                    children: [
                                                      //MINI PREVIEW AND PAGE NUMBER AND NEXTPREV PARENT PARENT
                                                      Row(
                                                        mainAxisAlignment:
                                                            MainAxisAlignment
                                                                .spaceBetween,
                                                        children: [
                                                          //PAGE PROPERTIES FOR {{{MINI PAGE RENDER}}}
                                                          Container(
                                                            height: 120,
                                                            width: 95,
                                                            alignment: Alignment
                                                                .center,
                                                            child: Stack(
                                                              children: [
                                                                //{{{GRAPH}}}
                                                                ClipRRect(
                                                                  borderRadius:
                                                                      BorderRadius
                                                                          .circular(
                                                                              25),
                                                                  child:
                                                                      Container(
                                                                    height: 120,
                                                                    // width: ((sWidth * wH2DividerPosition)/2)<150?100:((sWidth * wH2DividerPosition)/2),
                                                                    width: 95,
                                                                    decoration: BoxDecoration(
                                                                        borderRadius:
                                                                            BorderRadius.circular(
                                                                                25),
                                                                        border: Border
                                                                            .all(),
                                                                        color: defaultPalette
                                                                            .extras[0]
                                                                            .withOpacity(0.1)),
                                                                    child:
                                                                        Opacity(
                                                                      opacity:
                                                                          1,
                                                                      child: LineChart(LineChartData(
                                                                          lineBarsData: [
                                                                            LineChartBarData()
                                                                          ],
                                                                          titlesData: const FlTitlesData(
                                                                              show:
                                                                                  false),
                                                                          gridData: FlGridData(
                                                                              getDrawingVerticalLine: (value) => FlLine(color: defaultPalette.extras[0].withOpacity(0.3), dashArray: [5, 5], strokeWidth: 1),
                                                                              getDrawingHorizontalLine: (value) => FlLine(color: defaultPalette.extras[0].withOpacity(0.3), dashArray: [5, 5], strokeWidth: 1),
                                                                              show: true,
                                                                              horizontalInterval: 5,
                                                                              verticalInterval: 30),
                                                                          borderData: FlBorderData(show: false),
                                                                          minY: 0,
                                                                          maxY: 50,
                                                                          maxX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500 + 250,
                                                                          minX: dateTimeNow.millisecondsSinceEpoch.ceilToDouble() / 500)),
                                                                    ),
                                                                  ),
                                                                ),
                                                                //{{{MINI PAGE}}}
                                                                GestureDetector(
                                                                  onTap: () {
                                                                    _renderPagePreviewOnProperties();
                                                                  },
                                                                  child:
                                                                      Container(
                                                                    height: documentPropertiesList[currentPageIndex].orientationController ==
                                                                            pw.PageOrientation.portrait
                                                                        ? 100
                                                                        : 60,
                                                                    width: documentPropertiesList[currentPageIndex].orientationController ==
                                                                            pw.PageOrientation.portrait
                                                                        ? 80
                                                                        : 80,
                                                                    margin: const EdgeInsets
                                                                        .only(
                                                                        top: 10,
                                                                        left:
                                                                            8),
                                                                    decoration:
                                                                        BoxDecoration(
                                                                      image: cachedImageData !=
                                                                              null
                                                                          ? DecorationImage(
                                                                              image: MemoryImage(cachedImageData!),
                                                                              fit: documentPropertiesList[currentPageIndex].orientationController == pw.PageOrientation.portrait ? BoxFit.fitHeight : BoxFit.fitWidth,
                                                                            )
                                                                          : null,
                                                                    ),
                                                                    child: cachedImageData ==
                                                                            null
                                                                        ? Center(
                                                                            child:
                                                                                CircularProgressIndicator(),
                                                                          )
                                                                        : null,
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                          //PAGE NUMBER AND DELETE AND NEXT-PREV
                                                          Column(
                                                            crossAxisAlignment:
                                                                CrossAxisAlignment
                                                                    .center,
                                                            // mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                            children: [
                                                              if (((sWidth *
                                                                          wH2DividerPosition) -
                                                                      145) >
                                                                  66)
                                                                Container(
                                                                    height: 90,
                                                                    width: (sWidth *
                                                                            wH2DividerPosition) -
                                                                        150,
                                                                    alignment:
                                                                        Alignment
                                                                            .center,
                                                                    child: CountingAnimation(
                                                                        value: documentPropertiesList[currentPageIndex]
                                                                            .pageNumberController
                                                                            .text,
                                                                        scrollCount:
                                                                            3,
                                                                        textStyle: GoogleFonts.pressStart2p(
                                                                            color:
                                                                                defaultPalette.extras[0],
                                                                            fontSize: 50))),
                                                              Container(
                                                                width: (sWidth *
                                                                        wH2DividerPosition) -
                                                                    145,
                                                                height: (sWidth *
                                                                                wH2DividerPosition) -
                                                                            145 >
                                                                        66
                                                                    ? 20
                                                                    : 120,
                                                                child: Flex(
                                                                  direction: (sWidth * wH2DividerPosition) -
                                                                              145 >
                                                                          66
                                                                      ? Axis
                                                                          .horizontal
                                                                      : Axis
                                                                          .vertical,
                                                                  mainAxisAlignment:
                                                                      MainAxisAlignment
                                                                          .spaceAround,
                                                                  crossAxisAlignment: (sWidth * wH2DividerPosition) -
                                                                              145 >
                                                                          66
                                                                      ? CrossAxisAlignment
                                                                          .start
                                                                      : CrossAxisAlignment
                                                                          .center,
                                                                  children: [
                                                                    if ((sWidth *
                                                                                wH2DividerPosition) -
                                                                            145 <
                                                                        66)
                                                                      CountingAnimation(
                                                                          value: documentPropertiesList[currentPageIndex]
                                                                              .pageNumberController
                                                                              .text,
                                                                          scrollCount:
                                                                              3,
                                                                          textStyle: GoogleFonts.pressStart2p(
                                                                              color: defaultPalette.extras[0],
                                                                              fontSize: 20)),
                                                                    //{{PREVIOUS PAGE BUTTON}}
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          if (currentPageIndex ==
                                                                              0) {
                                                                            pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) + 16),
                                                                                duration: const Duration(milliseconds: 100),
                                                                                curve: Curves.easeIn);
                                                                            return;
                                                                          }
                                                                          currentPageIndex--;

                                                                          pdfScrollController.animateTo(
                                                                              currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) + 16),
                                                                              duration: const Duration(milliseconds: 100),
                                                                              curve: Curves.easeIn);
                                                                        });
                                                                      },
                                                                      child:
                                                                          Icon(
                                                                        TablerIcons
                                                                            .arrow_badge_left_filled,
                                                                        color: defaultPalette
                                                                            .extras[0],
                                                                        size:
                                                                            23,
                                                                      ),
                                                                    ),
                                                                    //{{DELETE PAGE BUTTON}}
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        _confirmDeleteLayout(
                                                                            deletePage:
                                                                                true);
                                                                        pdfScrollController.animateTo(
                                                                            currentPageIndex *
                                                                                ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) + 16),
                                                                            duration: const Duration(milliseconds: 100),
                                                                            curve: Curves.easeIn);
                                                                      },
                                                                      child:
                                                                          Icon(
                                                                        TablerIcons
                                                                            .trash,
                                                                        color: defaultPalette
                                                                            .black,
                                                                        size:
                                                                            20,
                                                                      ),
                                                                    ),
                                                                    //{{NEXT PAGE BUTTON}}
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          if (pageCount ==
                                                                              (currentPageIndex + 1)) {
                                                                            _addPdfPage();

                                                                            currentPageIndex++;
                                                                            pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) + 6),
                                                                                duration: const Duration(milliseconds: 100),
                                                                                curve: Curves.easeIn);

                                                                            return;
                                                                          }

                                                                          currentPageIndex++;

                                                                          pdfScrollController.animateTo(
                                                                              currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) + 6),
                                                                              duration: const Duration(milliseconds: 100),
                                                                              curve: Curves.easeIn);
                                                                        });
                                                                      },
                                                                      child:
                                                                          Icon(
                                                                        TablerIcons
                                                                            .arrow_badge_right_filled,
                                                                        color: defaultPalette
                                                                            .extras[0],
                                                                        size:
                                                                            23,
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                              ),
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                      //FORMATS TITLE

                                                      Container(
                                                        width: sWidth *
                                                                wH2DividerPosition -
                                                            45,
                                                        height: 15,
                                                        alignment:
                                                            Alignment.topCenter,
                                                        margin: EdgeInsets.only(
                                                            top: 10, right: 5),
                                                        decoration:
                                                            BoxDecoration(
                                                                // color: defaultPalette.extras[0],
                                                                borderRadius:
                                                                    BorderRadius
                                                                        .circular(
                                                                            5),
                                                                border:
                                                                    Border.all(
                                                                        width:
                                                                            0.1)),
                                                        child: Text(
                                                          'FORMATS',
                                                          style: GoogleFonts
                                                              .bungee(
                                                                  fontSize: 10),
                                                        ),
                                                      ),

                                                      //ORIENTATIONS BUTTONS
                                                      Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .only(
                                                                right: 5.0),
                                                        child: Row(
                                                          mainAxisAlignment:
                                                              MainAxisAlignment
                                                                  .spaceEvenly,
                                                          children: [
                                                            //PORTRAIT BUTTON
                                                            GestureDetector(
                                                              onTap: () {
                                                                setState(() {
                                                                  addToTheLeft =
                                                                      true;

                                                                  documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .orientationController =
                                                                      pw.PageOrientation
                                                                          .portrait;
                                                                });
                                                                _renderPagePreviewOnProperties();
                                                                Future.delayed(
                                                                        Durations
                                                                            .short1)
                                                                    .then(
                                                                        (onValue) {
                                                                  setState(() {
                                                                    addToTheLeft =
                                                                        false;
                                                                  });
                                                                  _renderPagePreviewOnProperties();
                                                                });
                                                              },
                                                              onTapDown: (d) {
                                                                setState(() {
                                                                  addToTheLeft =
                                                                      true;
                                                                });
                                                              },
                                                              onTapUp: (d) {
                                                                setState(() {
                                                                  addToTheLeft =
                                                                      false;
                                                                });
                                                              },
                                                              child: Stack(
                                                                children: [
                                                                  Container(
                                                                    width: (sWidth *
                                                                                wH2DividerPosition -
                                                                            65) /
                                                                        2,
                                                                    height: 30,
                                                                    alignment:
                                                                        Alignment
                                                                            .topCenter,
                                                                    margin: EdgeInsets
                                                                        .only(
                                                                            top:
                                                                                10),
                                                                    decoration: BoxDecoration(
                                                                        color: defaultPalette.extras[
                                                                            0],
                                                                        borderRadius:
                                                                            BorderRadius.circular(
                                                                                5),
                                                                        border: Border.all(
                                                                            width:
                                                                                1,
                                                                            strokeAlign:
                                                                                BorderSide.strokeAlignOutside)),
                                                                  ),
                                                                  AnimatedContainer(
                                                                    duration: addToTheLeft
                                                                        ? Duration
                                                                            .zero
                                                                        : Duration
                                                                            .zero,
                                                                    width: (sWidth *
                                                                                wH2DividerPosition -
                                                                            (addToTheLeft
                                                                                ? 65
                                                                                : 69)) /
                                                                        2,
                                                                    height:
                                                                        addToTheLeft
                                                                            ? 30
                                                                            : 28,
                                                                    alignment:
                                                                        Alignment
                                                                            .topLeft,
                                                                    margin: EdgeInsets.only(
                                                                        top: addToTheLeft
                                                                            ? 10
                                                                            : 12,
                                                                        left: addToTheLeft
                                                                            ? 0
                                                                            : 2),
                                                                    padding: EdgeInsets
                                                                        .only(
                                                                            left:
                                                                                0),
                                                                    decoration: BoxDecoration(
                                                                        color: defaultPalette
                                                                            .primary,
                                                                        borderRadius: BorderRadius.only(
                                                                            topRight: Radius.circular(addToTheLeft
                                                                                ? 5
                                                                                : 0),
                                                                            topLeft: Radius.circular(
                                                                                5),
                                                                            bottomRight: Radius.circular(
                                                                                5),
                                                                            bottomLeft: Radius.circular(addToTheLeft
                                                                                ? 5
                                                                                : 0)),
                                                                        border: Border.all(
                                                                            width:
                                                                                0.1)),
                                                                    child:
                                                                        Column(
                                                                      children: [
                                                                        Text(
                                                                          ' Port',
                                                                          style:
                                                                              GoogleFonts.bungee(fontSize: 12),
                                                                        ),
                                                                        Text(
                                                                          'rait ',
                                                                          style:
                                                                              GoogleFonts.bungee(fontSize: 7),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  Positioned(
                                                                    right: 0,
                                                                    top: 15,
                                                                    child:
                                                                        Transform
                                                                            .flip(
                                                                      flipX:
                                                                          true,
                                                                      child:
                                                                          Icon(
                                                                        TablerIcons
                                                                            .building_estate,
                                                                        color: defaultPalette
                                                                            .extras[0]
                                                                            .withOpacity(0.2),
                                                                        size:
                                                                            20,
                                                                      ),
                                                                    ),
                                                                  )
                                                                ],
                                                              ),
                                                            ),
                                                            //LANDSCAPE BUTTON
                                                            SizedBox(width: 5),
                                                            GestureDetector(
                                                              onTap: () {
                                                                setState(() {
                                                                  addToTheRight =
                                                                      true;

                                                                  documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .orientationController =
                                                                      pw.PageOrientation
                                                                          .landscape;
                                                                });
                                                                _renderPagePreviewOnProperties();
                                                                Future.delayed(
                                                                        Durations
                                                                            .short1)
                                                                    .then(
                                                                        (onValue) {
                                                                  setState(() {
                                                                    addToTheRight =
                                                                        false;
                                                                  });
                                                                  _renderPagePreviewOnProperties();
                                                                });
                                                              },
                                                              onTapDown: (d) {
                                                                setState(() {
                                                                  addToTheRight =
                                                                      true;
                                                                });
                                                              },
                                                              onTapUp: (d) {
                                                                setState(() {
                                                                  addToTheRight =
                                                                      false;
                                                                });
                                                              },
                                                              child: Stack(
                                                                children: [
                                                                  Container(
                                                                    width: (sWidth *
                                                                                wH2DividerPosition -
                                                                            55) /
                                                                        2,
                                                                    height: 30,
                                                                    alignment:
                                                                        Alignment
                                                                            .topCenter,
                                                                    margin: EdgeInsets
                                                                        .only(
                                                                            top:
                                                                                10),
                                                                    decoration: BoxDecoration(
                                                                        color: defaultPalette.extras[
                                                                            0],
                                                                        borderRadius:
                                                                            BorderRadius.circular(
                                                                                5),
                                                                        border: Border.all(
                                                                            width:
                                                                                1,
                                                                            strokeAlign:
                                                                                BorderSide.strokeAlignOutside)),
                                                                  ),
                                                                  AnimatedContainer(
                                                                    duration:
                                                                        Duration
                                                                            .zero,
                                                                    width: (sWidth *
                                                                                wH2DividerPosition -
                                                                            (addToTheRight
                                                                                ? 55
                                                                                : 60)) /
                                                                        2,
                                                                    height:
                                                                        addToTheRight
                                                                            ? 30
                                                                            : 28,
                                                                    alignment:
                                                                        Alignment
                                                                            .topRight,
                                                                    margin: EdgeInsets.only(
                                                                        top: addToTheRight
                                                                            ? 10
                                                                            : 12,
                                                                        left: addToTheRight
                                                                            ? 0
                                                                            : 2),
                                                                    padding: EdgeInsets
                                                                        .only(
                                                                            left:
                                                                                0),
                                                                    decoration: BoxDecoration(
                                                                        color: defaultPalette.primary,
                                                                        boxShadow: [
                                                                          BoxShadow(
                                                                            color:
                                                                                Colors.black.withOpacity(0.2),
                                                                            offset:
                                                                                Offset(2, 2), // Position of the shadow
                                                                            blurRadius:
                                                                                5,
                                                                            spreadRadius:
                                                                                -5, // Negative to create inward shadow
                                                                          ),
                                                                          BoxShadow(
                                                                            color:
                                                                                Colors.white.withOpacity(0.7),
                                                                            offset:
                                                                                Offset(-2, -2), // Highlight for a 3D effect
                                                                            blurRadius:
                                                                                5,
                                                                            spreadRadius:
                                                                                -5,
                                                                          ),
                                                                        ],
                                                                        borderRadius: BorderRadius.only(topRight: Radius.circular(addToTheRight ? 5 : 0), topLeft: Radius.circular(5), bottomRight: Radius.circular(5), bottomLeft: Radius.circular(addToTheRight ? 5 : 0)),
                                                                        border: Border.all(width: 0.1)),
                                                                    child:
                                                                        Column(
                                                                      crossAxisAlignment:
                                                                          CrossAxisAlignment
                                                                              .end,
                                                                      children: [
                                                                        Text(
                                                                          'Land ',
                                                                          style:
                                                                              GoogleFonts.bungee(fontSize: 12),
                                                                        ),
                                                                        Text(
                                                                          'Scape  ',
                                                                          style:
                                                                              GoogleFonts.bungee(fontSize: 7),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                  ),
                                                                  Positioned(
                                                                    left: 5,
                                                                    top: 15,
                                                                    child: Icon(
                                                                      TablerIcons
                                                                          .sunset_2,
                                                                      color: defaultPalette
                                                                          .extras[
                                                                              0]
                                                                          .withOpacity(
                                                                              0.2),
                                                                      size: 20,
                                                                    ),
                                                                  )
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),

                                                      //
                                                      //OPERATIONS BUTTONS
                                                      Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                .only(
                                                                right: 5.0),
                                                        child: Row(
                                                          mainAxisAlignment:
                                                              MainAxisAlignment
                                                                  .spaceBetween,
                                                          children: [
                                                            SizedBox(
                                                              width: (sWidth *
                                                                          wH2DividerPosition -
                                                                      65) /
                                                                  2,
                                                              child: Row(
                                                                mainAxisAlignment:
                                                                    MainAxisAlignment
                                                                        .spaceBetween,
                                                                children: [
                                                                  //ADD PAGE BUTTON
                                                                  PieMenu(
                                                                    controller:
                                                                        opsAddPieController,
                                                                    actions: [
                                                                      getPieActionForAddMove(
                                                                          'LEFT',
                                                                          true),
                                                                      getPieActionForAddMove(
                                                                          'RIGHT',
                                                                          true)
                                                                    ],
                                                                    theme: PieTheme(
                                                                        rightClickShowsMenu: true,
                                                                        buttonSize: ((sWidth * wH2DividerPosition - 65) / 3).clamp(40, 100),
                                                                        spacing: 5,
                                                                        radius: ((sWidth * wH2DividerPosition - 65) / 2).clamp(50, 100),
                                                                        customAngle: -20,
                                                                        menuAlignment: Alignment.center,
                                                                        pointerSize: 20,
                                                                        menuDisplacement: Offset(0, 4),
                                                                        tooltipPadding: EdgeInsets.all(5),
                                                                        tooltipTextStyle: GoogleFonts.bungee(fontSize: 20),
                                                                        buttonTheme: PieButtonTheme(
                                                                            backgroundColor: defaultPalette.tertiary,
                                                                            iconColor: defaultPalette.primary,
                                                                            decoration: BoxDecoration(
                                                                              border: Border.all(width: 1),
                                                                              borderRadius: BorderRadius.circular(200),
                                                                              color: defaultPalette.extras[0],
                                                                            ))),
                                                                    child:
                                                                        Container(
                                                                      margin: const EdgeInsets
                                                                          .only(
                                                                          top:
                                                                              8.0),
                                                                      // padding: const EdgeInsets.all(1),
                                                                      child: IconButton.filled(
                                                                          style: IconButton.styleFrom(
                                                                            backgroundColor:
                                                                                defaultPalette.extras[0], // Background color
                                                                            foregroundColor:
                                                                                defaultPalette.primary, // Icon color
                                                                            // Elevation of the button
                                                                            padding:
                                                                                EdgeInsets.symmetric(vertical: 10.0, horizontal: 2), // Padding around the icon
                                                                            shape:
                                                                                RoundedRectangleBorder(
                                                                              // Custom button shape
                                                                              borderRadius: BorderRadius.circular(5.0),
                                                                            ),
                                                                          ),
                                                                          constraints: BoxConstraints(
                                                                            minWidth:
                                                                                (sWidth * wH2DividerPosition - 65) / 6,
                                                                            minHeight:
                                                                                45,
                                                                          ), // Reduces the overall size further
                                                                          visualDensity: VisualDensity.compact,
                                                                          iconSize: 12,
                                                                          onPressed: () {
                                                                            opsAddPieController.openMenu();
                                                                          },
                                                                          icon: Icon(TablerIcons.plus)),
                                                                    ),
                                                                  ),
                                                                  //MOVE PAGE BUTTON
                                                                  PieMenu(
                                                                    controller:
                                                                        opsMovePieController,
                                                                    actions: [
                                                                      getPieActionForAddMove(
                                                                          'LEFT',
                                                                          false),
                                                                      getPieActionForAddMove(
                                                                          'RIGHT',
                                                                          false),
                                                                    ],
                                                                    theme: PieTheme(
                                                                        rightClickShowsMenu: true,
                                                                        buttonSize: ((sWidth * wH2DividerPosition - 65) / 3).clamp(40, 100),
                                                                        spacing: 10,
                                                                        radius: ((sWidth * wH2DividerPosition - 65) / 2).clamp(50, 100),
                                                                        customAngle: -20,
                                                                        menuAlignment: Alignment.center,
                                                                        pointerSize: 20,
                                                                        menuDisplacement: Offset(0, 4),
                                                                        tooltipPadding: EdgeInsets.all(0),
                                                                        tooltipTextStyle: GoogleFonts.bungee(fontSize: 20),
                                                                        buttonTheme: PieButtonTheme(
                                                                            backgroundColor: defaultPalette.tertiary,
                                                                            iconColor: defaultPalette.primary,
                                                                            decoration: BoxDecoration(
                                                                              border: Border.all(width: 1),
                                                                              borderRadius: BorderRadius.circular(200),
                                                                              color: defaultPalette.extras[0],
                                                                            ))),
                                                                    child:
                                                                        Container(
                                                                      margin: const EdgeInsets
                                                                          .only(
                                                                          top:
                                                                              8.0),
                                                                      // padding: const EdgeInsets.all(1),
                                                                      child: IconButton.filled(
                                                                          style: IconButton.styleFrom(
                                                                            backgroundColor:
                                                                                defaultPalette.extras[0], // Background color
                                                                            foregroundColor:
                                                                                defaultPalette.primary, // Icon color
                                                                            // Elevation of the button
                                                                            padding:
                                                                                EdgeInsets.symmetric(vertical: 10.0), // Padding around the icon
                                                                            shape:
                                                                                RoundedRectangleBorder(
                                                                              // Custom button shape
                                                                              borderRadius: BorderRadius.circular(5.0),
                                                                            ),
                                                                          ),
                                                                          constraints: BoxConstraints(
                                                                            minWidth:
                                                                                (sWidth * wH2DividerPosition - 65) / 6.3,
                                                                            minHeight:
                                                                                45,
                                                                          ), // Reduces the overall size further
                                                                          visualDensity: VisualDensity.compact,
                                                                          iconSize: 15,
                                                                          onPressed: () {
                                                                            opsMovePieController.openMenu();
                                                                          },
                                                                          icon: Icon(TablerIcons.arrows_move_vertical)),
                                                                    ),
                                                                  ),
                                                                  //Duplicate PAGE BUTTON
                                                                  PieMenu(
                                                                    actions: [
                                                                      getPieActionForDuplicate(
                                                                          'LEFT'),
                                                                      getPieActionForDuplicate(
                                                                          'RIGHT')
                                                                    ],
                                                                    controller:
                                                                        opsCopyPieController,
                                                                    theme: PieTheme(
                                                                        rightClickShowsMenu: true,
                                                                        buttonSize: ((sWidth * wH2DividerPosition - 65) / 3).clamp(40, 100),
                                                                        spacing: 5,
                                                                        radius: ((sWidth * wH2DividerPosition - 65) / 2).clamp(50, 100),
                                                                        customAngle: 20,
                                                                        menuAlignment: Alignment.center,
                                                                        pointerSize: 20,
                                                                        menuDisplacement: Offset(0, 4),
                                                                        tooltipPadding: EdgeInsets.all(5),
                                                                        tooltipTextStyle: GoogleFonts.bungee(fontSize: 20),
                                                                        buttonTheme: PieButtonTheme(
                                                                            backgroundColor: defaultPalette.tertiary,
                                                                            iconColor: defaultPalette.primary,
                                                                            decoration: BoxDecoration(
                                                                              border: Border.all(width: 1),
                                                                              borderRadius: BorderRadius.circular(200),
                                                                              color: defaultPalette.extras[0],
                                                                            ))),
                                                                    child:
                                                                        Container(
                                                                      margin: const EdgeInsets
                                                                          .only(
                                                                          top:
                                                                              8.0),
                                                                      child: IconButton.filled(
                                                                          style: IconButton.styleFrom(
                                                                            backgroundColor:
                                                                                defaultPalette.extras[0],
                                                                            foregroundColor:
                                                                                defaultPalette.primary,
                                                                            padding:
                                                                                const EdgeInsets.symmetric(vertical: 10.0),
                                                                            shape:
                                                                                RoundedRectangleBorder(
                                                                              borderRadius: BorderRadius.circular(5.0),
                                                                            ),
                                                                          ),
                                                                          constraints: BoxConstraints(
                                                                            minWidth:
                                                                                (sWidth * wH2DividerPosition - 65) / 5.5,
                                                                            minHeight:
                                                                                45,
                                                                          ), // Reduces the overall size further
                                                                          visualDensity: VisualDensity.compact,
                                                                          iconSize: 15,
                                                                          onPressed: () {
                                                                            opsCopyPieController.openMenu();
                                                                          },
                                                                          icon: const Icon(TablerIcons.dots_vertical)),
                                                                    ),
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                            PieMenu(
                                                              controller:
                                                                  opsFormatPieController,
                                                              actions: [
                                                                getPieAction(
                                                                    'A3'),
                                                                getPieAction(
                                                                    'A4'),
                                                                getPieAction(
                                                                    'A5'),
                                                                getPieAction(
                                                                    'A6'),
                                                                getPieAction(
                                                                    'Letter'),
                                                                getPieAction(
                                                                    'Legal'),
                                                              ],
                                                              theme: PieTheme(
                                                                  rightClickShowsMenu:
                                                                      true,
                                                                  buttonSize:
                                                                      ((sWidth * wH2DividerPosition - 65) / 6)
                                                                          .clamp(
                                                                              40, 400),
                                                                  spacing: 1,
                                                                  radius: ((sWidth * wH2DividerPosition - 65) / 4)
                                                                      .clamp(
                                                                          50, 400),
                                                                  customAngle:
                                                                      -180,
                                                                  menuAlignment:
                                                                      Alignment
                                                                          .center,
                                                                  menuDisplacement:
                                                                      Offset(
                                                                          -(sWidth * wH2DividerPosition - 38) /
                                                                              6,
                                                                          4),
                                                                  tooltipPadding:
                                                                      EdgeInsets.all(
                                                                          0),
                                                                  tooltipTextStyle:
                                                                      GoogleFonts.bungee(
                                                                          fontSize:
                                                                              20),
                                                                  buttonTheme:
                                                                      PieButtonTheme(
                                                                          backgroundColor: defaultPalette
                                                                              .primary,
                                                                          iconColor:
                                                                              defaultPalette.extras[0],
                                                                          decoration: BoxDecoration(
                                                                            border:
                                                                                Border.all(width: 3),
                                                                            borderRadius:
                                                                                BorderRadius.circular(200),
                                                                            color:
                                                                                defaultPalette.extras[0],
                                                                          ))),
                                                              child: Padding(
                                                                padding:
                                                                    const EdgeInsets
                                                                        .only(
                                                                        top:
                                                                            8.0),
                                                                child: IconButton
                                                                    .filled(
                                                                        style: IconButton
                                                                            .styleFrom(
                                                                          backgroundColor:
                                                                              defaultPalette.extras[0], // Background color
                                                                          foregroundColor:
                                                                              defaultPalette.primary, // Icon color
                                                                          // Elevation of the button
                                                                          padding:
                                                                              EdgeInsets.symmetric(vertical: 10.0), // Padding around the icon
                                                                          shape:
                                                                              RoundedRectangleBorder(
                                                                            // Custom button shape
                                                                            borderRadius:
                                                                                BorderRadius.circular(5.0),
                                                                          ),
                                                                        ),
                                                                        constraints:
                                                                            BoxConstraints(
                                                                          minWidth:
                                                                              (sWidth * wH2DividerPosition - 38) / 2,
                                                                          minHeight:
                                                                              45,
                                                                        ), // Reduces the overall size further
                                                                        visualDensity:
                                                                            VisualDensity
                                                                                .compact,
                                                                        iconSize:
                                                                            20,
                                                                        onPressed:
                                                                            () {
                                                                          opsFormatPieController
                                                                              .openMenu();
                                                                        },
                                                                        icon:
                                                                            SizedBox(
                                                                          width:
                                                                              (sWidth * wH2DividerPosition - 52) / 2,
                                                                          child:
                                                                              Row(
                                                                            mainAxisAlignment:
                                                                                MainAxisAlignment.spaceAround,
                                                                            children: [
                                                                              Icon(TablerIcons.file_smile),
                                                                              Text(
                                                                                getPageFormatString(documentPropertiesList[currentPageIndex].pageFormatController),
                                                                                style: GoogleFonts.bungee(color: defaultPalette.primary),
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        )),
                                                              ),
                                                            )
                                                          ],
                                                        ),
                                                      ),

                                                      //STYLES TITLE
                                                      Container(
                                                        width: sWidth *
                                                                wH2DividerPosition -
                                                            45,
                                                        height: 15,
                                                        alignment:
                                                            Alignment.topCenter,
                                                        margin: EdgeInsets.only(
                                                            top: 10, right: 5),
                                                        decoration:
                                                            BoxDecoration(
                                                                // color: defaultPalette.extras[0],
                                                                borderRadius:
                                                                    BorderRadius
                                                                        .circular(
                                                                            5),
                                                                border:
                                                                    Border.all(
                                                                        width:
                                                                            0.1)),
                                                        child: Text(
                                                          'Styles',
                                                          style: GoogleFonts
                                                              .bungee(
                                                                  fontSize: 10),
                                                        ),
                                                      ),

                                                      //Space
                                                      const SizedBox(
                                                        height: 10,
                                                      ),
                                                      // MARGIN Main
                                                      Column(
                                                        children: [
                                                          //Margin TiTle
                                                          SizedBox(
                                                            height:
                                                                textFieldHeight /
                                                                    2,
                                                            child: Row(
                                                              children: [
                                                                Expanded(
                                                                  child: Text(
                                                                    'Margin',
                                                                    style: GoogleFonts
                                                                        .bungee(),
                                                                  ),
                                                                ),

                                                                const SizedBox(
                                                                  width: 5,
                                                                ),
                                                                //Margin ONE Field
                                                                Expanded(
                                                                  child:
                                                                      TextFormField(
                                                                    onTapOutside:
                                                                        (event) {
                                                                      marginAllFocus
                                                                          .unfocus();
                                                                    },
                                                                    obscureText:
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins,
                                                                    focusNode:
                                                                        marginAllFocus,
                                                                    controller:
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .marginAllController,
                                                                    inputFormatters: [
                                                                      NumericInputFormatter(
                                                                          maxValue:
                                                                              documentPropertiesList[currentPageIndex].pageFormatController.width / 2.001)
                                                                    ],
                                                                    textAlignVertical:
                                                                        TextAlignVertical
                                                                            .top,
                                                                    textAlign:
                                                                        TextAlign
                                                                            .center,
                                                                    decoration:
                                                                        InputDecoration(
                                                                      contentPadding:
                                                                          const EdgeInsets
                                                                              .all(
                                                                              0),
                                                                      floatingLabelAlignment:
                                                                          FloatingLabelAlignment
                                                                              .center,
                                                                      labelStyle:
                                                                          GoogleFonts.lexend(
                                                                              color: defaultPalette.black),
                                                                      filled:
                                                                          true,
                                                                      fillColor: !documentPropertiesList[currentPageIndex].useIndividualMargins
                                                                          ? defaultPalette
                                                                              .primary
                                                                          : defaultPalette
                                                                              .primary
                                                                              .withOpacity(0.5),
                                                                      border:
                                                                          OutlineInputBorder(
                                                                        // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Replace with your desired radius
                                                                      ),
                                                                      enabledBorder:
                                                                          OutlineInputBorder(
                                                                        borderSide: BorderSide(
                                                                            width:
                                                                                1.2,
                                                                            color:
                                                                                defaultPalette.black),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Same as border
                                                                      ),
                                                                      focusedBorder:
                                                                          OutlineInputBorder(
                                                                        borderSide: BorderSide(
                                                                            width:
                                                                                1.5,
                                                                            color:
                                                                                defaultPalette.tertiary),
                                                                        borderRadius:
                                                                            BorderRadius.circular(5.0), // Same as border
                                                                      ),
                                                                    ),
                                                                    keyboardType:
                                                                        TextInputType
                                                                            .number,
                                                                    style: GoogleFonts.bungee(
                                                                        // fontStyle: FontStyle.italic,
                                                                        fontSize: 12,
                                                                        color: defaultPalette.black),
                                                                    onChanged:
                                                                        (value) {
                                                                      // setState(() {

                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginTopController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginBottomController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginLeftController
                                                                          .text = value;
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .marginRightController
                                                                          .text = value;
                                                                      // _updatePdfPreview(
                                                                      //     '');
                                                                      // });
                                                                    },
                                                                    enabled: !documentPropertiesList[
                                                                            currentPageIndex]
                                                                        .useIndividualMargins,
                                                                  ),
                                                                ),

                                                                const SizedBox(
                                                                  width: 5,
                                                                ),
                                                                //Increase Decrease
                                                                Column(
                                                                  children: [
                                                                    //Margin increment button
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text = (double.parse(documentPropertiesList[currentPageIndex].marginAllController.text) +
                                                                                  1)
                                                                              .toString();
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        });

                                                                        // _updatePdfPreview('');
                                                                      },
                                                                      child:
                                                                          const Icon(
                                                                        IconsaxPlusLinear
                                                                            .arrow_up_1,
                                                                        size:
                                                                            10,
                                                                      ),
                                                                    ),
                                                                    //Margin decrement button
                                                                    GestureDetector(
                                                                      onTap:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          var value = documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginAllController
                                                                              .text = (double.parse(value) -
                                                                                  1)
                                                                              .abs()
                                                                              .toString();
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        });
                                                                        // _updatePdfPreview('');
                                                                      },
                                                                      child:
                                                                          const Icon(
                                                                        IconsaxPlusLinear
                                                                            .arrow_down,
                                                                        size:
                                                                            10,
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                ////INDIVIDUAL MARGINS BUTTON
                                                                IconButton(
                                                                    padding:
                                                                        const EdgeInsets
                                                                            .all(
                                                                            0),
                                                                    onPressed:
                                                                        () {
                                                                      setState(
                                                                          () {
                                                                        documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins = !documentPropertiesList[
                                                                                currentPageIndex]
                                                                            .useIndividualMargins;
                                                                        if (documentPropertiesList[currentPageIndex].useIndividualMargins ==
                                                                            false) {
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginTopController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginBottomController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginLeftController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                          documentPropertiesList[currentPageIndex]
                                                                              .marginRightController
                                                                              .text = documentPropertiesList[
                                                                                  currentPageIndex]
                                                                              .marginAllController
                                                                              .text;
                                                                        }
                                                                      });
                                                                    },
                                                                    icon: documentPropertiesList[currentPageIndex]
                                                                            .useIndividualMargins
                                                                        ? const Icon(
                                                                            IconsaxPlusBold.maximize_1,
                                                                            size:
                                                                                20,
                                                                          )
                                                                        : const Icon(
                                                                            IconsaxPlusLinear.maximize_2,
                                                                            size:
                                                                                20,
                                                                          ))
                                                                // Text(
                                                                //     'Use Individual Margins'),
                                                              ],
                                                            ),
                                                          ),

                                                          if (documentPropertiesList[
                                                                  currentPageIndex]
                                                              .useIndividualMargins)
                                                            Column(
                                                              children: [
                                                                const SizedBox(
                                                                  height: 10,
                                                                ),
                                                                //TOP AND BOTTOM Margin TiTle

                                                                Row(
                                                                  children: [
                                                                    //Top Margin text
                                                                    Expanded(
                                                                      flex: 2,
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 1,
                                                                              child: Text(
                                                                                'Top',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //TOP Margin ONE Field
                                                                            Expanded(
                                                                              flex: 1,
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginTopFocus.unfocus();
                                                                                },
                                                                                focusNode: marginTopFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginTopController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginTopController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),

                                                                    const SizedBox(
                                                                      width: 10,
                                                                    ),
                                                                    //Bottom Margin text
                                                                    Expanded(
                                                                      flex: 3,
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 3,
                                                                              child: Text(
                                                                                'Bottom',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Bottom Margin ONE Field
                                                                            Expanded(
                                                                              flex: 2,
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginBottomFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginBottomController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginTopController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginBottomController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                const SizedBox(
                                                                  height: 10,
                                                                ),
                                                                // LEFT AND RIGHT Margin Title
                                                                Row(
                                                                  children: [
                                                                    //Left Margin text
                                                                    Expanded(
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              child: Text(
                                                                                'Left',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Left Margin ONE Field
                                                                            Expanded(
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginLeftFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginLeftController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginRightController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginLeftController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    const SizedBox(
                                                                      width: 10,
                                                                    ),
                                                                    //Right Margin text
                                                                    Expanded(
                                                                      child:
                                                                          SizedBox(
                                                                        height:
                                                                            textFieldHeight /
                                                                                2,
                                                                        child:
                                                                            Row(
                                                                          children: [
                                                                            Expanded(
                                                                              flex: 2,
                                                                              child: Text(
                                                                                'Right',
                                                                                style: GoogleFonts.bungee(),
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Right Margin ONE Field
                                                                            Expanded(
                                                                              child: TextFormField(
                                                                                onTapOutside: (event) {
                                                                                  marginBottomFocus.unfocus();
                                                                                },
                                                                                focusNode: marginRightFocus,
                                                                                controller: documentPropertiesList[currentPageIndex].marginRightController,
                                                                                inputFormatters: [
                                                                                  // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                  NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text))),
                                                                                ],
                                                                                cursorColor: defaultPalette.secondary,
                                                                                textAlign: TextAlign.center,
                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                decoration: InputDecoration(
                                                                                  contentPadding: const EdgeInsets.all(0),
                                                                                  filled: true,
                                                                                  fillColor: defaultPalette.primary,
                                                                                  border: OutlineInputBorder(
                                                                                    // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Replace with your desired radius
                                                                                  ),
                                                                                  enabledBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 1.2, color: defaultPalette.black),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                  focusedBorder: OutlineInputBorder(
                                                                                    borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                    borderRadius: BorderRadius.circular(5.0), // Same as border
                                                                                  ),
                                                                                ),
                                                                                keyboardType: TextInputType.number,
                                                                                style: GoogleFonts.bungee(
                                                                                    // fontStyle: FontStyle.italic,
                                                                                    fontSize: 12,
                                                                                    color: defaultPalette.black),
                                                                                onChanged: (value) {
                                                                                  // setState(() {
                                                                                  if (value.isEmpty) {
                                                                                    documentPropertiesList[currentPageIndex].marginRightController.text = '0';
                                                                                  }
                                                                                  setState(() {});
                                                                                  // _updatePdfPreview(
                                                                                  //     '');
                                                                                  // });
                                                                                },
                                                                                enabled: documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                              ),
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 5,
                                                                            ),
                                                                            //Increase Decrease (Right Margin)
                                                                            Column(
                                                                              children: [
                                                                                //Margin increment button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) + 1).toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_up_1,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                                //Margin decrement button
                                                                                GestureDetector(
                                                                                  onTap: () {
                                                                                    setState(() {
                                                                                      documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) - 1).abs().toInt().toString();
                                                                                    });

                                                                                    // _updatePdfPreview('');
                                                                                  },
                                                                                  child: const Icon(
                                                                                    IconsaxPlusLinear.arrow_down,
                                                                                    size: 10,
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const SizedBox(
                                                                              width: 10,
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                  ],
                                                                ),
                                                                const SizedBox(
                                                                  height: 0,
                                                                )
                                                              ],
                                                            ),
                                                          // Divider(),
                                                        ],
                                                      ),
                                                      const SizedBox(
                                                          height: 10),

                                                      const SizedBox(
                                                        height: 30,
                                                      )
                                                    ],
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ),
                                      ],
                                    );
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),

                        //RESIZE HANDLE VERTICAL 2
                        Positioned(
                            top: Platform.isAndroid ? 35 : 0,
                            left: sWidth * (1 - wH2DividerPosition),
                            child: MouseRegion(
                              cursor: _cursor,
                              onExit: (event) {
                                setState(() {
                                  _cursor = SystemMouseCursors.basic;
                                });
                              },
                              onHover: (PointerHoverEvent event) {
                                Offset position = event.localPosition;
                                Size? widgetSize = context.size;
                                setState(() {
                                  // Change the cursor based on position
                                  if (widgetSize == null)
                                    _cursor = SystemMouseCursors.basic;

                                  // Define the edge proximity threshold
                                  const edgeThreshold = 10.0;

                                  // Check if the cursor is near the edges and set the cursor style accordingly
                                  if (position.dx < edgeThreshold ||
                                      position.dx >
                                          (widgetSize?.width ?? 0) -
                                              edgeThreshold) {
                                    _cursor = SystemMouseCursors.resizeColumn;
                                  } else if (position.dy < edgeThreshold ||
                                      position.dy >
                                          (widgetSize?.height ?? 0) -
                                              edgeThreshold) {
                                    _cursor = SystemMouseCursors.resizeRow;
                                  } else {
                                    _cursor = SystemMouseCursors.basic;
                                  }
                                });
                              },
                              child: GestureDetector(
                                onPanUpdate: (details) {
                                  double newPosition = ((0.9 -
                                              wH2DividerPosition -
                                              wH1DividerPosition) +
                                          details.delta.dx /
                                              context.size!.width)
                                      .clamp(0.1, 0.6);
                                  setState(() {
                                    wH2DividerPosition =
                                        (newPosition - .9 + wH1DividerPosition)
                                            .abs()
                                            .clamp(0.21, 0.48);
                                  });
                                },
                                child: Container(
                                  color: Colors.transparent,
                                  height: sHeight,
                                  width: 10,
                                ),
                              ),
                            )),
                        //Resize Handle Horizontal
                        Positioned(
                            top: Platform.isAndroid
                                ? sHeight * wVDividerPosition + 35
                                : sHeight * wVDividerPosition + 0,
                            left: sWidth * (1 - wH2DividerPosition) + 10,
                            child: MouseRegion(
                              onEnter: (event) {
                                setState(() {
                                  _cursor = SystemMouseCursors.resizeRow;
                                });
                              },
                              onHover: (PointerHoverEvent event) {
                                Offset position = event.localPosition;
                                // Size? widgetSize = context.size;
                                setState(() {
                                  // Change the cursor based on position
                                  // if (widgetSize == null)
                                  //   _cursor = SystemMouseCursors.basic;

                                  // Define the edge proximity threshold
                                  const edgeThreshold = 10.0;

                                  // Check if the cursor is near the edges and set the cursor style accordingly

                                  _cursor = SystemMouseCursors.resizeRow;
                                });
                              },
                              child: GestureDetector(
                                onPanUpdate: (details) {
                                  ref
                                      .read(pgPropsEnableProvider.notifier)
                                      .update((cb) {
                                    return true;
                                  });
                                  double newPosition = ((wVDividerPosition) +
                                          details.delta.dy /
                                              context.size!.height)
                                      .clamp(0.1, 0.9);
                                  setState(() {
                                    var x = (Platform.isAndroid ? 50 : 80) /
                                        sHeight;
                                    wVDividerPosition =
                                        (newPosition).abs().clamp(x, 1);
                                  });
                                },
                                child: Container(
                                  color: Colors.transparent,
                                  height: 10,
                                  width: sWidth * wH2DividerPosition - 10,
                                ),
                              ),
                            )),
                        //RESIZE HANDLE VERTICAL 1
                        Positioned(
                            top: Platform.isAndroid ? 35 : 0,
                            left: sWidth * (wH1DividerPosition) - 5,
                            child: MouseRegion(
                              cursor: _cursor,
                              onExit: (event) {
                                setState(() {
                                  _cursor = SystemMouseCursors.basic;
                                });
                              },
                              onHover: (PointerHoverEvent event) {
                                Offset position = event.localPosition;
                                Size? widgetSize = context.size;
                                setState(() {
                                  // Change the cursor based on position
                                  if (widgetSize == null)
                                    _cursor = SystemMouseCursors.basic;

                                  // Define the edge proximity threshold
                                  const edgeThreshold = 10.0;

                                  // Check if the cursor is near the edges and set the cursor style accordingly
                                  if (position.dx < edgeThreshold ||
                                      position.dx >
                                          (widgetSize?.width ?? 0) -
                                              edgeThreshold) {
                                    _cursor = SystemMouseCursors.resizeColumn;
                                  } else if (position.dy < edgeThreshold ||
                                      position.dy >
                                          (widgetSize?.height ?? 0) -
                                              edgeThreshold) {
                                    _cursor = SystemMouseCursors.resizeRow;
                                  } else {
                                    _cursor = SystemMouseCursors.basic;
                                  }
                                });
                              },
                              child: GestureDetector(
                                onPanUpdate: (details) {
                                  double newPosition = (wH1DividerPosition +
                                          details.delta.dx /
                                              context.size!.width)
                                      .clamp(0.05, 0.4);
                                  setState(() {
                                    wH1DividerPosition = newPosition;
                                  });
                                },
                                child: Container(
                                  color: Colors.transparent,
                                  height: sHeight,
                                  width: 10,
                                ),
                              ),
                            )),
                      ],
                    ),
                  ),
                  //
                  // Windows top bar
                  if (Platform.isWindows)
                    GestureDetector(
                      behavior: HitTestBehavior.translucent,
                      onPanStart: (details) {
                        appWindow.startDragging();
                      },
                      onDoubleTap: () {
                        appWindow.maximizeOrRestore();
                      },
                      child: Container(
                        color: Colors.transparent,
                        height: 40,
                        child: Consumer(builder: (context, ref, c) {
                          return Stack(
                            children: [
                              AnimatedPositioned(
                                right: 0,
                                duration: Durations.short4,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: AnimatedContainer(
                                    duration: Durations.short4,
                                    padding: const EdgeInsets.only(
                                        right: 8, bottom: 4),
                                    margin: const EdgeInsets.only(top: 0),
                                    decoration: const BoxDecoration(
                                        color: Colors.transparent,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(12),
                                          bottomLeft: Radius.circular(12),
                                        )),
                                    child: Row(
                                      children: [
                                        //minimize button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Duration.zero)
                                                .then((y) {
                                              appWindow.minimize();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 10),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.rectangle,
                                            size: 15,
                                            // color: Colors.blue,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                        //
                                        //maximize button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Durations.short1)
                                                .then((y) {
                                              appWindow.maximizeOrRestore();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 1),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.triangle,
                                            size: 14,
                                            // color: Colors.amber,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                        //close button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Duration.zero)
                                                .then((y) {
                                              appWindow.close();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 1),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.circle,
                                            size: 15,
                                            // color: Colors.red,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                      ],
                                    ),
                                    //
                                  ),
                                ),
                              ),
                            ],
                          );
                        }),
                      ),
                    ),

                  //
                  //BILLBLAZE MAIN TITLE //Desktop WEB
                  AnimatedPositioned(
                    duration: defaultDuration,
                    top: Platform.isAndroid ? 30 : 5,
                    left: Platform.isAndroid ? 45 : 60,
                    child: AnimatedTextKit(
                      // key: ValueKey(appinioLoop),
                      animatedTexts: [
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.abrilFatface(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.zcoolKuaiLe(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.splash(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze",
                            textStyle: GoogleFonts.libreBarcode39ExtendedText(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                letterSpacing: 0,
                                height: 1),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.redactedScript(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.fascinateInline(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.nabla(
                                fontSize: Platform.isAndroid
                                    ? titleFontSize / 3.5
                                    : 15,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                      ],
                      // totalRepeatCount: 1,
                      repeatForever: true,
                      pause: const Duration(milliseconds: 30000),
                      displayFullTextOnTap: true,
                      stopPauseOnTap: true,
                    ),
                  ),
                  //
                  //SIDE BAR BUTTON //Desktop WEB
                  AnimatedPositioned(
                    duration: sideBarPosDuration,
                    top: (sHeight / 20) - (sHeight / 18),
                    left: -10,
                    child: ElevatedLayerButton(
                      // isTapped: false,
                      // toggleOnTap: true,
                      onClick: () {
                        saveLayout();
                        Navigator.pop(context);
                      },
                      buttonHeight: Platform.isWindows ? 60 : 50,
                      buttonWidth: Platform.isWindows ? 60 : 50,
                      borderRadius: BorderRadius.circular(100),
                      animationDuration: const Duration(milliseconds: 100),
                      animationCurve: Curves.ease,
                      topDecoration: BoxDecoration(
                        color: Colors.white,
                        border: Border.all(),
                      ),
                      topLayerChild: Icon(
                        IconsaxPlusLinear.element_3,
                        size: Platform.isWindows ? 20 : 15,
                      ),
                      baseDecoration: BoxDecoration(
                        color: Colors.green,
                        border: Border.all(),
                      ),
                    ),
                  ),
                  //
                  //Layout Name Rename
                  Positioned(
                    top: 2,
                    height: Platform.isAndroid ? 30 : 35,
                    width: sWidth / 7,
                    left: Platform.isAndroid ? sWidth / 2.5 : sWidth / 2,
                    // width: (sWidth * wH2DividerPosition - 10) * 0.3,
                    child: IntrinsicWidth(
                      child: Focus(
                        onFocusChange: _onFieldFocusChange,
                        child: TextFormField(
                          focusNode: layoutNamefocusNode,
                          cursorColor: defaultPalette.primary,
                          controller: layoutName,

                          textAlignVertical: TextAlignVertical.top,
                          textAlign: TextAlign.center,
                          decoration: InputDecoration(
                            contentPadding:
                                const EdgeInsets.symmetric(horizontal: 5),
                            filled: true,
                            fillColor: defaultPalette.transparent,
                            border: OutlineInputBorder(
                              // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                              borderRadius: BorderRadius.circular(
                                  5), // Replace with your desired radius
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderSide: BorderSide(
                                  width: 0, color: defaultPalette.transparent),
                              borderRadius:
                                  BorderRadius.circular(5), // Same as border
                            ),
                            disabledBorder: OutlineInputBorder(
                              borderSide: BorderSide(
                                  width: 1.2,
                                  color: defaultPalette.transparent),
                              borderRadius:
                                  BorderRadius.circular(6), // Same as border
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderSide: BorderSide(
                                width: 3,
                                color: nameExists
                                    ? layoutName.text == initialLayoutName
                                        ? defaultPalette.extras[1]
                                        : Colors.red
                                    : defaultPalette.transparent,
                              ),
                              borderRadius:
                                  BorderRadius.circular(5), // Same as border
                            ),
                          ),
                          // keyboardType: TextInputType.number,
                          style: GoogleFonts.bungee(
                              color: defaultPalette.black, fontSize: 12),
                          onChanged: (value) {
                            _checkLayoutName();
                          },
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ));
    } else {
      //MOBILE
      return Scaffold(
          resizeToAvoidBottomInset: false,
          body: SafeArea(
            child: Container(
              color: defaultPalette.white,
              child: Stack(
                children: [
                  Container(
                    height: sHeight,
                    width: sWidth,
                    color: Colors.transparent,
                  ),
                  AnimatedPositioned(
                    duration: const Duration(milliseconds: 300),
                    child: Column(
                      children: [
                        //APPBAR
                        Expanded(
                          flex: (appbarHeight * 10000).round(),
                          child: Container(
                            height: sHeight * 0.1,
                          ),
                        ),
                        //TOP HALF
                        Expanded(
                          flex: (hDividerPosition * 10000).round(),
                          child: Stack(
                            children: [
                              //Graph
                              IgnorePointer(
                                ignoring: true,
                                child: AnimatedContainer(
                                  duration: Durations.extralong1,
                                  height: sHeight,
                                  width: sWidth,
                                  alignment: Alignment.centerRight,
                                  color: Colors.black.withOpacity(0.06),
                                  padding: const EdgeInsets.only(
                                    top: 0,
                                  ),
                                  //layGraph
                                  child: LineChart(LineChartData(
                                      lineBarsData: [LineChartBarData()],
                                      titlesData:
                                          const FlTitlesData(show: false),
                                      gridData: const FlGridData(
                                          show: true,
                                          horizontalInterval: 10,
                                          verticalInterval: 30),
                                      borderData: FlBorderData(show: false),
                                      minY: 0,
                                      maxY: 50,
                                      maxX: dateTimeNow.millisecondsSinceEpoch
                                                  .ceilToDouble() /
                                              500 +
                                          250,
                                      minX: dateTimeNow.millisecondsSinceEpoch
                                              .ceilToDouble() /
                                          500)),
                                ),
                              ),

                              AnimatedPositioned(
                                duration: const Duration(milliseconds: 300),
                                // left: panelIndex.panelIndex == -1
                                //     ? (sWidth * vDividerPosition)
                                //     : 0,
                                child: Row(
                                  children: [
                                    /////////////////////LEFT
                                    Expanded(
                                        flex:
                                            (vDividerPosition * 10000).toInt(),
                                        child: SafeArea(
                                          child: Stack(
                                            children: [
                                              Container(
                                                height:
                                                    sHeight * hDividerPosition,
                                                color: Colors.transparent,
                                              ),

                                              ///LEFT TITLE PAGE PROPS
                                              Positioned(
                                                // duration: Durations.medium4,
                                                top: 0,
                                                left: panelIndex.panelIndex !=
                                                        -1
                                                    ? -sWidth * vDividerPosition
                                                    : 0,
                                                height: (sHeight) *
                                                    (hDividerPosition),
                                                width:
                                                    sWidth * vDividerPosition,
                                                child: Padding(
                                                  padding: const EdgeInsets
                                                      .symmetric(
                                                      horizontal: 10),
                                                  child:

                                                      ///LEFT TITLE PAGE PROPS
                                                      Material(
                                                    color: defaultPalette
                                                        .transparent,
                                                    child:
                                                        SingleChildScrollView(
                                                      physics:
                                                          const BouncingScrollPhysics(),
                                                      child: Column(
                                                        crossAxisAlignment:
                                                            CrossAxisAlignment
                                                                .start,
                                                        children: [
                                                          Stack(
                                                            children: [
                                                              Container(
                                                                height: 55,
                                                                width: sWidth *
                                                                    vDividerPosition,
                                                              ),
                                                              //LeftScreen tilte
                                                              Container(
                                                                height: 55,
                                                                margin:
                                                                    const EdgeInsets
                                                                        .only(
                                                                        left:
                                                                            10,
                                                                        top: 8,
                                                                        bottom:
                                                                            5),
                                                                width: sWidth *
                                                                    vDividerPosition *
                                                                    0.4,
                                                                child: Text(
                                                                    vDividerPosition <
                                                                            0.45
                                                                        ? 'PG \nPRP'
                                                                        : 'Page Properties',
                                                                    maxLines: 2,
                                                                    overflow:
                                                                        TextOverflow
                                                                            .fade,
                                                                    style: TextStyle(
                                                                        color: defaultPalette
                                                                            .black,
                                                                        fontSize:
                                                                            16,
                                                                        fontWeight:
                                                                            FontWeight.bold)),
                                                              ),
                                                              //nextprev buittons
                                                              Positioned(
                                                                right: 30,
                                                                top: 12,
                                                                child:
                                                                    Container(
                                                                  decoration: BoxDecoration(
                                                                      color: defaultPalette
                                                                          .tertiary,
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              8)),
                                                                  margin:
                                                                      const EdgeInsets
                                                                          .only(
                                                                          top:
                                                                              5),
                                                                  height: 30,
                                                                  width: 50,
                                                                  child: Row(
                                                                    mainAxisAlignment:
                                                                        MainAxisAlignment
                                                                            .spaceAround,
                                                                    children: [
                                                                      GestureDetector(
                                                                        child:
                                                                            Icon(
                                                                          Icons
                                                                              .keyboard_arrow_left_sharp,
                                                                          color:
                                                                              defaultPalette.black,
                                                                        ),
                                                                        onTap:
                                                                            () {
                                                                          setState(
                                                                              () {
                                                                            // print('________PREV PAGE STARTED LD_________');
                                                                            if (currentPageIndex ==
                                                                                0) {
                                                                              pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) + 16), duration: const Duration(milliseconds: 100), curve: Curves.easeIn);
                                                                              return;
                                                                            }
                                                                            currentPageIndex--;

                                                                            pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) + 16),
                                                                                duration: const Duration(milliseconds: 100),
                                                                                curve: Curves.easeIn);
                                                                          });
                                                                          // print(
                                                                          //     '________END PREV PAGE LD_________');
                                                                        },
                                                                      ),
                                                                      GestureDetector(
                                                                        child:
                                                                            Icon(
                                                                          Icons
                                                                              .keyboard_arrow_right_sharp,
                                                                          color:
                                                                              defaultPalette.black,
                                                                        ),
                                                                        onTap:
                                                                            () {
                                                                          setState(
                                                                              () {
                                                                            print('________NEXT PAGE STARTED LD_________');
                                                                            if (pageCount ==
                                                                                (currentPageIndex + 1)) {
                                                                              _addPdfPage();

                                                                              currentPageIndex++;
                                                                              pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) + 6), duration: const Duration(milliseconds: 100), curve: Curves.easeIn);

                                                                              print('________END NEXT PAGE LD_________');
                                                                              return;
                                                                            }

                                                                            currentPageIndex++;

                                                                            pdfScrollController.animateTo(currentPageIndex * ((1.41428571429 * ((sWidth * (1 - vDividerPosition)) - 6)) + 6),
                                                                                duration: const Duration(milliseconds: 100),
                                                                                curve: Curves.easeIn);
                                                                            // ref.read(panelIndexProvider.notifier).state = PanelIndex(
                                                                            //     id: ref
                                                                            //         .read(sheetListProviderFamily(ref.read(spreadSheetProvider.select((p) => p[ref.read(currentPageIndexProvider)]
                                                                            //             .id))))
                                                                            //         .id,
                                                                            //     panelIndex:
                                                                            //         0);
                                                                            print('________END NEXT PAGE LD_________');
                                                                          });
                                                                        },
                                                                      )
                                                                    ],
                                                                  ),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                          //pageNumber textfiwld
                                                          SizedBox(
                                                            height:
                                                                textFieldHeight,
                                                            width: sWidth *
                                                                vDividerPosition,

                                                            ///Stack For Delete
                                                            child: Stack(
                                                              children: [
                                                                ///PAGE COUNT TEXT
                                                                TextFormField(
                                                                  cursorColor:
                                                                      defaultPalette
                                                                          .tertiary,
                                                                  controller: documentPropertiesList[
                                                                          currentPageIndex]
                                                                      .pageNumberController,
                                                                  inputFormatters: [
                                                                    FilteringTextInputFormatter
                                                                        .allow(RegExp(
                                                                            r'^\d*\.?\d*$'))
                                                                  ],
                                                                  textAlignVertical:
                                                                      TextAlignVertical
                                                                          .top,
                                                                  textAlign:
                                                                      TextAlign
                                                                          .center,
                                                                  decoration:
                                                                      InputDecoration(
                                                                    suffixIcon: //Delete page
                                                                        GestureDetector(
                                                                      onTap:
                                                                          () {},
                                                                      child:
                                                                          Icon(
                                                                        Icons
                                                                            .delete_outline_rounded,
                                                                        color: defaultPalette
                                                                            .transparent,
                                                                      ),
                                                                    ),
                                                                    labelText:
                                                                        'Page Number',
                                                                    labelStyle:
                                                                        TextStyle(
                                                                      color: defaultPalette
                                                                          .black,
                                                                      fontSize:
                                                                          15,
                                                                    ),
                                                                    floatingLabelAlignment:
                                                                        FloatingLabelAlignment
                                                                            .start,
                                                                    filled:
                                                                        true,
                                                                    fillColor:
                                                                        defaultPalette
                                                                            .primary,
                                                                    border:
                                                                        OutlineInputBorder(
                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              10.0), // Replace with your desired radius
                                                                    ),
                                                                    enabledBorder:
                                                                        OutlineInputBorder(
                                                                      borderSide: BorderSide(
                                                                          width:
                                                                              2,
                                                                          color:
                                                                              defaultPalette.black),
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              12.0), // Same as border
                                                                    ),
                                                                    disabledBorder:
                                                                        OutlineInputBorder(
                                                                      borderSide: BorderSide(
                                                                          width:
                                                                              2,
                                                                          color:
                                                                              defaultPalette.black),
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              12.0), // Same as border
                                                                    ),
                                                                    focusedBorder:
                                                                        OutlineInputBorder(
                                                                      borderSide: BorderSide(
                                                                          width:
                                                                              3,
                                                                          color:
                                                                              defaultPalette.tertiary),
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              10.0), // Same as border
                                                                    ),
                                                                  ),
                                                                  keyboardType:
                                                                      TextInputType
                                                                          .number,
                                                                  style: TextStyle(
                                                                      color: defaultPalette
                                                                          .black,
                                                                      fontSize:
                                                                          15),
                                                                  enabled:
                                                                      false,
                                                                  // onChanged:
                                                                  //     (value) {
                                                                  //   _updatePdfPreview;
                                                                  //   _addPdfPage();
                                                                  // }
                                                                ),
                                                                //DELETE ICON
                                                                Positioned(
                                                                  right: 15 / 2,
                                                                  top: (textFieldHeight /
                                                                          2) -
                                                                      25 / 2,
                                                                  child:
                                                                      GestureDetector(
                                                                    onTap: () {
                                                                      _confirmDeleteLayout(
                                                                          deletePage:
                                                                              true);
                                                                      pdfScrollController.animateTo(
                                                                          currentPageIndex *
                                                                              ((1.41428571429 * ((sWidth * (1 - vDividerPosition)))) +
                                                                                  16),
                                                                          duration: const Duration(
                                                                              milliseconds:
                                                                                  100),
                                                                          curve:
                                                                              Curves.easeIn);
                                                                    },
                                                                    child: Icon(
                                                                      Icons
                                                                          .delete_outline_rounded,
                                                                      color: defaultPalette
                                                                          .black,
                                                                      size: 25,
                                                                    ),
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),

                                                          //LEFT SIDE MARGIN , ORIENTATION, FORMAT
                                                          Column(
                                                            children: [
                                                              const SizedBox(
                                                                height: 10,
                                                              ),
                                                              Row(
                                                                children: [
                                                                  Expanded(
                                                                    child:
                                                                        SizedBox(
                                                                      height:
                                                                          textFieldHeight,
                                                                      child: // TO STACK THE INCREMENT BUTTONS
                                                                          Stack(
                                                                        children: [
                                                                          //MARGIN ALL TEXT
                                                                          TextFormField(
                                                                            onTapOutside:
                                                                                (event) {
                                                                              marginAllFocus.unfocus();
                                                                            },
                                                                            obscureText:
                                                                                documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                            focusNode:
                                                                                marginAllFocus,
                                                                            controller:
                                                                                documentPropertiesList[currentPageIndex].marginAllController,
                                                                            inputFormatters: [
                                                                              NumericInputFormatter(maxValue: documentPropertiesList[currentPageIndex].pageFormatController.width / 2.001)
                                                                            ],
                                                                            textAlignVertical:
                                                                                TextAlignVertical.top,
                                                                            textAlign:
                                                                                TextAlign.center,
                                                                            decoration:
                                                                                InputDecoration(
                                                                              // alignLabelWithHint:
                                                                              //     true,
                                                                              contentPadding: const EdgeInsets.all(0),
                                                                              floatingLabelAlignment: FloatingLabelAlignment.center,
                                                                              labelText: 'Margin',
                                                                              labelStyle: GoogleFonts.lexend(color: defaultPalette.black),
                                                                              filled: true,
                                                                              fillColor: !documentPropertiesList[currentPageIndex].useIndividualMargins ? defaultPalette.primary : defaultPalette.primary.withOpacity(0.5),
                                                                              border: OutlineInputBorder(
                                                                                // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                              ),
                                                                              enabledBorder: OutlineInputBorder(
                                                                                borderSide: BorderSide(width: 2, color: defaultPalette.black),
                                                                                borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                              ),
                                                                              focusedBorder: OutlineInputBorder(
                                                                                borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                              ),
                                                                            ),
                                                                            keyboardType:
                                                                                TextInputType.number,
                                                                            style: TextStyle(
                                                                                // fontStyle: FontStyle.italic,
                                                                                color: defaultPalette.black),
                                                                            onChanged:
                                                                                (value) {
                                                                              // setState(() {

                                                                              documentPropertiesList[currentPageIndex].marginTopController.text = value;
                                                                              documentPropertiesList[currentPageIndex].marginBottomController.text = value;
                                                                              documentPropertiesList[currentPageIndex].marginLeftController.text = value;
                                                                              documentPropertiesList[currentPageIndex].marginRightController.text = value;
                                                                              // _updatePdfPreview(
                                                                              //     '');
                                                                              // });
                                                                            },
                                                                            enabled:
                                                                                !documentPropertiesList[currentPageIndex].useIndividualMargins,
                                                                          ),

                                                                          Positioned(
                                                                            top:
                                                                                (textFieldHeight / 2) - 15 / 2,
                                                                            left:
                                                                                (textFieldHeight / 2) - 15 / 2,
                                                                            child:
                                                                                GestureDetector(
                                                                              onTap: () {
                                                                                setState(() {
                                                                                  var value = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginAllController.text = (double.parse(value) - 1).abs().toString();
                                                                                  documentPropertiesList[currentPageIndex].marginTopController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginBottomController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginLeftController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginRightController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                });
                                                                                // _updatePdfPreview('');
                                                                              },
                                                                              child: const Icon(
                                                                                IconsaxPlusLinear.arrow_left_1,
                                                                                size: 15,
                                                                              ),
                                                                            ),
                                                                          ),
                                                                          Positioned(
                                                                            top:
                                                                                (textFieldHeight / 2) - 15 / 2,
                                                                            right:
                                                                                (textFieldHeight / 2) - 15 / 2,
                                                                            child:
                                                                                GestureDetector(
                                                                              onTap: () {
                                                                                setState(() {
                                                                                  documentPropertiesList[currentPageIndex].marginAllController.text = (double.parse(documentPropertiesList[currentPageIndex].marginAllController.text) + 1).toString();
                                                                                  documentPropertiesList[currentPageIndex].marginTopController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginBottomController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginLeftController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                  documentPropertiesList[currentPageIndex].marginRightController.text = documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                                });

                                                                                // _updatePdfPreview('');
                                                                              },
                                                                              child: const Icon(
                                                                                IconsaxPlusLinear.arrow_right_3,
                                                                                size: 15,
                                                                              ),
                                                                            ),
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                  ),
                                                                  ////INDIVIDUAL MARGINS BUTTON
                                                                  IconButton(
                                                                      onPressed:
                                                                          () {
                                                                        setState(
                                                                            () {
                                                                          documentPropertiesList[currentPageIndex].useIndividualMargins =
                                                                              !documentPropertiesList[currentPageIndex].useIndividualMargins;
                                                                          if (documentPropertiesList[currentPageIndex].useIndividualMargins ==
                                                                              false) {
                                                                            documentPropertiesList[currentPageIndex].marginTopController.text =
                                                                                documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                            documentPropertiesList[currentPageIndex].marginBottomController.text =
                                                                                documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                            documentPropertiesList[currentPageIndex].marginLeftController.text =
                                                                                documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                            documentPropertiesList[currentPageIndex].marginRightController.text =
                                                                                documentPropertiesList[currentPageIndex].marginAllController.text;
                                                                          }
                                                                        });
                                                                      },
                                                                      icon: documentPropertiesList[currentPageIndex]
                                                                              .useIndividualMargins
                                                                          ? const Icon(
                                                                              IconsaxPlusBold.maximize_1,
                                                                              size: 30,
                                                                            )
                                                                          : const Icon(
                                                                              IconsaxPlusLinear.maximize_2,
                                                                              size: 30,
                                                                            ))
                                                                  // Text(
                                                                  //     'Use Individual Margins'),
                                                                ],
                                                              ),
                                                              const SizedBox(
                                                                height: 10,
                                                              ),
                                                              if (documentPropertiesList[
                                                                      currentPageIndex]
                                                                  .useIndividualMargins)
                                                                Column(
                                                                  children: [
                                                                    Row(
                                                                      children: [
                                                                        //TOP MARGIN
                                                                        Expanded(
                                                                          child:
                                                                              //TOP MARGIN TEXT
                                                                              SizedBox(
                                                                            height:
                                                                                textFieldHeight,
                                                                            child:
                                                                                Stack(
                                                                              children: [
                                                                                TextFormField(
                                                                                  onTapOutside: (event) {
                                                                                    marginTopFocus.unfocus();
                                                                                  },
                                                                                  focusNode: marginTopFocus,
                                                                                  controller: documentPropertiesList[currentPageIndex].marginTopController,
                                                                                  inputFormatters: [
                                                                                    // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                    NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text))),
                                                                                  ],
                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                  cursorColor: defaultPalette.secondary,
                                                                                  textAlign: TextAlign.center,
                                                                                  textAlignVertical: TextAlignVertical.top,
                                                                                  decoration: InputDecoration(
                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                    labelText: 'Top',
                                                                                    labelStyle: TextStyle(color: defaultPalette.black, fontSize: 20),
                                                                                    floatingLabelAlignment: FloatingLabelAlignment.center,
                                                                                    prefixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                    suffixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                    filled: true,
                                                                                    fillColor: defaultPalette.primary,
                                                                                    border: OutlineInputBorder(
                                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                    ),
                                                                                    enabledBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                    ),
                                                                                    focusedBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                    ),
                                                                                  ),
                                                                                  keyboardType: TextInputType.number,
                                                                                  // onChanged: (value) => _updatePdfPreview(''),
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  left: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) - 1).abs().toString();
                                                                                      });
                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_left_1,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  right: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginTopController.text = (double.parse(documentPropertiesList[currentPageIndex].marginTopController.text) + 1).toString();
                                                                                      });

                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_right_3,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                        const SizedBox(
                                                                          width:
                                                                              10,
                                                                        ),
                                                                        //BOTTOM MARGIN TEXT
                                                                        Expanded(
                                                                          child:
                                                                              SizedBox(
                                                                            height:
                                                                                textFieldHeight,
                                                                            child:
                                                                                //STACK FOR INCREDECRE
                                                                                Stack(
                                                                              children: [
                                                                                //BOTTOM TEXT FIELD
                                                                                TextFormField(
                                                                                  onTapOutside: (event) {
                                                                                    marginBottomFocus.unfocus();
                                                                                  },
                                                                                  focusNode: marginBottomFocus,
                                                                                  controller: documentPropertiesList[currentPageIndex].marginBottomController,
                                                                                  inputFormatters: [
                                                                                    NumericInputFormatter(maxValue: documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginTopController.text))
                                                                                  ],
                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                  cursorColor: defaultPalette.secondary,
                                                                                  textAlign: TextAlign.center,
                                                                                  textAlignVertical: TextAlignVertical.top,

                                                                                  ///INPUT DECORATION
                                                                                  decoration: InputDecoration(
                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                    labelText: 'Bottom',
                                                                                    labelStyle: TextStyle(color: defaultPalette.black, fontSize: 20),
                                                                                    floatingLabelAlignment: FloatingLabelAlignment.center,
                                                                                    filled: true,
                                                                                    fillColor: defaultPalette.primary,
                                                                                    border: OutlineInputBorder(
                                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                    ),
                                                                                    enabledBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                    ),
                                                                                    focusedBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                    ),
                                                                                  ),
                                                                                  keyboardType: TextInputType.number,
                                                                                  // onChanged: (value) => _updatePdfPreview(''),
                                                                                ),
                                                                                //BOTTOM DECREMENT
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  left: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) - 1).abs().toString();
                                                                                      });
                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_left_1,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //BOTTOM INCREMENT
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  right: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginBottomController.text = (double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text) + 1).toString();
                                                                                      });

                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_right_3,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    const SizedBox(
                                                                      height:
                                                                          15,
                                                                    ),
                                                                    Row(
                                                                      children: [
                                                                        //Left MARGIN WIDGET
                                                                        Expanded(
                                                                          child:
                                                                              SizedBox(
                                                                            height:
                                                                                textFieldHeight,
                                                                            child:
                                                                                Stack(
                                                                              children: [
                                                                                TextFormField(
                                                                                  onTapOutside: (event) {
                                                                                    marginLeftFocus.unfocus();
                                                                                  },
                                                                                  focusNode: marginLeftFocus,
                                                                                  controller: documentPropertiesList[currentPageIndex].marginLeftController,
                                                                                  inputFormatters: [
                                                                                    NumericInputFormatter(maxValue: documentPropertiesList[currentPageIndex].pageFormatController.width / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginRightController.text))
                                                                                  ],
                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                  cursorColor: defaultPalette.black,
                                                                                  textAlign: TextAlign.center,
                                                                                  textAlignVertical: TextAlignVertical.top,
                                                                                  decoration: InputDecoration(
                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                    labelText: 'Left',
                                                                                    labelStyle: TextStyle(color: defaultPalette.black, fontSize: 20),
                                                                                    floatingLabelAlignment: FloatingLabelAlignment.center,
                                                                                    floatingLabelBehavior: FloatingLabelBehavior.always,
                                                                                    filled: true,
                                                                                    fillColor: defaultPalette.primary,
                                                                                    border: OutlineInputBorder(
                                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                    ),
                                                                                    enabledBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                    ),
                                                                                    focusedBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                    ),
                                                                                  ),
                                                                                  keyboardType: TextInputType.number,
                                                                                  onChanged: (value) => {
                                                                                    // _updatePdfPreview('')
                                                                                  },
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  left: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) - 1).abs().toString();
                                                                                      });
                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_left_1,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  right: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginLeftController.text = (double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text) + 1).toString();
                                                                                      });

                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_right_3,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                        const SizedBox(
                                                                          width:
                                                                              10,
                                                                        ),
                                                                        //RIGHT MARGIN TEXT
                                                                        Expanded(
                                                                          child:
                                                                              SizedBox(
                                                                            height:
                                                                                textFieldHeight,
                                                                            child:
                                                                                Stack(
                                                                              children: [
                                                                                TextFormField(
                                                                                  onTapOutside: (event) {
                                                                                    marginRightFocus.unfocus();
                                                                                  },
                                                                                  focusNode: marginRightFocus,
                                                                                  controller: documentPropertiesList[currentPageIndex].marginRightController,
                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                  cursorColor: defaultPalette.secondary,
                                                                                  inputFormatters: [
                                                                                    NumericInputFormatter(maxValue: documentPropertiesList[currentPageIndex].pageFormatController.width / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginLeftController.text))
                                                                                  ],
                                                                                  textAlign: TextAlign.center,
                                                                                  textAlignVertical: TextAlignVertical.top,
                                                                                  decoration: InputDecoration(
                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                    labelText: 'Right',
                                                                                    labelStyle: TextStyle(color: defaultPalette.black, fontSize: 20),
                                                                                    floatingLabelAlignment: FloatingLabelAlignment.center,
                                                                                    filled: true,
                                                                                    fillColor: defaultPalette.primary,
                                                                                    border: OutlineInputBorder(
                                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                    ),
                                                                                    enabledBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.black),
                                                                                      borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                    ),
                                                                                    focusedBorder: OutlineInputBorder(
                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.tertiary),
                                                                                      borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                    ),
                                                                                  ),
                                                                                  keyboardType: TextInputType.number,
                                                                                  // onChanged: (value) => _updatePdfPreview,
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  left: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) - 1).abs().toString();
                                                                                      });
                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_left_1,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                Positioned(
                                                                                  top: (textFieldHeight / 2) - 15 / 2,
                                                                                  right: 15 / 2,
                                                                                  child: GestureDetector(
                                                                                    onTap: () {
                                                                                      setState(() {
                                                                                        documentPropertiesList[currentPageIndex].marginRightController.text = (double.parse(documentPropertiesList[currentPageIndex].marginRightController.text) + 1).toString();
                                                                                      });

                                                                                      // _updatePdfPreview('');
                                                                                    },
                                                                                    child: const Icon(
                                                                                      IconsaxPlusLinear.arrow_right_3,
                                                                                      size: 15,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                      ],
                                                                    ),
                                                                    const SizedBox(
                                                                      height:
                                                                          10,
                                                                    )
                                                                  ],
                                                                ),
                                                              //Orientation
                                                              SizedBox(
                                                                height:
                                                                    textFieldHeight +
                                                                        10,
                                                                child:
                                                                    CustomDropdown(
                                                                  hintText:
                                                                      'Orientation',
                                                                  items: [
                                                                    'Portrait',
                                                                    'Landscape'
                                                                  ],
                                                                  closedHeaderPadding:
                                                                      const EdgeInsets
                                                                          .all(
                                                                          10),
                                                                  initialItem: documentPropertiesList[currentPageIndex]
                                                                              .orientationController ==
                                                                          pw.PageOrientation
                                                                              .portrait
                                                                      ? 'Portrait'
                                                                      : 'Landscape',
                                                                  onChanged:
                                                                      (value) {
                                                                    setState(
                                                                        () {
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .orientationController = value ==
                                                                              'Portrait'
                                                                          ? pw.PageOrientation
                                                                              .portrait
                                                                          : pw.PageOrientation
                                                                              .landscape;
                                                                    });
                                                                    // _updatePdfPreview(
                                                                    //     '');
                                                                  },
                                                                  listItemBuilder:
                                                                      (context,
                                                                          item,
                                                                          isSelected,
                                                                          onItemSelect) {
                                                                    return Row(
                                                                      children: [
                                                                        Icon(
                                                                          item == 'Portrait'
                                                                              ? Icons.crop_portrait
                                                                              : Icons.crop_3_2_sharp,
                                                                          size:
                                                                              20,
                                                                        ),
                                                                        const SizedBox(
                                                                          width:
                                                                              10,
                                                                        ),
                                                                        Text(
                                                                            item)
                                                                      ],
                                                                    );
                                                                  },
                                                                  decoration:
                                                                      CustomDropdownDecoration(
                                                                    prefixIcon:
                                                                        Icon(
                                                                      documentPropertiesList[currentPageIndex].orientationController ==
                                                                              pw
                                                                                  .PageOrientation.portrait
                                                                          ? Icons
                                                                              .crop_portrait_outlined
                                                                          : Icons
                                                                              .crop_3_2_sharp,
                                                                      size: 20,
                                                                    ),
                                                                    closedBorderRadius:
                                                                        BorderRadius.circular(
                                                                            12),
                                                                    closedBorder: Border.all(
                                                                        color: defaultPalette
                                                                            .black,
                                                                        width:
                                                                            2),
                                                                    expandedBorder: Border.all(
                                                                        color: defaultPalette
                                                                            .tertiary,
                                                                        width:
                                                                            3),
                                                                    closedFillColor:
                                                                        defaultPalette
                                                                            .primary,
                                                                    hintStyle:
                                                                        TextStyle(
                                                                      color: defaultPalette
                                                                          .black,
                                                                    ),
                                                                    headerStyle:
                                                                        TextStyle(
                                                                      color: defaultPalette
                                                                          .black,
                                                                    ),
                                                                  ),
                                                                ),
                                                              ),
                                                              const SizedBox(
                                                                  height: 5),
                                                              //Page Format
                                                              SizedBox(
                                                                height:
                                                                    textFieldHeight,
                                                                child:
                                                                    CustomDropdown
                                                                        .search(
                                                                  hintText:
                                                                      'Page Format',
                                                                  items: [
                                                                    'A4',
                                                                    'A3',
                                                                    'A5',
                                                                    'A6',
                                                                    'Letter',
                                                                    'Legal',
                                                                    'Standard',
                                                                  ],
                                                                  initialItem: getPageFormatString(
                                                                      documentPropertiesList[
                                                                              currentPageIndex]
                                                                          .pageFormatController),
                                                                  onChanged:
                                                                      (value) {
                                                                    setState(
                                                                        () {
                                                                      documentPropertiesList[currentPageIndex]
                                                                              .pageFormatController =
                                                                          getPageFormatFromString(value ??
                                                                              '');
                                                                    });
                                                                    // _updatePdfPreview(
                                                                    //     '');
                                                                  },
                                                                  closedHeaderPadding:
                                                                      const EdgeInsets
                                                                          .all(
                                                                          10),
                                                                  decoration:
                                                                      CustomDropdownDecoration(
                                                                    closedBorderRadius:
                                                                        BorderRadius.circular(
                                                                            12),
                                                                    closedBorder: Border.all(
                                                                        color: defaultPalette
                                                                            .black,
                                                                        width:
                                                                            2),
                                                                    expandedBorder: Border.all(
                                                                        color: defaultPalette
                                                                            .tertiary,
                                                                        width:
                                                                            3),
                                                                    closedFillColor:
                                                                        defaultPalette
                                                                            .primary,
                                                                    hintStyle: TextStyle(
                                                                        color: defaultPalette
                                                                            .black),
                                                                    headerStyle:
                                                                        TextStyle(
                                                                            color:
                                                                                defaultPalette.black),
                                                                  ),
                                                                ),
                                                              ),
                                                              // Divider(),
                                                            ],
                                                          ),
                                                          const SizedBox(
                                                            height: 30,
                                                          )
                                                        ],
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                              //Text Styling
                                              Positioned(
                                                // duration: Durations.medium3,
                                                left: panelIndex.panelIndex ==
                                                        -1
                                                    ? sWidth * vDividerPosition
                                                    : 44,
                                                child: Container(
                                                  height: sHeight *
                                                      (hDividerPosition),
                                                  width: (sWidth *
                                                          vDividerPosition) -
                                                      44,
                                                  child: Column(
                                                    // direction: Axis.vertical,
                                                    children: [
                                                      Container(
                                                        height: 50,
                                                        alignment: Alignment
                                                            .centerLeft,
                                                        padding:
                                                            const EdgeInsets
                                                                .only(
                                                                left: 5,
                                                                top: 5),
                                                        child: Column(
                                                          mainAxisAlignment:
                                                              MainAxisAlignment
                                                                  .spaceEvenly,
                                                          crossAxisAlignment:
                                                              CrossAxisAlignment
                                                                  .start,
                                                          children: [
                                                            //heading
                                                            Text(
                                                              'TEXT STYLE',
                                                              style: GoogleFonts
                                                                  .bungee(
                                                                      fontSize:
                                                                          18,
                                                                      letterSpacing:
                                                                          0,
                                                                      height:
                                                                          1),
                                                            ),
                                                            //id
                                                            Text(
                                                              panelIndex.id,
                                                              maxLines: 1,
                                                              overflow:
                                                                  TextOverflow
                                                                      .ellipsis,
                                                              style: GoogleFonts
                                                                  .lexend(
                                                                      fontSize:
                                                                          8,
                                                                      letterSpacing:
                                                                          0,
                                                                      height:
                                                                          0.9),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                      panelIndex.panelIndex ==
                                                              -1
                                                          ? Container(
                                                              color:
                                                                  Colors.amber,
                                                              height: 10,
                                                              width: 5,
                                                            )
                                                          : Expanded(
                                                              child: Container(
                                                                padding:
                                                                    const EdgeInsets
                                                                        .all(5),
                                                                child: Builder(
                                                                  builder:
                                                                      (context) {
                                                                    var item = _sheetItemIterator(
                                                                        panelIndex
                                                                            .id,
                                                                        spreadSheetList[
                                                                            currentPageIndex]) as TextEditorItem;

                                                                    bool _getIsToggled(
                                                                        Map<String,
                                                                                Attribute>
                                                                            attrs,
                                                                        Attribute
                                                                            attribute) {
                                                                      if (attribute.key == Attribute.list.key ||
                                                                          attribute.key ==
                                                                              Attribute
                                                                                  .header.key ||
                                                                          attribute.key ==
                                                                              Attribute
                                                                                  .script.key ||
                                                                          attribute.key ==
                                                                              Attribute.align.key) {
                                                                        final currentAttribute =
                                                                            attrs[attribute.key];
                                                                        if (currentAttribute ==
                                                                            null) {
                                                                          // print(
                                                                          //     'returning false');
                                                                          return false;
                                                                        }
                                                                        // print(
                                                                        //     'returning ${currentAttribute.value == attribute.value}');
                                                                        return currentAttribute.value ==
                                                                            attribute.value;
                                                                      }
                                                                      // print(
                                                                      //     'returning ${attrs.containsKey(attribute.key)}');
                                                                      return attrs
                                                                          .containsKey(
                                                                              attribute.key);
                                                                    }

                                                                    Widget
                                                                        buildElevatedLayerButton({
                                                                      required double
                                                                          buttonHeight,
                                                                      required double
                                                                          buttonWidth,
                                                                      required Duration
                                                                          animationDuration,
                                                                      required Curve
                                                                          animationCurve,
                                                                      required void
                                                                              Function()
                                                                          onClick,
                                                                      required BoxDecoration
                                                                          baseDecoration,
                                                                      required BoxDecoration
                                                                          topDecoration,
                                                                      required Widget
                                                                          topLayerChild,
                                                                      required BorderRadius
                                                                          borderRadius,
                                                                      bool toggleOnTap =
                                                                          false,
                                                                      bool isTapped =
                                                                          false,
                                                                    }) {
                                                                      var down =
                                                                          isTapped;
                                                                      void _handleTapDown(
                                                                          TapDownDetails
                                                                              details) {
                                                                        onClick();

                                                                        setState(
                                                                            () {
                                                                          down =
                                                                              true;
                                                                          print(
                                                                              down);
                                                                        });
                                                                      }

                                                                      void _handleTapUp(
                                                                          TapUpDetails
                                                                              details) {
                                                                        if (!toggleOnTap &&
                                                                            down) {
                                                                          setState(
                                                                              () {
                                                                            down =
                                                                                !down;
                                                                          });
                                                                        }
                                                                      }

                                                                      void
                                                                          _handleTapCancel() {}

                                                                      return GestureDetector(
                                                                        onTap:
                                                                            () {},
                                                                        onTapDown:
                                                                            _handleTapDown,
                                                                        onTapUp:
                                                                            _handleTapUp,
                                                                        onTapCancel:
                                                                            _handleTapCancel,
                                                                        child:
                                                                            SizedBox(
                                                                          height:
                                                                              buttonHeight,
                                                                          width:
                                                                              buttonWidth,
                                                                          child:
                                                                              Stack(
                                                                            alignment:
                                                                                Alignment.bottomRight,
                                                                            children: [
                                                                              Positioned(
                                                                                bottom: 0,
                                                                                right: 0,
                                                                                child: Container(
                                                                                  width: buttonWidth - 10,
                                                                                  height: buttonHeight - 10,
                                                                                  decoration: baseDecoration.copyWith(
                                                                                    borderRadius: borderRadius,
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                              AnimatedPositioned(
                                                                                duration: animationDuration,
                                                                                curve: animationCurve,
                                                                                bottom: !down ? 4 : 0,
                                                                                right: !down ? 4 : 0,
                                                                                child: Container(
                                                                                  width: buttonWidth - 10,
                                                                                  height: buttonHeight - 10,
                                                                                  alignment: Alignment.center,
                                                                                  decoration: topDecoration.copyWith(
                                                                                    borderRadius: borderRadius,
                                                                                  ),
                                                                                  child: topLayerChild,
                                                                                ),
                                                                              ),
                                                                            ],
                                                                          ),
                                                                        ),
                                                                      );
                                                                    }

                                                                    var width =
                                                                        (sWidth *
                                                                                vDividerPosition) -
                                                                            44;

                                                                    TextEditingController
                                                                        hexController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${item.textEditorController.getSelectionStyle().attributes['color']?.value ?? '#00000000'}';
                                                                    TextEditingController
                                                                        bghexController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${(item.textEditorController.getSelectionStyle().attributes['background']?.value ?? '#00000000')}';
                                                                    TextEditingController
                                                                        fontSizeController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${double.parse(item.textEditorController.getSelectionStyle().attributes['size']?.value ?? '0')}';
                                                                    if (fontSizeController
                                                                        .text
                                                                        .endsWith(
                                                                            '.0')) {
                                                                      fontSizeController
                                                                              .text =
                                                                          '${double.parse(item.textEditorController.getSelectionStyle().attributes['size']?.value ?? '0').ceil()}';
                                                                    }
                                                                    TextEditingController
                                                                        letterSpaceController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${double.parse(item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value ?? '0')}';
                                                                    if (letterSpaceController
                                                                        .text
                                                                        .endsWith(
                                                                            '.0')) {
                                                                      letterSpaceController.text = letterSpaceController
                                                                          .text
                                                                          .replaceAll(
                                                                              '.0',
                                                                              '');
                                                                    }
                                                                    TextEditingController
                                                                        wordSpaceController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${double.parse(item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value ?? '0')}';
                                                                    if (wordSpaceController
                                                                        .text
                                                                        .endsWith(
                                                                            '.0')) {
                                                                      wordSpaceController.text = wordSpaceController
                                                                          .text
                                                                          .replaceAll(
                                                                              '.0',
                                                                              '');
                                                                    }
                                                                    TextEditingController
                                                                        lineSpaceController =
                                                                        TextEditingController()
                                                                          ..text =
                                                                              '${double.parse(item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value ?? '0')}';
                                                                    if (lineSpaceController
                                                                        .text
                                                                        .endsWith(
                                                                            '.0')) {
                                                                      lineSpaceController.text = lineSpaceController
                                                                          .text
                                                                          .replaceAll(
                                                                              '.0',
                                                                              '');
                                                                    }
                                                                    int crossAxisCount =
                                                                        width < (width / vDividerPosition) / 1.75
                                                                            ? 2
                                                                            : 4;
                                                                    var iconWidth =
                                                                        width /
                                                                            crossAxisCount /
                                                                            1.05;
                                                                    var iconHeight =
                                                                        // 50.0;
                                                                        width < (width / vDividerPosition) / 2.2
                                                                            ? iconWidth
                                                                            : width < (width / vDividerPosition) / 1.75
                                                                                ? iconWidth / 1.3
                                                                                : iconWidth;
                                                                    var fCrossAxisCount = width <
                                                                            (sWidth) /
                                                                                3
                                                                        ? 1
                                                                        : width <
                                                                                (sWidth) / 1.7
                                                                            ? 2
                                                                            : 3;
                                                                    var fButtonWidth =
                                                                        width /
                                                                            fCrossAxisCount /
                                                                            1.05;
                                                                    var fButtonHeight =
                                                                        fButtonWidth *
                                                                            0.5;
                                                                    return PageView(
                                                                      controller:
                                                                          textStyleTabControler,
                                                                      scrollDirection:
                                                                          Axis.vertical,
                                                                      onPageChanged:
                                                                          (value) {
                                                                        print(
                                                                            value);
                                                                      },
                                                                      children: [
                                                                        //FONTS
                                                                        Stack(
                                                                          children: [
                                                                            Positioned(
                                                                              top: 0,
                                                                              height: sHeight * (hDividerPosition - appbarHeight),
                                                                              width: width - 10,
                                                                              child: GridView.builder(
                                                                                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: fCrossAxisCount, childAspectRatio: 2),
                                                                                itemCount: fonts.length,
                                                                                itemBuilder: (context, index) {
                                                                                  return buildElevatedLayerButton(
                                                                                    buttonHeight: fButtonHeight,
                                                                                    buttonWidth: fButtonWidth,
                                                                                    toggleOnTap: true,
                                                                                    isTapped: item.textEditorController.getSelectionStyle().attributes[Attribute.font.key]?.value == fonts[index],
                                                                                    animationDuration: const Duration(milliseconds: 100),
                                                                                    animationCurve: Curves.ease,
                                                                                    onClick: () {
                                                                                      item.textEditorController.formatSelection(Attribute.fromKeyValue(
                                                                                        Attribute.font.key,
                                                                                        fonts[index] == 'Clear' ? null : fonts[index],
                                                                                      ));
                                                                                      setState(() {});
                                                                                    },
                                                                                    baseDecoration: BoxDecoration(
                                                                                      color: Colors.green,
                                                                                      border: Border.all(),
                                                                                    ),
                                                                                    topDecoration: BoxDecoration(
                                                                                      color: Colors.white,
                                                                                      border: Border.all(),
                                                                                    ),
                                                                                    topLayerChild: Text(
                                                                                      fonts[index],
                                                                                      style: TextStyle(fontFamily: fonts[index], fontSize: fButtonWidth / 7),
                                                                                      maxLines: 1,
                                                                                    ),
                                                                                    borderRadius: BorderRadius.circular(8),
                                                                                  );
                                                                                },
                                                                              ),
                                                                            ),
                                                                            // const Text(
                                                                            //   'Font Family',
                                                                            //   style: TextStyle(
                                                                            //     fontSize: 15,
                                                                            //   ),
                                                                            //   textAlign: TextAlign.left,
                                                                            //   textDirection: TextDirection.ltr,
                                                                            // ),
                                                                          ],
                                                                        ),
                                                                        //FORMATTING ALL THAT PAGE
                                                                        SingleChildScrollView(
                                                                          child:
                                                                              SizedBox(
                                                                            width:
                                                                                width,
                                                                            height: width < (width / vDividerPosition) / 2.2
                                                                                ? iconWidth * 7
                                                                                : width < (width / vDividerPosition) / 1.75
                                                                                    ? (iconWidth / 1.3) * 7
                                                                                    : iconWidth * 5,
                                                                            child:
                                                                                Stack(
                                                                              children: [
                                                                                // BOLD ITALIC UNDERLINE STRIKETHRU
                                                                                Positioned(
                                                                                  left: 0,
                                                                                  top: 0,
                                                                                  width: width - 10,
                                                                                  height: iconHeight * 3,
                                                                                  child: GridView.builder(
                                                                                    physics: const NeverScrollableScrollPhysics(),
                                                                                    itemCount: 4,
                                                                                    padding: const EdgeInsets.all(0),
                                                                                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                        crossAxisCount: crossAxisCount,
                                                                                        crossAxisSpacing: 0,
                                                                                        mainAxisSpacing: 0,
                                                                                        // mainAxisExtent: width/3
                                                                                        childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                            ? 1
                                                                                            : width < (width / vDividerPosition) / 1.75
                                                                                                ? 1.3
                                                                                                : 1),
                                                                                    itemBuilder: (BuildContext context, int index) {
                                                                                      switch (index) {
                                                                                        case 0:
                                                                                          // BOLD
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.bold),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.bold.key);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.bold, null) : Attribute.bold,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.bold,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 1:
                                                                                          //ITALIC
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.italic),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.italic.key);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.italic, null) : Attribute.italic,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.italic,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 2:
                                                                                          //UNDERLINE
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.underline),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.underline.key);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.underline, null) : Attribute.underline,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.underline,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 3:
                                                                                          //STRIKETHRU
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.strikeThrough),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              final currentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.strikeThrough.key);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.strikeThrough, null) : Attribute.strikeThrough,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.strikethrough,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        default:
                                                                                          return Container();
                                                                                      }
                                                                                    },
                                                                                  ),
                                                                                ),
                                                                                // SUPER, SUBS, LTR, RTL
                                                                                Positioned(
                                                                                  top: width < (width / vDividerPosition) / 2.2
                                                                                      ? iconWidth * 2.2
                                                                                      : width < (width / vDividerPosition) / 1.75
                                                                                          ? (iconWidth / 1.3) * 2.2
                                                                                          : iconWidth * 1.2,
                                                                                  left: 0,
                                                                                  width: width - 10,
                                                                                  height: iconHeight * 2,
                                                                                  child: GridView.builder(
                                                                                    physics: const NeverScrollableScrollPhysics(),
                                                                                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                      crossAxisCount: crossAxisCount,
                                                                                      crossAxisSpacing: 0,
                                                                                      mainAxisSpacing: 0,
                                                                                      childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                          ? 1
                                                                                          : width < (width / vDividerPosition) / 1.75
                                                                                              ? 1.3
                                                                                              : 1,
                                                                                    ),
                                                                                    itemCount: 4,
                                                                                    itemBuilder: (BuildContext context, int index) {
                                                                                      switch (index) {
                                                                                        case 0:
                                                                                          //SUBSCRIPT
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.subscript, null) : Attribute.subscript,
                                                                                              );
                                                                                              final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.superscript.key);
                                                                                              if (uncurrentValue && currentValue) {
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.clone(Attribute.subscript, null),
                                                                                                );
                                                                                                currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                              }
                                                                                              print('$uncurrentValue && $currentValue');
                                                                                              if (uncurrentValue && !currentValue) {
                                                                                                print('un');
                                                                                                print(uncurrentValue);
                                                                                                item.textEditorController.formatSelection(Attribute.clone(Attribute.superscript, null));
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.subscript,
                                                                                                );
                                                                                                setState(() {
                                                                                                  currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.subscript);
                                                                                                });
                                                                                                print('cu');
                                                                                                print(currentValue);
                                                                                                return;
                                                                                              }
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.subscript, null) : Attribute.subscript,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.subscript,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 1:
                                                                                          //SUPERSCIPT
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.superscript, null) : Attribute.superscript,
                                                                                              );
                                                                                              final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.subscript.key);
                                                                                              if (uncurrentValue && currentValue) {
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.clone(Attribute.superscript, null),
                                                                                                );
                                                                                                currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                              }
                                                                                              print('$uncurrentValue && $currentValue');
                                                                                              if (uncurrentValue && !currentValue) {
                                                                                                print('un');
                                                                                                print(uncurrentValue);
                                                                                                item.textEditorController.formatSelection(Attribute.clone(Attribute.subscript, null));
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.superscript,
                                                                                                );
                                                                                                setState(() {
                                                                                                  currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.superscript);
                                                                                                });
                                                                                                print('cu');
                                                                                                print(currentValue);
                                                                                                return;
                                                                                              }
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.superscript, null) : Attribute.superscript,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.superscript,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 2:
                                                                                          //DIRECTION LTR
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: !_getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.rtl, null) : Attribute.rtl,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.text_direction_ltr,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 3:
                                                                                          //DIRECTION RTL
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rtl);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.rtl, null) : Attribute.rtl,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.text_direction_rtl,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );

                                                                                        default:
                                                                                          return Container();
                                                                                      }
                                                                                    },
                                                                                  ),
                                                                                ),
                                                                                // LEFT RIGHT CENTER JUSTIFY
                                                                                Positioned(
                                                                                  top: width < (width / vDividerPosition) / 2.2
                                                                                      ? iconWidth * 2.2
                                                                                          //height of the previous wdiget
                                                                                          +
                                                                                          iconHeight * 2.2
                                                                                      : width < (width / vDividerPosition) / 1.75
                                                                                          ? (iconWidth / 1.3) * 2.2
                                                                                              //height of the previous wdiget
                                                                                              +
                                                                                              iconHeight * 2.2
                                                                                          : iconWidth * 1.2
                                                                                              //height of the previous wdiget
                                                                                              +
                                                                                              iconHeight * 1.2,
                                                                                  left: 0,
                                                                                  width: width - 10,
                                                                                  height: iconHeight * 2,
                                                                                  child: GridView.builder(
                                                                                    physics: const NeverScrollableScrollPhysics(),
                                                                                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                                                                      crossAxisCount: crossAxisCount,
                                                                                      crossAxisSpacing: 0,
                                                                                      mainAxisSpacing: 0,
                                                                                      childAspectRatio: width < (width / vDividerPosition) / 2.2
                                                                                          ? 1
                                                                                          : width < (width / vDividerPosition) / 1.75
                                                                                              ? 1.3
                                                                                              : 1,
                                                                                    ),
                                                                                    itemCount: 4,
                                                                                    itemBuilder: (BuildContext context, int index) {
                                                                                      switch (index) {
                                                                                        case 0:
                                                                                          //LEFT ALIGN
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.leftAlignment, null) : Attribute.leftAlignment,
                                                                                              );
                                                                                              final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.rightAlignment.key);
                                                                                              if (uncurrentValue && currentValue) {
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.clone(Attribute.leftAlignment, null),
                                                                                                );
                                                                                                currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                              }
                                                                                              print('$uncurrentValue && $currentValue');
                                                                                              if (uncurrentValue && !currentValue) {
                                                                                                print('un');
                                                                                                print(uncurrentValue);
                                                                                                item.textEditorController.formatSelection(Attribute.clone(Attribute.rightAlignment, null));
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.leftAlignment,
                                                                                                );
                                                                                                setState(() {
                                                                                                  currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.leftAlignment);
                                                                                                });
                                                                                                print('cu');
                                                                                                print(currentValue);
                                                                                                return;
                                                                                              }
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.leftAlignment, null) : Attribute.leftAlignment,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.align_left,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 1:
                                                                                          //RIGHT ALIGN
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.rightAlignment, null) : Attribute.rightAlignment,
                                                                                              );
                                                                                              final uncurrentValue = item.textEditorController.getSelectionStyle().attributes.containsKey(Attribute.leftAlignment.key);
                                                                                              if (uncurrentValue && currentValue) {
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.clone(Attribute.rightAlignment, null),
                                                                                                );
                                                                                                currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                              }
                                                                                              print('$uncurrentValue && $currentValue');
                                                                                              if (uncurrentValue && !currentValue) {
                                                                                                print('un');
                                                                                                print(uncurrentValue);
                                                                                                item.textEditorController.formatSelection(Attribute.clone(Attribute.leftAlignment, null));
                                                                                                item.textEditorController.formatSelection(
                                                                                                  Attribute.rightAlignment,
                                                                                                );
                                                                                                setState(() {
                                                                                                  currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.rightAlignment);
                                                                                                });
                                                                                                print('cu');
                                                                                                print(currentValue);
                                                                                                return;
                                                                                              }
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.rightAlignment, null) : Attribute.rightAlignment,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.align_right,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 2:
                                                                                          //CENTER ALIGN
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.centerAlignment),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.centerAlignment);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.centerAlignment, null) : Attribute.centerAlignment,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.align_center,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );
                                                                                        case 3:
                                                                                          //JUSTIFY ALIGN
                                                                                          return buildElevatedLayerButton(
                                                                                            buttonHeight: iconHeight,
                                                                                            buttonWidth: iconWidth,
                                                                                            toggleOnTap: true,
                                                                                            isTapped: _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.justifyAlignment),
                                                                                            animationDuration: const Duration(milliseconds: 100),
                                                                                            animationCurve: Curves.ease,
                                                                                            onClick: () {
                                                                                              var currentValue = _getIsToggled(item.textEditorController.getSelectionStyle().attributes, Attribute.justifyAlignment);
                                                                                              item.textEditorController.formatSelection(
                                                                                                currentValue ? Attribute.clone(Attribute.justifyAlignment, null) : Attribute.justifyAlignment,
                                                                                              );
                                                                                            },
                                                                                            baseDecoration: BoxDecoration(
                                                                                              color: Colors.green,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topDecoration: BoxDecoration(
                                                                                              color: Colors.white,
                                                                                              border: Border.all(),
                                                                                            ),
                                                                                            topLayerChild: const Icon(
                                                                                              TablerIcons.align_justified,
                                                                                              color: Colors.black,
                                                                                              size: 20,
                                                                                            ),
                                                                                            borderRadius: BorderRadius.circular(10),
                                                                                          );

                                                                                        default:
                                                                                          return Container();
                                                                                      }
                                                                                    },
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                        //Font Size, Word Spacing, Letter Spacing, Line Spacing
                                                                        SingleChildScrollView(
                                                                          child:
                                                                              //SIZE SPACE PARENT
                                                                              Container(
                                                                            padding:
                                                                                const EdgeInsets.only(left: 5),
                                                                            width:
                                                                                width,
                                                                            height:
                                                                                70 * 5,
                                                                            child:
                                                                                Column(
                                                                              children: [
                                                                                //Font Size TEXT FIELD PARENT
                                                                                ClipRRect(
                                                                                  borderRadius: BorderRadius.circular(10),
                                                                                  child: Container(
                                                                                    decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                    height: 70,
                                                                                    width: width,
                                                                                    child: Row(
                                                                                      children: [
                                                                                        //Icon title slider field
                                                                                        Expanded(
                                                                                          flex: (1600 * vDividerPosition).ceil(),
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              //Row font and title
                                                                                              GestureDetector(
                                                                                                onTap: () {
                                                                                                  // fontSizeFocus.unfocus();
                                                                                                  fontSizeFocus.requestFocus();
                                                                                                },
                                                                                                child: Padding(
                                                                                                  padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                  child: Row(
                                                                                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                    children: [
                                                                                                      const Expanded(
                                                                                                          flex: 100,
                                                                                                          child: Icon(
                                                                                                            TablerIcons.text_size,
                                                                                                            size: 18,
                                                                                                          )),
                                                                                                      vDividerPosition > 0.45
                                                                                                          ? Expanded(
                                                                                                              flex: 700,
                                                                                                              child: Container(
                                                                                                                height: 18,
                                                                                                                alignment: Alignment.bottomLeft,
                                                                                                                child: const Text(
                                                                                                                  '  Font Size',
                                                                                                                  style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                ),
                                                                                                              ))
                                                                                                          : Container(),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              //TextField
                                                                                              TextField(
                                                                                                onTapOutside: (event) {
                                                                                                  // fontSizeFocus.unfocus();
                                                                                                },
                                                                                                onSubmitted: (value) {
                                                                                                  item.textEditorController.formatSelection(
                                                                                                    Attribute.clone(Attribute.size, value.toString()),
                                                                                                  );
                                                                                                },
                                                                                                focusNode: fontSizeFocus,
                                                                                                controller: fontSizeController,
                                                                                                inputFormatters: [
                                                                                                  NumericInputFormatter(maxValue: 100),
                                                                                                ],
                                                                                                style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                cursorColor: defaultPalette.black,
                                                                                                // selectionControls: MaterialTextSelectionControls(),
                                                                                                textAlign: TextAlign.right,
                                                                                                scrollPadding: const EdgeInsets.all(0),
                                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                                decoration: InputDecoration(
                                                                                                  contentPadding: const EdgeInsets.all(0),

                                                                                                  // filled: true,
                                                                                                  // fillColor: defaultPalette.primary,
                                                                                                  enabledBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                  focusedBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                ),
                                                                                                keyboardType: TextInputType.number,
                                                                                              ),

                                                                                              //Balloon Slider
                                                                                              Positioned(
                                                                                                bottom: 0,
                                                                                                width: width * 0.6,
                                                                                                child: BalloonSlider(
                                                                                                    trackHeight: 15,
                                                                                                    thumbRadius: 7.5,
                                                                                                    showRope: true,
                                                                                                    color: defaultPalette.tertiary,
                                                                                                    ropeLength: 300 / 8,
                                                                                                    value: double.parse((item.textEditorController.getSelectionStyle().attributes[Attribute.size.key]?.value) ?? 20.toString()) / 100,
                                                                                                    onChanged: (val) {
                                                                                                      setState(() {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          Attribute.clone(Attribute.size, (val * 100).toStringAsFixed(0)),
                                                                                                        );
                                                                                                      });
                                                                                                    }),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        ),
                                                                                        //+ -
                                                                                        Expanded(
                                                                                          flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                          child: Stack(
                                                                                            // mainAxisAlignment: MainAxisAlignment.start,
                                                                                            children: [
                                                                                              Positioned(
                                                                                                top: -4,
                                                                                                right: 4,
                                                                                                height: 35,
                                                                                                child: ElevatedLayerButton(
                                                                                                  // isTapped: false,
                                                                                                  // toggleOnTap: true,
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = int.parse(fontSizeController.text) + 1;
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        Attribute.clone(Attribute.size, val.toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.add,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              Positioned(
                                                                                                bottom: 5,
                                                                                                right: 4,
                                                                                                child: ElevatedLayerButton(
                                                                                                  // isTapped: false,
                                                                                                  // toggleOnTap: true,
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = (int.parse(fontSizeController.text) - 1).clamp(0, 100);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        Attribute.clone(Attribute.size, val.toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.minus,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //
                                                                                //
                                                                                const SizedBox(
                                                                                  height: 20,
                                                                                ),
                                                                                //LetterSpacing Parentt
                                                                                ClipRRect(
                                                                                  borderRadius: BorderRadius.circular(10),
                                                                                  child: Container(
                                                                                    decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                    height: 70,
                                                                                    width: width,
                                                                                    child: Row(
                                                                                      children: [
                                                                                        //LetterSpacing
                                                                                        //Icon title slider field
                                                                                        Expanded(
                                                                                          flex: (1600 * vDividerPosition).ceil(),
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              //LetterSpacing
                                                                                              //Row font and title
                                                                                              GestureDetector(
                                                                                                onTap: () {
                                                                                                  letterSpaceFocus.requestFocus();
                                                                                                },
                                                                                                //LetterSpacing
                                                                                                //Row font and title
                                                                                                child: Padding(
                                                                                                  padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                  //LetterSpacing
                                                                                                  //Row font and title
                                                                                                  child: Row(
                                                                                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                    children: [
                                                                                                      //LetterSpacing
                                                                                                      //icon
                                                                                                      const Expanded(
                                                                                                          flex: 100,
                                                                                                          child: Icon(
                                                                                                            TablerIcons.letter_spacing,
                                                                                                            size: 18,
                                                                                                          )),
                                                                                                      //LetterSpacing
                                                                                                      //title
                                                                                                      vDividerPosition > 0.45
                                                                                                          ? Expanded(
                                                                                                              flex: 700,
                                                                                                              child: Container(
                                                                                                                height: 18,
                                                                                                                alignment: Alignment.bottomLeft,
                                                                                                                child: const Text(
                                                                                                                  '  Letter Space',
                                                                                                                  style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                ),
                                                                                                              ))
                                                                                                          : Container(),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              //LetterSpacing
                                                                                              //TextField
                                                                                              TextField(
                                                                                                onTapOutside: (event) {
                                                                                                  // fontSizeFocus.unfocus();
                                                                                                },
                                                                                                onSubmitted: (value) {
                                                                                                  item.textEditorController.formatSelection(
                                                                                                    LetterSpacingAttribute((value).toString()),
                                                                                                  );
                                                                                                },
                                                                                                focusNode: letterSpaceFocus,
                                                                                                controller: letterSpaceController,
                                                                                                inputFormatters: [
                                                                                                  NumericInputFormatter(maxValue: 100),
                                                                                                ],
                                                                                                style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                cursorColor: defaultPalette.black,
                                                                                                // selectionControls: MaterialTextSelectionControls(),
                                                                                                textAlign: TextAlign.right,
                                                                                                scrollPadding: const EdgeInsets.all(0),
                                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                                decoration: InputDecoration(
                                                                                                  contentPadding: const EdgeInsets.all(0),

                                                                                                  // filled: true,
                                                                                                  // fillColor: defaultPalette.primary,
                                                                                                  enabledBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                  focusedBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                ),
                                                                                                keyboardType: TextInputType.number,
                                                                                              ),
                                                                                              //LetterSpacing
                                                                                              //Balloon Slider
                                                                                              Positioned(
                                                                                                bottom: 0,
                                                                                                width: width * 0.6,
                                                                                                child: BalloonSlider(
                                                                                                    trackHeight: 15,
                                                                                                    thumbRadius: 7.5,
                                                                                                    showRope: true,
                                                                                                    color: defaultPalette.tertiary,
                                                                                                    ropeLength: 300 / 8,
                                                                                                    value: double.parse((item.textEditorController.getSelectionStyle().attributes[LetterSpacingAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                    onChanged: (val) {
                                                                                                      setState(() {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          LetterSpacingAttribute((val * 100).ceil().toString()),
                                                                                                        );
                                                                                                      });
                                                                                                    }),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        ),
                                                                                        //LetterSpacing
                                                                                        //+ -
                                                                                        Expanded(
                                                                                          flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              Positioned(
                                                                                                top: -4,
                                                                                                right: 4,
                                                                                                height: 35,
                                                                                                child: ElevatedLayerButton(
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = int.parse(letterSpaceController.text) + 1;

                                                                                                      item.textEditorController.formatSelection(
                                                                                                        LetterSpacingAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.add,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              Positioned(
                                                                                                bottom: 5,
                                                                                                right: 4,
                                                                                                child: ElevatedLayerButton(
                                                                                                  // isTapped: false,
                                                                                                  // toggleOnTap: true,
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = (int.parse(letterSpaceController.text) - 1).clamp(0, 100);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        LetterSpacingAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.minus,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),

                                                                                const SizedBox(
                                                                                  height: 20,
                                                                                ),
                                                                                //WordSpacing
                                                                                ClipRRect(
                                                                                  borderRadius: BorderRadius.circular(10),
                                                                                  child: Container(
                                                                                    decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                    height: 70,
                                                                                    width: width,
                                                                                    child: Row(
                                                                                      children: [
                                                                                        //WordSpacing
                                                                                        //Icon title slider field
                                                                                        Expanded(
                                                                                          flex: (1600 * vDividerPosition).ceil(),
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              //WordSpacing
                                                                                              //Row font and title
                                                                                              GestureDetector(
                                                                                                onTap: () {
                                                                                                  wordSpaceFocus.requestFocus();
                                                                                                },
                                                                                                //WordSpacing
                                                                                                //Row font and title
                                                                                                child: Padding(
                                                                                                  padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                  //WordSpacing
                                                                                                  //Row font and title
                                                                                                  child: Row(
                                                                                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                    children: [
                                                                                                      //WordSpacing
                                                                                                      //icon
                                                                                                      const Expanded(
                                                                                                          flex: 100,
                                                                                                          child: Icon(
                                                                                                            TablerIcons.spacing_horizontal,
                                                                                                            size: 18,
                                                                                                          )),
                                                                                                      //WordSpacing
                                                                                                      //title
                                                                                                      vDividerPosition > 0.45
                                                                                                          ? Expanded(
                                                                                                              flex: 700,
                                                                                                              child: Container(
                                                                                                                height: 18,
                                                                                                                alignment: Alignment.bottomLeft,
                                                                                                                child: const Text(
                                                                                                                  '  Word Space',
                                                                                                                  style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                ),
                                                                                                              ))
                                                                                                          : Container(),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              //WordSpacing
                                                                                              //TextField
                                                                                              TextField(
                                                                                                onTapOutside: (event) {
                                                                                                  // fontSizeFocus.unfocus();
                                                                                                },
                                                                                                onSubmitted: (value) {
                                                                                                  item.textEditorController.formatSelection(
                                                                                                    WordSpacingAttribute((value).toString()),
                                                                                                  );
                                                                                                },
                                                                                                focusNode: wordSpaceFocus,
                                                                                                controller: wordSpaceController,
                                                                                                inputFormatters: [
                                                                                                  NumericInputFormatter(maxValue: 100),
                                                                                                ],
                                                                                                style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                cursorColor: defaultPalette.black,
                                                                                                // selectionControls: MaterialTextSelectionControls(),
                                                                                                textAlign: TextAlign.right,
                                                                                                scrollPadding: const EdgeInsets.all(0),
                                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                                decoration: InputDecoration(
                                                                                                  contentPadding: const EdgeInsets.all(0),

                                                                                                  // filled: true,
                                                                                                  // fillColor: defaultPalette.primary,
                                                                                                  enabledBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                  focusedBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                ),
                                                                                                keyboardType: TextInputType.number,
                                                                                              ),
                                                                                              //WordSpacing
                                                                                              //Balloon Slider
                                                                                              Positioned(
                                                                                                bottom: 0,
                                                                                                width: width * 0.6,
                                                                                                child: BalloonSlider(
                                                                                                    trackHeight: 15,
                                                                                                    thumbRadius: 7.5,
                                                                                                    showRope: true,
                                                                                                    color: defaultPalette.tertiary,
                                                                                                    ropeLength: 300 / 8,
                                                                                                    value: double.parse((item.textEditorController.getSelectionStyle().attributes[WordSpacingAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                    onChanged: (val) {
                                                                                                      setState(() {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          WordSpacingAttribute((val * 100).ceil().toString()),
                                                                                                        );
                                                                                                      });
                                                                                                    }),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        ),
                                                                                        //WordSpacing
                                                                                        //+ -
                                                                                        Expanded(
                                                                                          flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              Positioned(
                                                                                                top: -4,
                                                                                                right: 4,
                                                                                                height: 35,
                                                                                                child: ElevatedLayerButton(
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = int.parse(wordSpaceController.text) + 1;

                                                                                                      item.textEditorController.formatSelection(
                                                                                                        WordSpacingAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.add,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              Positioned(
                                                                                                bottom: 5,
                                                                                                right: 4,
                                                                                                child: ElevatedLayerButton(
                                                                                                  // isTapped: false,
                                                                                                  // toggleOnTap: true,
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = (int.parse(wordSpaceController.text) - 1).clamp(0, 100);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        WordSpacingAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.minus,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //
                                                                                const SizedBox(
                                                                                  height: 20,
                                                                                ),
                                                                                //LineHeight
                                                                                ClipRRect(
                                                                                  borderRadius: BorderRadius.circular(10),
                                                                                  child: Container(
                                                                                    decoration: BoxDecoration(color: defaultPalette.primary, border: Border.all(width: 2, strokeAlign: BorderSide.strokeAlignInside), borderRadius: BorderRadius.circular(8)),
                                                                                    height: 70,
                                                                                    width: width,
                                                                                    child: Row(
                                                                                      children: [
                                                                                        //LineHeight
                                                                                        //Icon title slider field
                                                                                        Expanded(
                                                                                          flex: (1600 * vDividerPosition).ceil(),
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              //LineHeight
                                                                                              //Row font and title
                                                                                              GestureDetector(
                                                                                                onTap: () {
                                                                                                  lineSpaceFocus.requestFocus();
                                                                                                },
                                                                                                //LineHeight
                                                                                                //Row font and title
                                                                                                child: Padding(
                                                                                                  padding: const EdgeInsets.only(top: 5, left: 5),
                                                                                                  //LineHeight
                                                                                                  //Row font and title
                                                                                                  child: Row(
                                                                                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                    children: [
                                                                                                      //LineHeight
                                                                                                      //icon
                                                                                                      const Expanded(
                                                                                                          flex: 100,
                                                                                                          child: Icon(
                                                                                                            TablerIcons.spacing_vertical,
                                                                                                            size: 18,
                                                                                                          )),
                                                                                                      //LineHeight
                                                                                                      //title
                                                                                                      vDividerPosition > 0.45
                                                                                                          ? Expanded(
                                                                                                              flex: 700,
                                                                                                              child: Container(
                                                                                                                height: 18,
                                                                                                                alignment: Alignment.bottomLeft,
                                                                                                                child: const Text(
                                                                                                                  '  Line Space',
                                                                                                                  style: TextStyle(fontSize: 12, textBaseline: TextBaseline.ideographic),
                                                                                                                ),
                                                                                                              ))
                                                                                                          : Container(),
                                                                                                    ],
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              //LineHeight
                                                                                              //TextField
                                                                                              TextField(
                                                                                                onTapOutside: (event) {
                                                                                                  // fontSizeFocus.unfocus();
                                                                                                },
                                                                                                onSubmitted: (value) {
                                                                                                  item.textEditorController.formatSelection(
                                                                                                    LineHeightAttribute((value).toString()),
                                                                                                  );
                                                                                                },
                                                                                                focusNode: lineSpaceFocus,
                                                                                                controller: lineSpaceController,
                                                                                                inputFormatters: [
                                                                                                  NumericInputFormatter(maxValue: 100),
                                                                                                ],
                                                                                                style: GoogleFonts.lexend(color: defaultPalette.black.withOpacity(fontSizeFocus.hasFocus ? 0.5 : 0.1), fontWeight: FontWeight.bold, fontSize: (80 * vDividerPosition).clamp(70, 100)),
                                                                                                cursorColor: defaultPalette.black,
                                                                                                // selectionControls: MaterialTextSelectionControls(),
                                                                                                textAlign: TextAlign.right,
                                                                                                scrollPadding: const EdgeInsets.all(0),
                                                                                                textAlignVertical: TextAlignVertical.top,
                                                                                                decoration: InputDecoration(
                                                                                                  contentPadding: const EdgeInsets.all(0),

                                                                                                  // filled: true,
                                                                                                  // fillColor: defaultPalette.primary,
                                                                                                  enabledBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                  focusedBorder: OutlineInputBorder(
                                                                                                    borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                    borderRadius: BorderRadius.circular(2.0), // Same as border
                                                                                                  ),
                                                                                                ),
                                                                                                keyboardType: TextInputType.number,
                                                                                              ),
                                                                                              //LineHeight
                                                                                              //Balloon Slider
                                                                                              Positioned(
                                                                                                bottom: 0,
                                                                                                width: width * 0.6,
                                                                                                child: BalloonSlider(
                                                                                                    trackHeight: 15,
                                                                                                    thumbRadius: 7.5,
                                                                                                    showRope: true,
                                                                                                    color: defaultPalette.tertiary,
                                                                                                    ropeLength: 300 / 8,
                                                                                                    value: double.parse((item.textEditorController.getSelectionStyle().attributes[LineHeightAttribute._key]?.value) ?? 0.toString()) / 100,
                                                                                                    onChanged: (val) {
                                                                                                      setState(() {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          LineHeightAttribute((val * 100).ceil().toString()),
                                                                                                        );
                                                                                                      });
                                                                                                    }),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        ),
                                                                                        //LineHeight
                                                                                        //+ -
                                                                                        Expanded(
                                                                                          flex: vDividerPosition > 0.45 ? (450 * vDividerPosition).ceil() : 1,
                                                                                          child: Stack(
                                                                                            children: [
                                                                                              Positioned(
                                                                                                top: -4,
                                                                                                right: 4,
                                                                                                height: 35,
                                                                                                child: ElevatedLayerButton(
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = int.parse(lineSpaceController.text) + 1;

                                                                                                      item.textEditorController.formatSelection(
                                                                                                        LineHeightAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.add,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                              Positioned(
                                                                                                bottom: 5,
                                                                                                right: 4,
                                                                                                child: ElevatedLayerButton(
                                                                                                  // isTapped: false,
                                                                                                  // toggleOnTap: true,
                                                                                                  onClick: () {
                                                                                                    setState(() {
                                                                                                      var val = (int.parse(lineSpaceController.text) - 1).clamp(0, 100);
                                                                                                      item.textEditorController.formatSelection(
                                                                                                        LineHeightAttribute((val).toString()),
                                                                                                      );
                                                                                                    });
                                                                                                  },
                                                                                                  buttonHeight: 32,
                                                                                                  buttonWidth: 65 * vDividerPosition,
                                                                                                  borderRadius: BorderRadius.circular(100),
                                                                                                  animationDuration: const Duration(milliseconds: 100),
                                                                                                  animationCurve: Curves.ease,
                                                                                                  topDecoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                  topLayerChild: const Icon(
                                                                                                    IconsaxPlusLinear.minus,
                                                                                                    size: 20,
                                                                                                  ),
                                                                                                  baseDecoration: BoxDecoration(
                                                                                                    color: Colors.green,
                                                                                                    border: Border.all(),
                                                                                                  ),
                                                                                                ),
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                                //
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ),
                                                                        //Colors
                                                                        SingleChildScrollView(
                                                                          child:
                                                                              Container(
                                                                            width:
                                                                                width,
                                                                            height:
                                                                                sHeight * (hDividerPosition - appbarHeight * 1.2),
                                                                            // decoration: BoxDecoration(border: Border.all(width: 2), borderRadius: BorderRadius.circular(12)),
                                                                            // padding: EdgeInsets.only(bottom: 10),
                                                                            // color:
                                                                            // Colors.amberAccent,
                                                                            child: TabContainer(
                                                                                controller: tabcunt,
                                                                                tabEdge: TabEdge.top,
                                                                                tabsStart: 0,
                                                                                tabExtent: 30,
                                                                                childPadding: const EdgeInsets.symmetric(vertical: 0),
                                                                                colors: [
                                                                                  Colors.grey.withOpacity(.4),
                                                                                  Colors.grey.withOpacity(.4)
                                                                                  // hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                  // hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                ],
                                                                                selectedTextStyle: TextStyle(
                                                                                  color: defaultPalette.black,
                                                                                  fontSize: 14,
                                                                                ),
                                                                                unselectedTextStyle: const TextStyle(
                                                                                  color: Colors.black,
                                                                                  fontSize: 13.0,
                                                                                ),
                                                                                // borderRadius: BorderRadius.circular(20),
                                                                                // tabBorderRadius: BorderRadius.circular(20),
                                                                                tabs: [
                                                                                  const Text(
                                                                                    'Font',
                                                                                  ),
                                                                                  const Text('Bg')
                                                                                ],
                                                                                children: [
                                                                                  //FONT COLOR
                                                                                  DefaultTabController(
                                                                                    length: 2,
                                                                                    child: ClipRRect(
                                                                                      borderRadius: BorderRadius.circular(8),
                                                                                      child: Column(
                                                                                        children: [
                                                                                          //FONT COLOR
                                                                                          //HEX TEXT FIEKLD
                                                                                          Container(
                                                                                            height: hDividerPosition < 0.25 ? textFieldHeight * 1.5 : textFieldHeight * 1.3,
                                                                                            margin: EdgeInsets.only(top: hDividerPosition < 0.25 ? 10 : 0),
                                                                                            padding: const EdgeInsets.all(5),
                                                                                            child: Stack(
                                                                                              children: [
                                                                                                TextFormField(
                                                                                                  onTapOutside: (event) {},
                                                                                                  controller: hexController,
                                                                                                  inputFormatters: [
                                                                                                    HexColorInputFormatter()
                                                                                                  ],
                                                                                                  onFieldSubmitted: (value) {
                                                                                                    item.textEditorController.formatSelection(
                                                                                                      ColorAttribute('#${value}'),
                                                                                                    );
                                                                                                  },
                                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                                  cursorColor: defaultPalette.secondary,
                                                                                                  textAlign: TextAlign.center,
                                                                                                  textAlignVertical: TextAlignVertical.center,
                                                                                                  decoration: InputDecoration(
                                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                                    prefixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                    suffixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                    filled: true,
                                                                                                    fillColor: defaultPalette.primary,
                                                                                                    border: OutlineInputBorder(
                                                                                                      borderRadius: BorderRadius.circular(10.0),
                                                                                                    ),
                                                                                                    enabledBorder: OutlineInputBorder(
                                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                      borderRadius: BorderRadius.circular(12.0),
                                                                                                    ),
                                                                                                    focusedBorder: OutlineInputBorder(
                                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.transparent),
                                                                                                      borderRadius: BorderRadius.circular(10.0),
                                                                                                    ),
                                                                                                  ),
                                                                                                  keyboardType: TextInputType.number,
                                                                                                ),
                                                                                                if (vDividerPosition > 0.45) ...[
                                                                                                  if (vDividerPosition > 0.48)
                                                                                                    Positioned(
                                                                                                      top: (textFieldHeight / 2) - 10,
                                                                                                      left: 10,
                                                                                                      child: GestureDetector(
                                                                                                        child: Icon(
                                                                                                          IconsaxPlusLinear.text,
                                                                                                          size: 20,
                                                                                                          color: hexToColor(hexController.text),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ),
                                                                                                ]
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                          //
                                                                                          if (hDividerPosition > 0.2) ...[
                                                                                            //FONT COLOR
                                                                                            //PICKER ND EVERYHTING
                                                                                            Expanded(
                                                                                              child: TabBarView(
                                                                                                physics: const NeverScrollableScrollPhysics(),
                                                                                                children: [
                                                                                                  SingleChildScrollView(
                                                                                                    child: Padding(
                                                                                                      padding: const EdgeInsets.all(10),
                                                                                                      child: ColorPicker(
                                                                                                        displayThumbColor: true,
                                                                                                        portraitOnly: true,
                                                                                                        pickerAreaBorderRadius: BorderRadius.circular(5),
                                                                                                        colorPickerWidth: 500 * hDividerPosition,
                                                                                                        labelTypes: [],
                                                                                                        pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                                        onColorChanged: (color) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            ColorAttribute('#${colorToHex(color)}'),
                                                                                                          );
                                                                                                          setState(() {
                                                                                                            hexController.text = '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                                                                          });
                                                                                                        },
                                                                                                        pickerAreaHeightPercent: 0.4,
                                                                                                      ),
                                                                                                    ),
                                                                                                  ), //FONT COLOR
                                                                                                  Padding(
                                                                                                    padding: const EdgeInsets.all(8.0),
                                                                                                    child: MaterialPicker(
                                                                                                      pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['color']?.value),
                                                                                                      onColorChanged: (color) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          ColorAttribute('#${colorToHex(color)}'),
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          hexController.text = '${item.textEditorController.getSelectionStyle().attributes['color']?.value}';
                                                                                                        });
                                                                                                      },
                                                                                                    ),
                                                                                                  ),
                                                                                                ],
                                                                                              ),
                                                                                            ),
                                                                                            if (hDividerPosition > 0.25)
                                                                                              TabBar(
                                                                                                dividerHeight: 0,
                                                                                                indicatorSize: TabBarIndicatorSize.label,
                                                                                                indicatorColor: defaultPalette.tertiary,
                                                                                                labelColor: defaultPalette.tertiary,
                                                                                                labelPadding: const EdgeInsets.all(0),
                                                                                                tabs: [
                                                                                                  //FONT COLOR
                                                                                                  Tab(
                                                                                                    height: 30,
                                                                                                    child: Container(
                                                                                                      padding: const EdgeInsets.all(2),
                                                                                                      // margin: EdgeInsets.only(left: 5, right: 5),
                                                                                                      height: 30,
                                                                                                      width: width,
                                                                                                      alignment: Alignment.center,
                                                                                                      decoration: BoxDecoration(color: defaultPalette.primary.withOpacity(0.7), borderRadius: const BorderRadius.only(bottomLeft: Radius.circular(8))),
                                                                                                      child: Text(
                                                                                                        'Picker',
                                                                                                        style: GoogleFonts.lexend(fontSize: 12),
                                                                                                      ),
                                                                                                    ),
                                                                                                  ), //FONT COLOR
                                                                                                  Tab(
                                                                                                    height: 30,
                                                                                                    child: Container(
                                                                                                      padding: const EdgeInsets.all(2),
                                                                                                      // margin: EdgeInsets.only(right: 5, left: 5),
                                                                                                      alignment: Alignment.center,
                                                                                                      height: 30,
                                                                                                      width: width,
                                                                                                      decoration: BoxDecoration(color: defaultPalette.primary.withOpacity(0.7), borderRadius: const BorderRadius.only(bottomRight: Radius.circular(8))),
                                                                                                      child: Text(
                                                                                                        'Palette',
                                                                                                        style: GoogleFonts.lexend(fontSize: 12),
                                                                                                      ),
                                                                                                    ),
                                                                                                  ),
                                                                                                ],
                                                                                              ),
                                                                                          ] //
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                  ),
                                                                                  //BG COLORRR
                                                                                  DefaultTabController(
                                                                                    length: 2,
                                                                                    child: ClipRRect(
                                                                                      borderRadius: BorderRadius.circular(8),
                                                                                      child: Column(
                                                                                        children: [
                                                                                          //Background color
                                                                                          //HEX TEXT FIEKLD
                                                                                          Container(
                                                                                            height: hDividerPosition < 0.25 ? textFieldHeight * 1.5 : textFieldHeight * 1.3,
                                                                                            margin: EdgeInsets.only(top: hDividerPosition < 0.25 ? 10 : 0),
                                                                                            padding: const EdgeInsets.all(5),
                                                                                            child: Stack(
                                                                                              children: [
                                                                                                TextFormField(
                                                                                                  onTapOutside: (event) {
                                                                                                    // Focus.unfocus();
                                                                                                  },
                                                                                                  // focusNode: marginTopFocus,
                                                                                                  controller: bghexController,
                                                                                                  inputFormatters: [
                                                                                                    HexColorInputFormatter()
                                                                                                    // FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*$')),
                                                                                                    // NumericInputFormatter(maxValue: (documentPropertiesList[currentPageIndex].pageFormatController.height / 1.11 - double.parse(documentPropertiesList[currentPageIndex].marginBottomController.text))),
                                                                                                  ],
                                                                                                  onFieldSubmitted: (value) {
                                                                                                    item.textEditorController.formatSelection(
                                                                                                      BackgroundAttribute('${value}'),
                                                                                                    );
                                                                                                    FocusScope.of(context).previousFocus();
                                                                                                  },
                                                                                                  style: TextStyle(color: defaultPalette.black),
                                                                                                  cursorColor: defaultPalette.secondary,
                                                                                                  textAlign: TextAlign.center,
                                                                                                  textAlignVertical: TextAlignVertical.center,
                                                                                                  decoration: InputDecoration(
                                                                                                    contentPadding: const EdgeInsets.all(0),
                                                                                                    prefixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                    suffixIconConstraints: BoxConstraints(minWidth: presuConstraintsMinW),
                                                                                                    filled: true,
                                                                                                    fillColor: defaultPalette.primary,
                                                                                                    border: OutlineInputBorder(
                                                                                                      // borderSide: BorderSide(width: 5, color: defaultPalette.black),
                                                                                                      borderRadius: BorderRadius.circular(10.0), // Replace with your desired radius
                                                                                                    ),
                                                                                                    enabledBorder: OutlineInputBorder(
                                                                                                      borderSide: BorderSide(width: 2, color: defaultPalette.transparent),
                                                                                                      borderRadius: BorderRadius.circular(12.0), // Same as border
                                                                                                    ),
                                                                                                    focusedBorder: OutlineInputBorder(
                                                                                                      borderSide: BorderSide(width: 3, color: defaultPalette.transparent),
                                                                                                      borderRadius: BorderRadius.circular(10.0), // Same as border
                                                                                                    ),
                                                                                                  ),
                                                                                                  keyboardType: TextInputType.number,
                                                                                                  // onChanged: (value) => _updatePdfPreview(''),
                                                                                                ),
                                                                                                if (vDividerPosition > 0.45) ...[
                                                                                                  if (vDividerPosition > 0.48)
                                                                                                    Positioned(
                                                                                                      top: (textFieldHeight / 2) - 14,
                                                                                                      left: 6,
                                                                                                      child: GestureDetector(
                                                                                                        child: Icon(
                                                                                                          IconsaxPlusBold.text,
                                                                                                          size: 28,
                                                                                                          color: hexToColor(bghexController.text),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ),
                                                                                                ]
                                                                                              ],
                                                                                            ),
                                                                                          ),
                                                                                          //
                                                                                          if (hDividerPosition > 0.2) ...[
                                                                                            //Background color
                                                                                            //PICKER ND EVERYHTING
                                                                                            Expanded(
                                                                                              child: TabBarView(
                                                                                                physics: const NeverScrollableScrollPhysics(),
                                                                                                children: [
                                                                                                  SingleChildScrollView(
                                                                                                    child: Padding(
                                                                                                      padding: const EdgeInsets.all(10),
                                                                                                      child: ColorPicker(
                                                                                                        displayThumbColor: true,
                                                                                                        portraitOnly: true,
                                                                                                        pickerAreaBorderRadius: BorderRadius.circular(5),
                                                                                                        colorPickerWidth: 500 * hDividerPosition,
                                                                                                        labelTypes: [],
                                                                                                        pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                                        onColorChanged: (color) {
                                                                                                          item.textEditorController.formatSelection(
                                                                                                            BackgroundAttribute('#${colorToHex(color)}'),
                                                                                                          );
                                                                                                          setState(() {
                                                                                                            bghexController.text = '${item.textEditorController.getSelectionStyle().attributes['background']?.value}';
                                                                                                          });
                                                                                                        },
                                                                                                        pickerAreaHeightPercent: 0.4,
                                                                                                      ),
                                                                                                    ),
                                                                                                  ), //FONT COLOR
                                                                                                  Padding(
                                                                                                    padding: const EdgeInsets.all(8.0),
                                                                                                    child: MaterialPicker(
                                                                                                      pickerColor: hexToColor(item.textEditorController.getSelectionStyle().attributes['background']?.value),
                                                                                                      onColorChanged: (color) {
                                                                                                        item.textEditorController.formatSelection(
                                                                                                          BackgroundAttribute('#${colorToHex(color)}'),
                                                                                                        );
                                                                                                        setState(() {
                                                                                                          bghexController.text = '${item.textEditorController.getSelectionStyle().attributes['background']?.value}';
                                                                                                        });
                                                                                                      },
                                                                                                    ),
                                                                                                  ),
                                                                                                ],
                                                                                              ),
                                                                                            ),
                                                                                            if (hDividerPosition > 0.25)
                                                                                              TabBar(
                                                                                                dividerHeight: 0,
                                                                                                indicatorSize: TabBarIndicatorSize.label,
                                                                                                indicatorColor: defaultPalette.tertiary,
                                                                                                labelColor: defaultPalette.tertiary,
                                                                                                labelPadding: const EdgeInsets.all(0),
                                                                                                tabs: [
                                                                                                  //FONT COLOR
                                                                                                  Tab(
                                                                                                    height: 30,
                                                                                                    child: Container(
                                                                                                      padding: const EdgeInsets.all(2),
                                                                                                      // margin: EdgeInsets.only(left: 5, right: 5),
                                                                                                      height: 30,
                                                                                                      width: width,
                                                                                                      alignment: Alignment.center,
                                                                                                      decoration: BoxDecoration(
                                                                                                        color: defaultPalette.primary.withOpacity(0.7),
                                                                                                      ),
                                                                                                      child: Text(
                                                                                                        'Picker',
                                                                                                        style: GoogleFonts.lexend(fontSize: 12),
                                                                                                      ),
                                                                                                    ),
                                                                                                  ), //FONT COLOR
                                                                                                  Tab(
                                                                                                    height: 30,
                                                                                                    child: Container(
                                                                                                      padding: const EdgeInsets.all(2),
                                                                                                      alignment: Alignment.center,
                                                                                                      height: 30,
                                                                                                      width: width,
                                                                                                      decoration: BoxDecoration(
                                                                                                        color: defaultPalette.primary.withOpacity(0.7),
                                                                                                      ),
                                                                                                      child: Text(
                                                                                                        'Palette',
                                                                                                        style: GoogleFonts.lexend(fontSize: 12),
                                                                                                      ),
                                                                                                    ),
                                                                                                  ),
                                                                                                ],
                                                                                              ),
                                                                                          ] //
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                  ),
                                                                                ]),
                                                                            //
                                                                          ),
                                                                        )
                                                                      ],
                                                                    );
                                                                  },
                                                                ),
                                                              ),
                                                            ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                              //Text SIDEBAR
                                              AnimatedPositioned(
                                                  left: panelIndex.panelIndex ==
                                                          -1
                                                      ? -100
                                                      : 0,
                                                  top: 0,
                                                  duration: Durations.long4,
                                                  child: PlayableToolbarWidget(
                                                      itemsGutter: 0,
                                                      toolbarBackgroundRadius:
                                                          0,
                                                      toolbarWidth: 44,
                                                      toolbarShadow:
                                                          defaultPalette.black
                                                              .withOpacity(
                                                                  0.05),
                                                      toolbarHorizontalPadding:
                                                          0,
                                                      toolbarHeight: sHeight *
                                                          hDividerPosition,
                                                      itemsOffset: 0,
                                                      toolbarItems: [
                                                        ListItemModel(
                                                          isTapped: isTapped[0],
                                                          onTap: () {
                                                            var item = _sheetItemIterator(
                                                                    panelIndex.id,
                                                                    spreadSheetList[
                                                                        currentPageIndex])
                                                                as TextEditorItem;
                                                            item.focusNode
                                                                .unfocus();
                                                            setState(() {
                                                              panelIndex =
                                                                  PanelIndex(
                                                                      id: '',
                                                                      panelIndex:
                                                                          -1);
                                                            });
                                                            for (var i = 0;
                                                                i <
                                                                    isTapped
                                                                        .length;
                                                                i++) {
                                                              setState(() {
                                                                isTapped[i] =
                                                                    false;
                                                              });
                                                            }
                                                            setState(() {
                                                              isTapped[1] =
                                                                  true;
                                                            });
                                                          },
                                                          title: 'Duh',
                                                          color: defaultPalette
                                                              .tertiary,
                                                          icon: TablerIcons.x,
                                                        ),
                                                        ListItemModel(
                                                          isTapped: isTapped[1],
                                                          onTap: () {
                                                            for (var i = 0;
                                                                i <
                                                                    isTapped
                                                                        .length;
                                                                i++) {
                                                              setState(() {
                                                                isTapped[i] =
                                                                    false;
                                                              });
                                                            }
                                                            setState(() {
                                                              isTapped[1] =
                                                                  true;
                                                              textStyleTabControler
                                                                  .animateToPage(
                                                                      0,
                                                                      duration:
                                                                          Durations
                                                                              .medium1,
                                                                      curve: Curves
                                                                          .easeIn);
                                                            });
                                                          },
                                                          title: 'Font',
                                                          color: defaultPalette
                                                              .primary,
                                                          icon: TablerIcons
                                                              .typography,
                                                        ),
                                                        ListItemModel(
                                                          isTapped: isTapped[2],
                                                          onTap: () {
                                                            for (var i = 0;
                                                                i <
                                                                    isTapped
                                                                        .length;
                                                                i++) {
                                                              setState(() {
                                                                isTapped[i] =
                                                                    false;
                                                              });
                                                            }
                                                            setState(() {
                                                              isTapped[2] =
                                                                  true;
                                                              textStyleTabControler
                                                                  .animateToPage(
                                                                      1,
                                                                      duration:
                                                                          Durations
                                                                              .medium1,
                                                                      curve: Curves
                                                                          .easeIn);
                                                            });
                                                          },
                                                          title: 'Format',
                                                          color: defaultPalette
                                                              .primary,
                                                          icon:
                                                              TablerIcons.bold,
                                                        ),
                                                        //sizespace
                                                        ListItemModel(
                                                          isTapped: isTapped[3],
                                                          onTap: () {
                                                            for (var i = 0;
                                                                i <
                                                                    isTapped
                                                                        .length;
                                                                i++) {
                                                              setState(() {
                                                                isTapped[i] =
                                                                    false;
                                                              });
                                                            }
                                                            setState(() {
                                                              isTapped[3] =
                                                                  true;
                                                              textStyleTabControler
                                                                  .animateToPage(
                                                                      2,
                                                                      duration:
                                                                          Durations
                                                                              .medium1,
                                                                      curve: Curves
                                                                          .easeIn);
                                                            });
                                                          },
                                                          title: 'Size',
                                                          color: defaultPalette
                                                              .primary,
                                                          icon: TablerIcons
                                                              .text_size,
                                                        ),
                                                        //paint
                                                        ListItemModel(
                                                          isTapped: isTapped[4],
                                                          onTap: () {
                                                            for (var i = 0;
                                                                i <
                                                                    isTapped
                                                                        .length;
                                                                i++) {
                                                              setState(() {
                                                                isTapped[i] =
                                                                    false;
                                                              });
                                                            }
                                                            setState(() {
                                                              isTapped[4] =
                                                                  true;
                                                              textStyleTabControler
                                                                  .animateToPage(
                                                                      3,
                                                                      duration:
                                                                          Durations
                                                                              .medium1,
                                                                      curve: Curves
                                                                          .easeIn);
                                                            });
                                                          },
                                                          title: 'Color',
                                                          color: defaultPalette
                                                              .primary,
                                                          icon:
                                                              TablerIcons.paint,
                                                        ),
                                                      ]))
                                            ],
                                          ),
                                        )),

                                    ////////////////////RIGHT SCREEN PDF PREVIEW

                                    Expanded(
                                      flex: ((1 - vDividerPosition) * 10000)
                                          .toInt(),
                                      child: AnimatedContainer(
                                        duration:
                                            const Duration(milliseconds: 300),
                                        // color: Colors.green,
                                        child: const Center(),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              //emulating the pdf preview
                              Positioned(
                                top: sHeight * appbarHeight / 6,
                                left: (sWidth * vDividerPosition),
                                // right: 0,
                                // width: 2480 ,
                                // height: sHeight * hDividerPosition+126,
                                child: Transform.scale(
                                  scale: (1 - vDividerPosition) * 0.48,
                                  // scale: 1,
                                  alignment: Alignment.topLeft,
                                  child: Container(
                                    // width: 2480,
                                    // height: (sWidth-64)*sqrt2 ,
                                    height: (sHeight) *
                                        hDividerPosition /
                                        ((1 - vDividerPosition) * 0.48),
                                    padding: const EdgeInsets.only(
                                        bottom: 25, top: 25, right: 40),
                                    decoration: BoxDecoration(boxShadow: [
                                      BoxShadow(
                                          blurRadius: 500,
                                          offset: const Offset(5, 5),
                                          color: defaultPalette.black
                                              .withOpacity(0.06))
                                    ]),
                                    alignment: Alignment.center,
                                    child: _generateWid(sWidth, sHeight),
                                  ),
                                ),
                              ),
                              ///////////VERTICAL GRIP
                              Positioned(
                                left: vDividerPosition * sWidth - 37,
                                top: 17,
                                child: AnimatedContainer(
                                  duration: const Duration(milliseconds: 50),
                                  width: 32,
                                  height: 30,
                                  decoration: BoxDecoration(
                                      color: defaultPalette.tertiary,
                                      borderRadius: BorderRadius.circular(8)),
                                  child: GestureDetector(
                                    onPanUpdate: (details) {
                                      double newPosition = (vDividerPosition +
                                              details.delta.dx /
                                                  context.size!.width)
                                          .clamp(0.4, 0.85);
                                      _updatevDividerPosition(newPosition);
                                    },
                                    child: Icon(
                                      TablerIcons.grip_vertical,
                                      color: defaultPalette.black,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        //////////Spread SHEET Layout
                        Expanded(
                          flex:
                              (((1 - appbarHeight) - hDividerPosition) * 10000)
                                  .round(),
                          child: Column(
                            children: [
                              ////////TOP TOOL BAR
                              Container(
                                height: sHeight / 20,
                                width: sWidth,
                                color: defaultPalette.white,
                                ///////TOP TOOL BAR
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceAround,
                                  children: [
                                    ///Resize handle
                                    GestureDetector(
                                        onPanUpdate: (details) {
                                          double newPosition =
                                              (hDividerPosition +
                                                      details.delta.dy /
                                                          context.size!.height)
                                                  .clamp(0.2, 0.85);
                                          _updatehDividerPosition(newPosition);
                                        },
                                        child: Container(
                                          padding: const EdgeInsets.all(5),
                                          decoration: BoxDecoration(
                                              borderRadius:
                                                  BorderRadius.circular(8),
                                              color: defaultPalette.black
                                                  .withOpacity(0.9)),
                                          child: Icon(
                                            TablerIcons.grip_horizontal,
                                            color: defaultPalette.white,
                                            size: 20,
                                          ),
                                        )),

                                    ///clearLayout Button
                                    IconButton(
                                        onPressed: () {
                                          FocusScope.of(context).unfocus();
                                          if (panelIndex.panelIndex != -1) {
                                            final TextEditorItem
                                                textEditorItem =
                                                _sheetItemIterator(
                                                        panelIndex.id,
                                                        spreadSheetList[
                                                            currentPageIndex])
                                                    as TextEditorItem;
                                            textEditorItem.focusNode.unfocus();
                                          }
                                          _confirmDeleteLayout(
                                              deletePage: false);
                                        },
                                        icon: Transform.rotate(
                                          angle: math.pi / 4,
                                          child: Icon(
                                            IconsaxPlusLinear.add,

                                            // size: 40,
                                            color: defaultPalette.black,
                                          ),
                                        )),
                                    //ADD TEXT
                                    IconButton(
                                        onPressed: () {
                                          print(
                                              '________addText pressed LD_________');
                                          // print(
                                          //     'panelId from addtextfield: ${panelIndex.id}');
                                          _addTextField();
                                        },
                                        icon: Icon(
                                          CupertinoIcons.plus_bubble,
                                          // size: 40,
                                          color: defaultPalette.black,
                                        )),
                                    //Add Image
                                    IconButton(
                                        onPressed: () async {
                                          // pw.Page pdf = await exportDelegate
                                          //     .exportToPdfPage('2');
                                          // setState(() {
                                          //   genpdf.addPage(pdf);
                                          // });
                                          _capturePng();
                                        },
                                        icon: Icon(
                                          IconsaxPlusLinear.gallery_add,
                                          // size: 40,
                                          color: defaultPalette.black,
                                        )),
                                    //Add table
                                    IconButton(
                                        onPressed: () {},
                                        icon: Icon(
                                          CupertinoIcons.table,
                                          // size: 40,
                                          color: defaultPalette.black,
                                        )),
                                    //Duplpicate
                                    IconButton(
                                        onPressed: () => _duplicateTextField(),
                                        icon: Icon(
                                          CupertinoIcons.plus_square_on_square,
                                          // size: 40,
                                          color: defaultPalette.black,
                                        )),
                                    IconButton(
                                        onPressed: () => _removeTextField(),
                                        icon: Icon(
                                          Icons.delete,
                                          // size: 40,
                                          color: defaultPalette.black,
                                        )),
                                  ],
                                ),
                              ),
                              ////// SPREADSHEET
                              Expanded(
                                flex: (8 * 10000),
                                child: Container(
                                  // height: sHeight / 20,
                                  width: sWidth,
                                  color: defaultPalette.black.withOpacity(.9),
                                  child: Stack(
                                    children: [
                                      // botomGraph
                                      IgnorePointer(
                                        ignoring: true,
                                        child: AnimatedContainer(
                                          duration: Durations.extralong1,
                                          height: sHeight,
                                          width: sWidth,
                                          alignment: Alignment.centerRight,
                                          decoration: BoxDecoration(
                                            color:
                                                Colors.white.withOpacity(0.0),
                                          ),
                                          padding: const EdgeInsets.only(
                                            top: 0,
                                          ),
                                          //layGraph
                                          child: Opacity(
                                            opacity: 0.35,
                                            child: LineChart(LineChartData(
                                                lineBarsData: [
                                                  LineChartBarData()
                                                ],
                                                titlesData: const FlTitlesData(
                                                    show: false),
                                                gridData: const FlGridData(
                                                    show: true,
                                                    horizontalInterval: 10,
                                                    verticalInterval: 30),
                                                borderData:
                                                    FlBorderData(show: false),
                                                minY: 0,
                                                maxY: 50,
                                                maxX: dateTimeNow
                                                            .millisecondsSinceEpoch
                                                            .ceilToDouble() /
                                                        500 +
                                                    250,
                                                minX: dateTimeNow
                                                        .millisecondsSinceEpoch
                                                        .ceilToDouble() /
                                                    500)),
                                          ),
                                        ),
                                      ),
                                      //Main SpreadSheet
                                      ReorderableListView.builder(
                                        footer: null,
                                        header: null,
                                        // scrollDirection: Axis.horizontal,
                                        itemExtentBuilder: null,
                                        proxyDecorator:
                                            (child, index, animation) {
                                          return child;
                                        },
                                        padding: const EdgeInsets.all(0),
                                        onReorder:
                                            (int oldIndex, int newIndex) {
                                          setState(() {
                                            if (newIndex > oldIndex) {
                                              newIndex -= 1;
                                            }
                                            final item = spreadSheetList[
                                                    currentPageIndex]
                                                .removeAt(oldIndex);
                                            spreadSheetList[currentPageIndex]
                                                .insert(newIndex, item);
                                          });
                                        },
                                        itemCount:
                                            spreadSheetList[currentPageIndex]
                                                .length,
                                        itemBuilder: (context, index) {
                                          print(
                                              'hello hello sprdsheetBuilding: ${spreadSheetList[currentPageIndex][index]}');
                                          if (spreadSheetList[currentPageIndex]
                                              [index] is TextEditorItem) {
                                            var textEditorItem =
                                                spreadSheetList[
                                                        currentPageIndex][index]
                                                    as TextEditorItem;
                                            return Stack(
                                              key: ValueKey(textEditorItem
                                                  .id), // Ensure each item has a unique key
                                              children: [
                                                GestureDetector(
                                                  onTap: () {
                                                    FocusScope.of(context)
                                                        .unfocus();
                                                    var isTrue = false;
                                                    SheetItem? itemE;
                                                    if (panelIndex.id ==
                                                        textEditorItem.id) {
                                                      isTrue = true;
                                                    }
                                                    setState(() {
                                                      itemE = _sheetItemIterator(
                                                          textEditorItem.id,
                                                          spreadSheetList[
                                                              currentPageIndex]);

                                                      if (itemE != null) {
                                                        index = _sheetListIterator(
                                                                itemE!.parentId,
                                                                spreadSheetList[
                                                                    currentPageIndex])
                                                            .indexOf(itemE!);
                                                        panelIndex = PanelIndex(
                                                            id: itemE!.id,
                                                            panelIndex: index,
                                                            parentId: itemE
                                                                    ?.parentId ??
                                                                '');
                                                      } else {
                                                        panelIndex = PanelIndex(
                                                            id: textEditorItem
                                                                .id,
                                                            panelIndex: index,
                                                            parentId:
                                                                textEditorItem
                                                                    .parentId);
                                                      }

                                                      // index = temp ?? index;

                                                      if (hDividerPosition >
                                                          0.48) {
                                                        hDividerPosition = 0.4;
                                                      }
                                                    });
                                                    // Future.delayed(Duration.zero)
                                                    //     .then((_) {
                                                    //   textStylePageController
                                                    //       .jumpToPage(panelIndex
                                                    //           .panelIndex);
                                                    // });
                                                    Future.delayed(
                                                            Durations.short1)
                                                        .then((h) {
                                                      if (!isTrue) {
                                                        textStyleTabControler
                                                            .animateToPage(0,
                                                                curve: Curves
                                                                    .bounceIn,
                                                                duration:
                                                                    Durations
                                                                        .short1);
                                                        for (var i = 0;
                                                            i < isTapped.length;
                                                            i++) {
                                                          setState(() {
                                                            isTapped[i] = false;
                                                          });
                                                        }
                                                        setState(() {
                                                          isTapped[1] = true;
                                                        });
                                                      }
                                                    });

                                                    print('clicked');

                                                    print(panelIndex);
                                                  },
                                                  child: Container(
                                                    padding:
                                                        const EdgeInsets.only(
                                                            top: 4,
                                                            bottom: 8,
                                                            left: 20,
                                                            right: 20),
                                                    margin:
                                                        const EdgeInsets.all(8),
                                                    decoration: BoxDecoration(
                                                      color: defaultPalette
                                                          .primary,
                                                      border: Border.all(
                                                        width: panelIndex.id ==
                                                                textEditorItem
                                                                    .id
                                                            ? 4
                                                            : 2,
                                                        color: panelIndex.id ==
                                                                textEditorItem
                                                                    .id
                                                            ? defaultPalette
                                                                .tertiary
                                                            : defaultPalette
                                                                .black,
                                                      ),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10),
                                                    ),
                                                    child: Column(
                                                      children: [
                                                        Container(
                                                          alignment: Alignment
                                                              .centerLeft,
                                                          padding:
                                                              const EdgeInsets
                                                                  .only(
                                                                  bottom: 4),
                                                          child: Text(
                                                              'id : ${textEditorItem.id}',
                                                              style:
                                                                  const TextStyle(
                                                                      fontSize:
                                                                          10)),
                                                        ),
                                                        QuillEditor(
                                                          configurations:
                                                              textEditorItem
                                                                  .textEditorConfigurations,
                                                          focusNode:
                                                              textEditorItem
                                                                  .focusNode,
                                                          scrollController:
                                                              textEditorItem
                                                                  .scrollController,
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            );
                                          } else if (spreadSheetList[
                                                  currentPageIndex][index]
                                              is SheetList) {
                                            return Container(
                                              key: ValueKey((spreadSheetList[
                                                          currentPageIndex]
                                                      [index] as SheetList)
                                                  .id),
                                              margin: EdgeInsets.only(left: 5),
                                              child: _buildListWidget(
                                                  spreadSheetList[
                                                          currentPageIndex]
                                                      [index] as SheetList),
                                            );
                                          }
                                          return Container(
                                            key: ValueKey(const Uuid().v4()),
                                            color: Colors.amberAccent,
                                            height: 12,
                                          );
                                        },
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  //
                  // Windows top bar mobile
                  if (Platform.isWindows)
                    GestureDetector(
                      behavior: HitTestBehavior.translucent,
                      onPanStart: (details) {
                        appWindow.startDragging();
                      },
                      onDoubleTap: () {
                        appWindow.maximizeOrRestore();
                      },
                      child: Container(
                        color: Colors.transparent,
                        height: 40,
                        child: Consumer(builder: (context, ref, c) {
                          return Stack(
                            children: [
                              AnimatedPositioned(
                                right: 0,
                                duration: Durations.short4,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: AnimatedContainer(
                                    duration: Durations.short4,
                                    padding: const EdgeInsets.only(
                                        right: 8, bottom: 4),
                                    margin: const EdgeInsets.only(top: 4),
                                    decoration: const BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(12),
                                          bottomLeft: Radius.circular(12),
                                        )),
                                    child: Row(
                                      children: [
                                        //minimize button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Duration.zero)
                                                .then((y) {
                                              appWindow.minimize();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 1),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.rectangle,
                                            size: 15,
                                            // color: Colors.blue,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                        //
                                        //maximize button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Durations.short1)
                                                .then((y) {
                                              appWindow.maximizeOrRestore();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 1),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.triangle,
                                            size: 14,
                                            // color: Colors.amber,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                        //close button
                                        ElevatedLayerButton(
                                          // isTapped: false,
                                          // toggleOnTap: true,
                                          onClick: () {
                                            Future.delayed(Duration.zero)
                                                .then((y) {
                                              appWindow.close();
                                            });
                                          },
                                          buttonHeight: 30,
                                          buttonWidth: 30,
                                          borderRadius:
                                              BorderRadius.circular(5),
                                          animationDuration:
                                              const Duration(milliseconds: 1),
                                          animationCurve: Curves.ease,
                                          topDecoration: BoxDecoration(
                                            color: Colors.white,
                                            border: Border.all(),
                                          ),
                                          topLayerChild: const Icon(
                                            TablerIcons.circle,
                                            size: 15,
                                            // color: Colors.red,
                                          ),
                                          baseDecoration: BoxDecoration(
                                            color: Colors.green,
                                            border: Border.all(),
                                          ),
                                        ),
                                      ],
                                    ),
                                    //
                                  ),
                                ),
                              ),
                            ],
                          );
                        }),
                      ),
                    ),

                  //
                  //BILLBLAZE MAIN TITLE
                  AnimatedPositioned(
                    duration: defaultDuration,
                    top: topPadPosDistance - (topPadPosDistance / 1.1),
                    left: leftPadPosDistance + (sWidth / 25),
                    child: AnimatedTextKit(
                      // key: ValueKey(appinioLoop),
                      animatedTexts: [
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.abrilFatface(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.zcoolKuaiLe(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.splash(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze",
                            textStyle: GoogleFonts.libreBarcode39ExtendedText(
                                fontSize: titleFontSize / 4,
                                letterSpacing: 0,
                                height: 1),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.redactedScript(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.fascinateInline(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                        TypewriterAnimatedText("Bill\nBlaze.",
                            textStyle: GoogleFonts.nabla(
                                fontSize: titleFontSize / 4,
                                color: const Color(0xFF000000).withOpacity(0.8),
                                height: 0.9),
                            speed: const Duration(milliseconds: 100)),
                      ],
                      // totalRepeatCount: 1,
                      repeatForever: true,
                      pause: const Duration(milliseconds: 30000),
                      displayFullTextOnTap: true,
                      stopPauseOnTap: true,
                    ),
                  ),
                  //
                  //SIDE BAR BUTTON
                  AnimatedPositioned(
                    duration: sideBarPosDuration,
                    top: (sHeight / 20) - (sHeight / 18),
                    left: -20,
                    child: ElevatedLayerButton(
                      // isTapped: false,
                      // toggleOnTap: true,
                      onClick: () {
                        var lm = Boxes.getLayouts()
                            .values
                            .toList()
                            .cast<LayoutModel>();
                        lm[keyIndex].docPropsList =
                            docPropToBox(documentPropertiesList);
                        lm[keyIndex].spreadSheetList =
                            spreadSheetToBox(spreadSheetList);
                        lm[keyIndex].save();
                        Navigator.pop(context);
                      },
                      buttonHeight: 60,
                      buttonWidth: 60,
                      borderRadius: BorderRadius.circular(100),
                      animationDuration: const Duration(milliseconds: 100),
                      animationCurve: Curves.ease,
                      topDecoration: BoxDecoration(
                        color: Colors.white,
                        border: Border.all(),
                      ),
                      topLayerChild: const Icon(
                        IconsaxPlusLinear.element_3,
                        size: 20,
                      ),
                      baseDecoration: BoxDecoration(
                        color: Colors.green,
                        border: Border.all(),
                      ),
                    ),
                  ),
                  //
                ],
              ),
            ),
          ));
    }
    //
  }

  String getPageFormatString(PdfPageFormat format) {
    if (format == PdfPageFormat.a4) return 'A4';
    if (format == PdfPageFormat.a3) return 'A3';
    if (format == PdfPageFormat.letter) return 'Lt';
    if (format == PdfPageFormat.legal) return 'Lg';
    if (format == PdfPageFormat.roll57) return 'Roll 57';
    if (format == PdfPageFormat.roll80) return 'Roll 80';
    if (format == PdfPageFormat.a5) return 'A5';
    if (format == PdfPageFormat.a6) return 'A6';
    if (format == PdfPageFormat.standard) return 'Standard';
    return 'Unknown';
  }

  PdfPageFormat getPageFormatFromString(String format) {
    switch (format) {
      case 'A4':
        return PdfPageFormat.a4;
      case 'A3':
        return PdfPageFormat.a3;
      case 'A5':
        return PdfPageFormat.a5;
      case 'A6':
        return PdfPageFormat.a6;
      case 'Letter':
        return PdfPageFormat.letter;
      case 'Legal':
        return PdfPageFormat.legal;
      case 'Standard':
        return PdfPageFormat.standard;
      case 'Roll 57':
        return PdfPageFormat.roll57;
      case 'Roll 80':
        return PdfPageFormat.roll80;
      default:
        return PdfPageFormat.a4;
    }
  }

  Widget _buildListWidget(SheetList sheetList) {
    // sheetList = sheetList as SheetList;
    return Stack(
      children: [
        GestureDetector(
          behavior: HitTestBehavior.deferToChild,
          onTap: () {
            setState(() {
              panelIndex.parentId = sheetList.id;
            });
          },
          child: Padding(
            padding: const EdgeInsets.only(
              right: 2,
              bottom: 4,
              left: 4,
            ),
            child: CustomBorder(
              color: panelIndex.parentId == sheetList.id
                  ? sheetList.direction == Axis.vertical
                      ? defaultPalette.tertiary
                      : defaultPalette.extras[1]
                  : defaultPalette.transparent,
              radius: Radius.circular(15),
              strokeWidth: panelIndex.parentId == sheetList.id ? 1.5 : 0,
              dashPattern: [10, 5],
              strokeCap: StrokeCap.square,
              animateBorder: true,
              animateDuration: Duration(seconds: 5),
              child: Container(
                width: findSheetListBuildWidth(sheetList) <= 50
                    ? 50
                    : findSheetListBuildWidth(sheetList),
                height: findSheetListBuildHeight(sheetList) <= 50
                    ? 50
                    : findSheetListBuildHeight(sheetList),
                // height: 300,
                padding: const EdgeInsets.only(top: 0, left: 1, right: 2),
                margin: const EdgeInsets.only(
                    // right: 2,
                    // bottom: 4,
                    // left: 2,
                    ),
                // buildlistw
                decoration: BoxDecoration(
                  border: Border.all(
                      width: panelIndex.parentId == sheetList.id ? 2 : 1.2,
                      color: panelIndex.parentId == sheetList.id
                          ? sheetList.direction == Axis.vertical
                              ? defaultPalette.tertiary
                              : defaultPalette.extras[1]
                          : ui.Color(0xFFFFFFFF)),
                  color: defaultPalette.transparent,
                  borderRadius: BorderRadius.circular(15),
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(15),
                  child: ReorderableListView.builder(
                    buildDefaultDragHandles: false,
                    scrollDirection: sheetList.direction,
                    // buildlistw
                    proxyDecorator: (child, index, animation) {
                      return Container(child: child);
                    },
                    itemBuilder: (context, index) {
                      // print('hello hello sprdListBuilding: ${sheetList[index]}');
                      if (sheetList[index] is TextEditorItem) {
                        var textEditorItem = sheetList[index] as TextEditorItem;
                        return ReorderableDelayedDragStartListener(
                          index: index,
                          key: ValueKey(textEditorItem.id),
                          child: IntrinsicWidth(
                            child: IntrinsicHeight(
                              child: Stack(
                                children: [
                                  GestureDetector(
                                    onTap: () {
                                      FocusScope.of(context).unfocus();
                                      var isTrue = false;
                                      SheetItem? itemE;
                                      if (panelIndex.id == textEditorItem.id) {
                                        isTrue = true;
                                      }
                                      setState(() {
                                        itemE = _sheetItemIterator(
                                            textEditorItem.id, sheetList);

                                        if (itemE != null) {
                                          index = _sheetListIterator(
                                                  itemE!.parentId, sheetList)
                                              .indexOf(itemE!);
                                          panelIndex = PanelIndex(
                                              id: itemE!.id,
                                              panelIndex: index,
                                              parentId: sheetList.id);
                                          print(
                                              'that this id from buildlist function ontap textfield: ${sheetList.id}');
                                          print(
                                              'that this id from buildlist function ontap textfield from panelindex: ${panelIndex.parentId}');
                                        } else {
                                          panelIndex = PanelIndex(
                                              id: textEditorItem.id,
                                              panelIndex: index,
                                              parentId: sheetList.id);
                                        }
                                        panelIndex.parentId = sheetList.id;
                                        // index = temp ?? index;

                                        if (hDividerPosition > 0.48) {
                                          hDividerPosition = 0.4;
                                        }
                                      });
                                      // Future.delayed(Duration.zero).then((_) {
                                      //   textStylePageController.jumpToPage(panelIndex.panelIndex);
                                      // });
                                      Future.delayed(Durations.short1)
                                          .then((h) {
                                        if (!isTrue) {
                                          textStyleTabControler.animateToPage(0,
                                              curve: Curves.bounceIn,
                                              duration: Durations.short1);
                                          for (var i = 0;
                                              i < isTapped.length;
                                              i++) {
                                            setState(() {
                                              isTapped[i] = false;
                                            });
                                          }
                                          setState(() {
                                            isTapped[1] = true;
                                          });
                                        }
                                      });

                                      print('clicked');

                                      print(panelIndex);
                                    },
                                    onSecondaryLongPressDown: (d) {
                                      setState(() {
                                        panelIndex.id = textEditorItem.id;
                                      });
                                      print('secondaryyyTapppppp');
                                      bool hasSelection(textEditorController) {
                                        var selection =
                                            textEditorController.selection;
                                        return selection != null &&
                                            !selection.isCollapsed;
                                      }

                                      Future<bool> hasClipboardData() async {
                                        var data = await Clipboard.getData(
                                            'text/plain');
                                        return data != null &&
                                            data.text!.isNotEmpty;
                                      }

                                      bool canUndo(textEditorController) {
                                        return textEditorController.hasUndo;
                                      }

                                      bool canRedo(textEditorController) {
                                        return textEditorController.hasRedo;
                                      }

                                      List<ContextMenuEntry>
                                          buildContextMenuEntries(
                                              QuillController
                                                  textEditorController) {
                                        var entries = <ContextMenuEntry>[];

                                        bool hasSelection = textEditorController
                                                .selection.start !=
                                            textEditorController.selection.end;

                                        // Cut
                                        if (hasSelection) {
                                          entries.add(MenuItem(
                                            label: 'Cut',
                                            icon: TablerIcons.cut,
                                            onSelected: () {
                                              var selectedText =
                                                  textEditorController.document
                                                      .getPlainText(
                                                textEditorController
                                                    .selection.start,
                                                textEditorController
                                                    .selection.end,
                                              );
                                              Clipboard.setData(ClipboardData(
                                                  text: selectedText));
                                              textEditorController.replaceText(
                                                textEditorController
                                                    .selection.start,
                                                textEditorController
                                                        .selection.end -
                                                    textEditorController
                                                        .selection.start,
                                                '',
                                                null,
                                              );
                                            },
                                          ));
                                        }

                                        // Copy
                                        if (hasSelection) {
                                          entries.add(MenuItem(
                                            label: 'Copy',
                                            icon: TablerIcons.copy,
                                            onSelected: () {
                                              var selectedText =
                                                  textEditorController.document
                                                      .getPlainText(
                                                textEditorController
                                                    .selection.start,
                                                textEditorController
                                                    .selection.end,
                                              );
                                              Clipboard.setData(ClipboardData(
                                                  text: selectedText));
                                            },
                                          ));
                                        }

                                        // Paste
                                        entries.add(MenuItem(
                                          label: 'Paste',
                                          icon: TablerIcons.clipboard,
                                          onSelected: () async {
                                            var data = await Clipboard.getData(
                                                'text/plain');
                                            if (data != null) {
                                              int baseOffset =
                                                  textEditorController
                                                      .selection.baseOffset;
                                              if (textEditorController
                                                  .selection.isCollapsed) {
                                                textEditorController
                                                    .replaceText(
                                                  baseOffset,
                                                  0, // No text to replace
                                                  data.text!,
                                                  null,
                                                );
                                              } else {
                                                textEditorController
                                                    .replaceText(
                                                  baseOffset,
                                                  textEditorController.selection
                                                          .extentOffset -
                                                      baseOffset,
                                                  data.text!,
                                                  null,
                                                );
                                              }
                                            }
                                          },
                                        ));

                                        // Select All
                                        entries.add(MenuItem(
                                          label: 'Select All',
                                          icon: TablerIcons.select_all,
                                          onSelected: () {
                                            textEditorController
                                                .updateSelection(
                                                    TextSelection(
                                                      baseOffset: 0,
                                                      extentOffset:
                                                          textEditorController
                                                              .document.length,
                                                    ),
                                                    ChangeSource.local);
                                          },
                                        ));

                                        entries.add(const MenuDivider());

                                        // Undo
                                        if (textEditorController.hasUndo) {
                                          entries.add(MenuItem(
                                            label: 'Undo',
                                            icon: TablerIcons.corner_up_left,
                                            onSelected: () {
                                              textEditorController.undo();
                                            },
                                          ));
                                        } else {
                                          entries.add(const MenuItem(
                                            label: 'Undo',
                                            icon: TablerIcons.corner_up_left,
                                            onSelected: null,
                                          ));
                                        }

                                        // Redo
                                        if (textEditorController.hasRedo) {
                                          entries.add(MenuItem(
                                            label: 'Redo',
                                            icon: TablerIcons.corner_down_right,
                                            onSelected: () {
                                              textEditorController.redo();
                                            },
                                          ));
                                        } else {
                                          entries.add(const MenuItem(
                                            label: 'Redo',
                                            icon: TablerIcons.corner_down_right,
                                            onSelected: null,
                                          ));
                                        }
                                        entries.addAll([
                                          const MenuHeader(text: 'ops'),
                                          //ADD ITEMS
                                          MenuItem.submenu(
                                              label: 'Add',
                                              icon: TablerIcons.new_section,
                                              items: [
                                                MenuItem.submenu(
                                                    label: 'Text',
                                                    icon: TablerIcons
                                                        .text_recognition,
                                                    items: [
                                                      MenuItem(
                                                        label: 'Above',
                                                        icon: TablerIcons
                                                            .border_top_plus,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (sheetList
                                                                    .direction ==
                                                                Axis.vertical) {
                                                              var newItem =
                                                                  _addTextField(
                                                                      shouldReturn:
                                                                          true);
                                                              sheetList.insert(
                                                                  index,
                                                                  newItem);
                                                            } else {
                                                              setState(() {
                                                                var newId =
                                                                    const Uuid()
                                                                        .v4();
                                                                var item = sheetList
                                                                    .removeAt(
                                                                        index);
                                                                sheetList.insert(
                                                                    index,
                                                                    SheetList(
                                                                        direction:
                                                                            Axis.vertical,
                                                                        id: newId,
                                                                        parentId: sheetList.id,
                                                                        sheetList: [
                                                                          _addTextField(
                                                                              shouldReturn: true),
                                                                          item
                                                                        ]));
                                                              });
                                                            }
                                                          });
                                                        },
                                                      ),
                                                      MenuItem(
                                                        label: 'Below',
                                                        icon: TablerIcons
                                                            .border_bottom_plus,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (sheetList
                                                                    .direction ==
                                                                Axis.vertical) {
                                                              var newItem =
                                                                  _addTextField(
                                                                      shouldReturn:
                                                                          true);
                                                              sheetList.insert(
                                                                  index + 1,
                                                                  newItem);
                                                            } else {
                                                              setState(() {
                                                                var newId =
                                                                    const Uuid()
                                                                        .v4();
                                                                var item = sheetList
                                                                    .removeAt(
                                                                        index);
                                                                sheetList
                                                                    .insert(
                                                                        index,
                                                                        SheetList(
                                                                            direction:
                                                                                Axis.vertical,
                                                                            id: newId,
                                                                            parentId: sheetList.id,
                                                                            sheetList: [
                                                                              item,
                                                                              _addTextField(shouldReturn: true),
                                                                            ]));
                                                              });
                                                            }
                                                          });
                                                        },
                                                      ),
                                                      MenuItem(
                                                        label: 'Left',
                                                        icon: TablerIcons
                                                            .border_left_plus,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (sheetList
                                                                    .direction ==
                                                                Axis.vertical) {
                                                              var newId =
                                                                  const Uuid()
                                                                      .v4();
                                                              var item =
                                                                  sheetList
                                                                      .removeAt(
                                                                          index);
                                                              sheetList.insert(
                                                                  index,
                                                                  SheetList(
                                                                      direction:
                                                                          Axis.horizontal,
                                                                      id: newId,
                                                                      parentId: sheetList.id,
                                                                      sheetList: [
                                                                        _addTextField(
                                                                            shouldReturn:
                                                                                true),
                                                                        item
                                                                      ]));
                                                            } else {
                                                              var newItem =
                                                                  _addTextField(
                                                                      shouldReturn:
                                                                          true);
                                                              sheetList.insert(
                                                                  index,
                                                                  newItem);
                                                            }
                                                          });
                                                        },
                                                      ),
                                                      MenuItem(
                                                        label: 'Right',
                                                        icon: TablerIcons
                                                            .border_right_plus,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (sheetList
                                                                    .direction ==
                                                                Axis.vertical) {
                                                              var newId =
                                                                  const Uuid()
                                                                      .v4();
                                                              var item =
                                                                  sheetList
                                                                      .removeAt(
                                                                          index);
                                                              sheetList.insert(
                                                                  index,
                                                                  SheetList(
                                                                      direction:
                                                                          Axis.horizontal,
                                                                      id: newId,
                                                                      parentId: sheetList.id,
                                                                      sheetList: [
                                                                        _addTextField(
                                                                            shouldReturn:
                                                                                true),
                                                                        item
                                                                      ]));
                                                            } else {
                                                              var newItem =
                                                                  _addTextField(
                                                                      shouldReturn:
                                                                          true);
                                                              sheetList.insert(
                                                                  index + 1,
                                                                  newItem);
                                                            }
                                                          });
                                                        },
                                                      )
                                                    ])
                                              ]),
                                          //MOVE ITEMS
                                          MenuItem.submenu(
                                              label: 'Move',
                                              icon: TablerIcons.arrows_move,
                                              items: [
                                                MenuItem.submenu(
                                                    label: 'Text',
                                                    icon:
                                                        TablerIcons.text_resize,
                                                    items: [
                                                      MenuItem(
                                                        label: 'Up',
                                                        icon: TablerIcons
                                                            .arrow_up_square,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (index != 0) {
                                                              var item =
                                                                  sheetList
                                                                      .removeAt(
                                                                          index);
                                                              sheetList.insert(
                                                                  index - 1,
                                                                  item);

                                                              // Update the index to reflect the new position of the item
                                                              index--; // Decrement index to reflect the item's new position

                                                              panelIndex = PanelIndex(
                                                                  parentId:
                                                                      panelIndex
                                                                          .parentId,
                                                                  id: panelIndex
                                                                      .id,
                                                                  panelIndex:
                                                                      panelIndex
                                                                              .panelIndex +
                                                                          1);
                                                              print(
                                                                  'Updated index of text editor: $index');
                                                            }
                                                            print(
                                                                'Current index of text editor: $index');
                                                          });
                                                        },
                                                      ),
                                                      MenuItem(
                                                        label: 'Down',
                                                        icon: TablerIcons
                                                            .arrow_down_square,
                                                        onSelected: () {
                                                          setState(() {
                                                            if (index !=
                                                                sheetList
                                                                        .length -
                                                                    1) {
                                                              var item =
                                                                  sheetList
                                                                      .removeAt(
                                                                          index);
                                                              sheetList.insert(
                                                                  index + 1,
                                                                  item);
                                                              index++;
                                                              print(
                                                                  'index of texteditor DT: $index');
                                                            }
                                                          });
                                                        },
                                                      ),
                                                    ])
                                              ]),
                                          //Export
                                          MenuItem(
                                            label: 'Export Field As..',
                                            icon: TablerIcons.message_forward,
                                            onSelected: () async {
                                              await pushExportField(
                                                  context,
                                                  textEditorItem,
                                                  documentPropertiesList,
                                                  currentPageIndex);
                                            },
                                          ),
                                          //Clear Field
                                          MenuItem(
                                            label: 'Clear',
                                            icon: TablerIcons.square_rounded_x,
                                            onSelected: () async {
                                              await showAdaptiveDialog(
                                                context: context,
                                                builder: (context) {
                                                  return AlertDialog(
                                                    title:
                                                        Text('Confirm Clear'),
                                                    content: Text(
                                                        'This will clear the text from current Text Field. Are you sure?'),
                                                    actions: [
                                                      TextButton(
                                                          onPressed: () {
                                                            setState(() {
                                                              textEditorItem
                                                                      .textEditorController
                                                                      .document =
                                                                  Document();
                                                            });
                                                            Navigator.pop(
                                                                context);
                                                          },
                                                          child: Text('Yes')),
                                                      TextButton(
                                                          onPressed: () {
                                                            Navigator.pop(
                                                                context);
                                                          },
                                                          child: Text('No')),
                                                    ],
                                                  );
                                                },
                                              );
                                            },
                                          ),
                                          //Delete
                                          MenuItem(
                                            label: 'Delete',
                                            icon: TablerIcons.trash,
                                            onSelected: () async {
                                              await showAdaptiveDialog(
                                                context: context,
                                                builder: (context) {
                                                  return AlertDialog(
                                                    title: const Text(
                                                        'Confirm Delete'),
                                                    content: const Text(
                                                        'This will DELETE the current Text Field with its contents. Are you sure?'),
                                                    actions: [
                                                      TextButton(
                                                          onPressed: () {
                                                            setState(() {
                                                              sheetList
                                                                  .removeAt(
                                                                      index);
                                                              panelIndex.id =
                                                                  '';
                                                              panelIndex
                                                                  .panelIndex = -1;
                                                            });
                                                            Navigator.pop(
                                                                context);
                                                          },
                                                          child: const Text(
                                                              'Yes')),
                                                      TextButton(
                                                          onPressed: () {
                                                            Navigator.pop(
                                                                context);
                                                          },
                                                          child:
                                                              const Text('No')),
                                                    ],
                                                  );
                                                },
                                              );
                                            },
                                          )
                                        ]);

                                        return entries;
                                      }

                                      final entries = buildContextMenuEntries(
                                          textEditorItem.textEditorController);
                                      ContextMenu(
                                              entries: entries,
                                              boxDecoration: BoxDecoration(
                                                  boxShadow: [
                                                    BoxShadow(
                                                      color: defaultPalette
                                                          .black
                                                          .withOpacity(0.3),
                                                      blurRadius: 2,
                                                      // spreadRadius: 10
                                                    )
                                                  ],
                                                  color: defaultPalette.primary,
                                                  borderRadius:
                                                      BorderRadius.circular(
                                                          10)),
                                              position: Offset(
                                                  d.globalPosition.dx,
                                                  d.globalPosition.dy))
                                          .show(context);
                                    },
                                    child: Padding(
                                      padding: const EdgeInsets.only(
                                          // bottom: 2,
                                          left: 2,
                                          top: 4,
                                          right: 0),
                                      child: CustomBorder(
                                        color:
                                            panelIndex.id == textEditorItem.id
                                                ? defaultPalette.tertiary
                                                : defaultPalette.black,
                                        animateDuration:
                                            const Duration(seconds: 5),
                                        animateBorder: true,
                                        radius: const Radius.circular(10),
                                        dashPattern: [10, 3],
                                        strokeWidth:
                                            panelIndex.id == textEditorItem.id
                                                ? 2
                                                : 1.2,
                                        strokeCap: StrokeCap.square,
                                        child: Container(
                                          padding: const EdgeInsets.only(
                                              top: 4,
                                              bottom: 4,
                                              left: 0,
                                              right: 4),
                                          decoration: BoxDecoration(
                                            color: defaultPalette.primary,
                                            border: Border.all(
                                              strokeAlign:
                                                  BorderSide.strokeAlignInside,
                                              width: panelIndex.id ==
                                                      textEditorItem.id
                                                  ? 1.5
                                                  : 1.2,
                                              color: panelIndex.id ==
                                                      textEditorItem.id
                                                  ? defaultPalette.tertiary
                                                  : defaultPalette.black,
                                            ),
                                            borderRadius:
                                                BorderRadius.circular(10),
                                          ),
                                          child: Row(
                                            children: [
                                              Container(
                                                child: const Icon(
                                                  TablerIcons.cursor_text,
                                                  size: 15,
                                                ),
                                              ),
                                              Expanded(
                                                child: QuillEditor(
                                                  configurations: textEditorItem
                                                      .textEditorConfigurations,
                                                  focusNode:
                                                      textEditorItem.focusNode,
                                                  scrollController:
                                                      ScrollController(),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                        // buildlistw
                      } else if (sheetList[index] is SheetList) {
                        return ReorderableDelayedDragStartListener(
                          index: index,
                          key: ValueKey(sheetList[index].id),
                          child: Container(
                              margin: EdgeInsets.only(top: 4),
                              // height: findSheetListBuildHeight(sheetList[index] as SheetList)+50,
                              width: findSheetListBuildWidth(
                                          sheetList[index] as SheetList) <=
                                      50
                                  ? 50
                                  : findSheetListBuildWidth(
                                      sheetList[index] as SheetList),
                              child: _buildListWidget(
                                  sheetList[index] as SheetList)),
                        );
                      }
                      return Container(
                        key: ValueKey(const Uuid().v4()),
                        color: Colors.amberAccent,
                        height: 12,
                        // buildlistw
                      );
                    },
                    itemCount: sheetList.length,
                    onReorder: (oldIndex, newIndex) {
                      setState(() {
                        if (newIndex > oldIndex) {
                          newIndex -= 1;
                        }
                        final item = sheetList.removeAt(oldIndex);
                        // buildlistw
                        sheetList.insert(newIndex, item);
                      });
                    },
                  ),
                ),
              ),
            ),
          ),
        ),
        if (panelIndex.parentId == sheetList.id)
          Positioned(
            top: 0,
            child: SlideInLeft(
              duration: Durations.short2,
              child: GestureDetector(
                behavior: HitTestBehavior.deferToChild,
                onTapDown: (d) {
                  setState(() {
                    panelIndex.parentId = sheetList.id;
                    panelIndex.panelIndex = -1;
                    panelIndex.id = '';
                  });
                  // print('secondaryyyTapppppp ON SHEETLIST ${sheetList.id}');
                  List<SheetItem> transformData(
                      List<SheetItem> data, String parentId) {
                    return data.map((item) {
                      if (item is TextEditorItem) {
                        var newid = Uuid().v4();
                        var newTextField = _addTextField(
                            id: newid,
                            parentId: parentId,
                            docString: item.textEditorController.document
                                .toDelta()
                                .toJson(),
                            linkedTextFields: item.linkedTextEditors!,
                            shouldReturn: true);
                        return newTextField;
                      } else if (item is SheetList) {
                        var newid = Uuid().v4();
                        return SheetList(
                          direction: item.direction,
                          id: newid,
                          parentId: parentId,
                          sheetList: transformData(item.sheetList, newid),
                        );
                      } else {
                        throw Exception("Unknown SheetItem type");
                      }
                    }).toList();
                  }

                  List<SheetItem> transformLinkedData(
                      List<SheetItem> data, String parentId) {
                    return data.map((item) {
                      if (item is TextEditorItem) {
                        print("PASTE LINKED transformed.");
                        var newId = Uuid().v4();

                        if (item.linkedTextEditors != null) {
                          item = item.copyWith(linkedTextEditors: [
                            ...item.linkedTextEditors!,
                            newId
                          ]);
                        } else {
                          item = item.copyWith(linkedTextEditors: [newId]);
                        }

                        var newTextField = _addTextField(
                            id: newId,
                            parentId: parentId,
                            docString: item.textEditorController.document
                                .toDelta()
                                .toJson(),
                            linkedTextFields: item.linkedTextEditors!,
                            shouldReturn: true);

                        newTextField = newTextField.copyWith(
                            textEditorConfigurations: QuillEditorConfigurations(
                              customStyleBuilder: (attribute) {
                                // Handle letter spacing
                                if (attribute.key == 'letterSpacing') {
                                  String? letterSpacing =
                                      attribute.value as String?;
                                  return TextStyle(
                                    letterSpacing:
                                        double.parse(letterSpacing ?? '0'),
                                  );
                                }
                                // Handle word spacing (custom attribute example)
                                if (attribute.key == 'wordSpacing') {
                                  String? wordSpacing =
                                      attribute.value as String?;
                                  return TextStyle(
                                    wordSpacing:
                                        double.parse(wordSpacing ?? '0'),
                                  );
                                }
                                // Handle line height (custom attribute example)
                                if (attribute.key == 'lineHeight') {
                                  String? lineHeight =
                                      attribute.value as String?;
                                  return TextStyle(
                                    height: double.parse(lineHeight ?? '0'),
                                  );
                                }
                                // Return default TextStyle if attribute not handled
                                return const TextStyle();
                              },
                              disableClipboard: false,
                              onTapDown: newTextField
                                  .textEditorConfigurations.onTapDown,
                              builder:
                                  newTextField.textEditorConfigurations.builder,
                              controller: QuillController(
                                document: item.textEditorController.document,
                                selection: item.textEditorController.selection,
                                readOnly: false,
                                onSelectionChanged: (textSelection) {
                                  setState(() {});
                                },
                                onSelectionCompleted: () {
                                  setState(() {});
                                },
                                onDelete: (cursorPosition, forward) {
                                  setState(() {});
                                },
                              ),
                            ),
                            linkedTextEditors: [
                              ...?newTextField.linkedTextEditors,
                              item.id
                            ]);
                        print("newtextfield ke linkedEditors after: " +
                            newTextField.linkedTextEditors.toString());
                        return newTextField;
                      } else if (item is SheetList) {
                        var newid = Uuid().v4();
                        return SheetList(
                          direction: item.direction,
                          id: newid,
                          parentId: parentId,
                          sheetList: transformLinkedData(item.sheetList, newid),
                        );
                      } else {
                        throw Exception("Unknown SheetItem type");
                      }
                    }).toList();
                  }

                  List<ContextMenuEntry> buildSheetListContextMenuEntries(
                      SheetList sheetList) {
                    var entries = <ContextMenuEntry>[
                      MenuHeader(text: 'SheetList Menu')
                    ];

                    // Cut SheetList

                    entries.add(MenuItem(
                      label: 'Cut',
                      icon: TablerIcons.cut,
                      onSelected: () {
                        // setState(() {
                        sheetListClipboard.data = sheetList.sheetList;
                        sheetListClipboard.direction = sheetList.direction;
                        print(sheetListClipboard.data.toString());
                        _sheetListIterator(sheetList.parentId,
                                spreadSheetList[currentPageIndex])
                            .sheetList
                            .removeWhere(
                          (element) {
                            // print(sheetList.id);

                            print('id jo chaiye: ' + sheetList.id);
                            print('id jo mila: ' + element.id);

                            print('MILA KE NAHI? ' +
                                (element is SheetList && element == sheetList)
                                    .toString());
                            if (element is SheetList && element == sheetList) {
                              setState(() {});
                            }
                            return element is SheetList && element == sheetList;
                          },
                        );
                        // });
                        saveLayout();
                      },
                    ));

                    // Copy

                    entries.add(MenuItem(
                      label: 'Copy',
                      icon: TablerIcons.copy,
                      onSelected: () {
                        List<SheetItem> deepCopySheetList(
                            List<SheetItem> sheetList) {
                          return sheetList.map((item) {
                            if (item is TextEditorItem) {
                              return TextEditorItem(
                                id: item.id,
                                parentId: item.parentId,
                                textEditorController: item.textEditorController,
                                linkedTextEditors: [
                                  ...?item.linkedTextEditors
                                ], // Clone the list
                                textEditorConfigurations:
                                    item.textEditorConfigurations,
                              );
                            } else if (item is SheetList) {
                              return SheetList(
                                id: item.id,
                                parentId: item.parentId,
                                direction: item.direction,
                                sheetList: deepCopySheetList(
                                    item.sheetList), // Recursive copy
                              );
                            } else {
                              throw Exception("Unknown SheetItem type");
                            }
                          }).toList();
                        }

                        setState(() {
                          sheetListClipboard.data =
                              deepCopySheetList(sheetList.sheetList);
                          sheetListClipboard.direction = sheetList.direction;
                          print(sheetListClipboard.data.toString());
                        });
                      },
                    ));

                    // Paste Linked
                    // entries.add(MenuItem(
                    //   label: 'Paste Linked',
                    //   icon: TablerIcons.clipboard,
                    //   onSelected: () {
                    //     var data = sheetListClipboard.data;
                    //     var newSheetListId = Uuid()
                    //         .v4(); // Generate id for the new parent SheetList
                    //     var newData = transformLinkedData(
                    //         data as List<SheetItem>, newSheetListId);

                    //     sheetList.sheetList.insert(
                    //       0,
                    //       SheetList(
                    //         direction: sheetListClipboard.direction,
                    //         id: newSheetListId,
                    //         parentId:
                    //             sheetList.id, // Parent id of the main list
                    //         sheetList: newData,
                    //       ),
                    //     );
                    //     print('pastedLinked!');

                    //     setState(() {});
                    //     saveLayout();
                    //   },
                    // ));

                    // Paste
                    entries.add(MenuItem(
                      label: 'Paste',
                      icon: TablerIcons.clipboard,
                      onSelected: () {
                        var data = sheetListClipboard.data;
                        var newSheetListId = Uuid().v4();
                        var newData = transformData(
                            data as List<SheetItem>, newSheetListId);

                        sheetList.sheetList.insert(
                          0,
                          SheetList(
                            id: newSheetListId,
                            direction: sheetListClipboard.direction,
                            parentId:
                                sheetList.id, // Parent id of the main list
                            sheetList: newData,
                          ),
                        );
                        print('pastedLinked!');

                        setState(() {});
                        saveLayout();
                      },
                    ));

                    entries.add(const MenuDivider());

                    entries.addAll([
                      const MenuHeader(text: 'ops'),

                      //Export
                      MenuItem(
                        label: 'Export Field As..',
                        icon: TablerIcons.message_forward,
                        onSelected: () async {
                          // await pushExportField(context, textEditorItem,
                          //     documentPropertiesList, currentPageIndex);
                        },
                      ),
                      //Clear Field
                      MenuItem(
                        label: 'Empty The List',
                        icon: TablerIcons.square_rounded_x,
                        onSelected: () async {
                          await showAdaptiveDialog(
                            context: context,
                            builder: (context) {
                              return AlertDialog(
                                title: Text(
                                    'Do you really really want to Empty the List?'),
                                content: Text(
                                    'This will clear all the text fields from current SheetList. Are you sure?'),
                                actions: [
                                  TextButton(
                                      onPressed: () {
                                        setState(() {
                                          _sheetListIterator(
                                                  sheetList.parentId,
                                                  spreadSheetList[
                                                      currentPageIndex])
                                              .sheetList
                                              .forEach((element) {
                                            if (element is SheetList &&
                                                element.id == sheetList.id) {
                                              print(
                                                  'Clearing sheetList for id: ${element.id}');
                                              element.sheetList
                                                  .clear(); // Clear only the nested sheetList
                                            }
                                          });
                                          saveLayout(); // Save changes after clearing
                                        });
                                        Navigator.pop(
                                            context); // Close the current context
                                      },
                                      child: Text('Yes')),
                                  TextButton(
                                      onPressed: () {
                                        Navigator.pop(context);
                                      },
                                      child: Text('No')),
                                ],
                              );
                            },
                          );
                        },
                      ),
                      //Delete
                      MenuItem(
                        label: 'Delete',
                        icon: TablerIcons.trash,
                        onSelected: () async {
                          await showAdaptiveDialog(
                            context: context,
                            builder: (context) {
                              return AlertDialog(
                                title: const Text('Confirm Delete'),
                                content: const Text(
                                    'This will DELETE the current Text Field with its contents. Are you sure?'),
                                actions: [
                                  TextButton(
                                      onPressed: () {
                                        setState(() {
                                          // sheetList.removeAt(index);
                                          panelIndex.id = '';
                                          panelIndex.panelIndex = -1;
                                        });
                                        _sheetListIterator(
                                                sheetList.parentId,
                                                spreadSheetList[
                                                    currentPageIndex])
                                            .sheetList
                                            .removeWhere(
                                          (element) {
                                            // print(sheetList.id);

                                            print('id jo chaiye: ' +
                                                sheetList.id);
                                            print('id jo mila: ' + element.id);

                                            print('MILA KE NAHI? ' +
                                                (element is SheetList &&
                                                        element == sheetList)
                                                    .toString());
                                            if (element is SheetList &&
                                                element == sheetList) {
                                              setState(() {});
                                            }
                                            return element is SheetList &&
                                                element == sheetList;
                                          },
                                        );
                                        // });
                                        saveLayout();
                                        Navigator.pop(context);
                                      },
                                      child: const Text('Yes')),
                                  TextButton(
                                      onPressed: () {
                                        Navigator.pop(context);
                                      },
                                      child: const Text('No')),
                                ],
                              );
                            },
                          );
                        },
                      )
                    ]);

                    return entries;
                  }

                  final entries = buildSheetListContextMenuEntries(sheetList);
                  var menu = ContextMenu(
                      entries: entries,
                      boxDecoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                              color: defaultPalette.black.withOpacity(0.3),
                              blurRadius: 2,
                              // spreadRadius: 10
                            )
                          ],
                          //         color: panelIndex.parentId == sheetList.id
                          // ? sheetList.direction == Axis.vertical
                          //     ? defaultPalette.tertiary.withOpacity(0.8)
                          //     : defaultPalette.extras[1].withOpacity(0.8)
                          // : ui.Color(0xFFFFFFFF),
                          color: defaultPalette.primary,
                          borderRadius: BorderRadius.circular(10)),
                      position:
                          Offset(d.globalPosition.dx, d.globalPosition.dy));
                  menu.show(context);
                },
                child: Container(
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                      border: Border.all(
                          width: 2,
                          color: panelIndex.parentId == sheetList.id
                              ? sheetList.direction == Axis.vertical
                                  ? defaultPalette.tertiary
                                  : defaultPalette.extras[1]
                              : ui.Color(0xFFFFFFFF)),
                      color: defaultPalette.quaternary,
                      shape: BoxShape.circle),
                  width: 15,
                  height: 15,
                ),
              ),
            ),
          ), // Expandable menus and other widgets can stay the same
      ],
    );
  }

  double findSheetListBuildHeight(SheetList sheetList) {
    double calculateItemHeight(dynamic item) {
      double calculatedHeight = 0;

      // Handling TextEditorItem
      if (item is TextEditorItem) {
        String content = item.textEditorController.document.toPlainText();
        if (content.trim().isEmpty) {
          calculatedHeight = 58; // Default height for empty text content
        } else {
          int newlineCount = '\n'.allMatches(content).length;
          calculatedHeight = (newlineCount.toDouble() * 21.5) +
              22; // Height for non-empty content
        }
      }
      // Handling nested SheetLists
      else if (item is SheetList) {
        calculatedHeight = findSheetListBuildHeight(
            item); // Recursively calculate the height for nested SheetList
      }

      return calculatedHeight;
    }

    double height = 0;

    // If direction is vertical, accumulate heights
    if (sheetList.direction == Axis.vertical) {
      for (int i = 0; i < sheetList.length; i++) {
        height += calculateItemHeight(
            sheetList[i]); // Sum up all heights for vertical direction
      }
    }
    // If direction is horizontal, return the max height
    else {
      for (int i = 0; i < sheetList.length; i++) {
        double itemHeight = calculateItemHeight(sheetList[i]);
        if (itemHeight > height) {
          height = itemHeight; // Track max height for horizontal direction
        }
      }
    }

    return height +
        12; // Add an extra 2 to the final height (based on original logic)
  }

  double findSheetListBuildWidth(SheetList sheetList) {
    double width = 0;

    // Comprehensive character width map
    Map<String, double> charWidthMap = {
      '.': 5.0,
      ',': 5.0,
      ';': 5.0,
      ':': 5.0,
      '!': 5.0,
      '?': 7.0,
      'a': 8.0,
      'b': 8.5,
      'c': 7.5,
      'd': 8.5,
      'e': 8.0,
      'f': 7.0,
      'g': 9,
      'h': 8.5,
      'i': 7.0,
      'j': 7.0,
      'k': 9,
      'l': 7.5,
      'm': 11.0,
      'n': 8.5,
      'o': 8.5,
      'p': 8.5,
      'q': 8.5,
      'r': 8.5,
      's': 8.0,
      't': 7.0,
      'u': 8.5,
      'v': 8.5,
      'w': 15.0,
      'x': 9.0,
      'y': 9.0,
      'z': 8.0,
      'A': 10.5,
      'B': 11.0,
      'C': 10.0,
      'D': 11.0,
      'E': 9.5,
      'F': 9.0,
      'G': 11.5,
      'H': 11.0,
      'I': 7.0,
      'J': 7.0,
      'K': 11.0,
      'L': 9.0,
      'M': 13.0,
      'N': 11.0,
      'O': 11.5,
      'P': 10.5,
      'Q': 12.0,
      'R': 11.0,
      'S': 10.0,
      'T': 9.0,
      'U': 11.0,
      'V': 11.0,
      'W': 15.0,
      'X': 11.0,
      'Y': 11.0,
      'Z': 10.0,
      '0': 10.0,
      '1': 9.0,
      '2': 9.0,
      '3': 12.0,
      '4': 9.0,
      '5': 9.0,
      '6': 10.0,
      '7': 9.0,
      '8': 9.0,
      '9': 9.0,
      ' ': 9.0,
      '@': 12.0,
      '#': 10.0,
      '\$': 10.0,
      '%': 12.0,
      '^': 7.0,
      '&': 10.0,
      '*': 7.0,
      '(': 6.0,
      ')': 6.0,
      '-': 6.0,
      '_': 7.0,
      '+': 8.0,
      '=': 8.0,
      '[': 7.0,
      ']': 7.0,
      '{': 6.0,
      '}': 6.0,
      '|': 7.0,
      '\\': 7.0,
      '/': 7.0,
      '\'': 7.5,
      '"': 6.0,
      '`': 4.0,
      '~': 8.0
    };

    const double fallbackWidth = 8.0;

    double calculateLineWidth(String line) {
      return line.runes.fold(0.0, (sum, ch) {
        String char = String.fromCharCode(ch);
        return sum + (charWidthMap[char] ?? fallbackWidth);
      });
    }

    var disp = 0;
    if (sheetList.direction == Axis.horizontal) {
      // For horizontal SheetList, calculate cumulative width
      for (int i = 0; i < sheetList.length; i++) {
        if (sheetList[i] is TextEditorItem) {
          TextEditorItem textEditor = sheetList[i] as TextEditorItem;
          disp += 20;
          String content =
              textEditor.textEditorController.document.toPlainText();
          if (content.trim().isEmpty) {
            width += 180;
          } else {
            double maxLineWidth = content
                .split('\n')
                .map((line) => calculateLineWidth(line))
                .reduce((a, b) => a > b ? a : b);
            width += maxLineWidth + disp; // Add padding
          }
        } else if (sheetList[i] is SheetList) {
          // Handle nested SheetList recursively
          SheetList nestedSheetList = sheetList[i] as SheetList;
          double nestedWidth = findSheetListBuildWidth(nestedSheetList);
          width += nestedWidth + 20; // Add padding
        }
      }
    } else {
      // For vertical SheetList, calculate maximum width
      for (int i = 0; i < sheetList.length; i++) {
        if (sheetList[i] is TextEditorItem) {
          TextEditorItem textEditor = sheetList[i] as TextEditorItem;
          String content =
              textEditor.textEditorController.document.toPlainText();
          if (content.trim().isEmpty) {
            width = width > 180 ? width : 180;
          } else {
            double maxLineWidth = content
                    .split('\n')
                    .map((line) => calculateLineWidth(line))
                    .reduce((a, b) => a > b ? a : b) +
                30;
            width = width > maxLineWidth + 60 ? width : maxLineWidth + 60;
          }
        } else if (sheetList[i] is SheetList) {
          // Handle nested SheetList recursively
          SheetList nestedSheetList = sheetList[i] as SheetList;
          double nestedWidth = findSheetListBuildWidth(nestedSheetList);
          width = width > nestedWidth + 20 ? width : nestedWidth + 20;
        }
      }
    }

    return width + 20;
  }

  void saveLayout() {
    var lm = Boxes.getLayouts().values.toList().cast<LayoutModel>();
    lm[keyIndex].docPropsList = docPropToBox(documentPropertiesList);
    lm[keyIndex].spreadSheetList = spreadSheetToBox(spreadSheetList);
    lm[keyIndex].save();
  }

  bool textFieldTapDown(TapDownDetails details, String newId) {
    var isTrue = panelIndex.id == newId;
    setState(() {
      var itemE = _sheetItemIterator(newId, spreadSheetList[currentPageIndex]);

      var index =
          _sheetListIterator(itemE.parentId, spreadSheetList[currentPageIndex])
              .indexOf(itemE);
      panelIndex =
          PanelIndex(id: itemE.id, panelIndex: index, parentId: itemE.parentId);
      print('this that pID from within the addText: ${itemE.parentId}');
      print(
          'this that id from addtext from panelindex: ${panelIndex.parentId}');
      if (hDividerPosition > 0.48) {
        hDividerPosition = 0.4;
      }
    });

    // Future.delayed(Duration.zero).then((_) {
    //   textStylePageController.jumpToPage(panelIndex.panelIndex);
    // });

    Future.delayed(Durations.short1).then((_) {
      if (!isTrue) {
        textStyleTabControler.animateToPage(0,
            curve: Curves.bounceIn, duration: Durations.short1);
        for (var i = 0; i < isTapped.length; i++) {
          setState(() {
            isTapped[i] = false;
          });
        }
        setState(() {
          isTapped[1] = true;
        });
      }
    });

    print('clicked');
    print(panelIndex);
    return false;
  }

  double _getPropertiesButtonWidth(String s) {
    var widthWeHave = (sWidth * (wH2DividerPosition));
    switch (s) {
      case 'page':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave - 20;
          }
          return widthWeHave * (1 / 3) - 5;
        }
        return widthWeHave * (1 / 5);
        break;
      case 'text-field':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3);
        }
        return widthWeHave * (2 / 5) - 5;
      case 'sheet-list':
        if (panelIndex.id == '') {
          if (panelIndex.parentId == '') {
            return widthWeHave * (2 / 3) - 20;
          }
          return widthWeHave * (2 / 3) - 12;
        }
        return widthWeHave * (2 / 5) - 5;

      default:
    }
    return 1 / 5;
  }

  PieAction getPieAction(String s) {
    return PieAction(
      tooltip: Text(s),
      onSelect: () {
        setState(() {
          documentPropertiesList[currentPageIndex].pageFormatController =
              getPageFormatFromString(s);
        });
        Future.delayed(Durations.short2).then((o) {
          _renderPagePreviewOnProperties();
        });
      },
      child: Text(
        getPageFormatString(getPageFormatFromString(s)),
        style: GoogleFonts.bungee(color: defaultPalette.primary),
      ),
    );
  }

  PieAction getPieActionForAddMove(String s, bool m) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              m ? 'A Page To The' : 'Move Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          m
              ? s == 'LEFT'
                  ? _addPdfPageAtIndex(
                      currentPageIndex,
                    )
                  : _addPdfPageAtIndex(
                      currentPageIndex,
                    )
              : s == 'LEFT'
                  ? _movePage(currentPageIndex, currentPageIndex - 1)
                  : _movePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              m ? 'Add' : 'Move',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              m
                  ? s == 'LEFT'
                      ? 'Before'
                      : 'After'
                  : s == 'LEFT'
                      ? 'Above'
                      : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }

  PieAction getPieActionForDuplicate(String s) {
    return PieAction(
        tooltip: Column(
          children: [
            Text(
              'Duplicate Page To The',
              style: GoogleFonts.bungee(fontSize: 12),
            ),
            Text(
              s,
              style: GoogleFonts.bungee(fontSize: 32),
            ),
          ],
        ),
        onSelect: () {
          s == 'LEFT'
              ? _duplicatePage(currentPageIndex, currentPageIndex)
              : _duplicatePage(currentPageIndex, currentPageIndex + 1);
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Copy',
              style: GoogleFonts.bungee(
                  fontSize: 12, color: defaultPalette.primary),
            ),
            Text(
              s == 'LEFT' ? 'Above' : 'Below',
              style: GoogleFonts.bungee(
                  fontSize: 7, color: defaultPalette.primary),
            ),
          ],
        ));
  }
}

class WordSpacingAttribute extends Attribute<String?> {
  static const _key = 'wordSpacing';
  const WordSpacingAttribute(String? value)
      : super('wordSpacing', AttributeScope.inline, value);
}

class LineHeightAttribute extends Attribute<String?> {
  static const _key = 'lineHeight';
  const LineHeightAttribute(String? value)
      : super('lineHeight', AttributeScope.inline, value);
}

class LetterSpacingAttribute extends Attribute<String?> {
  static const _key = 'letterSpacing';
  const LetterSpacingAttribute(String? value)
      : super('letterSpacing', AttributeScope.inline, value);
}

class CustomScrollPhysics extends ScrollPhysics {
  final double scrollFactor;

  const CustomScrollPhysics({ScrollPhysics? parent, this.scrollFactor = 1.0})
      : super(parent: parent);

  @override
  Simulation? createBallisticSimulation(
      ScrollMetrics position, double velocity) {
    // Adjust the velocity to control the scroll distance
    return super.createBallisticSimulation(position, velocity * scrollFactor);
  }

  @override
  CustomScrollPhysics applyTo(ScrollPhysics? ancestor) {
    return CustomScrollPhysics(
        parent: buildParent(ancestor), scrollFactor: scrollFactor);
  }
}

class NoMenuTextSelectionControls extends MaterialTextSelectionControls {
  @override
  Widget buildToolbar(
    BuildContext context,
    Rect globalEditableRegion,
    double textLineHeight,
    Offset position,
    List<TextSelectionPoint> endpoints,
    TextSelectionDelegate delegate,
    ValueListenable<ClipboardStatus>? clipboardStatus,
    Offset? lastSecondaryTapDownPosition,
  ) {
    // Return null or an empty container to disable the right-click context menu
    return Container();
  }
}

dynamic pushExportField(BuildContext context, TextEditorItem textEditorItem,
    documentPropertiesList, currentPageIndex) async {
  GlobalKey repaintBoundaryKey = GlobalKey();
  await Navigator.push(
    context,
    MaterialPageRoute(
      builder: (context) => Scaffold(
        appBar: AppBar(
          title: Text('PDF Preview'),
          actions: [
            IconButton(
              icon: Icon(Icons.image),
              onPressed: () async {
                RenderRepaintBoundary boundary =
                    repaintBoundaryKey.currentContext!.findRenderObject()
                        as RenderRepaintBoundary;
                ui.Image image = await boundary.toImage(pixelRatio: 6.0);
                ByteData? byteData =
                    await image.toByteData(format: ui.ImageByteFormat.png);
                Uint8List pngBytes = byteData!.buffer.asUint8List();

                // Get the directory to save the image
                final directory = await getApplicationDocumentsDirectory();
                final imagePath = '${directory.path}/captured_image.png';
                File(imagePath).writeAsBytesSync(pngBytes);

                print('Image saved at: $imagePath');
              },
            ),
            IconButton(
              icon: Icon(Icons.print),
              onPressed: () async {
                RenderRepaintBoundary boundary =
                    repaintBoundaryKey.currentContext!.findRenderObject()
                        as RenderRepaintBoundary;
                ui.Image image = await boundary.toImage(pixelRatio: 6.0);
                ByteData? byteData =
                    await image.toByteData(format: ui.ImageByteFormat.png);
                Uint8List pngBytes = byteData!.buffer.asUint8List();

                // Get the directory to save the image
                final directory = await getApplicationDocumentsDirectory();
                final imagePath = '${directory.path}/captured_image.png';
                File(imagePath).writeAsBytesSync(pngBytes);

                // Prepare the PDF document
                final pdf = pw.Document();
                final imageProvider = pw.MemoryImage(pngBytes);

                pdf.addPage(
                  pw.Page(
                    pageFormat: documentPropertiesList[currentPageIndex]
                        .pageFormatController,
                    margin: pw.EdgeInsets.only(
                      top: double.parse(documentPropertiesList[currentPageIndex]
                          .marginTopController
                          .text),
                      bottom: double.parse(
                          documentPropertiesList[currentPageIndex]
                              .marginBottomController
                              .text),
                      left: double.parse(
                          documentPropertiesList[currentPageIndex]
                              .marginLeftController
                              .text),
                      right: double.parse(
                          documentPropertiesList[currentPageIndex]
                              .marginRightController
                              .text),
                    ),
                    build: (pw.Context context) {
                      return pw.Center(
                        child: pw.Image(imageProvider),
                      ); // Center the image on the page
                    },
                  ),
                );

                // Save the PDF to a file
                final pdfPath = '${directory.path}/document.pdf';
                final file = File(pdfPath);
                await file.writeAsBytes(await pdf.save());

                print('PDF saved at: $pdfPath');
              },
            ),
          ],
        ),
        body: RepaintBoundary(
          key: repaintBoundaryKey,
          child: Container(
            width:
                documentPropertiesList[currentPageIndex].pageFormatController ==
                        PdfPageFormat.a4
                    ? 793.7
                    : documentPropertiesList[currentPageIndex]
                                .pageFormatController ==
                            PdfPageFormat.a3
                        ? 812.8
                        : documentPropertiesList[currentPageIndex]
                                    .pageFormatController ==
                                PdfPageFormat.a5
                            ? 559.4
                            : documentPropertiesList[currentPageIndex]
                                        .pageFormatController ==
                                    PdfPageFormat.a6
                                ? 396.9
                                : documentPropertiesList[currentPageIndex]
                                            .pageFormatController ==
                                        PdfPageFormat.letter
                                    ? 816
                                    : documentPropertiesList[currentPageIndex]
                                                .pageFormatController ==
                                            PdfPageFormat.legal
                                        ? 816
                                        : 1240, // Default width
            height:
                documentPropertiesList[currentPageIndex].pageFormatController ==
                        PdfPageFormat.a4
                    ? 1122.5
                    : documentPropertiesList[currentPageIndex]
                                .pageFormatController ==
                            PdfPageFormat.a3
                        ? 1122.5
                        : documentPropertiesList[currentPageIndex]
                                    .pageFormatController ==
                                PdfPageFormat.a5
                            ? 793.7
                            : documentPropertiesList[currentPageIndex]
                                        .pageFormatController ==
                                    PdfPageFormat.a6
                                ? 559.4
                                : documentPropertiesList[currentPageIndex]
                                            .pageFormatController ==
                                        PdfPageFormat.letter
                                    ? 1056
                                    : documentPropertiesList[currentPageIndex]
                                                .pageFormatController ==
                                            PdfPageFormat.legal
                                        ? 1344
                                        : 3508, // Default height
            padding: EdgeInsets.only(
              top: double.parse(documentPropertiesList[currentPageIndex]
                  .marginTopController
                  .text),
              bottom: double.parse(documentPropertiesList[currentPageIndex]
                  .marginBottomController
                  .text),
              left: double.parse(documentPropertiesList[currentPageIndex]
                  .marginLeftController
                  .text),
              right: double.parse(documentPropertiesList[currentPageIndex]
                  .marginRightController
                  .text),
            ),
            margin: EdgeInsets.all(20),
            decoration: BoxDecoration(
                color: Colors.white,
                boxShadow: [BoxShadow(blurRadius: 10, color: Colors.black)]),
            child: QuillEditor(
              // Replace with your QuillEditor configurations
              configurations: QuillEditorConfigurations(
                  controller:
                      textEditorItem.textEditorConfigurations.controller),
              focusNode: FocusNode(),
              scrollController: ScrollController(),
            ),
          ),
        ),
      ),
    ),
  );
}
